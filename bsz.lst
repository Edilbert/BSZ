              ; *************************************
              ; * BSZ = Bit Shifter's Z interpreter *
              ; *       for MEGA65      06-Aug-2020 *
              ; *************************************

              .CPU 45GS02

0003          ZV     = 3   ; Z machine version

              ; *********************
              ; * Commodore KEY codes
              ; *********************

0085          KEY_F1   = 133
0086          KEY_F3   = 134
0087          KEY_F5   = 135
0088          KEY_F7   = 136
0089          KEY_F2   = 137
008a          KEY_F4   = 138
008b          KEY_F6   = 139
008c          KEY_F8   = 140

              ; *************************
              ; * Commodore Color Codes *
              ; *************************

0000          BLACK    =  0
0001          WHITE    =  1
0002          RED      =  2
0003          CYAN     =  3
0004          PURPLE   =  4
0005          GREEN    =  5
0006          BLUE     =  6
0007          YELLOW   =  7
0008          ORANGE   =  8
0009          BROWN    =  9
000a          PINK     = 10
000b          DARKGREY = 11
000c          GREY     = 12
000d          LT_GREEN = 13
000e          LT_BLUE  = 14
000f          LT_GREY  = 15

              ; *************************
              ; * display control codes *
              ; *************************

0008          BACKSPACE     = $08
0009          TAB           = $09
000d          CR            = $0d
0011          CURSOR_DOWN   = $11
0012          REVERSE_ON    = $12
0013          HOME          = $13
0014          DEL           = $14
001b          ESC           = $1b
001d          CURSOR_RIGHT  = $1d
0093          CLEAR         = $93
0091          CURSOR_UP     = $91
0092          REVERSE_OFF   = $92
009d          CURSOR_LEFT   = $9d

              ; ********************************************************
              ; * Interpreter Zero page variables (occupy BASIC space) *
              ; ********************************************************

0002          & = $02

              ; Instruction pointer     LDZ QI0  ->  LDA (RAM_LO),Z

0002          Z_Code           .BSS 1 ; current code byte
0003          QI0              .BSS 1 ; Byte 0  pc = (QI0/QI1/QI2)
0004          QI1              .BSS 1 ; Byte 1  Floppy block low
0005          QI2              .BSS 1 ; Byte 2  Floppy block high

              ; Data pointer            LDZ QD0  ->  LDA (RAM_LO),Z

0006          QDL              .BSS 1 ; current packed data low
0007          QDH              .BSS 1 ; current packed data high
0008          QD0              .BSS 1 ; Byte 0  pc = (QD0/QD1/QD2)
0009          QD1              .BSS 1 ; Byte 1  Floppy block low
000a          QD2              .BSS 1 ; Byte 2  Floppy block high

              ; keep above variables together (block push/pull)

000b          RAM_LO           .BSS 1 ; RAM address for disk access
000c          RAM_HI           .BSS 1
000d          RAM_BA           .BSS 2 ; RAM BANK

              ; Multi purpose local variables

000f          LV0              .BSS 1
0010          LV1              .BSS 1
0011          LV2              .BSS 1
0012          LV3              .BSS 1

0013          alphabet         .BSS 1
0014          Block_Lo         .BSS 1
0015          Block_Hi         .BSS 1
0016          Charbuf_Ptr      .BSS 1
0017          Charbuf_End      .BSS 1
0018          Chars_Left       .BSS 1
0019          Info_Pages       .BSS 1
001a          OP_Type          .BSS 2
001c          ParNum           .BSS 1
001d          Parse_Index      .BSS 1
001e          QuotL            .BSS 1
001f          QuotH            .BSS 1
0020          RemL             .BSS 1
0021          RemH             .BSS 1
0022          Resident_Pages   .BSS 1
0023          Cols             .BSS 1 ; # of columns
0024          C_Save_Col       .BSS 1
0025          C_Save_Row       .BSS 1
0026          C_Save_Adr       .BSS 2 ; cursor position
0028          Last_Row         .BSS 1
0029          Last_Col         .BSS 1
002a          Status_Col       .BSS 1
002b          MORE_Counter     .BSS 1
002c          z_stack_ptr      .BSS 1
002d          z_frame_ptr      .BSS 1
002e          NUMBER           .BSS 5
0033          P0L              .BSS 1 ; Multi purpose pointer
0034          P0H              .BSS 1
0035          P1L              .BSS 1 ; Multi purpose pointer
0036          P1H              .BSS 1
0037          P2L              .BSS 1 ; Multi purpose pointer
0038          P2H              .BSS 1
0039          P3L              .BSS 1 ; Multi purpose pointer
003a          P3H              .BSS 1
003b          DPL              .BSS 1 ; dictionary pointer
003c          DPH              .BSS 1
003d          DPI              .BSS 1
003e          A0L              .BSS 1 ; primary   address register
003f          A0H              .BSS 1
0040          A1L              .BSS 1 ; secondary address register
0041          A1H              .BSS 1
0042          X0L              .BSS 1 ; primary value   register
0043          X0H              .BSS 1
0044          X1L              .BSS 1 ; parameter register
0045          X1H              .BSS 1 ; X1L - X4H must be contiguous
0046          X2L              .BSS 1
0047          X2H              .BSS 1
0048          X3L              .BSS 1
0049          X3H              .BSS 1
004a          X4L              .BSS 1
004b          X4H              .BSS 1
004c          X5L              .BSS 1
004d          X5H              .BSS 1
004e          X6L              .BSS 1
004f          X6H              .BSS 1
0050          X7L              .BSS 1
0051          X7H              .BSS 1
0052          X8L              .BSS 1
0053          X8H              .BSS 1

0054          Cursor_Col       .BSS 1
0055          Cursor_Row       .BSS 1
0056          Cursor_Vis       .BSS 1
0057          Scr_Adr          .BSS 2 ; screen RAM 16 bit address
0059          Col_Adr          .BSS 4 ; colour RAM 32 bit address

005d          ZP_END           .BSS 1

              ; Kernal variables

0200          Charbuf = $0200

              ; ********************
              ; * system variables *
              ; ********************

0050          COLS        =  80
0019          ROWS        =  25
0001          R6510       = $01              ; C64 bank switching CPU port
0090          IO_STATUS   = $90              ; used by I/O routines
00ac          SAP         = $ac              ; source address pointer
00ae          TAP         = $ae              ; target address pointer
00b7          FNLEN       = $b7
00ba          FA          = $ba
00bb          FNADR       = $bb
00c3          MEMUSS      = $c3              ; string address
00c7          RVS         = $c7              ; reverse flag
00cc          BLNSW       = $cc              ; cursor blink flag
00cd          BLNCT       = $cd
00cf          BLNON       = $cf
0286          COLOR       = $286
0288          SCNMPG      = $288             ; screen memory page for C64 mode
028a          KEYRPT      = $28a             ; $80 = all, $40 = none, $00 sursor, space
0291          MODE        = $291
0314          CINV        = $314             ; kernal vector table
033c          DSTATUS     = $33c             ; 40 bytes disk status
0800          SCREEN      = $0800            ; character RAM in 80 column mode
d800          COLRAM      = $d800            ; color     RAM
d012          Raster      = $d012
d020          BorderCol   = $d020
d021          BackgCol0   = $d021
d41b          Random      = $d41b
fd30          ROM_Vectors = $fd30
fda3          Init_IO     = $fda3
ff5b          Init_Editor = $ff5b


              ; ******
              ; Kernal
              ; ******

ff90          SETMSG = $ff90
ff93          SECOND = $ff93
ff96          TKSA   = $ff96
ffa5          ACPTR  = $ffa5
ffa8          CIOUT  = $ffa8
ffab          UNTLK  = $ffab
ffae          UNLSN  = $ffae
ffb1          LISTEN = $ffb1
ffb4          TALK   = $ffb4
ffbd          SETNAM = $ffbd
ffe4          GETIN  = $ffe4
fff0          PLOT   = $fff0
fffc          RESET  = $fffc

              ; **********
              ; C64 arrays
              ; **********

3a00          Z_VAR       = [EOP + $ff] & $ff00 ;
3b00          Z_STACK_LO  = Z_VAR      + $100 ; keep this area together
3c00          Z_STACK_HI  = Z_STACK_LO + $100
3d00          Z_HEADER    = Z_STACK_HI + $100
3b00          Filename    = Z_STACK_LO
3a00          Lvar_Lo     = Z_VAR
3a10          Lvar_Hi     = Z_VAR + $10

              ; ************
              ; STORY HEADER
              ; ************

3d00          h_version             = Z_HEADER
3d01          h_config              = Z_HEADER +   1
3d04          h_resident_size_hi    = Z_HEADER +   4
3d05          h_resident_size_lo    = Z_HEADER +   5
3d06          h_start_pc_hi         = Z_HEADER +   6
3d07          h_start_pc_lo         = Z_HEADER +   7
3d08          h_dictionary_hi       = Z_HEADER +   8
3d09          h_dictionary_lo       = Z_HEADER +   9
3d0a          h_objects_hi          = Z_HEADER +  10
3d0b          h_objects_lo          = Z_HEADER +  11
3d0c          h_globals_hi          = Z_HEADER +  12
3d0d          h_globals_lo          = Z_HEADER +  13
3d0e          h_dynamic_size_hi     = Z_HEADER +  14
3d0f          h_dynamic_size_lo     = Z_HEADER +  15
3d10          h_flags_hi            = Z_HEADER +  16
3d11          h_flags_lo            = Z_HEADER +  17
3d12          h_serial              = Z_HEADER +  18
3d18          h_abbreviations_hi    = Z_HEADER +  24
3d19          h_abbreviations_lo    = Z_HEADER +  25
3d1a          h_file_size_hi        = Z_HEADER +  26 ; in words for version 1-3
3d1b          h_file_size_lo        = Z_HEADER +  27 ; in words for version 1-3
3d1c          h_checksum_hi         = Z_HEADER +  28
3d1d          h_checksum_lo         = Z_HEADER +  29
3d1e          h_interpreter_number  = Z_HEADER +  30
3d1f          h_interpreter_version = Z_HEADER +  31
3d20          h_screen_rows         = Z_HEADER +  32
3d21          h_screen_cols         = Z_HEADER +  33
3d22          h_screen_width_hi     = Z_HEADER +  34
3d23          h_screen_width_lo     = Z_HEADER +  35
3d24          h_screen_height_hi    = Z_HEADER +  36
3d25          h_screen_height_lo    = Z_HEADER +  37
3d26          h_font_width          = Z_HEADER +  38
3d27          h_font_height         = Z_HEADER +  39
3d28          h_functions_offset_hi = Z_HEADER +  40
3d29          h_functions_offset_lo = Z_HEADER +  41
3d2a          h_strings_offset_hi   = Z_HEADER +  42
3d2b          h_strings_offset_lo   = Z_HEADER +  43
3d2c          h_default_bg_color    = Z_HEADER +  44
3d2d          h_default_fg_color    = Z_HEADER +  45

3d34          h_alphabet_hi         = Z_HEADER +  52
3d35          h_alphabet_lo         = Z_HEADER +  53

              ; *******************
              ; Z machine constants
              ; *******************


0004             O_PARENT     =   4
0005             O_SIBLING    =   5
0006             O_CHILD      =   6
0007             O_PROP       =   7
0009             O_SIZE       =   9
001f             P_MASK       = $1f
0004             V_SIZE       =   4
0006             WORD_LENGTH  =   6
24bc             Store_Object = Store_Byte

              ; ***********
              ; Print Macro
              ; ***********

            MACRO Print(lab)
                      LDA #<lab
                      LDY #>lab
                      LDX #?lab
                      JSR PrintText
            ENDMAC

            MACRO ERROR(num)
                      LDA #num
                      JMP INTERNAL_ERROR
            ENDMAC

            MACRO MAC_Color(color)
                       LDA #color
                       STA COLOR
            ENDMAC

2001          START = $2001   ; *** BASIC ***  C65

2001          * = START

                        .STORE START,EOP-START,"z3-mega65"

              ; ************
              ; basic_header
              ; ************

2001 3b 20              .WORD Link
2003 e4 07              .WORD 2020      ; line number
2005 8b                 .BYTE $8b       ; IF   token
2006 c2                 .BYTE $c2       ; PEEK token
2007 28 34 34           .BYTE "(44)"
200b b2                 .BYTE $b2       ; =    token
200c 38                 .BYTE "8"
200d a7                 .BYTE $a7       ; THEN token
200e 9e                 .BYTE $9e       ; SYS  token
200f 28 32 31           .BYTE "(2112):" ; C64  start
2016 d5                 .BYTE $d5       ; ELSE token
2017 fe 02              .BYTE $fe,$02   ; BANK token
2019 30 3a              .BYTE "0:"      ; BANK argument
201b 9e                 .BYTE $9e       ; SYS  token
201c 28 38 32           .BYTE "(8253):" ; C65  start
2023 8f                 .BYTE $8f       ; REM  token
2024 20 42 49           .BYTE " BIT SHIFTER 06-AUG-20",0
203b 00 00    Link      .WORD 0         ; BASIC end marker

              ; SYS entry for MEGA65 mode

203d 4c 66 20           JMP MEGA_Setup

              ; SYS entry for C64 mode

2040 a9 41              lda #65   ; 40MHz CPU
2042 85 00              sta 0

2044 a0 00              LDY #0
2046 84 3e              STY A0L
2048 84 40              STY A1L
204a a9 21              LDA #>[EOP - $1800]
204c 85 3f              STA A0H
204e a9 39              LDA #>EOP
2050 85 41              STA A1H

2052 b1 3e    ReLoop    LDA (A0L),Y
2054 91 40              STA (A1L),Y
2056 c8                 INY
2057 d0 f9              BNE ReLoop
2059 c6 3f              DEC A0H
205b c6 41              DEC A1H
205d a5 41              LDA A1H
205f c9 20              CMP #$20
2061 b0 ef              BCS ReLoop
2063 4c 66 20           JMP MEGA_Setup


              ; **********
2066            MEGA_Setup
              ; **********
2066 78                 sei
2067 a9 00              lda #0              ; Configure MEGA65 memory
2069 aa                 tax
206a a8                 tay
206b 4b                 taz
206c 5c                 map
206d ea                 eom

206e a9 36              lda #$36            ; I/O & kernal
2070 85 01              sta R6510
2072 a9 41              lda #65   ; 40 MHz
2074 85 00              sta 0

2076 20 a3 fd           jsr Init_IO
2079 20 cc 20           jsr Set_Kernal_Vectors
207c a9 04              lda #$04            ; C64 default value
207e 8d 88 02           sta SCNMPG          ; set screen memory page
2081 20 5b ff           jsr Init_Editor

2084 a9 ff              LDA #-1             ; cursor off
2086 85 cc              STA BLNSW
2088 58                 CLI
2089 a2 08              LDX #8
208b 86 ba              STX FA
208d 8e 34 38           STX Game_Unit
2090 8e 35 38           STX Save_Unit       ; default SAVE unit = GAME unit

2093 20 50 37           JSR Load_Config
2096 20 b7 20           JSR Set_Mode_80
2099 20 e3 21           JSR Screen_Setup
209c ad a3 39           LDA FG_Color
209f 8d 86 02           STA COLOR
20a2 ad a6 39           LDA BG_Color
20a5 8d 21 d0           STA BackgCol0
20a8 ad a5 39           LDA BO_Color
20ab 8d 20 d0           STA BorderCol
20ae 20 4e 32           JSR Clear_Screen
20b1 20 90 ff           JSR SETMSG          ; disable kernal messages
20b4 4c 14 22           JMP z_restart


              ; ***********
20b7            Set_Mode_80
              ; ***********

              ;         make VIC IV registers visible

20b7 a9 47              lda #$47
20b9 8d 2f d0           sta $d02f
20bc a9 53              lda #$53
20be 8d 2f d0           sta $d02f

20c1 a9 c0              LDA #$c0           ; 80 columns, fast
20c3 8d 31 d0           STA $d031
20c6 a9 26              LDA #$26           ; SCR = $0800,  CB = $0C00
20c8 8d 18 d0           STA $d018
20cb 60                 RTS ;Size   21 [Set_Mode_80]

              ; ******************
20cc            Set_Kernal_Vectors
              ; ******************

20cc a0 1f              LDY #$1F          ; 16 vectors
20ce b9 30 fd KeVE_10   LDA ROM_Vectors,Y
20d1 99 14 03           STA CINV,Y
20d4 88                 DEY
20d5 10 f7              BPL KeVE_10
20d7 60                 RTS ;Size   12 [Set_Kernal_Vectors]

              ; ====
              ; DATA
              ; ====

20d8 00       Row_Lo    .BYTE <[SCREEN]
20d9 50                 .BYTE <[SCREEN +  1 * COLS]
20da a0                 .BYTE <[SCREEN +  2 * COLS]
20db f0                 .BYTE <[SCREEN +  3 * COLS]
20dc 40                 .BYTE <[SCREEN +  4 * COLS]
20dd 90                 .BYTE <[SCREEN +  5 * COLS]
20de e0                 .BYTE <[SCREEN +  6 * COLS]
20df 30                 .BYTE <[SCREEN +  7 * COLS]
20e0 80                 .BYTE <[SCREEN +  8 * COLS]
20e1 d0                 .BYTE <[SCREEN +  9 * COLS]
20e2 20                 .BYTE <[SCREEN + 10 * COLS]
20e3 70                 .BYTE <[SCREEN + 11 * COLS]
20e4 c0                 .BYTE <[SCREEN + 12 * COLS]
20e5 10                 .BYTE <[SCREEN + 13 * COLS]
20e6 60                 .BYTE <[SCREEN + 14 * COLS]
20e7 b0                 .BYTE <[SCREEN + 15 * COLS]
20e8 00                 .BYTE <[SCREEN + 16 * COLS]
20e9 50                 .BYTE <[SCREEN + 17 * COLS]
20ea a0                 .BYTE <[SCREEN + 18 * COLS]
20eb f0                 .BYTE <[SCREEN + 19 * COLS]
20ec 40                 .BYTE <[SCREEN + 20 * COLS]
20ed 90                 .BYTE <[SCREEN + 21 * COLS]
20ee e0                 .BYTE <[SCREEN + 22 * COLS]
20ef 30                 .BYTE <[SCREEN + 23 * COLS]
20f0 80                 .BYTE <[SCREEN + 24 * COLS]

20f1 08       Row_Hi    .BYTE >[SCREEN]
20f2 08                 .BYTE >[SCREEN +  1 * COLS]
20f3 08                 .BYTE >[SCREEN +  2 * COLS]
20f4 08                 .BYTE >[SCREEN +  3 * COLS]
20f5 09                 .BYTE >[SCREEN +  4 * COLS]
20f6 09                 .BYTE >[SCREEN +  5 * COLS]
20f7 09                 .BYTE >[SCREEN +  6 * COLS]
20f8 0a                 .BYTE >[SCREEN +  7 * COLS]
20f9 0a                 .BYTE >[SCREEN +  8 * COLS]
20fa 0a                 .BYTE >[SCREEN +  9 * COLS]
20fb 0b                 .BYTE >[SCREEN + 10 * COLS]
20fc 0b                 .BYTE >[SCREEN + 11 * COLS]
20fd 0b                 .BYTE >[SCREEN + 12 * COLS]
20fe 0c                 .BYTE >[SCREEN + 13 * COLS]
20ff 0c                 .BYTE >[SCREEN + 14 * COLS]
2100 0c                 .BYTE >[SCREEN + 15 * COLS]
2101 0d                 .BYTE >[SCREEN + 16 * COLS]
2102 0d                 .BYTE >[SCREEN + 17 * COLS]
2103 0d                 .BYTE >[SCREEN + 18 * COLS]
2104 0d                 .BYTE >[SCREEN + 19 * COLS]
2105 0e                 .BYTE >[SCREEN + 20 * COLS]
2106 0e                 .BYTE >[SCREEN + 21 * COLS]
2107 0e                 .BYTE >[SCREEN + 22 * COLS]
2108 0f                 .BYTE >[SCREEN + 23 * COLS]
2109 0f                 .BYTE >[SCREEN + 24 * COLS]

210a 00 00 00 Z_STATUS    .FILL 90 (0) ; 90 bytes
2164 00       L_Encode_A  .BYTE 0 ;
2165 00       L_Encode_Y  .BYTE 0 ;

              ; data for separators / delimiters in parsing

2166 21 3f 2c Sep_Std_List    .BYTE "!?,.\r " ; built in standard
216c 00       Z_Arg_Count     .BYTE 0 ; argument count
216d 01       Z_Buffer_Mode   .BYTE 1 ; output buffering on or off
216e 00       Z_Call_Type     .BYTE 0 ; type of subroutine call
216f 00       Z_Monospace     .BYTE 0
2170 00       Z_Underline     .BYTE 0
2171 00       Z_Active_Window .BYTE 0

2172 01       Z_Upper_Size    .BYTE 1 ; upper window size


2173 00 00 00 Z_Copy          .FILL RAM_HI - Z_Code + 1 (0) ; 11 bytes
217e 01       Breakpoint      .BYTE 1


              ; ==========================
              ; Cursor, Windows and Screen
              ; ==========================

              ; ******************
217f            Set_Screen_Pointer
              ; ******************

217f a6 55              LDX Cursor_Row

              ; ********************
2181            Set_Screen_Pointer_X
              ; ********************

2181 bd d8 20           LDA Row_Lo,X
2184 85 57              STA Scr_Adr
2186 85 59              STA Col_Adr
2188 bd f1 20           LDA Row_Hi,X
218b 85 58              STA Scr_Adr+1
218d 29 07              AND #7
218f 85 5a              STA Col_Adr+1
2191 60                 RTS ;Size   17 [Set_Screen_Pointer_X]


              ; ***********
2192            Window_Home
              ; ***********

              ; set cursor to top left position of window

2192 ae 72 21           LDX Z_Upper_Size
2195 a0 00              LDY #0

              ; ***********
2197            Set_Row_Col
              ; ***********

              ; Input : X = screen row    (0 .. 24)
              ;         Y = screen column (0 .. 79)

2197 e0 19              CPX #ROWS
2199 90 02              BCC SRC_10
219b a2 18              LDX #ROWS-1
219d c4 23    SRC_10    CPY Cols
219f 90 02              BCC SRC_20
21a1 a4 29              LDY Last_Col

21a3 86 55    SRC_20    STX Cursor_Row
21a5 84 54              STY Cursor_Col
21a7 20 7f 21           JSR Set_Screen_Pointer

              ; ***********
21aa            Get_Row_Col
              ; ***********

              ; Output: X = screen row    (0 .. 24)
              ;         Y = screen column (0 .. 79)

21aa a6 55              LDX Cursor_Row
21ac a4 54              LDY Cursor_Col
21ae 60                 RTS ;Size    5 [Get_Row_Col]

              ; **********
21af            Info_Print
              ; **********

              ; Input: (X) = First page, (A) = Last page, (Y) = print pos
              ;----------------------------------------------------------

21af 48                 PHA
21b0 8a                 TXA
21b1 20 57 36           JSR ASCII_Hex
21b4 99 e5 38           STA InfoPro + 10,Y
21b7 8a                 TXA
21b8 99 e4 38           STA InfoPro +  9,Y
21bb 68                 PLA
21bc 20 57 36           JSR ASCII_Hex
21bf 99 ec 38           STA InfoPro + 17,Y
21c2 8a                 TXA
21c3 99 eb 38           STA InfoPro + 16,Y
21c6 a9 00              LDA #0
21c8 85 43              STA X0H
21ca a5 19              LDA Info_Pages
21cc 85 42              STA X0L

              ; *********
21ce            Info_Size
              ; *********
21ce 98                 TYA
21cf 48                 PHA
21d0 20 2c 30           JSR Format_Integer
21d3 68                 PLA
21d4 a8                 TAY
21d5 a2 01              LDX #1
21d7 b5 2e    InSi_10   LDA NUMBER,X
21d9 99 f0 38           STA InfoPro+21,Y
21dc c8                 INY
21dd e8                 INX
21de e0 05              CPX #5
21e0 90 f5              BCC InSi_10
21e2 60                 RTS ;Size   21 [Info_Size]

              ; ************
21e3            Screen_Setup
              ; ************

21e3 a9 0f              LDA #$0F       ; colour RAM: $FF80000
21e5 85 5c              STA Col_Adr+3
21e7 a9 f8              LDA #$F8
21e9 85 5b              STA Col_Adr+2
21eb a0 50              LDY #COLS
21ed 84 23              STY Cols
21ef 88                 DEY
21f0 84 29              STY Last_Col   ; Cols - 1 for comparisons

              ; ***************
21f2            Set_Screen_Rows
              ; ***************

21f2 38                 SEC
21f3 a9 18              LDA #ROWS-1    ; Last line
21f5 85 28              STA Last_Row
21f7 60                 RTS ;Size    6 [Set_Screen_Rows]

              ; ***********
21f8            Story_Pages
              ; ***********

              ; Leave story size in X0L/X0H for printing

21f8 a9 00              LDA #0
21fa 85 43              STA X0H
21fc ad 1a 3d           LDA h_file_size_hi    ; size in words high
21ff 85 42              STA X0L
2201 ad 1b 3d           LDA h_file_size_lo    ; size in words low
2204 0a                 ASL A
2205 26 42              ROL X0L
2207 26 43              ROL X0H               ; size * 2
2209 c9 00              CMP #0
220b f0 06              BEQ STTS_10           ; at page boundary
220d e6 42              INC X0L               ; add 1 to round up
220f d0 02              BNE STTS_10
2211 e6 43              INC X0H
2213 60       STTS_10   RTS ;Size   28 [Story_Pages]


              ; *********
2214            z_restart
              ; *********

2214 d8                 CLD
2215 a2 fb              LDX #$fb       ; Commodore default stack initialisation
2217 9a                 TXS
2218 a9 00              LDA #0         ; clear ZP variables
221a a2 02              LDX #Z_Code    ; start of interpreter variables
221c 95 00    Start_10  STA 0,X
221e e8                 INX
221f e0 5d              CPX #ZP_END
2221 90 f9              BCC Start_10
2223 a9 00              LDA #0
2225 aa                 TAX
2226 20 e3 21           JSR Screen_Setup
2229 e6 2c              INC z_stack_ptr      ;  1
222b e6 2d              INC z_frame_ptr      ;  1
222d c6 2a              DEC Status_Col       ; -1
222f 20 1b 34           JSR Open_Story       ; open  8,8,8,"z3*"
2232 a9 3d              LDA #>Z_HEADER
2234 85 0c              STA RAM_HI
2236 20 bd 36           JSR Load_Page       ; load first block to Z_HEADER
2239 ad 00 3d           LDA h_version
223c c9 03              CMP #ZV
223e f0 0c              BEQ Start_20
                        Print(NOSTORY)
2240 a9 b6              LDA #<NOSTORY
2242 a0 38              LDY #>NOSTORY
2244 a2 0b              LDX #?NOSTORY
2246 20 76 33           JSR PrintText

2249 4c ed 25           JMP quit_20
224c          Start_20

              ; =================
              ; Set Memory Layout
              ; =================

224c a2 93              LDX #>[$D000 - Z_HEADER]
224e 86 22              STX Resident_Pages  ; reserved
2250 a2 50              LDX #COLS
2252 8e 21 3d           STX h_screen_cols

2255 ad 01 3d           LDA h_config
2258 09 31              ORA #%0011 0001     ; fixed font / colours
              ;               0--- ---- 7:timed input
              ;                 1- ---- 5:split screen
              ;                  1 ---- 4:fixed  font
              ;                    0--- 3:italic font
              ;                     0-- 2:bold   font
              ;                      0- 1:pictures
              ;                       1 0:colors
225a 8d 01 3d           STA h_config
225d a9 0c              LDA #%0000 1100
225f 0d 11 3d           ORA h_flags_lo
2262 8d 11 3d           STA h_flags_lo
2265 a9 00              LDA #0
2267 8d 22 3d           STA h_screen_width_hi
226a 8d 24 3d           STA h_screen_height_hi
226d a9 50              LDA #COLS
226f 8d 23 3d           STA h_screen_width_lo
2272 a9 18              LDA #ROWS-1
2274 8d 25 3d           STA h_screen_height_lo
2277 a9 01              LDA #1
2279 8d 26 3d           STA h_font_width
227c 8d 27 3d           STA h_font_height
227f a9 08              LDA #8              ; 6:PC 7:C128 8:C64
2281 8d 1e 3d           STA h_interpreter_number
2284 a9 47              LDA #'G'
2286 8d 1f 3d           STA h_interpreter_version

2289 a0 50              LDY #COLS
228b 84 23              STY Cols
228d 88                 DEY
228e 84 29              STY Last_Col

              ; -------- compute story location and size -----

2290 a9 1a              LDA #>EOP - >START+1 ; program
2292 85 19              STA Info_Pages
2294 a2 20              LDX #>START
2296 a9 39              LDA #>EOP
2298 a0 00              LDY #0
229a 20 af 21           JSR Info_Print
229d a5 22              LDA Resident_Pages ; static
229f 85 19              STA Info_Pages
22a1 18                 CLC
22a2 69 3c              ADC #>Z_HEADER-1
22a4 a2 3d              LDX #>Z_HEADER
22a6 a0 20              LDY #InfoSta-InfoPro
22a8 20 af 21           JSR Info_Print
22ab 20 f8 21           JSR Story_Pages
22ae a0 40              LDY #InfoSto-InfoPro
22b0 20 ce 21           JSR Info_Size
                        Print(BITSHIFTER)
22b3 a9 c1              LDA #<BITSHIFTER
22b5 a0 38              LDY #>BITSHIFTER
22b7 a2 19              LDX #?BITSHIFTER
22b9 20 76 33           JSR PrintText

22bc 20 71 36           JSR Select_Text_Window
22bf a9 da              LDA #<InfoClr
22c1 a0 38              LDY #>InfoClr
22c3 a2 62              LDX #[InfoEnd - InfoClr]
22c5 20 76 33           JSR PrintText

22c8 20 bd 36 Start_30  JSR Load_Page       ; Load resident area
22cb a5 90              LDA IO_STATUS
22cd d0 11              BNE Start_50        ; EOF
22cf a5 14              LDA Block_Lo
22d1 29 07              AND #7
22d3 d0 05              BNE Start_40
22d5 a9 2e              LDA #'.'
22d7 20 ae 32           JSR CHROUT
22da a5 14    Start_40  LDA Block_Lo
22dc c5 22              CMP Resident_Pages
22de 90 e8              BCC Start_30

22e0 20 e4 36 Start_50  JSR Load_Story
22e3 20 03 34           JSR Wait_for_Return
22e6 20 b7 20           JSR Set_Mode_80
22e9 ad 06 3d           LDA h_start_pc_hi   ; Initialize pc
22ec 85 04              STA QI1
22ee ad 07 3d           LDA h_start_pc_lo
22f1 85 03              STA QI0
22f3 20 cd 33           JSR Reset_Screen

              ; *******
22f6            PC_LOOP
              ; *******

              ; read next instruction byte from Z-program counter
              ; read optional operand bytes and call operator subroutine


              ; ----------
              ; Debug Code
              ; ----------

              ;          LDX #0
              ;PC_10     LDA Z_Code,X
              ;          STA Z_Copy,X
              ;          INX
              ;          CPX #RAM_HI - Z_Code + 1
              ;          BCC PC_10

              ; ------------------
              ; Breakpoint Handler
              ; ------------------

              ;          LDA QI0
              ;          CMP #$ce
              ;          BNE PC_30
              ;          LDA QI1
              ;          CMP #$b2
              ;          BNE PC_30
              ;          LDA QI2
              ;          CMP #$02
              ;          BNE PC_30
              ;          DEC Breakpoint
              ;          BNE PC_30
              ;          BRK
22f6           PC_30

22f6 a9 00              LDA #0
22f8 85 1c              STA ParNum           ; reset # of operands
22fa 20 f0 2c           JSR Next_Instruction
22fd 85 02              STA Z_Code           ; remember op code
              ; ------
              ; Tracer
              ; ------
              ;          LDA #14
              ;          JSR CHROUT
              ;          LDX DumpQI
              ;          BEQ BZ_10
              ;          CMP #$0d
              ;          BEQ BZ_10
              ;          LDA #'+'
              ;          JSR CHROUT
              ;          LDA Z_Code
              ;          JSR ASCII_Hex
              ;          PHA
              ;          TXA
              ;          JSR CHROUT
              ;          PLA
              ;          JSR CHROUT
              ;BZ_10     LDA Z_Code

22ff 10 2e              BPL z_op_two         ; [$00 - $7f] -> codes with  2 operands
2301 c9 b0              CMP #$b0
2303 90 1c              BCC z_op_one         ; [$80 - $af] -> codes with  1 operand
2305 c9 c0              CMP #$c0
2307 90 13              BCC z_op_zero        ; [$b0 - $bf] -> codes with no operand

2309 20 f0 2c           JSR Next_Instruction ; [$c0 - $ff] -> codes with 0-4 operands

              ; ********
230c            z_op_var
              ; ********

              ; max 4 operands (11223344)
              ; ----------------------------
              ; 00 = 16 bit constant
              ; 01 =  8 bit constant
              ; 10 = 16 bit variable
              ; 11 = no operand (end marker)

230c 20 5a 24 opvar_10  JSR Load_4_Operands
230f a5 02    opvar_20  LDA Z_Code
2311 c9 e0              CMP #$e0
2313 90 2e              BCC z_exe_1f        ; [$c0 - $df] -> use 2 operand table
2315 29 1f              AND #$1f            ; [$e0 - $ff] -> use variable operands
2317 18                 CLC
2318 69 40              ADC #[opcodes_var - z_opcode] >> 1
231a d0 29              BNE z_execute       ; always

              ; *********
231c            z_op_zero
              ; *********

              ; opcodes with no operand, opcode = $b0 - $bf

231c 38                 SEC
231d e9 80              SBC #$b0 - [[opcodes_0op - z_opcode] >> 1]
231f d0 24              BNE z_execute       ; always

              ; ********
2321            z_op_one
              ; ********

              ; opcode = 10tt cccc  opcodes with 1 operand
              ;     tt = 00 : 16 bit constant $8x
              ;     tt = 01 :  8 bit constant $9x
              ;     tt = 10 :    variable     $ax

2321 0a                 ASL A
2322 0a                 ASL A
2323 20 2e 24           JSR Get_Operand
2326 a5 02              LDA Z_Code
2328 29 0f              AND #15
232a 18                 CLC
232b 69 20              ADC #[opcodes_1op - z_opcode] >> 1
232d d0 16              BNE z_execute

              ; ********
232f            z_op_two
              ; ********

              ; opcode = 0fsc cccc  opcodes with 2 operands
              ;      f = 0 : 1st. op = short constant
              ;      f = 1 : 1st. op = variable
              ;      s = 0 : 2nd. op = short constant
              ;      s = 1 : 2nd. op = variable

232f 18                 CLC
2330 29 40              AND #$40            ; $40 if 1st. op variable
2332 69 40              ADC #$40            ; $80 if 1st. op variable
2334 20 2e 24           JSR Get_Operand     ; $80 variable, $40 8 bit constant
2337 a5 02              LDA Z_Code
2339 0a                 ASL A               ; C=0
233a 29 40              AND #$40
233c 69 40              ADC #$40
233e 20 2e 24           JSR Get_Operand
2341 a5 02              LDA Z_Code
2343 29 1f    z_exe_1f  AND #$1f            ; fall through

              ; *********
2345            z_execute
              ; *********

              ; Input : A = index to opcode table

2345 0a                 ASL A               ; convert to word index
2346 a8                 TAY
2347 b9 69 23           LDA z_opcode,Y
234a 8d 54 23           STA JSRMOD+1
234d b9 6a 23           LDA z_opcode+1,Y
2350 8d 55 23           STA JSRMOD+2
2353 20 ff ff JSRMOD    JSR $ffff
2356 4c f6 22           JMP PC_LOOP

2359 00       DumpQI    .BYTE 0

              z_error_2 ERROR(2)
235a a9 02              LDA #2
235c 4c 6c 2f           JMP INTERNAL_ERROR

              z_error_3 ERROR(3)
235f a9 03              LDA #3
2361 4c 6c 2f           JMP INTERNAL_ERROR

              z_error_4 ERROR(4)
2364 a9 04              LDA #4
2366 4c 6c 2f           JMP INTERNAL_ERROR


              ; ********
2369            z_opcode
              ; ********

              ; $00-$1f : byte const + short const
              ; $20-$3f : byte const + variable
              ; $40-$5f : variable   + byte const
              ; $60-$7f : variable   + variable
              ; $c0-$df : 0-4 arguments defined in follow up byte

2369 64 23              .WORD z_error_4       ; 00 20 40 60   c0
236b 01 27              .WORD z_je            ; 01 21 41 61   c1
236d 34 27              .WORD z_jl            ; 02 22 42 62   c2
236f 45 27              .WORD z_jg            ; 03 23 43 63   c3
2371 56 27              .WORD z_dec_chk       ; 04 24 44 64   c4
2373 67 27              .WORD z_inc_chk       ; 05 25 45 65   c5
2375 91 27              .WORD z_jin           ; 06 26 46 66   c6
2377 a0 27              .WORD z_test          ; 07 27 47 67   c7
2379 b6 27              .WORD z_or            ; 08 28 48 68   c8
237b c2 27              .WORD z_and           ; 09 29 49 69   c9
237d ce 27              .WORD z_test_attr     ; 0a 2a 4a 6a   ca
237f db 27              .WORD z_set_attr      ; 0b 2b 4b 6b   cb
2381 e3 27              .WORD z_clear_attr    ; 0c 2c 4c 6c   cc
2383 ed 27              .WORD z_store         ; 0d 2d 4d 6d   cd
2385 f3 27              .WORD z_insert_obj    ; 0e 2e 4e 6e   ce
2387 0e 28              .WORD z_loadw         ; 0f 2f 4f 6f   cf
2389 19 28              .WORD z_loadb         ; 10 30 50 70   d0
238b 4c 28              .WORD z_get_prop      ; 11 31 51 71   d1
238d 38 28              .WORD z_get_prop_addr ; 12 32 52 72   d2
238f 74 28              .WORD z_get_next_prop ; 13 33 53 73   d3
2391 d1 28              .WORD z_add           ; 14 34 54 74   d4
2393 de 28              .WORD z_sub           ; 15 35 55 75   d5
2395 eb 28              .WORD z_mul           ; 16 36 56 76   d6
2397 0f 29              .WORD z_div           ; 17 37 57 77   d7
2399 19 29              .WORD z_mod           ; 18 38 58 78   d8
239b ba 29              .WORD z_call_s        ; 19 39 59 79   d9
239d b6 29              .WORD z_call_n        ; 1a 3a 5a 7a   da
239f b2 29              .WORD z_set_color     ; 1b 3b 5b 7b   db
23a1 64 23              .WORD z_error_4       ; 1c 3c 5c 7c   dc
23a3 64 23              .WORD z_error_4       ; 1d 3d 5d 7d   dd
23a5 64 23              .WORD z_error_4       ; 1e 3e 5e 7e   de
23a7 64 23              .WORD z_error_4       ; 1f 3f 5f 7f   df

              ; ***********
23a9            opcodes_1op
              ; ***********

              ; $80-$8f : word constant
              ; $90-$9f : byte constant
              ; $a0-$af : variable

23a9 fb 25              .WORD z_jz            ; 80 90 a0
23ab 07 26              .WORD z_get_sibling   ; 81 91 a1
23ad 0b 26              .WORD z_get_child     ; 82 92 a2
23af 1d 26              .WORD z_get_parent    ; 83 93 a3
23b1 8c 28              .WORD z_get_prop_len  ; 84 94 a4
23b3 25 26              .WORD z_inc           ; 85 95 a5
23b5 31 26              .WORD z_dec           ; 86 96 a6
23b7 3f 26              .WORD z_print_addr    ; 87 97 a7
23b9 ba 29              .WORD z_call_s        ; 88 98 a8
23bb 46 26              .WORD z_remove_obj    ; 89 99 a9
23bd 82 26              .WORD z_print_obj     ; 8a 9a aa
23bf 97 26              .WORD z_ret           ; 8b 9b ab
23c1 d2 26              .WORD z_jump          ; 8c 9c ac
23c3 d9 26              .WORD z_print_paddr   ; 8d 9d ad
23c5 eb 26              .WORD z_load          ; 8e 9e ae
23c7 f1 26              .WORD z_not           ; 8f 9f af

              ; ***********
23c9            opcodes_0op
              ; ***********

23c9 55 25              .WORD z_rtrue         ; b0
23cb 5f 25              .WORD z_rfalse        ; b1
23cd 95 25              .WORD z_print         ; b2
23cf ab 25              .WORD z_print_ret     ; b3
23d1 aa 25              .WORD z_nop           ; b4
23d3 a0 34              .WORD z_save          ; b5
23d5 67 35              .WORD z_restore       ; b6
23d7 14 22              .WORD z_restart       ; b7
23d9 b4 25              .WORD z_ret_popped    ; b8
23db be 25              .WORD z_pop           ; b9
23dd d7 25              .WORD z_quit          ; ba
23df d8 2f              .WORD z_new_line      ; bb
23e1 33 31              .WORD z_show_status   ; bc
23e3 09 25              .WORD Main_True       ; bd z_verify
23e5 b8 33              .WORD z_extension     ; be
23e7 5a 23              .WORD z_error_2       ; bf

              ; ***********
23e9            opcodes_var
              ; ***********

23e9 ba 29              .WORD z_call_s         ; e0 V3 call with 0-3 args
23eb 3a 2a              .WORD z_storew         ; e1
23ed 4b 2a              .WORD z_storeb         ; e2
23ef 65 2a              .WORD z_put_prop       ; e3
23f1 06 2b              .WORD z_read           ; e4
23f3 87 2a              .WORD z_print_char     ; e5
23f5 8c 2a              .WORD z_print_num      ; e6
23f7 b9 2a              .WORD z_random         ; e7
23f9 e0 2a              .WORD z_push           ; e8
23fb e7 2a              .WORD z_pull           ; e9
23fd 88 33              .WORD z_split_window   ; ea
23ff aa 33              .WORD z_set_window     ; eb
2401 29 24              .WORD z_error_1        ; ec z_call_s 0-8 args
2403 b7 33              .WORD z_erase_window   ; ed
2405 29 24              .WORD z_error_1        ; ee z_erase_line
2407 b5 33              .WORD z_set_cursor     ; ef
2409 29 24              .WORD z_error_1        ; f0 z_get_cursor
240b b3 33              .WORD z_set_text_style ; f1
240d b4 33              .WORD z_buffer_mode    ; f2
240f b6 33              .WORD z_output_stream  ; f3
2411 29 24              .WORD z_error_1        ; f4 z_input_stream
2413 be 33              .WORD z_sound_effect   ; f5
2415 ed 2a              .WORD z_read_char      ; f6
2417 ab 29              .WORD z_scan_table     ; f7
2419 f1 26              .WORD z_not            ; f8
241b b6 29              .WORD z_call_n         ; f9 z_call_n 0-3 args
241d b6 29              .WORD z_call_n         ; fa z_call_n 0-8 args
241f ac 29              .WORD z_tokenize       ; fb
2421 ed 2a              .WORD z_encode_text    ; fc
2423 ab 29              .WORD z_copy_table     ; fd
2425 ab 29              .WORD z_print_table    ; fe
2427 ad 29              .WORD z_check_argc     ; ff

              z_error_1 ERROR(1)
2429 a9 01              LDA #1
242b 4c 6c 2f           JMP INTERNAL_ERROR


              ; ***********
242e            opcodes_ext
              ; ***********



              ; ***********
242e            Get_Operand
              ; ***********

              ; Input: (A) = tt00 0000
              ; ----------------------
              ; tt = 00 : 16 bit constant
              ; tt = 01 :  8 bit constant
              ; tt = 10 :    variable
              ; tt = 11 :    none

              ; Output: Store 1st. in X1, 2nd. in X2, etc. until X8
              ;         Overflow set if none

242e 85 1a              STA OP_Type
2430 a9 00              LDA #0
2432 24 1a              BIT OP_Type
2434 30 0f              BMI geop_02
2436 70 03              BVS geop_01
2438 20 f0 2c           JSR Next_Instruction ; 00 -> word
243b 85 43    geop_01   STA X0H
243d 20 f0 2c           JSR Next_Instruction ; 01 -> byte
2440 85 42              STA X0L
2442 4c 4a 24           JMP geop_03
2445 70 12    geop_02   BVS geop_04          ; 11 -> end
2447 20 76 24           JSR Get_Var_A        ; 10 -> variable
244a e6 1c    geop_03   INC ParNum
244c a5 1c              LDA ParNum
244e 0a                 ASL A
244f aa                 TAX
2450 a5 42              LDA X0L
2452 95 42              STA X0L,X
2454 a5 43              LDA X0H
2456 95 43              STA X0H,X
2458 b8                 CLV
2459 60       geop_04   RTS ;Size   44 [Get_Operand]

              ; ***************
245a            Load_4_Operands
              ; ***************

              ; max 4 operands (2 type bits)
              ; ----------------------------
              ; 00 = 16 bit constant
              ; 01 =  8 bit constant
              ; 10 = 16 bit variable
              ; 11 = no operand (end marker)

245a 20 2e 24           JSR Get_Operand
245d 70 0a              BVS L4OP_20         ; V=1 -> end of args
245f a5 1a              LDA OP_Type
2461 0a                 ASL A
2462 0a                 ASL A               ; shift next 2 type bits to 7 and 6
2463 a6 1c              LDX ParNum
2465 e0 04              CPX #4
2467 90 f1              BCC Load_4_Operands
2469 a5 02    L4OP_20   LDA Z_Code
246b 60                 RTS ;Size   18 [Load_4_Operands]


              ; ***********
246c            Get_Var_X1L
              ; ***********

246c a5 44              LDA X1L
246e d0 0e              BNE GeVa_10
2470 20 be 25           JSR z_pop
2473 4c a1 24           JMP Push_X0

              ; *********
2476            Get_Var_A
              ; *********

2476 20 f0 2c           JSR Next_Instruction
2479 d0 03              BNE GeVa_10
247b 4c be 25           JMP z_pop

247e c9 10    GeVa_10   CMP #16
2480 b0 0c              BCS Get_Global_Var
2482 aa                 TAX
2483 bd 10 3a           LDA Lvar_Hi,X
2486 85 43              STA X0H
2488 bd 00 3a           LDA Lvar_Lo,X
248b 85 42              STA X0L
248d 60                 RTS ;Size   24 [Get_Var_A]

              ; **************
248e            Get_Global_Var
              ; **************

248e 20 e4 24           JSR Get_Global_Var_Addr
2491 b1 3e              LDA (A0L),Y
2493 85 43              STA X0H
2495 c8                 INY
2496 b1 3e              LDA (A0L),Y
2498 85 42              STA X0L
249a 60                 RTS ;Size   13 [Get_Global_Var]

              ; *******
249b            Put_Var
              ; *******

249b a5 44              LDA X1L             ; X1L == 0 : push  X0
249d d0 28              BNE stx0_01         ; X1L != 0 : store X0
249f c6 2c              DEC z_stack_ptr      ; X0 replaces top of stack

              ; *******
24a1            Push_X0
              ; *******

24a1 a5 42              LDA X0L
24a3 a4 43              LDY X0H

              ; *******
24a5            Push_AY
              ; *******

              ; Input : A = low  byte
              ;         Y = high byte
              ; X register is preserved

24a5 48                 PHA
24a6 98                 TYA
24a7 a4 2c              LDY z_stack_ptr
24a9 99 00 3c           STA Z_STACK_HI,Y
24ac 68                 PLA
24ad 99 00 3b           STA Z_STACK_LO,Y
24b0 e6 2c              INC z_stack_ptr
24b2 f0 01              BEQ z_error_6
24b4 60                 RTS ;Size   16 [Push_AY]
              z_error_6 ERROR(6)
24b5 a9 06              LDA #6
24b7 4c 6c 2f           JMP INTERNAL_ERROR


              ; **********
24ba            Store_Zero
              ; **********

24ba a9 00              LDA #0

              ; **********
24bc            Store_Byte
              ; **********

24bc a2 00              LDX #0

              ; ********
24be            Store_AX
              ; ********

24be 86 43              STX X0H

              ; ***********
24c0            Store_A_X0H
              ; ***********

24c0 85 42              STA X0L

              ; ********
24c2            Store_X0
              ; ********

24c2 20 f0 2c           JSR Next_Instruction
24c5 f0 da              BEQ Push_X0         ;    0: push   value

24c7 c9 10    stx0_01   CMP #16             ; 1-15: local  variable
24c9 b0 0c              BCS Put_Global_Var  ; > 15: global variable
24cb aa                 TAX
24cc a5 42              LDA X0L
24ce 9d 00 3a           STA Lvar_Lo,X
24d1 a5 43              LDA X0H
24d3 9d 10 3a           STA Lvar_Hi,X
24d6 60                 RTS ;Size   21 [Store_X0]

              ; **************
24d7            Put_Global_Var
              ; **************

24d7 20 e4 24           JSR Get_Global_Var_Addr
24da a5 43              LDA X0H             ; store in big endian order
24dc 91 3e              STA (A0L),Y
24de c8                 INY
24df a5 42              LDA X0L
24e1 91 3e              STA (A0L),Y
24e3 60                 RTS ;Size   13 [Put_Global_Var]

              ; *******************
24e4            Get_Global_Var_Addr
              ; *******************

              ;  Input: (A)  = Variable # ( 16 - 255)
              ; Output: (A0) = Address of Variable
              ;         (Y)  = 0  IMPORTANT: used by callers

              ; A0 = Z_HEADER + h_globals + 2 * (A)

24e4 38                 SEC
24e5 e9 10              SBC #16             ; variable index = number - 16
24e7 a0 00              LDY #0
24e9 84 3f              STY A0H
24eb 0a                 ASL A
24ec 26 3f              ROL A0H             ; (A/A0H) = index * 2 (C=0)
24ee 6d 0d 3d           ADC h_globals_lo
24f1 85 3e              STA A0L
24f3 a5 3f              LDA A0H             ; 0 or 1
24f5 6d 0c 3d           ADC h_globals_hi
24f8 69 3d              ADC #>Z_HEADER
24fa 85 3f              STA A0H
24fc 60       GGVA_Ret  RTS ;Size   25 [Get_Global_Var_Addr]

              ; Take a jump after an instruction based on the flag, either true or
              ; false. The branch can be short or long; it is encoded in one or two
              ; bytes respectively. When bit 7 of the first byte is set, the jump
              ; takes place if the flag is true; otherwise it is taken if the flag
              ; is false. When bit 6 of the first byte is set, the branch is short;
              ; otherwise it is long. The offset occupies the bottom 6 bits of the
              ; first byte plus all the bits in the second byte for long branches.
              ; Uniquely, an offset of 0 means return false, and an offset of 1 is
              ; return true. The branch distance is offset - 2.

              ; **********
24fd            Main_False
              ; **********

24fd 20 f0 2c           JSR Next_Instruction
2500 10 0c              BPL Bran_10
2502 29 40    Bran_01   AND #$40
2504 d0 f6              BNE GGVA_Ret
2506 4c f0 2c           JMP Next_Instruction

              ; *********
2509            Main_True
              ; *********

2509 20 f0 2c           JSR Next_Instruction  ; A = specifier
250c 10 f4              BPL Bran_01
250e aa       Bran_10   TAX                   ; X = specifier
250f 29 40              AND #$40              ; bit 6: 1=short 0=long
2511 f0 07              BEQ Bran_11           ; ---------------------
2513 8a                 TXA                   ; short forward branch
2514 29 3f              AND #$3f              ; A = offset (6 bits)
2516 a2 00              LDX #0                ; X = 0 (high offset)
2518 f0 16              BEQ Bran_14           ; ---------------------
251a 8a       Bran_11   TXA                   ; long branch
251b 29 20              AND #$20              ; sign bit of offset
251d f0 05              BEQ Bran_12           ; -> positive offset
251f 8a                 TXA
2520 09 c0              ORA #$c0              ; negative offset
2522 d0 03              BNE Bran_13           ; -> always
2524 8a       Bran_12   TXA
2525 29 3f              AND #$3f              ; positive offset
2527 85 43    Bran_13   STA X0H               ; high byte offset (6 bits)
2529 20 f0 2c           JSR Next_Instruction  ; A = low  byte of long offset
252c a6 43              LDX X0H               ; X = high byte of long offset
252e d0 06              BNE Branch_XA         ; -> long branch
2530 a8       Bran_14   TAY                   ; Y = offset
2531 f0 2c              BEQ z_rfalse          ; Offset 0: return false
2533 88                 DEY                   ; Y = offset - 1
2534 f0 1f              BEQ z_rtrue           ; Offset 1: return true

              ; *********
2536            Branch_XA
              ; *********

              ; branch to IP + (A/X) - 2
              ; Input : (A/X) = signed word with 14 significant bits

2536 86 43              STX X0H             ; offset high
2538 38                 SEC
2539 e9 02              SBC #2
253b b0 01              BCS Bran_20
253d ca                 DEX
253e 18       Bran_20   CLC                 ; (A/X) = offset - 2
253f 65 03              ADC QI0
2541 85 03              STA QI0
2543 8a                 TXA
2544 65 04              ADC QI1
2546 85 04              STA QI1
2548 a9 00              LDA #0              ; A = 0
254a 24 43              BIT X0H             ; check sign of offset
254c 10 02              BPL Bran_21         ; -> positive
254e a9 ff              LDA #-1             ; A = -1
2550 65 05    Bran_21   ADC QI2             ; add carry and sign
2552 85 05              STA QI2
2554 60                 RTS ;Size   31 [Branch_XA]

              ; ***************************
2555            z_rtrue  ; op0 opcode # $00
              ; ***************************

2555 a2 01              LDX #1
2557 86 44              STX X1L
2559 ca                 DEX
255a 86 45              STX X1H
255c 4c 97 26           JMP z_ret

              ; ****************************
255f            z_rfalse ; op0 opcode # $01
              ; ****************************

255f a2 00              LDX #0
2561 86 44              STX X1L
2563 86 45              STX X1H
2565 4c 97 26           JMP z_ret

              ; ********
2568            X1_TO_X0
              ; ********

2568 a5 44              LDA X1L
256a 85 42              STA X0L
256c a5 45              LDA X1H
256e 85 43              STA X0H
2570 60                 RTS ;Size    9 [X1_TO_X0]

              ; ********
2571            X2_TO_X0
              ; ********

2571 a5 46              LDA X2L
2573 85 42              STA X0L
2575 a5 47              LDA X2H
2577 85 43              STA X0H
2579 60                 RTS ;Size    9 [X2_TO_X0]

              ; ********
257a            X1_TO_A0
              ; ********

257a a5 44              LDA X1L
257c 85 3e              STA A0L
257e a5 45              LDA X1H
2580 85 3f              STA A0H
2582 60                 RTS ;Size    9 [X1_TO_A0]

              ; ********
2583            X2_TO_A0
              ; ********

2583 a5 46              LDA X2L
2585 85 3e              STA A0L
2587 a5 47              LDA X2H
2589 85 3f              STA A0H
258b 60                 RTS ;Size    9 [X2_TO_A0]

              ; ********
258c            X0_TO_A0
              ; ********

258c a5 42              LDA X0L
258e 85 3e              STA A0L
2590 a5 43              LDA X0H
2592 85 3f              STA A0H
2594 60                 RTS ;Size    9 [X0_TO_A0]

              ; ***************************
2595            z_print  ; op0 opcode # $02
              ; ***************************

              ; print text from instruction pointer (QI).

2595 a2 02              LDX #2
2597 b5 03    z_prin_1  LDA QI0,X           ; copy QI -> QD
2599 95 08              STA QD0,X
259b ca                 DEX
259c 10 f9              BPL z_prin_1
259e 20 49 2d           JSR Decode_Text     ; print text from (QD)
25a1 a2 02              LDX #2
25a3 b5 08    zprin_2   LDA QD0,X           ; copy QD -> QI
25a5 95 03              STA QI0,X
25a7 ca                 DEX
25a8 10 f9              BPL zprin_2

              ; *******************************
25aa            z_nop        ; op0 opcode # $04
              ; *******************************

25aa 60                 RTS ;Size    1 [z_nop]

              ; *******************************
25ab            z_print_ret  ; op0 opcode # $03
              ; *******************************

              ; print text from instruction pointer (QI) add a new line and return true.

25ab 20 95 25           JSR z_print
25ae 20 d8 2f           JSR z_new_line
25b1 4c 55 25           JMP z_rtrue

              ; *******************************
25b4            z_ret_popped ; op0 opcode # $08
              ; *******************************

25b4 20 be 25           JSR z_pop
25b7 85 44              STA X1L
25b9 84 45              STY X1H
25bb 4c 97 26           JMP z_ret

              ; *************************
25be            z_pop      ; opcode # $b9
              ; *************************

              ; pop 16 bit word from Z stack
              ; Output: (X0) = (A/Y)  = value
              ; X register preserved

25be c6 2c              DEC z_stack_ptr
25c0 f0 10              BEQ z_error_5
25c2 a4 2c              LDY z_stack_ptr
25c4 b9 00 3b           LDA Z_STACK_LO,Y
25c7 48                 PHA
25c8 b9 00 3c           LDA Z_STACK_HI,Y
25cb a8                 TAY
25cc 68                 PLA
25cd 84 43              STY X0H
25cf 85 42              STA X0L
25d1 60                 RTS ;Size   20 [z_pop]

              z_error_5 ERROR(5)
25d2 a9 05              LDA #5
25d4 4c 6c 2f           JMP INTERNAL_ERROR


              ; ********************************
25d7            z_quit        ; op0 opcode # $0a
              ; ********************************

25d7 20 43 37           JSR Save_Config

              ; leave a copy of ZP in page $E000

25da a2 02              LDX #2
25dc b5 00    quit_10   LDA 0,X
25de 9d 00 e0           STA $E000,X
25e1 e8                 INX
25e2 d0 f8              BNE quit_10

                        Print(EOS)
25e4 a9 98              LDA #<EOS
25e6 a0 38              LDY #>EOS
25e8 a2 1e              LDX #?EOS
25ea 20 76 33           JSR PrintText


25ed 20 e4 ff quit_20   JSR GETIN           ; entry for early quit
25f0 f0 fb              BEQ quit_20
25f2 c9 4d              CMP #'M'            ; M -> BRK into monitor
25f4 d0 01              BNE quit_30
25f6 00                 BRK
25f7 6c fc ff quit_30   JMP (RESET)

              ; *******
25fa            z_catch
              ; *******
25fa 00                 BRK                 ; not implemented

              ; ********************************
25fb            z_jz          ; op1 opcode # $00
              ; ********************************

25fb a5 44              LDA X1L
25fd 05 45              ORA X1H
25ff f0 03              BEQ z_jz_t
2601 4c fd 24           JMP Main_False
2604 4c 09 25 z_jz_t    JMP Main_True

              ; ********************************
2607            z_get_sibling ; op1 opcode # $01
              ; ********************************

2607 a0 05              LDY #O_SIBLING      ; Y =  8
2609 d0 02              BNE zg_chi_1

              ; ********************************
260b            z_get_child   ; op1 opcode # $02
              ; ********************************

260b a0 06              LDY #O_CHILD        ; Y = 10
260d 20 c6 2e zg_chi_1  JSR Get_Object_X1   ; X1 object's address -> A0
2610 20 bc 24           JSR Store_Object    ; (A/X) -> (X0) -> Store
2613 a5 42              LDA X0L
2615 f0 03              BEQ zg_chi_f
2617 4c 09 25           JMP Main_True       ; there is an object
261a 4c fd 24 zg_chi_f  JMP Main_False      ; there is no object

              ; *********************************
261d            z_get_parent   ; op1 opcode # $03
              ; *********************************

261d a0 04              LDY #O_PARENT
261f 20 c6 2e           JSR Get_Object_X1   ; (A/X) = parent object
2622 4c bc 24           JMP Store_Object

              ; *********************************
2625            z_inc          ; op1 opcode # $05
              ; *********************************

2625 20 6c 24           JSR Get_Var_X1L
2628 e6 42              INC X0L
262a d0 02              BNE z_inc_1
262c e6 43              INC X0H
262e 4c 9b 24 z_inc_1   JMP Put_Var

              ; *********************************
2631            z_dec          ; op1 opcode # $06
              ; *********************************

2631 20 6c 24           JSR Get_Var_X1L
2634 a5 42              LDA X0L
2636 d0 02              BNE z_dec_1
2638 c6 43              DEC X0H
263a c6 42    z_dec_1   DEC X0L
263c 4c 9b 24           JMP Put_Var

              ; *********************************
263f            z_print_addr   ; op1 opcode # $07
              ; *********************************

263f a4 44              LDY X1L
2641 a6 45              LDX X1H
2643 4c 41 2d           JMP Decode_YX

              ; *********************************
2646            z_remove_obj   ; op1 opcode # $09
              ; *********************************

              ; Remove (unlink) object (X1)


2646 a0 04              LDY #O_PARENT
2648 20 c6 2e           JSR Get_Object_X1
264b a5 3e              LDA A0L
264d 85 40              STA A1L
264f a5 3f              LDA A0H
2651 85 41              STA A1H
2653 b1 3e              LDA (A0L),Y         ; A = parent object
2655 f0 2a              BEQ zro_30          ; -> has no parent
2657 a0 06              LDY #O_CHILD
2659 20 c8 2e           JSR Get_Object_Reg  ; A = child of parent
265c c5 44              CMP X1L             ; is it me ?
265e d0 09              BNE zro_10          ; -> no
2660 a0 05              LDY #O_SIBLING
2662 b1 40              LDA (A1L),Y         ; my sibling
2664 c8                 INY                 ; Y = O_CHILD
2665 91 3e              STA (A0L),Y         ; is parent's cild
2667 d0 0f              BNE zro_20          ; always

2669 a0 05    zro_10    LDY #O_SIBLING      ; A = sibling of parnent's
266b 20 c8 2e           JSR Get_Object_Reg  ; child
266e c5 44              CMP X1L             ; me ?
2670 d0 f7              BNE zro_10          ; -> no
2672 a0 05              LDY #O_SIBLING
2674 b1 40              LDA (A1L),Y         ; my sibling is
2676 91 3e              STA (A0L),Y         ; parent's child sibling

2678 a9 00    zro_20    LDA #0
267a a0 04              LDY #O_PARENT
267c 91 40              STA (A1L),Y         ; I have no parnet
267e c8                 INY                 ; Y = O_SIBLING
267f 91 40              STA (A1L),Y         ; I have no sibling
2681 60       zro_30    RTS ;Size   60 [z_remove_obj]

              ; *********************************
2682            z_print_obj    ; op1 opcode # $0a
              ; *********************************

2682 a5 44              LDA X1L
2684 a6 45              LDX X1H

              ; *************
2686            z_print_obj_A
              ; *************

2686 a0 07              LDY #O_PROP
2688 20 c8 2e           JSR Get_Object_Reg
268b aa                 TAX                 ; object prop high
268c c8                 INY
268d b1 3e              LDA (A0L),Y
268f a8                 TAY                 ; object prop low
2690 c8                 INY
2691 d0 01              BNE zpo_10
2693 e8                 INX
2694 4c 41 2d zpo_10    JMP Decode_YX
2697                    .SIZE ;   17 [z_print_obj_A]

              ; *****************************
2697            z_ret          ; opcode # $ab
              ; *****************************

2697 a5 2d              LDA z_frame_ptr      ; stack ptr = frame ptr
2699 85 2c              STA z_stack_ptr

269b 20 be 25           JSR z_pop
269e 8c 6c 21           STY Z_Arg_Count     ; # of args
26a1 aa                 TAX                 ; # of local vars
26a2 f0 0d              BEQ zret_20         ; -> no locals vars

26a4 20 be 25 zret_10   JSR z_pop           ; pop next local var
26a7 9d 00 3a           STA Lvar_Lo,X       ; and restore it
26aa 98                 TYA
26ab 9d 10 3a           STA Lvar_Hi,X
26ae ca                 DEX
26af d0 f3              BNE zret_10         ; -> loop

26b1 20 be 25 zret_20   JSR z_pop
26b4 8d 6e 21           STA Z_Call_Type
26b7 84 03              STY QI0             ; restore instruction pointer L

26b9 20 be 25           JSR z_pop
26bc 85 04              STA QI1             ; restore instruction pointer M
26be 84 05              STY QI2             ; restore instruction pointer H

26c0 20 be 25           JSR z_pop
26c3 85 2d              STA z_frame_ptr

26c5 ad 6e 21           LDA Z_Call_Type
26c8 d0 07              BNE zret_30         ; -> no return value
26ca a5 44              LDA X1L
26cc a6 45              LDX X1H
26ce 4c be 24           JMP Store_AX
26d1 60       zret_30   RTS ;Size   59 [z_ret]

              ; *********************************
26d2            z_jump         ; op1 opcode # $0c
              ; *********************************

26d2 a5 44              LDA X1L
26d4 a6 45              LDX X1H
26d6 4c 36 25           JMP Branch_XA

              ; *********************************
26d9            z_print_paddr  ; op1 opcode # $0d
              ; *********************************

26d9 a5 44              LDA X1L
26db 0a                 ASL A
26dc 85 08              STA QD0
26de a5 45              LDA X1H
26e0 2a                 ROL A
26e1 85 09              STA QD1
26e3 a9 00              LDA #0
26e5 2a                 ROL A
26e6 85 0a              STA QD2
26e8 4c 49 2d           JMP Decode_Text

              ; *********************************
26eb            z_load         ; op1 opcode # $0e
              ; *********************************

26eb 20 6c 24           JSR Get_Var_X1L
26ee 4c c2 24           JMP Store_X0

              ; *********************************
26f1            z_not          ; op1 opcode # $0f
              ; *********************************
26f1 a5 44              LDA X1L
26f3 49 ff              EOR #$ff
26f5 aa                 TAX
26f6 a5 45              LDA X1H
26f8 49 ff              EOR #$ff

              ; ********
26fa            Store_XA
              ; ********

26fa 86 42              STX X0L
26fc 85 43              STA X0H
26fe 4c c2 24           JMP Store_X0

              ; *********************************
2701            z_je           ; var opcode # $01
              ; *********************************

2701 c6 1c              DEC ParNum
2703 f0 2a              BEQ z_error_9
2705 a5 44              LDA X1L      ; (X1 == X2)
2707 a6 45              LDX X1H
2709 c5 46              CMP X2L
270b d0 04              BNE z_je_1
270d e4 47              CPX X2H
270f f0 18              BEQ z_je_t
2711 c6 1c    z_je_1    DEC ParNum
2713 f0 17              BEQ z_je_f
2715 c5 48              CMP X3L
2717 d0 04              BNE z_je_2
2719 e4 49              CPX X3H
271b f0 0c              BEQ z_je_t
271d c6 1c    z_je_2    DEC ParNum
271f f0 0b              BEQ z_je_f
2721 c5 4a              CMP X4L
2723 d0 07              BNE z_je_f
2725 e4 4b              CPX X4H
2727 d0 03              BNE z_je_f
2729 4c 09 25 z_je_t    JMP Main_True
272c 4c fd 24 z_je_f    JMP Main_False
              z_error_9 ERROR(9)
272f a9 09              LDA #9
2731 4c 6c 2f           JMP INTERNAL_ERROR


              ; *********************************
2734            z_jl           ; var opcode # $02
              ; *********************************

              ; jump true if (X2 < X1)

2734 20 68 25           JSR X1_TO_X0
2737 20 83 25           JSR X2_TO_A0
273a 20 7b 27           JSR CMP_A0_X0
273d b0 03              BCS z_jl_f
273f 4c 09 25           JMP Main_True
2742 4c fd 24 z_jl_f    JMP Main_False

              ; *********************************
2745            z_jg           ; var opcode # $03
              ; *********************************

              ; jump true if (X2 > X1)

2745 20 7a 25           JSR X1_TO_A0
2748 20 71 25           JSR X2_TO_X0
274b 20 7b 27           JSR CMP_A0_X0
274e b0 03              BCS z_jg_f
2750 4c 09 25           JMP Main_True
2753 4c fd 24 z_jg_f    JMP Main_False

              ; *********************************
2756            z_dec_chk      ; var opcode # $04
              ; *********************************

              ; jump true if (--X0 < X2)

2756 20 31 26           JSR z_dec
2759 20 83 25           JSR X2_TO_A0
275c 20 7b 27           JSR CMP_A0_X0
275f b0 03              BCS z_dec_cf
2761 4c 09 25           JMP Main_True
2764 4c fd 24 z_dec_cf  JMP Main_False

              ; *********************************
2767            z_inc_chk      ; var opcode # $05
              ; *********************************

              ; jump true if (++X0 < X2)

2767 20 25 26           JSR z_inc
276a 20 8c 25           JSR X0_TO_A0
276d 20 71 25           JSR X2_TO_X0
2770 20 7b 27           JSR CMP_A0_X0
2773 b0 03              BCS z_inc_cf
2775 4c 09 25           JMP Main_True
2778 4c fd 24 z_inc_cf  JMP Main_False

              ; *********
277b            CMP_A0_X0
              ; *********

              ; Compare A0 with X0
              ; A0 >= X0 : Carry set
              ; A0 <  X0 : Carry clear

277b a5 3f              LDA A0H
277d 45 43              EOR X0H
277f 10 05              BPL cmpax_1 ; equal signs
2781 a5 3f              LDA A0H
2783 c5 43              CMP X0H
2785 60                 RTS ;Size   11 [CMP_A0_X0]
2786 a5 43    cmpax_1   LDA X0H
2788 c5 3f              CMP A0H
278a d0 04              BNE cmpax_2
278c a5 42              LDA X0L
278e c5 3e              CMP A0L
2790 60       cmpax_2   RTS ;Size   22 [CMP_A0_X0]

              ; *********************************
2791            z_jin          ; var opcode # $06
              ; *********************************

2791 a0 04              LDY #O_PARENT
2793 20 c6 2e           JSR Get_Object_X1
2796 c5 46              CMP X2L
2798 d0 03              BNE z_jin_f
279a 4c 09 25           JMP Main_True
279d 4c fd 24 z_jin_f   JMP Main_False

              ; *********************************
27a0            z_test         ; var opcode # $07
              ; *********************************

27a0 a5 46              LDA X2L
27a2 25 44              AND X1L
27a4 c5 46              CMP X2L
27a6 d0 0b              BNE z_test_f
27a8 a5 47              LDA X2H
27aa 25 45              AND X1H
27ac c5 47              CMP X2H
27ae d0 03              BNE z_test_f
27b0 4c 09 25           JMP Main_True
27b3 4c fd 24 z_test_f  JMP Main_False

              ; *********************************
27b6            z_or           ; var opcode # $08
              ; *********************************

27b6 a5 45              LDA X1H
27b8 05 47              ORA X2H
27ba aa                 TAX
27bb a5 44              LDA X1L
27bd 05 46              ORA X2L
27bf 4c be 24           JMP Store_AX

              ; *********************************
27c2            z_and          ; var opcode # $09
              ; *********************************

27c2 a5 45              LDA X1H
27c4 25 47              AND X2H
27c6 aa                 TAX
27c7 a5 44              LDA X1L
27c9 25 46              AND X2L
27cb 4c be 24           JMP Store_AX

              ; *********************************
27ce            z_test_attr    ; var opcode # $0a
              ; *********************************

27ce 20 47 2f           JSR Get_Attr_Addr
27d1 31 3e              AND (A0L),Y
27d3 d0 03              BNE z_teat_t
27d5 4c fd 24           JMP Main_False
27d8 4c 09 25 z_teat_t  JMP Main_True

              ; *********************************
27db            z_set_attr     ; var opcode # $0b
              ; *********************************

27db 20 47 2f           JSR Get_Attr_Addr
27de 11 3e              ORA (A0L),Y
27e0 91 3e              STA (A0L),Y
27e2 60                 RTS ;Size    8 [z_set_attr]

              ; *********************************
27e3            z_clear_attr   ; var opcode # $0c
              ; *********************************

27e3 20 47 2f           JSR Get_Attr_Addr
27e6 49 ff              EOR #$ff
27e8 31 3e              AND (A0L),Y
27ea 91 3e              STA (A0L),Y
27ec 60                 RTS ;Size   10 [z_clear_attr]

              ; *******
27ed            z_store
              ; *******

27ed 20 71 25           JSR X2_TO_X0
27f0 4c 9b 24           JMP Put_Var

              ; *********************************
27f3            z_insert_obj   ; var opcode # $0e
              ; *********************************

              ; insert object (X1) as 1st. child of object (X2)


27f3 20 46 26           JSR z_remove_obj    ; (A1) = object address
27f6 a5 46              LDA X2L
27f8 a0 04              LDY #O_PARENT
27fa 91 40              STA (A1L),Y         ; object's new parent
27fc a0 06              LDY #O_CHILD
27fe 20 c8 2e           JSR Get_Object_Reg  ; get new parent's child
2801 aa                 TAX                 ; X = parent's first child
2802 a5 44              LDA X1L
2804 91 3e              STA (A0L),Y         ; object becomes parent's first child
2806 8a                 TXA
2807 f0 04              BEQ zinob_1         ; parent had no child before
2809 a0 05              LDY #O_SIBLING
280b 91 40              STA (A1L),Y         ; old child becommes sibling
280d 60       zinob_1   RTS ;Size   27 [z_insert_obj]

              ; *********************************
280e            z_loadw        ; var opcode # $0f
              ; *********************************

280e 20 1f 28           JSR Word_Array      ; set &X1[X2]
2811 85 43              STA X0H             ; put value
2813 20 ba 2c           JSR Next_Datum      ; get low  byte
2816 4c c0 24           JMP Store_A_X0H     ; return word

              ; *********************************
2819            z_loadb        ; var opcode # $10
              ; *********************************

2819 20 23 28           JSR Byte_Array      ; set &X1[X2]
281c 4c bc 24           JMP Store_Byte      ; return byte

              ; **********
281f            Word_Array
              ; **********

              ; address QD = base (X1) + index (X2 * 2)

281f 06 46              ASL X2L
2821 26 47              ROL X2H

              ; **********
2823            Byte_Array
              ; **********

              ; address QD = base (X1) + index (X2)

2823 18                 CLC
2824 a5 44              LDA X1L
2826 65 46              ADC X2L
2828 85 08              STA QD0
282a a5 45              LDA X1H
282c 65 47              ADC X2H
282e 85 09              STA QD1
2830 a9 00              LDA #0
2832 2a                 ROL A               ; add carry for address > 64K
2833 85 0a              STA QD2
2835 4c ba 2c           JMP Next_Datum      ; get next byte

              ; ****************************************
2838            z_get_prop_addr ; opcodes 12 32 52 72 d2
              ; ****************************************

              ; get property address of property X2 of object X1
              ; store address of property if found
              ; else store zero

2838 20 36 2f           JSR Find_Property
283b d0 0c              BNE gepa_10
283d a5 3e              LDA A0L
283f e9 fe              SBC #<[Z_HEADER-2]  ; carry from Find_Property
2841 aa                 TAX                 ; set address after ID/size info
2842 a5 3f              LDA A0H
2844 e9 3c              SBC #>[Z_HEADER-2]
2846 4c fa 26           JMP Store_XA
2849 4c ba 24 gepa_10   JMP Store_Zero
284c                    .SIZE ;   20 [z_get_prop_addr]

              ; ***********************************
284c            z_get_prop ; opcodes 11 31 51 71 d1
              ; ***********************************

              ; get property X2 of object X1
              ; if X1 has no property X2 use default value
              ; the routine must access properties of size byte or word only

284c 20 36 2f           JSR Find_Property
284f f0 14              BEQ zgp_10          ; -> found property

2851 ad 0b 3d           LDA h_objects_lo    ; use default
2854 85 3e              STA A0L
2856 ad 0a 3d           LDA h_objects_hi
2859 69 3d              ADC #>Z_HEADER      ; carry is clear
285b 85 3f              STA A0H             ; A0 = address of default properties
285d a5 46              LDA X2L             ; property #
285f e9 00              SBC #0              ; (C=0) : minus 1
2861 0a                 ASL A               ; default properties have word size
2862 a8                 TAY
2863 10 06              BPL zgp_20          ; branch always

2865 20 18 2f zgp_10    JSR Property_Size   ; get size
2868 aa                 TAX                 ; 1: word
2869 f0 04              BEQ zgp_30          ; 0: byte (X=0)

286b b1 3e    zgp_20    LDA (A0L),Y         ; property value high
286d aa                 TAX
286e c8                 INY
286f b1 3e    zgp_30    LDA (A0L),Y         ; property value low
2871 4c be 24           JMP Store_AX
2874                    .SIZE ;   40 [z_get_prop]

              ; ****************************************
2874            z_get_next_prop ; opcodes 13 33 53 73 d3
              ; ****************************************

              ; for X2L == 0 find first property of object X1
              ; otherwise find next property after property X2L

2874 a5 46              LDA X2L
2876 d0 06              BNE zgnp_10         ; -> next prop after X2
2878 20 f6 2e           JSR First_Property
287b 4c bc 24           JMP Store_Byte
287e 20 36 2f zgnp_10   JSR Find_Property
2881 d0 06              BNE zgnp_20         ; -> prop X2 was not found
2883 20 21 2f           JSR Next_Property
2886 4c bc 24           JMP Store_Byte
2889 4c ba 24 zgnp_20   JMP Store_Zero
288c                    .SIZE ;   24 [z_get_next_prop]

              ; *********************************
288c            z_get_prop_len ; opcodes 84 94 a4
              ; *********************************

              ; get length of property, which address is in X1
              ; The length info is stored one byte before (X1)

288c 18                 CLC
288d a5 44              LDA X1L
288f 69 ff              ADC #<[Z_HEADER-1]
2891 85 3e              STA A0L
2893 a5 45              LDA X1H
2895 69 3c              ADC #>[Z_HEADER-1]
2897 85 3f              STA A0H             ; (A0) = (X1) - 1 + Header
2899 a0 00              LDY #0

289b 20 18 2f           JSR Property_Size
289e 18                 CLC
289f 69 01              ADC #1
28a1 4c bc 24           JMP Store_Byte

              ; *******
28a4            Dump_QI
              ; *******
28a4 a9 5b              LDA #'['
28a6 20 ae 32           JSR CHROUT
28a9 a5 02              LDA Z_Code
28ab 20 60 2f           JSR Dump_Byte
28ae a9 3a              LDA #':'
28b0 20 ae 32           JSR CHROUT
28b3 a5 03              LDA QI0
28b5 20 60 2f           JSR Dump_Byte
28b8 a5 04              LDA QI1
28ba 20 60 2f           JSR Dump_Byte
28bd a9 3a              LDA #':'
28bf 20 ae 32           JSR CHROUT
28c2 a5 05              LDA QI2
28c4 20 60 2f           JSR Dump_Byte
28c7 a9 5d              LDA #']'
28c9 20 ae 32           JSR CHROUT
28cc a9 20              LDA #' '
28ce 4c ae 32           JMP CHROUT

              ; *********************************
28d1            z_add          ; var opcode # $14
              ; *********************************

28d1 18                 CLC
28d2 a5 44              LDA X1L
28d4 65 46              ADC X2L
28d6 aa                 TAX
28d7 a5 45              LDA X1H
28d9 65 47              ADC X2H
28db 4c fa 26           JMP Store_XA

              ; *********************************
28de            z_sub          ; var opcode # $15
              ; *********************************

28de 38                 SEC
28df a5 44              LDA X1L
28e1 e5 46              SBC X2L
28e3 aa                 TAX
28e4 a5 45              LDA X1H
28e6 e5 47              SBC X2H
28e8 4c fa 26           JMP Store_XA

              ; *********************************
28eb            z_mul          ; var opcode # $16
              ; *********************************

              ; 16 bit multiplication
              ;
              ; (X2) = (X1) * (X2)
              ;

28eb 20 a1 29           JSR Prep_Mult_Div
28ee 66 10    z_mul_1   ROR LV1
28f0 66 0f              ROR LV0
28f2 66 47              ROR X2H
28f4 66 46              ROR X2L
28f6 90 0d              BCC z_mul_2
28f8 18                 CLC
28f9 a5 44              LDA X1L
28fb 65 0f              ADC LV0
28fd 85 0f              STA LV0
28ff a5 45              LDA X1H
2901 65 10              ADC LV1
2903 85 10              STA LV1
2905 ca       z_mul_2   DEX
2906 10 e6              BPL z_mul_1
2908 a6 46              LDX X2L
290a a5 47              LDA X2H
290c 4c fa 26           JMP Store_XA

              ; *********************************
290f            z_div          ; var opcode # $17
              ; *********************************

290f 20 23 29           JSR Divide_Signed
2912 a6 1e              LDX QuotL
2914 a5 1f              LDA QuotH
2916 4c fa 26           JMP Store_XA

              ; *********************************
2919            z_mod          ; var opcode # $18
              ; *********************************

2919 20 23 29           JSR Divide_Signed
291c a6 20              LDX RemL
291e a5 21              LDA RemH
2920 4c fa 26           JMP Store_XA

              ; *************
2923            Divide_Signed
              ; *************

              ; (Quot) = (X1) / (X2)
              ; (Rem ) = (X1) % (X2)

2923 a5 45              LDA X1H
2925 85 11              STA LV2          ; Rem_Sign
2927 45 47              EOR X2H
2929 85 12              STA LV3          ; Quot_Sign
292b a5 44              LDA X1L
292d 85 1e              STA QuotL
292f a5 45              LDA X1H
2931 85 1f              STA QuotH
2933 10 03              BPL Divi_01
2935 20 61 29           JSR Negate_Quot ; Make Quot positive
2938 a5 46    Divi_01   LDA X2L
293a 85 20              STA RemL
293c a5 47              LDA X2H
293e 85 21              STA RemH
2940 10 03              BPL Divi_02
2942 20 53 29           JSR Divi_04     ; Make Rem positive
2945 20 6f 29 Divi_02   JSR Divide_Unsigned
2948 a5 12              LDA LV3         ; Quot_Sign
294a 10 03              BPL Divi_03
294c 20 61 29           JSR Negate_Quot ; (+/-) or (-/+)
294f a5 11    Divi_03   LDA LV2         ; Rem_Sign
2951 10 0d              BPL Divi_05
2953 a9 00    Divi_04   LDA #0
2955 38                 SEC
2956 e5 20              SBC RemL
2958 85 20              STA RemL
295a a9 00              LDA #0
295c e5 21              SBC RemH
295e 85 21              STA RemH
2960 60       Divi_05   RTS ;Size   62 [Divide_Signed]

              ; ***********
2961            Negate_Quot
              ; ***********

2961 a9 00              LDA #0
2963 38                 SEC
2964 e5 1e              SBC QuotL
2966 85 1e              STA QuotL
2968 a9 00              LDA #0
296a e5 1f              SBC QuotH
296c 85 1f              STA QuotH
296e 60                 RTS ;Size   14 [Negate_Quot]

              ; ***************
296f            Divide_Unsigned
              ; ***************

296f a5 20              LDA RemL
2971 05 21              ORA RemH
2973 f0 2b              BEQ z_error_8
2975 20 a1 29           JSR Prep_Mult_Div
2978 26 1e    DiUn_01   ROL QuotL
297a 26 1f              ROL QuotH
297c 26 0f              ROL LV0
297e 26 10              ROL LV1
2980 a5 0f              LDA LV0
2982 38                 SEC
2983 e5 20              SBC RemL
2985 a8                 TAY
2986 a5 10              LDA LV1
2988 e5 21              SBC RemH
298a 90 04              BCC DiUn_02
298c 84 0f              STY LV0
298e 85 10              STA LV1
2990 ca       DiUn_02   DEX
2991 d0 e5              BNE DiUn_01
2993 26 1e              ROL QuotL
2995 26 1f              ROL QuotH
2997 a5 0f              LDA LV0
2999 85 20              STA RemL
299b a5 10              LDA LV1
299d 85 21              STA RemH
299f 60                 RTS ;Size   49 [Divide_Unsigned]
29a0 00       z_error_8 BRK   ; ERROR(8)  ; Divide by zero

              ; *************
29a1            Prep_Mult_Div
              ; *************

29a1 a2 10              LDX #16
29a3 a9 00              LDA #0
29a5 85 0f              STA LV0
29a7 85 10              STA LV1
29a9 18                 CLC
29aa 60                 RTS ;Size   10 [Prep_Mult_Div]

              ; ************
29ab            z_scan_table
              ; ************

              ; ************
29ab            z_copy_table
              ; ************

              ; Input : X1 = source
              ;         X2 = target
              ;         X3 = size


              ; *************
29ab            z_print_table
              ; *************

              ; Input : X1 = zscii text
              ;         X2 = width
              ;         X3 = height
              ;         X4 = skip

29ab 60       zpt_40    RTS ;Size    1 [z_scan_table]

              ; **********
29ac            z_tokenize
              ; **********

              ;         X1 = text input buffer
              ;         X2 = parse buffer
              ;         X3 = dictionary
              ;         X4 = flag

29ac 00                 BRK

              ; *********************************
29ad            z_check_argc   ;     opcode # $ff
              ; *********************************
29ad 60                 RTS ;Size    1 [z_check_argc]

              ; ***********
29ae            z_log_shift
              ; ***********

              ; **********
29ae            z_set_font
              ; **********

              ; 0 : previous font
              ; 1 : normal   font
              ; 2 : picture  font
              ; 3 : character graphics
              ; 4 : fixed pitch

29ae 4c ba 24           JMP Store_Zero
29b1 01       Z_Active_Font .BYTE 1

              ; ************************************
29b2            z_set_color ; opcodes 1b 3b 5b 7b db
              ; ************************************

              ; Input : X1 = foreground color
              ;         X2 = background color

29b2 20 16 30           JSR Print_Buffer


29b5 60                 RTS ;Size    4 [z_set_color]

              ; *********************************
29b6            z_call_n       ; op2 opcode # $f9
              ; *********************************

29b6 a9 01              LDA #1
29b8 d0 02              BNE call_00         ; always

              ; *********************************
29ba            z_call_s       ; op2 opcode # $00
              ; *********************************

              ; call subroutine (X1) with 0 - 3 arguments
              ; X1 = subroutine address / 2 (word count)
              ; X2 - X4 arguments
              ; If (X1 == 0) push zero and return
              ; Push saved stack pointer & QI0
              ; Push QI1 & QI2
              ; For # of args do:
              ;     Push local variable
              ;     Set default from instruction stream
              ;     Replace from argument if set
              ; Push argument count & count eor'd with $ff

29ba a9 00              LDA #0
29bc 8d 6e 21 call_00   STA Z_Call_Type
29bf a5 44              LDA X1L
29c1 05 45              ORA X1H
29c3 d0 09              BNE call_20
29c5 ad 6e 21           LDA Z_Call_Type
29c8 f0 01              BEQ call_10
29ca 60                 RTS ;Size   17 [z_call_s]
29cb 4c bc 24 call_10   JMP Store_Byte

29ce a5 2d    call_20   LDA z_frame_ptr      ; push frame pointer
29d0 20 a5 24           JSR Push_AY

29d3 a4 05              LDY QI2             ; push instruction pointer H
29d5 a5 04              LDA QI1             ; push instruction pointer M
29d7 20 a5 24           JSR Push_AY

29da a4 03              LDY QI0             ; push instruction pointer L
29dc ad 6e 21           LDA Z_Call_Type     ; push call type
29df 20 a5 24           JSR Push_AY

29e2 a5 44              LDA X1L             ; compute call address
29e4 0a                 ASL A
29e5 85 03              STA QI0
29e7 a5 45              LDA X1H
29e9 2a                 ROL A
29ea 85 04              STA QI1
29ec a9 00              LDA #0
29ee 2a                 ROL A
29ef 85 05              STA QI2             ; IP = (X1) * 2
29f1 20 f0 2c           JSR Next_Instruction
29f4 85 41              STA A1H             ; number of local variables
29f6 f0 2f              BEQ call_50         ; no local variables
29f8 a2 01              LDX #1

29fa bc 10 3a call_30   LDY Lvar_Hi,X
29fd bd 00 3a           LDA Lvar_Lo,X
2a00 20 a5 24           JSR Push_AY         ; push local var of caller
              ;-----------------------------
              ;-----------------------------
2a03 20 f0 2c           JSR Next_Instruction; initialize with default value
2a06 9d 10 3a           STA Lvar_Hi,X
2a09 20 f0 2c           JSR Next_Instruction; from instruction stream
2a0c 9d 00 3a           STA Lvar_Lo,X
              ;-----------------------------
2a0f e4 1c              CPX ParNum          ; index > # of args ?
2a11 b0 0f              BCS call_40         ; -> stay with default value

2a13 8a                 TXA
2a14 0a                 ASL A               ; or replace with arg value
2a15 a8                 TAY
2a16 b9 44 00           LDA X1L,Y
2a19 9d 00 3a           STA Lvar_Lo,X
2a1c b9 45 00           LDA X1H,Y
2a1f 9d 10 3a           STA Lvar_Hi,X
2a22 e4 41    call_40   CPX A1H             ; # of vars to process
2a24 e8                 INX
2a25 90 d3              BCC call_30

2a27 ac 6c 21 call_50   LDY Z_Arg_Count
2a2a a5 41              LDA A1H             ; push # of local vars
2a2c 20 a5 24           JSR Push_AY
2a2f a4 1c              LDY ParNum
2a31 88                 DEY
2a32 8c 6c 21           STY Z_Arg_Count
2a35 a5 2c              LDA z_stack_ptr
2a37 85 2d              STA z_frame_ptr      ; set new frame pointer
2a39 60                 RTS ;Size  128 [z_call_s]

              ; ****************************
2a3a            z_storew       ; X1[X2] = X3
              ; ****************************

2a3a 06 46              ASL X2L
2a3c 26 47              ROL X2H
2a3e 20 53 2a           JSR X1_PLUS_X2_TO_A0
2a41 a5 49              LDA X3H
2a43 91 3e              STA (A0L),Y
2a45 c8                 INY
2a46 a5 48              LDA X3L
2a48 91 3e              STA (A0L),Y
2a4a 60                 RTS ;Size   17 [z_storew]

              ; ****************************
2a4b            z_storeb       ; X1[X2] = X3
              ; ****************************

2a4b 20 53 2a           JSR X1_PLUS_X2_TO_A0
2a4e a5 48              LDA X3L
2a50 91 3e              STA (A0L),Y
2a52 60                 RTS ;Size    8 [z_storeb]

              ; ****************
2a53            X1_PLUS_X2_TO_A0
              ; ****************

2a53 18                 CLC
2a54 a5 46              LDA X2L
2a56 65 44              ADC X1L
2a58 85 3e              STA A0L
2a5a a5 47              LDA X2H
2a5c 65 45              ADC X1H
2a5e 69 3d              ADC #>Z_HEADER
2a60 85 3f              STA A0H
2a62 a0 00              LDY #0
2a64 60                 RTS ;Size   18 [X1_PLUS_X2_TO_A0]

              ; *********************************
2a65            z_put_prop     ; op2 opcode # $03
              ; *********************************

              ; object (X1) property (X2) = X3

2a65 20 36 2f           JSR Find_Property
2a68 d0 13              BNE z_error10
2a6a 20 18 2f           JSR Property_Size
2a6d f0 09              BEQ zpupr_3         ; 0: byte
2a6f c9 01              CMP #1              ; 1: word
2a71 d0 0f              BNE z_error11
2a73 a5 49              LDA X3H
2a75 91 3e              STA (A0L),Y
2a77 c8                 INY
2a78 a5 48    zpupr_3   LDA X3L
2a7a 91 3e              STA (A0L),Y
2a7c 60                 RTS ;Size   24 [z_put_prop]

              z_error10 ERROR(10)
2a7d a9 0a              LDA #10
2a7f 4c 6c 2f           JMP INTERNAL_ERROR

              z_error11 ERROR(11)
2a82 a9 0b              LDA #11
2a84 4c 6c 2f           JMP INTERNAL_ERROR


              ; ************
2a87            z_print_char
              ; ************

2a87 a5 44              LDA X1L
2a89 4c 91 2f           JMP Print_Formatted

              ; ***********
2a8c            z_print_num
              ; ***********

2a8c a6 44              LDX X1L
2a8e a5 45              LDA X1H
2a90 10 0f              BPL zprnu_1
2a92 a9 2d              LDA #'-'
2a94 20 91 2f           JSR Print_Formatted
2a97 38                 SEC
2a98 a9 00              LDA #0
2a9a e5 44              SBC X1L
2a9c aa                 TAX
2a9d a9 00              LDA #0
2a9f e5 45              SBC X1H
2aa1 20 30 30 zprnu_1   JSR Format_XA
2aa4 a2 00              LDX #0
2aa6 b5 2e    zprnu_2   LDA NUMBER,X
2aa8 c9 20              CMP #' '
2aaa f0 07              BEQ zprnu_3
2aac 86 11              STX LV2
2aae 20 91 2f           JSR Print_Formatted
2ab1 a6 11              LDX LV2
2ab3 e8       zprnu_3   INX
2ab4 e0 05              CPX #5
2ab6 90 ee              BCC zprnu_2
2ab8 60                 RTS ;Size   45 [z_print_num]

              ; ********
2ab9            z_random
              ; ********

2ab9 a5 44              LDA X1L
2abb 85 46              STA X2L
2abd a5 45              LDA X1H
2abf 85 47              STA X2H

2ac1 ad 1b d4           LDA Random
2ac4 ae 12 d0           LDX Raster
2ac7 86 44              STX X1L
2ac9 29 7f              AND #$7f
2acb 85 45              STA X1H
2acd 20 23 29           JSR Divide_Signed
2ad0 a5 21              LDA RemH
2ad2 85 43              STA X0H
2ad4 a6 20              LDX RemL
2ad6 e8                 INX
2ad7 86 42              STX X0L
2ad9 d0 02              BNE zrand_1
2adb e6 43              INC X0H
2add 4c c2 24 zrand_1   JMP Store_X0

              ; ******
2ae0            z_push
              ; ******

2ae0 a5 44              LDA X1L
2ae2 a4 45              LDY X1H
2ae4 4c a5 24           JMP Push_AY

              ; ******
2ae7            z_pull
              ; ******
2ae7 20 be 25           JSR z_pop
2aea 4c 9b 24           JMP Put_Var


              ; *************
2aed            z_encode_text
              ; *************
              ; Input : X1 = text buffer
              ;         X2 = length of word
              ;         X3 = start index
              ;         X4 = encoded text


              ; ***********
2aed            z_read_char
              ; ***********
2aed 60                 RTS ;Size    1 [z_read_char]



              ; *************
2aee            Lower_Case_X1
              ; *************
2aee a0 01             LDY #1
2af0 b1 44    LCX1_10  LDA (X1L),Y
2af2 c9 20             CMP #' '
2af4 90 0f             BCC LCX1_Ret
2af6 c9 5b             CMP #'Z'+1
2af8 b0 08             BCS LCX1_20
2afa c9 41             CMP #'A'
2afc 90 04             BCC LCX1_20
2afe 69 1f             ADC #$1f
2b00 91 44             STA (X1L),Y
2b02 c8       LCX1_20  INY
2b03 10 eb             BPL LCX1_10
2b05 60       LCX1_Ret RTS ;Size   24 [Lower_Case_X1]

              ; ******
2b06            z_read
              ; ******

2b06 20 33 31           JSR z_show_status
2b09 20 16 30           JSR Print_Buffer    ; print prompt
2b0c a2 00              LDX #0
2b0e 8e 15 38           STX Tokenizer_Flag
2b11 38                 SEC                 ; c=1 : no parsing
2b12 a6 1c              LDX ParNum
2b14 ca                 DEX
2b15 f0 07              BEQ zread_10        ; -> no parsing
2b17 a5 46              LDA X2L
2b19 05 47              ORA X2H
2b1b f0 01              BEQ zread_10        ; -> no parsing
2b1d 18                 CLC                 ; parse!
2b1e 08       zread_10  PHP                 ; push parse flag
2b1f 18                 CLC
2b20 a5 45              LDA X1H
2b22 69 3d              ADC #>Z_HEADER
2b24 85 45              STA X1H

2b26 20 1f 33           JSR Get_Line_X1     ; read input from user
2b29 20 ee 2a           JSR Lower_Case_X1   ; convert
2b2c 28                 PLP                 ; pull parse flag
2b2d b0 03              BCS zread_20
2b2f 20 33 2b           JSR Parse_Input     ; use standard dictionary
2b32          zread_20

2b32 60                 RTS ;Size   45 [z_read]

              ; ***********
2b33            Parse_Input
              ; ***********

              ; Input   Carry =   set: use X3 as    dictionary address
              ;                 clear: use standard dictionary
              ;         X1    = text input buffer
              ;         X1[0] = buffer size
              ;         X1[1] = string length (ZV > 3)

              ;         X2    = parse buffer  (item size = 4)
              ;         X2[0] = buffer size   (max. 59 items)
              ;         X2[1] = buffer length (items)

              ;         X7L   = item[0] dictionary address high
              ;         X7H   = item[1] dictionary address low
              ;         X8L   = item[2] # of characters
              ;         X8H   = item[3] start of word in text buffer

              ;         X5L   = index to text buffer
              ;         X5H   = size of word (characters)
              ;         X6L   = X2[1] = items parsed
              ;         X6H   = X2[0] = parse buffer limit

2b33 90 06              BCC Parse_05
2b35 a5 48              LDA X3L
2b37 a4 49              LDY X3H
2b39 b0 06              BCS Parse_07
2b3b ad 09 3d Parse_05  LDA h_dictionary_lo
2b3e ac 08 3d           LDY h_dictionary_hi
2b41 85 3b    Parse_07  STA DPL
2b43 84 3c              STY DPH
2b45 18                 CLC
2b46 a5 47              LDA X2H             ; X2 += Header
2b48 69 3d              ADC #>Z_HEADER      ; parse buffer
2b4a 85 47              STA X2H

              ; limit buffer capacity to 59 items

2b4c a0 00              LDY #0
2b4e b1 46              LDA (X2L),Y
2b50 f0 04              BEQ Parse_10        ; -> use default
2b52 c9 3c              CMP #60
2b54 90 04              BCC Parse_15        ; -> OK (1..59)
2b56 a9 3b    Parse_10  LDA #59
2b58 91 46              STA (X2L),Y         ; use default
2b5a 85 4f    Parse_15  STA X6H             ; copy of parse buffer limit
2b5c a0 02              LDY #2              ; Y = 2
2b5e 84 1d              STY Parse_Index     ; start in parse buffer
2b60 88                 DEY                 ; start at 1 for ZV == 3
2b61 84 4c              STY X5L             ; buffer index
2b63 a0 00              LDY #0
2b65 84 4e              STY X6L             ; items parsed
2b67 84 4d              STY X5H             ; word size = 0

              ; parse loop for items (words or delimiters)

2b69 a6 4e    Parse_20  LDX X6L             ; items parsed
2b6b e4 4f              CPX X6H             ; items max.
2b6d b0 06              BCS Parse_25        ; -> exceeded # of words
2b6f a5 18              LDA Chars_Left
2b71 05 4d              ORA X5H             ; word size
2b73 d0 06              BNE Parse_30

2b75 a0 01    Parse_25  LDY #1              ; finish
2b77 8a                 TXA
2b78 91 46              STA (X2L),Y         ; items parsed
2b7a 60                 RTS                 ; exit ;Size   72 [Parse_Input]

              ; continue parsing word

2b7b a5 4d    Parse_30  LDA X5H             ; word size
2b7d c9 06              CMP #WORD_LENGTH
2b7f 90 03              BCC Parse_35        ; -> word length < max
2b81 20 fe 2b           JSR Skip_Surplus    ; skip to next delimiter

2b84 a5 4d    Parse_35  LDA X5H             ; word size
2b86 d0 1e              BNE Parse_45        ; -> search word in dictionary

2b88 a2 05              LDX #WORD_LENGTH-1  ; clear Word buffer
2b8a 9d 00 38 Parse_40  STA TEXT_WORD,X
2b8d ca                 DEX
2b8e 10 fa              BPL Parse_40

              ; not a word, is this character a delimiter ?

2b90 a4 4c              LDY X5L             ; buffer index
2b92 84 53              STY X7L+3           ; X8H = word position
2b94 b1 44              LDA (X1L),Y
2b96 20 19 2c           JSR Sep_Dict        ; dot, comma, quote
2b99 b0 26              BCS Parse_50        ; -> in dictionary
2b9b 20 37 2c           JSR Sep_Std         ; standard separators
2b9e 90 06              BCC Parse_45
2ba0 c6 18              DEC Chars_Left      ; ignore ! or ?
2ba2 e6 4c              INC X5L             ; ++buffer index
2ba4 d0 c3              BNE Parse_20        ; always

2ba6 a5 18    Parse_45  LDA Chars_Left
2ba8 f0 20              BEQ Parse_55
2baa a4 4c              LDY X5L             ; buffer index
2bac b1 44              LDA (X1L),Y
2bae 20 14 2c           JSR Sep_All         ; check all separators
2bb1 b0 17              BCS Parse_55
2bb3 a6 4d              LDX X5H             ; word size
2bb5 9d 00 38           STA TEXT_WORD,X
2bb8 c6 18              DEC Chars_Left
2bba e6 4d              INC X5H             ; ++word size
2bbc e6 4c              INC X5L             ; ++buffer index
2bbe 4c 69 2b           JMP Parse_20

2bc1 8d 00 38 Parse_50  STA TEXT_WORD       ; word is a separator
2bc4 c6 18              DEC Chars_Left
2bc6 e6 4d              INC X5H             ; ++word size
2bc8 e6 4c              INC X5L             ; ++buffer index

              ; start parsing

2bca a5 4d    Parse_55  LDA X5H             ; word size
2bcc f0 9b              BEQ Parse_20        ; -> nothing to parse
2bce 85 52              STA X7L+2           ; X8L = # of letters
2bd0 20 26 2e           JSR Encode          ; convert to packed format
2bd3 20 5a 2c           JSR Dictionary_Search ; result -> X7
2bd6 e6 4e              INC X6L             ; Inc # of items
2bd8 a2 00              LDX #0
2bda 86 4d              STX X5H             ; word size
2bdc a4 1d              LDY Parse_Index
2bde ad 15 38           LDA Tokenizer_Flag  ; 1 : store matches only
2be1 f0 0c              BEQ Parse_60        ; -> store anyhow
2be3 a5 50              LDA X7L
2be5 05 51              ORA X7H
2be7 d0 06              BNE Parse_60
2be9 c8                 INY                 ; skip this entry
2bea c8                 INY                 ; no synonym replacement
2beb c8                 INY
2bec c8                 INY
2bed d0 0a              BNE Parse_70        ; 0 : Dict address hi
2bef b5 50    Parse_60  LDA X7L,X           ; 1 : Dict address lo
2bf1 91 46              STA (X2L),Y         ; 2 : # of letters
2bf3 c8                 INY                 ; 3 : text buffer position
2bf4 e8                 INX
2bf5 e0 04              CPX #4
2bf7 90 f6              BCC Parse_60
2bf9 84 1d    Parse_70  STY Parse_Index     ; Parse_Index += 4
2bfb 4c 69 2b           JMP Parse_20

              ; ************
2bfe            Skip_Surplus
              ; ************

2bfe a5 18              LDA Chars_Left
2c00 f0 11              BEQ SkSu_Ret
2c02 a4 4c    SkSu_10   LDY X5L             ; buffer index
2c04 b1 44              LDA (X1L),Y
2c06 20 14 2c           JSR Sep_All
2c09 b0 08              BCS SkSu_Ret
2c0b e6 4d              INC X5H             ; word size
2c0d e6 4c              INC X5L             ; buffer index
2c0f c6 18              DEC Chars_Left
2c11 d0 ef              BNE SkSu_10
2c13 60       SkSu_Ret  RTS ;Size   22 [Skip_Surplus]

              ; *******
2c14            Sep_All
              ; *******

              ; Input : (A) = character
              ; Output: C=1 is separator, C=0 is not

              ; check standard list and dictionary list

2c14 20 37 2c           JSR Sep_Std
2c17 b0 1d              BCS SeDi_Ret         ; -> is separator

              ; ********
2c19            Sep_Dict
              ; ********

              ; Input : (A) = character
              ; Output: C=1 is separator, C=0 is not

              ; typical list: , . "

2c19 48                 PHA
2c1a 8d 2e 2c           STA SeDi_10+4       ; search character
2c1d ad 09 3d           LDA h_dictionary_lo
2c20 ac 08 3d           LDY h_dictionary_hi
2c23 20 51 2c           JSR Set_Data_AY
2c26 20 ba 2c           JSR Next_Datum
2c29 aa                 TAX                 ; X = # of separators
2c2a 20 ba 2c SeDi_10   JSR Next_Datum
2c2d c9 20              CMP #' '            ; modified !
2c2f f0 04              BEQ SeDi_20         ; yes: return with C=1
2c31 ca                 DEX
2c32 d0 f6              BNE SeDi_10
2c34 18                 CLC                 ; no : return with C=0
2c35 68       SeDi_20   PLA
2c36 60       SeDi_Ret  RTS ;Size   30 [Sep_Dict]

              ; *******
2c37            Sep_Std
              ; *******

              ; Input : (A) = character
              ; Output: C=1 is separator, C=0 is not

              ; standard list: ! ? , . CR SPACE

2c37 a2 05              LDX #?Sep_Std_List-1 ; size of separator list
2c39 dd 66 21 SeSt_10   CMP Sep_Std_List,X
2c3c f0 04              BEQ SeSt_Ret          ; yes: return with C=1
2c3e ca                 DEX
2c3f 10 f8              BPL SeSt_10
2c41 18                 CLC                  ; no : return with C=0
2c42 60       SeSt_Ret  RTS ;Size   12 [Sep_Std]

              ; *********
2c43            Skip_Data
              ; *********

              ; Input : A = # of bytes to skip
              ; Output: QD pointer updated

2c43 18                 CLC
2c44 65 08              ADC QD0
2c46 85 08              STA QD0
2c48 90 06              BCC SkDa_Ret
2c4a e6 09              INC QD1
2c4c d0 02              BNE SkDa_Ret
2c4e e6 0a              INC QD2
2c50 60       SkDa_Ret  RTS ;Size   14 [Skip_Data]

              ; ***********
2c51            Set_Data_AY
              ; ***********

2c51 85 08              STA QD0
2c53 84 09              STY QD1
2c55 a0 00              LDY #0
2c57 84 0a              STY QD2
2c59 60                 RTS ;Size    9 [Set_Data_AY]

              ; *****************
2c5a            Dictionary_Search
              ; *****************

              ; Input : DP = dictionary
              ;         RA = search token

2c5a a5 3b              LDA DPL             ; start of dictionary
2c5c a4 3c              LDY DPH
2c5e 20 51 2c           JSR Set_Data_AY

2c61 20 ba 2c           JSR Next_Datum      ; size of separator list
2c64 20 43 2c           JSR Skip_Data       ; skip list
2c67 20 ba 2c           JSR Next_Datum      ; item size
2c6a 85 3d              STA DPI
2c6c 20 ba 2c           JSR Next_Datum      ; item count hi
2c6f 85 4b              STA X4H
2c71 20 ba 2c           JSR Next_Datum      ; item count lo
2c74 85 4a              STA X4L
2c76 05 4b              ORA X4H
2c78 f0 3b              BEQ DiSe_70         ; -> empty dictionary
2c7a a5 4b              LDA X4H
2c7c 30 0d              BMI DiSe_20         ; -> entries are unsorted

2c7e 38                 SEC
2c7f a9 00              LDA #0              ; positive countdown is sorted
2c81 e5 4a              SBC X4L             ; make count down negative
2c83 85 4a              STA X4L
2c85 a9 00              LDA #0
2c87 e5 4b              SBC X4H
2c89 85 4b              STA X4H

2c8b a5 08    DiSe_20   LDA QD0             ; X7 = address of next item
2c8d 85 51              STA X7H
2c8f a5 09              LDA QD1
2c91 85 50              STA X7L
2c93 a2 00              LDX #0              ; X = token byte index
2c95 20 ba 2c DiSe_30   JSR Next_Datum
2c98 e8                 INX
2c99 dd 08 38           CMP DICT_WORD-1,X
2c9c d0 05              BNE DiSe_50
2c9e e0 04              CPX #V_SIZE
2ca0 90 f3              BCC DiSe_30
2ca2 60                 RTS                 ; -> match ;Size   73 [Dictionary_Search]

2ca3 20 ba 2c DiSe_50   JSR Next_Datum      ; skip to next item
2ca6 e8                 INX
2ca7 e4 3d              CPX DPI             ; item_Size
2ca9 90 f8              BCC DiSe_50

2cab e6 4a              INC X4L             ; count up to zero
2cad d0 dc              BNE DiSe_20
2caf e6 4b              INC X4H
2cb1 d0 d8              BNE DiSe_20

2cb3 a9 00              LDA #0
2cb5 85 51    DiSe_70   STA X7H             ; not found: return (X7) = 0
2cb7 85 50              STA X7L
2cb9 60                 RTS ;Size   96 [Dictionary_Search]

              ; ***********
2cba            Next_Datum
              ; ***********

              ; Input
              ; =====
              ; QD0 = Block pointer
              ; QD1 = Block # lo
              ; QD2 = Block # hi

              ; Output
              ; ======
              ; (A) = Byte from (Block),QD0
              ; Pointer QD incremented

2cba a9 00              LDA #0
2cbc 85 0d              STA RAM_BA
2cbe ab 08 00           LDZ QD0
2cc1 a5 0a              LDA QD2             ; page high
2cc3 d0 0c              BNE NEDA_10         ; > 64 K
2cc5 a5 09              LDA QD1
2cc7 c5 22              CMP Resident_Pages
2cc9 b0 06              BCS NEDA_10         ; -> not resident
2ccb 69 3d              ADC #>Z_HEADER
2ccd 85 0c              STA RAM_HI
2ccf d0 0f              BNE NEDA_50         ; -> always

              ; load if address is beyond resident part
              ; address = (QD1/2) - Resident + $040000

2cd1 38       NEDA_10   SEC
2cd2 a5 09              LDA QD1             ; page low
2cd4 e5 22              SBC Resident_Pages
2cd6 85 0c              STA RAM_HI          ; page low
2cd8 a5 0a              LDA QD2
2cda e9 00              SBC #0              ; page high
2cdc 69 03              ADC #3              ; bank 4 = carry  + 3
2cde 85 0d              STA RAM_BA
2ce0 ea b2 0b NEDA_50   LDA [RAM_LO],Z
2ce3 e6 08              INC QD0
2ce5 d0 06              BNE NEDA_80
2ce7 e6 09              INC QD1
2ce9 d0 02              BNE NEDA_80
2ceb e6 0a              INC QD2
2ced c9 00    NEDA_80   CMP #0              ; set flags
2cef 60                 RTS ;Size   54 [Next_Datum]

              ; ****************
2cf0            Next_Instruction
              ; ****************

              ; Input
              ; =====
              ; QI0 = pointer inside page
              ; QI1 = page # low
              ; QI2 = page # high

              ; Output
              ; ======
              ; (A) = Byte from 24 bit address (QI)
              ; Pointer QI incremented
              ; test if address is inside resident part

2cf0 a9 00              LDA #0
2cf2 85 0d              STA RAM_BA
2cf4 ab 03 00           LDZ QI0
2cf7 a5 05              LDA QI2             ; page high
2cf9 d0 0c              BNE NEIN_10         ; > 64 K
2cfb a5 04              LDA QI1
2cfd c5 22              CMP Resident_Pages
2cff b0 06              BCS NEIN_10         ; -> not resident
2d01 69 3d              ADC #>Z_HEADER
2d03 85 0c              STA RAM_HI
2d05 d0 0f              BNE NEIN_50         ; -> always

              ; load if address is beyond resident part
              ; address = (QI1/2) - Resident + $040000

2d07 38       NEIN_10   SEC
2d08 a5 04              LDA QI1             ; page low
2d0a e5 22              SBC Resident_Pages
2d0c 85 0c              STA RAM_HI          ; page low
2d0e a5 05              LDA QI2
2d10 e9 00              SBC #0              ; page high
2d12 69 03              ADC #3              ; bank 4 = carry  + 3
2d14 85 0d              STA RAM_BA
2d16 ea b2 0b NEIN_50   LDA [RAM_LO],Z
2d19 e6 03              INC QI0
2d1b d0 06              BNE NEIN_80
2d1d e6 04              INC QI1
2d1f d0 02              BNE NEIN_80
2d21 e6 05              INC QI2
2d23 c9 00    NEIN_80   CMP #0              ; set flags
2d25 60                 RTS ;Size   54 [Next_Instruction]

              ;                6789abcdef0123456789abcdef
              ;                --------------------------
              ;         .BYTE "abcdefghijklmnopqrstuvwxyz"
              ;         .BYTE "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
2d26 00 0d 30 ZSCII_2   .BYTE "\0\r0123456789.,!?_#'\"/\\-:()"

2d40 60       Swap_Ret   RTS ;Size   81 [Next_Instruction]

              ; *********
2d41            Decode_YX
              ; *********

              ; print 5bit encoded text from address (Y/X)

2d41 84 08              STY QD0
2d43 86 09              STX QD1
2d45 a9 00              LDA #0
2d47 85 0a              STA QD2

              ; ***********
2d49            Decode_Text
              ; ***********

2d49 a2 00              LDX #0
2d4b 86 07              STX QDH
2d4d a2 00    DeTe_10   LDX #0
2d4f 86 13              STX alphabet
2d51 20 e0 2d DeTe_15   JSR Get_Packed_Char
2d54 b0 ea              BCS Swap_Ret        ; return
2d56 d0 04              BNE DeTe_20
2d58 a9 20              LDA #' '            ; 0 : space
2d5a d0 24              BNE DeTe_40
2d5c c9 04    DeTe_20   CMP #4              ; 1,2,3 : abbreviations
2d5e 90 38              BCC DeTe_55
2d60 c9 06              CMP #6              ; shift 4:capital, 5:numeric
2d62 b0 04              BCS DeTe_25
2d64 85 13              STA alphabet
2d66 90 e9              BCC DeTe_15
2d68 a6 13    DeTe_25   LDX alphabet
2d6a e0 05              CPX #5              ; numeric
2d6c d0 08              BNE DeTe_30
2d6e aa                 TAX
2d6f bd 20 2d           LDA ZSCII_2-6,X
2d72 d0 0c              BNE DeTe_40
2d74 f0 10              BEQ DeTe_50

2d76 e0 04    DeTe_30   CPX #4              ; upper case
2d78 d0 04              BNE DeTe_35
2d7a 69 3a              ADC #$3a            ; carry is set   from CPX
2d7c d0 02              BNE DeTe_40
2d7e 69 5b    DeTe_35   ADC #$5b            ; carry is clear from CPX
2d80 20 91 2f DeTe_40   JSR Print_Formatted
2d83 4c 4d 2d           JMP DeTe_10

2d86 20 e0 2d DeTe_50   JSR Get_Packed_Char ; 10 bit ZSCII
2d89 0a                 ASL A
2d8a 0a                 ASL A
2d8b 0a                 ASL A
2d8c 0a                 ASL A
2d8d 0a                 ASL A
2d8e 85 0f              STA LV0
2d90 20 e0 2d           JSR Get_Packed_Char
2d93 05 0f              ORA LV0
2d95 4c 80 2d           JMP DeTe_40

              ; process code for abbreviations (1,2,3) plus abbr. index

2d98 e9 00    DeTe_55   SBC #0        ; subtract 1 (C=0)
2d9a 0a                 ASL A         ; 0, 1, 2
2d9b 0a                 ASL A
2d9c 0a                 ASL A
2d9d 0a                 ASL A
2d9e 0a                 ASL A
2d9f 0a                 ASL A
2da0 85 11              STA LV2             ; -> $00, $40, $80
2da2 20 e0 2d           JSR Get_Packed_Char
2da5 0a                 ASL A
2da6 18                 CLC
2da7 65 11              ADC LV2             ; add offset
2da9 a8                 TAY                 ; index to abbr. table

              ; push QD2, QD1, QD0, QDH, QDL for recursive call

2daa a2 04              LDX #4
2dac b5 06    DeTe_60   LDA QDL,X
2dae 48                 PHA
2daf ca                 DEX
2db0 10 fa              BPL DeTe_60

              ; recursive call of Decode_Text for abbreviation

2db2 18                 CLC
2db3 ad 19 3d           LDA h_abbreviations_lo
2db6 85 3e              STA A0L
2db8 ad 18 3d           LDA h_abbreviations_hi
2dbb 69 3d              ADC #>Z_HEADER
2dbd 85 3f              STA A0H             ; (A0) = start of abbr. pointer
2dbf c8                 INY
2dc0 b1 3e              LDA (A0L),Y         ; address low
2dc2 0a                 ASL A               ; x 2
2dc3 85 08              STA QD0
2dc5 88                 DEY
2dc6 b1 3e              LDA (A0L),Y         ; address high
2dc8 2a                 ROL A               ; x 2
2dc9 85 09              STA QD1
2dcb a9 00              LDA #0
2dcd 2a                 ROL A               ; high mem
2dce 85 0a              STA QD2

              ; recursive call

2dd0 20 49 2d           JSR Decode_Text

              ; pull QDL, QDH, QD0, QD1, QD2 after recursive call

2dd3 a2 00              LDX #0
2dd5 68       DeTe_65   PLA
2dd6 95 06              STA QDL,X
2dd8 e8                 INX
2dd9 e0 05              CPX #5
2ddb 90 f8              BCC DeTe_65
2ddd 4c 4d 2d           JMP DeTe_10
2de0                    .SIZE ;  151 [Decode_Text]

              ; ***************
2de0            Get_Packed_Char
              ; ***************

2de0 a5 07              LDA QDH
2de2 f0 1c              BEQ GPC_20          ; load next word
2de4 c9 80              CMP #%100 00000     ; EOS flag
2de6 f0 3d              BEQ GPC_Ret         ; return with C=1 : End-Of-String
2de8 24 07              BIT QDH             ; valid 2nd. char ?
2dea 50 0a              BVC GPC_10          ; goto  3rd. cahr
2dec 29 9f              AND #%100 11111     ; save EOS clear bit 6
2dee 09 20              ORA #%001 00000     ; make non zero
2df0 85 07              STA QDH
2df2 29 1f              AND #%000 11111     ; extract data
2df4 18                 CLC
2df5 60                 RTS                 ; return with 2nd. char ;Size   22 [Get_Packed_Char]

2df6 29 80    GPC_10    AND #%100 00000     ; save EOS only
2df8 85 07              STA QDH
2dfa a5 06              LDA QDL
2dfc 29 1f              AND #%000 11111     ; extract 5 bit
2dfe 18                 CLC
2dff 60                 RTS                 ; return with 3rd. char ;Size   32 [Get_Packed_Char]

2e00 20 ba 2c GPC_20    JSR Next_Datum
2e03 aa                 TAX                 ; x = first half
2e04 29 03              AND #%0000 0011     ; extract part of 2nd. char
2e06 85 07              STA QDH
2e08 20 ba 2c           JSR Next_Datum
2e0b 85 06              STA QDL
2e0d 0a                 ASL A
2e0e 26 07              ROL QDH
2e10 0a                 ASL A
2e11 26 07              ROL QDH
2e13 0a                 ASL A
2e14 26 07              ROL QDH
2e16 8a                 TXA
2e17 29 80              AND #%1000 0000     ; save EOS flag
2e19 09 40              ORA #%0100 0000     ; set valid 2nd. char flag
2e1b 05 07              ORA QDH             ; add value
2e1d 85 07              STA QDH             ; save 2nd. char

2e1f 8a                 TXA
2e20 4a                 LSR A
2e21 4a                 LSR A
2e22 29 1f              AND #%000 11111
2e24 18                 CLC
2e25 60       GPC_Ret   RTS                 ; return with 1st. char ;Size   70 [Get_Packed_Char]

              ; ******
2e26            Encode
              ; ******

              ; The encode takes 9 ASCII characters (6 in version 3) and
              ; converts them to packed ZSCII. This routine is called from the parser
              ; only, which already converts uppercase to lowercase letters.
              ; Also the output length is restricted to 6 characters (4 in bersion 3)
              ; because this is the size of a dictionary entry.

              ; Input:  6-9 ASCII charcaters in RB0-RB8
              ; Output: 4-6 Z     characters in RA0-RA5

2e26 a0 00              LDY #0              ; RB[Y]
2e28 a2 00              LDX #0              ; RA[X]
2e2a f0 0b              BEQ Enco_30

2e2c a9 05    Enco_10   LDA #5              ; void (numeric shift)
2e2e 9d 09 38 Enco_20   STA DICT_WORD,X     ; store next ZSCII
2e31 e8                 INX
2e32 e0 06              CPX #WORD_LENGTH
2e34 b0 5e              BCS Enco_70

2e36 c8                 INY
2e37 b9 00 38 Enco_30   LDA TEXT_WORD,Y     ; get next ASCII char
2e3a f0 f0              BEQ Enco_10         ; insert void char

2e3c c9 5b              CMP #'Z'+1          ; (A-Z) upper range
2e3e b0 08              BCS Enco_35
2e40 c9 41              CMP #'A'            ; (A-Z) lower range
2e42 90 04              BCC Enco_35
2e44 e9 3b              SBC #$3b            ; (A-Z) -> $06-$1f
2e46 d0 e6              BNE Enco_20         ; -> loop always

2e48 c9 7b    Enco_35   CMP #'z'+1          ; (a-z) upper range
2e4a b0 08              BCS Enco_40
2e4c c9 61              CMP #'a'            ; (a-z) lower range
2e4e 90 04              BCC Enco_40
2e50 e9 5b              SBC #$5b            ; (a-z) -> $06-$1f
2e52 d0 da              BNE Enco_20         ; -> loop always

2e54 8c 65 21 Enco_40   STY L_Encode_Y
2e57 8d 64 21           STA L_Encode_A
2e5a a9 05              LDA #5
2e5c 9d 09 38           STA DICT_WORD,X
2e5f e8                 INX
2e60 ad 64 21           LDA L_Encode_A
2e63 a0 19              LDY #25
2e65 d9 26 2d Enco_50   CMP ZSCII_2,Y
2e68 f0 22              BEQ Enco_60         ; found ZSCII in table 3
2e6a 88                 DEY
2e6b d0 f8              BNE Enco_50

2e6d a9 06              LDA #6              ; shift to 10 bit char
2e6f 9d 09 38           STA DICT_WORD,X
2e72 e8                 INX
2e73 ad 64 21           LDA L_Encode_A
2e76 4a                 LSR A
2e77 4a                 LSR A
2e78 4a                 LSR A
2e79 4a                 LSR A
2e7a 4a                 LSR A
2e7b 29 03              AND #3
2e7d 9d 09 38           STA DICT_WORD,X
2e80 e8                 INX
2e81 ad 64 21           LDA L_Encode_A
2e84 29 1f              AND #$1f
2e86 ac 65 21           LDY L_Encode_Y
2e89 4c 2e 2e           JMP Enco_20

2e8c 98       Enco_60   TYA                 ; use index to table 3 as value
2e8d ac 65 21           LDY L_Encode_Y      ; restore read index
2e90 69 05              ADC #5              ; add offset 6 (5 + carry)
2e92 d0 9a              BNE Enco_20         ; loop always

2e94 a2 00    Enco_70   LDX #0
2e96 a0 00              LDY #0
2e98 bd 0a 38 Enco_80   LDA DICT_WORD+1,X
2e9b 0a                 ASL A
2e9c 0a                 ASL A
2e9d 0a                 ASL A
2e9e 0a                 ASL A
2e9f 3e 09 38           ROL DICT_WORD,X
2ea2 0a                 ASL A
2ea3 3e 09 38           ROL DICT_WORD,X
2ea6 1d 0b 38           ORA DICT_WORD+2,X
2ea9 48                 PHA
2eaa bd 09 38           LDA DICT_WORD,X
2ead 99 09 38           STA DICT_WORD,Y
2eb0 68                 PLA
2eb1 99 0a 38           STA DICT_WORD+1,Y
2eb4 e8                 INX
2eb5 e8                 INX
2eb6 e8                 INX
2eb7 c8                 INY
2eb8 c8                 INY
2eb9 e0 06              CPX #WORD_LENGTH
2ebb 90 db              BCC Enco_80
2ebd b9 07 38           LDA DICT_WORD-2,Y
2ec0 09 80              ORA #$80            ; end of string flag
2ec2 99 07 38           STA DICT_WORD-2,Y
2ec5 60                 RTS ;Size  160 [Encode]


              ; *************
2ec6            Get_Object_X1
              ; *************

2ec6 a5 44              LDA X1L

              ; **************
2ec8            Get_Object_Reg
              ; **************

              ; Compute address of object

              ; Version 3:
              ; -----------------------------------------
              ; Address = (h_objects) +  53 +  9 * object

              ; Input:  (A)  = object #
              ; Input:  (A)  = object #
              ; Output: (A0) = address, (A) = (A0L),Y
              ; Modifies A and X

2ec8 85 3e              STA A0L
2eca a2 00              LDX #0
2ecc 86 3f              STX A0H
2ece 0a                 ASL A
2ecf 26 3f              ROL A0H ; * 2
2ed1 0a                 ASL A
2ed2 26 3f              ROL A0H ; * 4
2ed4 0a                 ASL A
2ed5 26 3f              ROL A0H ; * 8
2ed7 65 3e              ADC A0L ; * 9       ; carry is clear
2ed9 90 02              BCC GOA_01
2edb e6 3f              INC A0H
2edd 18       GOA_01    CLC
2ede 69 35              ADC #$35            ; * 9 + 53
2ee0 90 02              BCC GOA_02
2ee2 e6 3f              INC A0H
2ee4 18       GOA_02    CLC
2ee5 6d 0b 3d           ADC h_objects_lo    ; *9 + 53 + h_objects
2ee8 85 3e              STA A0L
2eea a5 3f              LDA A0H
2eec 6d 0a 3d           ADC h_objects_hi
2eef 69 3d              ADC #>Z_HEADER
2ef1 85 3f              STA A0H
2ef3 b1 3e              LDA (A0L),Y
2ef5 60                 RTS ;Size   46 [Get_Object_Reg]

              ; **************
2ef6            First_Property
              ; **************

              ; Find address of property table of object (X1)
              ; This routine is V3 and V5 compatible

              ; Input : (X1) = object ID
              ; Output: (A0) = pointer to property table after NAME
              ;          A   = ID of first property
              ;          Y   = 0

2ef6 a0 07              LDY #O_PROP         ; offset to property pointer
2ef8 20 c6 2e           JSR Get_Object_X1
2efb 69 3d              ADC #>Z_HEADER      ; C=0 from Get_Object
2efd aa                 TAX                 ; property pointer high
2efe c8                 INY
2eff b1 3e              LDA (A0L),Y         ; property pointer low
2f01 85 3e              STA A0L
2f03 86 3f              STX A0H             ; (A0) = property table
2f05 a0 00              LDY #0              ; offset to NAME property
2f07 b1 3e              LDA (A0L),Y         ; size of name (words)
2f09 0a                 ASL A               ; size of name (bytes)
2f0a 38                 SEC                 ; add size + 1
2f0b 65 3e              ADC A0L
2f0d 85 3e              STA A0L
2f0f 90 02              BCC FiPr_10
2f11 e6 3f              INC A0H
2f13 b1 3e    FiPr_10   LDA (A0L),Y
2f15 29 1f              AND #P_MASK         ; A = property ID
2f17 60                 RTS ;Size   34 [First_Property]


              ; *************
2f18            Property_Size
              ; *************

2f18 b1 3e              LDA (A0L),Y
2f1a c8                 INY
2f1b 4a                 LSR A
2f1c 4a                 LSR A
2f1d 4a                 LSR A
2f1e 4a                 LSR A
2f1f 4a                 LSR A
2f20 60                 RTS ;Size    9 [Property_Size]

              ; *************
2f21            Next_Property
              ; *************

              ; use size info and point to next property (V3-V5)

              ; Input : (A0) = pointer to current property
              ; Output: (A0) = pointer to next property
              ;            Y = 0

2f21 20 18 2f           JSR Property_Size
2f24 18                 CLC
2f25 69 02              ADC #2
2f27 65 3e              ADC A0L
2f29 85 3e              STA A0L
2f2b 90 02              BCC NePr_20
2f2d e6 3f              INC A0H
2f2f a0 00    NePr_20   LDY #0
2f31 b1 3e              LDA (A0L),Y
2f33 29 1f              AND #P_MASK
2f35 60                 RTS ;Size   21 [Next_Property]

              ; *************
2f36            Find_Property
              ; *************

              ; search for property X2L of object X1

              ; Input : (X1)  = object   ID
              ;         (X2L) = property ID

              ; Output: Z=0 if property was not found
              ;         Z=1 if property was found
              ;             A = 0
              ;             Y = 0
              ;             C = 1 if separate length byte

2f36 20 f6 2e           JSR First_Property  ; -> (A0) and Y = 0
2f39 c5 46    FIPR_10   CMP X2L
2f3b f0 08              BEQ FIPR_20         ; -> match
2f3d 90 07              BCC FIPR_30         ; -> not in table (Z=0)
2f3f 20 21 2f           JSR Next_Property
2f42 4c 39 2f           JMP FIPR_10
2f45 18       FIPR_20   CLC
2f46 60       FIPR_30   RTS                 ; Z=1 succes, Z=0 not found ;Size   17 [Find_Property]

              ; *************
2f47            Get_Attr_Addr
              ; *************

              ; Input
              ; -----
              ; X1L = object #
              ; X2L = flag   #
              ;
              ; Output
              ; ------
              ; (A0L),Y = Address of attribute
              ; (A)     = Attribute mask

2f47 20 c6 2e           JSR Get_Object_X1
2f4a a5 46              LDA X2L      ; flag #
2f4c 4a                 LSR A
2f4d 4a                 LSR A
2f4e 4a                 LSR A
2f4f a8                 TAY          ; offset = flag / 8
2f50 a5 46              LDA X2L
2f52 29 07              AND #7       ; flag mod 8
2f54 aa                 TAX
2f55 a9 80              LDA #$80     ; flag 0
2f57 d0 01              BNE gaa_02
2f59 4a       gaa_01    LSR A
2f5a ca       gaa_02    DEX
2f5b 10 fc              BPL gaa_01
2f5d 60                 RTS ;Size   23 [Get_Attr_Addr]

              ; *********
2f5e            Dump_Code
              ; *********

2f5e a5 02              LDA Z_Code

              ; *********
2f60            Dump_Byte
              ; *********
2f60 20 57 36           JSR ASCII_Hex
2f63 48                 PHA
2f64 8a                 TXA
2f65 20 ae 32           JSR CHROUT
2f68 68                 PLA
2f69 4c ae 32           JMP CHROUT

              ; **************
2f6c            INTERNAL_ERROR
              ; **************

2f6c 20 b2 36           JSR ASCII_TS
2f6f 8e 96 39           STX INTERR+6
2f72 8d 97 39           STA INTERR+7
2f75 20 d8 2f           JSR z_new_line
2f78 20 5e 2f           JSR Dump_Code
                        Print(INTERR)
2f7b a9 90              LDA #<INTERR
2f7d a0 39              LDY #>INTERR
2f7f a2 08              LDX #?INTERR
2f81 20 76 33           JSR PrintText

2f84 4c d7 25           JMP z_quit

              ; ***************
2f87            Print_To_Status
              ; ***************

2f87 99 0a 21           STA Z_STATUS,Y
2f8a c4 29              CPY Last_Col
2f8c b0 02              BCS PTS_01
2f8e e6 2a              INC Status_Col
2f90 60       PTS_01    RTS ;Size   10 [Print_To_Status]


              ; ***************
2f91            Print_Formatted
              ; ***************

2f91 a4 2a              LDY Status_Col
2f93 10 f2              BPL Print_To_Status
2f95 c9 0d              CMP #CR
2f97 f0 3f              BEQ z_new_line
2f99 c9 20              CMP #' '            ; not printable ?
2f9b 90 10              BCC PrFo_25
2f9d a4 16              LDY Charbuf_Ptr
2f9f 99 00 02           STA Charbuf,Y
2fa2 aa                 TAX                 ; X = char
2fa3 18                 CLC
2fa4 98                 TYA
2fa5 65 54              ADC Cursor_Col
2fa7 c5 29              CMP Last_Col
2fa9 b0 03              BCS PrFo_30         ; -> buffer full: print row


2fab e6 16              INC Charbuf_Ptr
2fad 60       PrFo_25   RTS ;Size   29 [Print_Formatted]

2fae a9 20    PrFo_30   LDA #' '        ; scan backwards for blank
2fb0 84 17              STY Charbuf_End
2fb2 d9 00 02 PrFo_35   CMP Charbuf,Y
2fb5 f0 05              BEQ PrFo_40
2fb7 88                 DEY
2fb8 d0 f8              BNE PrFo_35
2fba a4 17              LDY Charbuf_End ; no blanks found
2fbc 84 16    PrFo_40   STY Charbuf_Ptr ; print line before Charbuf_Ptr
2fbe 98                 TYA
2fbf 48                 PHA             ; save line break col
2fc0 20 d8 2f           JSR z_new_line  ; print line
2fc3 68                 PLA
2fc4 aa                 TAX             ; line break col
2fc5 a0 00              LDY #0
2fc7 f0 07              BEQ PrFo_50

2fc9 bd 00 02 PrFo_45   LDA Charbuf,X   ; scroll rest of buffer
2fcc 99 00 02           STA Charbuf,Y
2fcf c8                 INY
2fd0 e4 17    PrFo_50   CPX Charbuf_End
2fd2 e8                 INX
2fd3 90 f4              BCC PrFo_45
2fd5 84 16              STY Charbuf_Ptr
2fd7 60                 RTS ;Size   71 [Print_Formatted]

              ; ************
2fd8            z_new_line
              ; ************

2fd8 e6 2b              INC MORE_Counter
2fda a6 2b              LDX MORE_Counter
2fdc e8                 INX
2fdd e4 28              CPX Last_Row
2fdf 90 2c              BCC Terminate_Buffer
2fe1 20 33 31           JSR z_show_status
2fe4 ad 72 21           LDA Z_Upper_Size
2fe7 85 2b              STA MORE_Counter
2fe9 20 d9 33           JSR Empty_Keyboard_Queue
2fec 20 84 36           JSR Save_Cursor
                        Print(MORE)
2fef a9 90              LDA #<MORE
2ff1 a0 38              LDY #>MORE
2ff3 a2 08              LDX #?MORE
2ff5 20 76 33           JSR PrintText

2ff8 20 e4 ff znl_10    JSR GETIN
2ffb aa                 TAX
2ffc f0 fa              BEQ znl_10
2ffe 20 8c 36           JSR Restore_Cursor
                        Print(BLANKS)
3001 a9 3c              LDA #<BLANKS
3003 a0 39              LDY #>BLANKS
3005 a2 0c              LDX #?BLANKS
3007 20 76 33           JSR PrintText

300a 20 8c 36           JSR Restore_Cursor

              ; ****************
300d            Terminate_Buffer
              ; ****************

300d a6 16              LDX Charbuf_Ptr
300f a9 0d              LDA #CR
3011 9d 00 02           STA Charbuf,X
3014 e6 16              INC Charbuf_Ptr

              ; ************
3016            Print_Buffer
              ; ************

3016 a5 16              LDA Charbuf_Ptr
3018 f0 11              BEQ PrBu_Ret        ; -> nothing to print
301a a2 00              LDX #0
301c bd 00 02 PrBu_10   LDA Charbuf,X       ; flush buffer
301f 20 ae 32           JSR CHROUT
3022 e8                 INX
3023 e4 16              CPX Charbuf_Ptr
3025 90 f5              BCC PrBu_10
3027 a2 00              LDX #0
3029 86 16              STX Charbuf_Ptr
302b 60       PrBu_Ret  RTS ;Size   22 [Print_Buffer]

              ; **************
302c            Format_Integer
              ; **************

302c a6 42              LDX X0L
302e a5 43              LDA X0H
3030 a0 2f    Format_XA LDY #$2f
3032 38                 SEC
3033 c8       FORINT_01 INY
3034 86 0f              STX LV0
3036 85 10              STA LV1
3038 8a                 TXA
3039 e9 10              SBC #<10000
303b aa                 TAX
303c a5 10              LDA LV1
303e e9 27              SBC #>10000
3040 b0 f1              BCS FORINT_01
3042 84 2e              STY NUMBER
3044 a6 0f              LDX LV0
3046 a5 10              LDA LV1
3048 a0 2f              LDY #$2f
304a 38                 SEC
304b c8       FORINT_02 INY
304c 86 0f              STX LV0
304e 85 10              STA LV1
3050 8a                 TXA
3051 e9 e8              SBC #<1000
3053 aa                 TAX
3054 a5 10              LDA LV1
3056 e9 03              SBC #>1000
3058 b0 f1              BCS FORINT_02
305a 84 2f              STY NUMBER+1
305c a6 0f              LDX LV0
305e a5 10              LDA LV1
3060 a0 2f              LDY #$2f
3062 38                 SEC
3063 c8       FORINT_03 INY
3064 86 0f              STX LV0
3066 85 10              STA LV1
3068 8a                 TXA
3069 e9 64              SBC #100
306b aa                 TAX
306c a5 10              LDA LV1
306e e9 00              SBC #0
3070 b0 f1              BCS FORINT_03
3072 84 30              STY NUMBER+2
3074 a5 0f              LDA LV0
3076 a0 2f              LDY #$2f
3078 38                 SEC
3079 c8       FORINT_04 INY
307a e9 0a              SBC #10
307c b0 fb              BCS FORINT_04
307e 84 31              STY NUMBER+3
3080 69 3a              ADC #$3a
3082 85 32              STA NUMBER+4
3084 a2 00              LDX #0
3086 a9 20              LDA #' '
3088 b4 2e    FORINT_05 LDY NUMBER,X
308a c0 30              CPY #'0'
308c d0 07              BNE FORINT_06
308e 95 2e              STA NUMBER,X
3090 e8                 INX
3091 e0 04              CPX #4
3093 90 f3              BCC FORINT_05
3095 60       FORINT_06 RTS ;Size  106 [Format_Integer]

              ; *************
3096            Status_Number
              ; *************

              ; Insert number (score, moves, time) into status line
              ; Imput : (Y) = global variable
              ;         (A) = status line column
              ; Output: (Y) = column after last written char

3096 48                 PHA                 ; save column
3097 98                 TYA
3098 20 8e 24           JSR Get_Global_Var
309b 20 2c 30           JSR Format_Integer
309e 68                 PLA
309f a8                 TAY
30a0 a2 00              LDX #0
30a2 b5 2e    StNu_10   LDA NUMBER,X
30a4 c9 20              CMP #' '
30a6 f0 04              BEQ StNu_20
30a8 99 4b 39           STA SCORE,Y
30ab c8                 INY
30ac e8       StNu_20   INX
30ad e0 05              CPX #5
30af 90 f1              BCC StNu_10
30b1 60                 RTS ;Size   28 [Status_Number]

              ; **********
30b2            Print_Time
              ; **********

30b2 a9 11              LDA #$11            ; hours
30b4 20 8e 24           JSR Get_Global_Var
30b7 20 2c 30           JSR Format_Integer
30ba a0 06              LDY #STIME_COL
30bc a5 31              LDA NUMBER+3
30be 99 68 39           STA STIME,Y
30c1 a5 32              LDA NUMBER+4
30c3 99 69 39           STA STIME+1,Y

30c6 a9 12              LDA #$12            ; minutes
30c8 20 8e 24           JSR Get_Global_Var
30cb 20 2c 30           JSR Format_Integer
30ce a0 06              LDY #STIME_COL
30d0 a5 31              LDA NUMBER+3
30d2 09 30              ORA #'0'            ; blank -> '0'
30d4 99 6b 39           STA STIME+3,Y
30d7 a5 32              LDA NUMBER+4
30d9 99 6c 39           STA STIME+4,Y

30dc 38                 SEC
30dd a5 29              LDA Last_Col
30df e9 0c              SBC #12
30e1 a8                 TAY
30e2 a2 1d              LDX #[STIME - SCORE]
30e4 d0 18              BNE PrSc_20

              ; ***********
30e6            Print_Score
              ; ***********

30e6 a0 11              LDY #$11            ; score
30e8 a9 07              LDA #SCORE_COL
30ea 20 96 30           JSR Status_Number
30ed a0 12              LDY #$12            ; moves
30ef a9 16              LDA #MOVES_COL
30f1 20 96 30           JSR Status_Number

30f4 a0 34              LDY #STAT_SCORE
30f6 24 23              BIT Cols
30f8 70 02              BVS PrSc_10
30fa a0 1c              LDY #28
30fc a2 00    PrSc_10   LDX #0
30fe bd 4b 39 PrSc_20   LDA SCORE,X
3101 99 0a 21           STA Z_STATUS,Y
3104 e8                 INX
3105 c8                 INY
3106 c4 29              CPY Last_Col
3108 90 f4              BCC PrSc_20
310a 60                 RTS ;Size   37 [Print_Score]

              ; ************
310b            Print_Status
              ; ************

310b 20 7c 36           JSR Select_Status_Window
310e a9 07              LDA #YELLOW
3110 8d 86 02           STA COLOR
                        Print(PRE_STATUS)
3113 a9 48              LDA #<PRE_STATUS
3115 a0 39              LDY #>PRE_STATUS
3117 a2 03              LDX #?PRE_STATUS
3119 20 76 33           JSR PrintText

311c a9 0a              LDA #<Z_STATUS
311e a0 21              LDY #>Z_STATUS
3120 a6 29              LDX Last_Col
3122 ca                 DEX                 ; status starts at HOME + 1
3123 20 76 33           JSR PrintText
3126 a9 92              LDA #REVERSE_OFF
3128 20 ae 32           JSR CHROUT
312b a9 01              LDA #WHITE
312d 8d 86 02           STA COLOR
3130 4c 71 36           JMP Select_Text_Window

              ; *************
3133            z_show_status
              ; *************

              ; save cursor coordinates, print to statusline

3133 20 84 36           JSR Save_Cursor

              ; push QD2, QD1, QD0, QDH, QDL

3136 a2 04              LDX #4
3138 b5 06    zss_10    LDA QDL,X
313a 48                 PHA
313b ca                 DEX
313c 10 fa              BPL zss_10

313e e8                 INX                 ; X = 0
313f 86 2a              STX Status_Col      ; switch decoder to status line
3141 a9 10              LDA #$10            ; get location
3143 20 8e 24           JSR Get_Global_Var
3146 a5 42              LDA X0L
3148 a6 43              LDX X0H
314a 20 86 26           JSR z_print_obj_A
314d a9 20              LDA #' '            ; fill rest of line with blanks
314f a6 2a              LDX Status_Col
3151 8e 14 38           STX Location_Length
3154 9d 0a 21 zss_20    STA Z_STATUS,X    ; erase rest of line
3157 e8                 INX
3158 e4 29              CPX Last_Col
315a 90 f8              BCC zss_20

315c a2 ff              LDX #$ff
315e 86 2a              STX Status_Col      ; reset decoder
3160 ad 01 3d           LDA h_config
3163 29 02              AND #2              ; Score_Time_Flag
3165 d0 06              BNE zss_30
3167 20 e6 30           JSR Print_Score
316a 4c 70 31           JMP zss_40
316d 20 b2 30 zss_30    JSR Print_Time
3170 20 0b 31 zss_40    JSR Print_Status

              ; pull QDL, QDH, QD0, QD1, QD2 after recursive call

3173 a2 00              LDX #0
3175 68       zss_90    PLA
3176 95 06              STA QDL,X
3178 e8                 INX
3179 e0 05              CPX #5
317b 90 f8              BCC zss_90

317d 4c 8c 36           JMP Restore_Cursor


              ; **********
3180            Fix_Colors
              ; **********

3180 a2 07              LDX #7
3182 bd a3 39 FiCo_10   LDA FG_Color,X
3185 29 0f              AND #15
3187 9d a3 39           STA FG_Color,X
318a ca                 DEX
318b 10 f5              BPL FiCo_10
318d 60                 RTS ;Size   14 [Fix_Colors]

              ; *********
318e            Cursor_On
              ; *********
318e a4 54              LDY Cursor_Col
3190 a9 a0              LDA #$A0
3192 91 57              STA (Scr_Adr),Y
3194 85 56              STA Cursor_Vis
3196 60                 RTS ;Size    9 [Cursor_On]

              ; **********
3197            Cursor_Off
              ; **********
3197 a4 54              LDY Cursor_Col
3199 a9 20              LDA #' '
319b 91 57              STA (Scr_Adr),Y
319d a9 00              LDA #0
319f 85 56              STA Cursor_Vis
31a1 60                 RTS ;Size   11 [Cursor_Off]

              ; *************
31a2            Get_Character
              ; *************

              ; get a character from keyboard
              ; allow all ASCII characters $20 - $7e
              ; allow control codes CR and DEL
              ; compare char with CR before return

31a2 58                 CLI
31a3 5a                 PHY                 ; save Y
31a4 20 8e 31           JSR Cursor_On
31a7 20 e4 ff GeCh_10   JSR GETIN
31aa f0 fb              BEQ GeCh_10
31ac c9 0d              CMP #CR
31ae f0 26              BEQ GeCh_40         ; allow CR
31b0 c9 14              CMP #DEL
31b2 f0 22              BEQ GeCh_40
31b4 c9 db              CMP #'Z'+$81        ; CBM 'Z'+1
31b6 b0 18              BCS GeCh_30         ; -> not ASCII
31b8 c9 c1              CMP #'A'+$80        ; CBM 'A'
31ba 90 04              BCC GeCh_22
31bc 29 7f              AND #$7f            ; to ASCII
31be d0 16              BNE GeCh_40         ; always

31c0 c9 5b    GeCh_22   CMP #'Z'+1          ; CBM 'z'+1
31c2 b0 0c              BCS GeCh_30         ; -> not ASCII
31c4 c9 41              CMP #'A'            ; CBM 'a'
31c6 90 04              BCC GeCh_24
31c8 69 1f              ADC #$1f            ; to ASCII
31ca d0 0a              BNE GeCh_40         ; always

31cc c9 20    GeCh_24   CMP #' '
31ce b0 06              BCS GeCh_40

31d0 20 c7 33 GeCh_30   JSR Error_Beep      ; unacceptable
31d3 4c a7 31           JMP GeCh_10

31d6 48       GeCh_40   PHA                 ; push char
31d7 20 97 31           JSR Cursor_Off
31da 68                 PLA
31db 7a                 PLY                 ; restore Y
31dc c9 0d              CMP #CR
31de 60                 RTS ;Size   61 [Get_Character]

              ; ******************
31df            Scroll_Main_Window
              ; ******************

31df ae 72 21           LDX Z_Upper_Size
31e2 20 81 21           JSR Set_Screen_Pointer_X
31e5 18                 CLC
31e6 a5 57              LDA Scr_Adr
31e8 65 23              ADC Cols
31ea 85 ac              STA SAP         ; screen low
31ec 85 ae              STA TAP         ; colour low
31ee a5 58              LDA Scr_Adr+1
31f0 69 00              ADC #0
31f2 85 ad              STA SAP+1       ; screen high
31f4 29 07              AND #7
31f6 85 af              STA TAP+1       ; colour high
31f8 a9 f8              LDA #$f8
31fa 85 b0              STA TAP+2       ; colour bank low
31fc a9 0f              LDA #$0f
31fe 85 b1              STA TAP+3       ; colour bank high
3200 ab 29 00 SMW_10    LDZ Last_Col
3203 b2 ac    SMW_20    LDA (SAP),Z
3205 92 57              STA (Scr_Adr),Z
3207 ea b2 ae           LDA [TAP],Z
320a ea 92 59           STA [Col_Adr],Z
320d 3b                 DEZ
320e 10 f3              BPL SMW_20
3210 18                 CLC
3211 a5 ac              LDA SAP
3213 85 57              STA Scr_Adr
3215 85 59              STA Col_Adr
3217 65 23              ADC Cols            ; C=0
3219 85 ac              STA SAP
321b 85 ae              STA TAP
321d a5 ad              LDA SAP+1
321f 85 58              STA Scr_Adr+1
3221 29 07              AND #7
3223 85 5a              STA Col_Adr+1
3225 a5 ad              LDA SAP+1
3227 69 00              ADC #0
3229 85 ad              STA SAP+1
322b 29 07              AND #7
322d 85 af              STA TAP+1
322f e8                 INX
3230 e4 28              CPX Last_Row
3232 90 cc              BCC SMW_10
3234 ab 29 00           LDZ Last_Col
3237 a9 20    SMW_30    LDA #' '
3239 92 57              STA (Scr_Adr),Z
323b a9 01              LDA #1
323d ea 92 59           STA [Col_Adr],Z
3240 3b                 DEZ
3241 10 f4              BPL SMW_30
3243 60                 RTS ;Size  101 [Scroll_Main_Window]

              ; ***********
3244            Home_Screen
              ; ***********

3244 da                 .BYTE $da ; PHX
3245 a2 00              LDX #0
3247 86 54              STX Cursor_Col
3249 20 81 21           JSR Set_Screen_Pointer_X
324c fa                 .BYTE $fa ; PLX
324d 60                 RTS ;Size   10 [Home_Screen]

              ; ************
324e            Clear_Screen
              ; ************

324e da                 PHX
324f 5a                 PHY
3250 a2 00              LDX #0
3252 20 81 21           JSR Set_Screen_Pointer_X
3255 a2 08              LDX #8
3257 a0 00              LDY #0
3259 a9 20              LDA #' '
325b 91 57    ClSc_10   STA (Scr_Adr),Y
325d c8                 INY
325e d0 fb              BNE ClSc_10
3260 e6 58              INC Scr_Adr+1
3262 ca                 DEX
3263 d0 f6              BNE ClSc_10
3265 a2 08              LDX #8
3267 a9 01              LDA #1
3269 a3 00              LDZ #0
326b ea 92 59 ClSc_20   STA [Col_Adr],Z
326e 1b                 INZ
326f d0 fa              BNE ClSc_20
3271 e6 5a              INC Col_Adr+1
3273 ca                 DEX
3274 d0 f5              BNE ClSc_20
3276 86 54              STX Cursor_Col
3278 20 81 21           JSR Set_Screen_Pointer_X
327b 7a                 PLY
327c fa                 PLX
327d 60                 RTS ;Size   48 [Clear_Screen]

              ; *************
327e            Return_Screen
              ; *************
327e da                 PHX
327f 5a                 PHY
3280 a0 00              LDY #0
3282 84 54              STY Cursor_Col
3284 a6 55              LDX Cursor_Row
3286 e8                 INX
3287 e0 19              CPX #ROWS
3289 90 05              BCC ReSc_10
328b 20 df 31           JSR Scroll_Main_Window
328e a2 18              LDX #ROWS-1
3290 86 55    ReSc_10   STX Cursor_Row
3292 20 81 21           JSR Set_Screen_Pointer_X
3295 7a                 PLY
3296 fa                 PLX

              ; ******************
3297            Screen_Reverse_Off
              ; ******************

3297 a9 00              LDA #0
3299 85 c7              STA RVS
329b 60                 RTS ;Size    5 [Screen_Reverse_Off]


              ; *****************
329c            Screen_Reverse_On
              ; *****************

329c a9 80              LDA #$80
329e 85 c7              STA RVS
32a0 60                 RTS ;Size    5 [Screen_Reverse_On]

              ; **********
32a1            Screen_Del
              ; **********
32a1 5a                 .BYTE $5a ; PHY
32a2 a4 54              LDY Cursor_Col
32a4 f0 06              BEQ ScDe_Ret
32a6 a9 20              LDA #' '
32a8 91 57              STA (Scr_Adr),Y
32aa c6 54              DEC Cursor_Col
32ac 7a       ScDe_Ret  .BYTE $7a ; PLY
32ad 60                 RTS ;Size   13 [Screen_Del]

              ; ******
32ae            CHROUT
              ; ******

32ae c9 13              CMP #HOME
32b0 f0 92              BEQ Home_Screen
32b2 c9 93              CMP #CLEAR
32b4 f0 98              BEQ Clear_Screen
32b6 c9 0d              CMP #CR
32b8 f0 c4              BEQ Return_Screen
32ba c9 12              CMP #REVERSE_ON
32bc f0 de              BEQ Screen_Reverse_On
32be c9 92              CMP #REVERSE_OFF
32c0 f0 d5              BEQ Screen_Reverse_Off
32c2 c9 14              CMP #DEL
32c4 f0 db              BEQ Screen_Del

32c6 da                 PHX
32c7 5a                 PHY
32c8 48                 PHA
32c9 ab 54 00           LDZ Cursor_Col
32cc ad 86 02           LDA COLOR
32cf ea 92 59           STA [Col_Adr],Z
32d2 68                 PLA
32d3 29 7f              AND #$7f
32d5 c9 20              CMP #' '
32d7 b0 04              BCS CHRO_20
32d9 a9 2e              LDA #'.'            ; 00-1f -> replace with dot
32db d0 06              BNE CHRO_80
32dd c9 5b    CHRO_20   CMP #'['
32df 90 02              BCC CHRO_80
32e1 29 1f              AND #$1f            ; 5b-7f -> 01-1f

32e3 a4 54    CHRO_80   LDY Cursor_Col
32e5 05 c7              ORA RVS
32e7 91 57              STA (Scr_Adr),Y
32e9 e6 54              INC Cursor_Col
32eb c4 29              CPY Last_Col
32ed 90 03              BCC CHRO_90
32ef 20 7e 32           JSR Return_Screen
32f2 7a       CHRO_90   PLY
32f3 fa                 PLX
32f4 60                 RTS ;Size   71 [CHROUT]

              ; ********
32f5            Got_Line
              ; ********

              ; Get line from keyboard with preset text

32f5 86 44              STX X1L
32f7 84 45              STY X1H
32f9 a0 00              LDY #0
32fb b1 44              LDA (X1L),Y
32fd 85 18              STA Chars_Left      ; maximum edit length
                        MAC_Color(CYAN)
32ff a9 03               LDA #CYAN
3301 8d 86 02            STA COLOR

3304 a0 00              LDY #0
3306 c8       goli_01   INY
3307 b1 44              LDA (X1L),Y
3309 88                 DEY
330a c9 20              CMP #' '
330c 90 25              BCC GLX_20
330e c8                 INY
330f c9 41              CMP #'A'
3311 90 06              BCC goli_10
3313 c9 5b              CMP #'Z'+1
3315 b0 02              BCS goli_10
3317 69 20              ADC #$20
3319 20 ae 32 goli_10   JSR CHROUT
331c 4c 06 33           JMP goli_01

              ; ***********
331f            Get_Line_X1
              ; ***********

331f ad 72 21           LDA Z_Upper_Size
3322 85 2b              STA MORE_Counter
                        MAC_Color(CYAN)
3324 a9 03               LDA #CYAN
3326 8d 86 02            STA COLOR

3329 a0 00              LDY #0
332b b1 44              LDA (X1L),Y
332d 85 18              STA Chars_Left      ; maximum edit length
332f d0 02              BNE GLX_10
3331 c6 18              DEC Chars_Left
3333          GLX_10

              ; receive character from keyboard loop

3333 20 a2 31 GLX_20    JSR Get_Character  ; Y = previous position
3336 f0 2f              BEQ GLX_90         ; -> CR = end of input
3338 c9 14              CMP #DEL
333a d0 10              BNE GLX_40
333c 88                 DEY                ; Y = prev - 1
333d 10 07              BPL GLX_30
333f 20 c7 33           JSR Error_Beep      ; No DEL at 1st. char
3342 c8                 INY                 ; restore Y
3343 4c 33 33           JMP GLX_20

              ; handle DEL character

3346          GLX_30
3346 20 ae 32           JSR CHROUT           ; print DEL
3349 4c 33 33           JMP GLX_20

              ; check edit limit

334c c4 18    GLX_40    CPY Chars_Left      ; edit limit
334e f0 02              BEQ GLX_45
3350 b0 07              BCS GLX_50          ; -> at limit
3352 a6 54    GLX_45    LDX Cursor_Col
3354 e8                 INX
3355 e4 29              CPX Last_Col        ; -> end of line
3357 90 06              BCC GLX_70

3359 20 c7 33 GLX_50    JSR Error_Beep      ; reached max buffer length
335c 4c 33 33           JMP GLX_20

335f c8       GLX_70    INY
3360 91 44              STA (X1L),Y
3362 20 ae 32           JSR CHROUT          ; ASCII print
3365 d0 cc              BNE GLX_20

              ; receivced CR: terminate buffer and return

3367 c8       GLX_90    INY
3368 91 44              STA (X1L),Y         ; store CR
336a 20 ae 32           JSR CHROUT
336d 88                 DEY                 ; don't count CR
336e 84 18              STY Chars_Left      ; edit length
                        MAC_Color(WHITE)
3370 a9 01               LDA #WHITE
3372 8d 86 02            STA COLOR

3375 60                 RTS ;Size   87 [Get_Line_X1]

              ; *********
3376            PrintText
              ; *********

3376 85 c3              STA MEMUSS
3378 84 c4              STY MEMUSS+1
337a a0 00              LDY #0
337c b1 c3    PrTe_A    LDA (MEMUSS),Y
337e f0 07              BEQ PrTe_B
3380 20 ae 32           JSR CHROUT
3383 c8                 INY
3384 ca                 DEX
3385 d0 f5              BNE PrTe_A
3387 60       PrTe_B    RTS ;Size   18 [PrintText]

              ; **************
3388            z_split_window
              ; **************
3388 20 16 30           JSR Print_Buffer
338b a6 44              LDX X1L             ; new size
338d 10 02              BPL split_10
338f a2 00              LDX #0              ; C64 workaround
3391 e0 19    split_10  CPX #ROWS
3393 b0 14              BCS split_err
3395 8e 72 21           STX Z_Upper_Size    ; update size
3398 8e 74 39           STX Win_Top
339b a6 55              LDX Cursor_Row
339d ec 72 21           CPX Z_Upper_Size
33a0 b0 03              BCS split_20
33a2 20 92 21           JSR Window_Home
33a5 20 7f 21 split_20  JSR Set_Screen_Pointer
33a8 60                 RTS ;Size   33 [z_split_window]
33a9 00       split_err BRK

              ; ************
33aa            z_set_window
              ; ************
33aa 60       zsw_ret   RTS ;Size    1 [z_set_window]


              ; *************
33ab            Set_Underline
              ; *************

              ; Input : Z-Flag

33ab f0 02              BEQ Sund_10
33ad a9 fc              LDA #%1111 1100
33af 8d 70 21 Sund_10   STA Z_Underline
33b2 60                 RTS ;Size    8 [Set_Underline]

              ; ****************
33b3            z_set_text_style
              ; ****************

              ; % 76543210 Z                C128
              ;       ^--- 8: fixed pitch   ignore (font is fixed anyway)
              ;        ^-- 4: Italic        Att Bit 5 = underline
              ;         ^- 2: Bold
              ;          ^ 1: Reverse       RVS = $ff
              ;            0: Normal        RVS = 0    Underline = 0

33b3 60                 RTS ;Size    1 [z_set_text_style]

              ; *************
33b4            z_buffer_mode
              ; *************
33b4 60                 RTS ;Size    1 [z_buffer_mode]

              ; ************
33b5            z_set_cursor
              ; ************

              ; Input : X1 = new row position relative to window top
              ;         X2 = new column position

33b5 60                 RTS ;Size    1 [z_set_cursor]

              ; ***************
33b6            z_output_stream
              ; ***************

              ; Input:  (X1L) = stream number  3:  select memory
              ;                               -3:deselect memory
              ;         (X2)  = table address

33b6 60                 RTS ;Size    1 [z_output_stream]

              ; **************
33b7            z_erase_window
              ; **************
33b7 00       zew_20    BRK

              ; ***********
33b8            z_extension
              ; ***********
33b8 00                 BRK

              z_error12 ERROR(12)
33b9 a9 0c              LDA #12
33bb 4c 6c 2f           JMP INTERNAL_ERROR



              ; ***********
33be            z_save_undo
              ; ***********

              ; **************
33be            z_sound_effect
              ; **************

33be a6 44              LDX X1L
33c0 ca                 DEX
33c1 f0 09              BEQ Click
33c3 ca                 DEX
33c4 f0 01              BEQ Error_Beep
33c6 60                 RTS ;Size    9 [z_sound_effect]

              ; **********
33c7            Error_Beep
              ; **********

33c7 a9 07              LDA #7
33c9 4c ae 32           JMP CHROUT

              ; *****
33cc            Click
              ; *****
33cc 60                 RTS ;Size    1 [Click]


              ; ************
33cd            Reset_Screen
              ; ************

33cd 20 4e 32           JSR Clear_Screen
33d0 20 7e 32           JSR Return_Screen
33d3 ad 72 21           LDA Z_Upper_Size
33d6 85 2b              STA MORE_Counter
33d8 60                 RTS ;Size   12 [Reset_Screen]

              ; ********************
33d9            Empty_Keyboard_Queue
              ; ********************

33d9 20 e4 ff           JSR GETIN
33dc d0 fb              BNE Empty_Keyboard_Queue
33de 60                 RTS ;Size    6 [Empty_Keyboard_Queue]

              ; ***********
33df            Decode_Unit
              ; ***********
33df c9 30              CMP #'0'
33e1 b0 03              BCS DeUn_10
33e3 8a                 TXA                 ; one digit
33e4 d0 06              BNE DeUn_20
33e6 e0 31    DeUn_10   CPX #'1'
33e8 d0 02              BNE DeUn_20
33ea 69 09              ADC #9              ; two digits 10 - 15
33ec 29 0f    DeUn_20   AND #15
33ee 60                 RTS ;Size   16 [Decode_Unit]


              ; ***********
33ef            Unit_Dialog
              ; ***********

33ef a2 16              LDX #<Unit_Buf
33f1 a0 38              LDY #>Unit_Buf
33f3 20 f5 32           JSR Got_Line
33f6 ae 17 38           LDX Unit_Text       ; 10
33f9 ad 18 38           LDA Unit_Text+1     ;  1
33fc 20 df 33           JSR Decode_Unit
33ff 8d 35 38           STA Save_Unit
3402 60                 RTS ;Size   20 [Unit_Dialog]

              ; ***************
3403            Wait_for_Return
              ; ***************

3403 a9 36              LDA #<PRESSRET
3405 a0 38              LDY #>PRESSRET
3407 a2 1c              LDX #[SAVEUNIT-PRESSRET]
3409 20 76 33           JSR PrintText
340c 20 d9 33           JSR Empty_Keyboard_Queue
340f 20 a2 31 wfret_10  JSR Get_Character
3412 f0 06              BEQ wfret_99        ; -> CR
3414 20 c7 33           JSR Error_Beep
3417 4c 0f 34           JMP wfret_10
341a 60       wfret_99  RTS ;Size   24 [Wait_for_Return]

              ; **********
341b            Open_Story
              ; **********

341b ad 34 38           LDA Game_Unit       ; open "Z3 *",FA,8
341e 85 ba              STA FA
3420 20 b1 ff           JSR LISTEN
3423 a9 f8              LDA #$f8
3425 20 93 ff           JSR SECOND
3428 a9 5a              LDA #'Z'
342a 20 a8 ff           JSR CIOUT
342d a9 33              LDA #'3'
342f 20 a8 ff           JSR CIOUT
3432 a9 20              LDA #' '
3434 20 a8 ff           JSR CIOUT
3437 a9 2a              LDA #'*'
3439 20 a8 ff           JSR CIOUT
343c 4c ae ff           JMP UNLSN

              ; ************
343f            Close_Story
              ; ************

343f ad 34 38           LDA Game_Unit       ; close #8
3442 85 ba              STA FA
3444 20 b1 ff           JSR LISTEN
3447 a9 e8              LDA #$e8
3449 20 93 ff           JSR SECOND
344c 4c ae ff           JMP UNLSN

              ; ***********
344f            File_Dialog
              ; ***********

344f a2 1a              LDX #<File_Buf
3451 a0 38              LDY #>File_Buf
3453 20 f5 32           JSR Got_Line
3456 a2 14              LDX #20
3458 bd 1b 38 FiDi_10   LDA File_Text,X
345b c9 61              CMP #'a'
345d 90 05              BCC FiDi_20
345f e9 20              SBC #$20
3461 9d 1b 38           STA File_Text,X
3464 ca       FiDi_20   DEX
3465 10 f1              BPL FiDi_10
3467 60                 RTS ;Size   25 [File_Dialog]

              ; ****************
3468            Read_Disk_Status
              ; ****************
3468 8a                 TXA
3469 48                 PHA
346a a5 ba              LDA FA
346c 20 b4 ff           JSR TALK
346f a9 6f              LDA #$6f
3471 20 96 ff           JSR TKSA
3474 a0 00              LDY #0
3476 84 90              STY IO_STATUS
3478 20 a5 ff RDS_10    JSR ACPTR           ; read status
347b a6 90              LDX IO_STATUS
347d d0 0f              BNE RDS_30
347f 99 3c 03           STA DSTATUS,Y
3482 c9 20              CMP #' '
3484 90 05              BCC RDS_20
3486 c8                 INY
3487 c0 28              CPY #40
3489 90 ed              BCC RDS_10
348b 20 ab ff RDS_20    JSR UNTLK           ; close channel
348e a9 0d    RDS_30    LDA #CR
3490 99 3c 03           STA DSTATUS,Y
3493 a9 00              LDA #0
3495 99 3d 03           STA DSTATUS+1,Y
3498 68                 PLA
3499 aa                 TAX
349a ad 3c 03           LDA DSTATUS
349d 29 0f              AND #15             ; return with 1st. value
349f 60                 RTS ;Size   56 [Read_Disk_Status]

              ; **********
34a0            z_ext_save
              ; **********
              ; ******
34a0            z_save
              ; ******

34a0 20 a6 34           JSR Save_Game
34a3 4c 09 25           JMP Main_True

              ; *********
34a6            Save_Game
              ; *********
                        Print(SAVEUNIT)
34a6 a9 52              LDA #<SAVEUNIT
34a8 a0 38              LDY #>SAVEUNIT
34aa a2 0d              LDX #?SAVEUNIT
34ac 20 76 33           JSR PrintText

34af 20 ef 33           JSR Unit_Dialog
                        Print(SAVEFILE)
34b2 a9 5f              LDA #<SAVEFILE
34b4 a0 38              LDY #>SAVEFILE
34b6 a2 0d              LDX #?SAVEFILE
34b8 20 76 33           JSR PrintText

34bb 20 4f 34           JSR File_Dialog

34be ad 02 3d           LDA Z_HEADER+2        ; save config
34c1 8d 20 3a           STA Z_VAR+$20
34c4 ad 03 3d           LDA Z_HEADER+3
34c7 8d 21 3a           STA Z_VAR+$21
34ca a5 2c              LDA z_stack_ptr      ; save Z stack pointer
34cc 8d 22 3a           STA Z_VAR+$22
34cf a5 2d              LDA z_frame_ptr
34d1 8d 24 3a           STA Z_VAR+$24
34d4 a2 02              LDX #2
34d6 b5 03    WG_10     LDA QI0,X           ; save IP
34d8 9d 26 3a           STA Z_VAR+$26,X
34db ca                 DEX
34dc 10 f8              BPL WG_10
34de e8                 INX
34df 86 90              STX IO_STATUS       ; clear status
34e1 ad 35 38           LDA Save_Unit
34e4 85 ba              STA FA
34e6 20 b1 ff           JSR LISTEN          ; open Pos,Device,3
34e9 a9 f3              LDA #$f3
34eb 20 93 ff           JSR SECOND
34ee a0 00              LDY #0
34f0 b9 1b 38 WG_20     LDA File_Text,Y
34f3 c9 20              CMP #' '
34f5 90 06              BCC WG_30
34f7 20 a8 ff           JSR CIOUT
34fa c8                 INY
34fb d0 f3              BNE WG_20

34fd a9 2c    WG_30     LDA #','
34ff 20 a8 ff           JSR CIOUT
3502 a9 57              LDA #'W'
3504 20 a8 ff           JSR CIOUT
3507 20 ae ff           JSR UNLSN
350a a5 90              LDA IO_STATUS
350c d0 32              BNE WG_Err

350e a5 ba              LDA FA
3510 20 b1 ff           JSR LISTEN
3513 a9 63              LDA #$63
3515 20 93 ff           JSR SECOND
3518 a9 3a              LDA #>Z_VAR        ; Save variables & stack
351a 85 0c              STA RAM_HI
351c a2 03              LDX #3
351e 20 52 35 WG_40     JSR Write_Block
3521 a5 90              LDA IO_STATUS
3523 d0 1b              BNE WG_Err
3525 ca                 DEX
3526 d0 f6              BNE WG_40
3528 a9 3d              LDA #>Z_HEADER
352a 85 0c              STA RAM_HI
352c ae 0e 3d           LDX h_dynamic_size_hi
352f e8                 INX                 ; # of blocks
3530 20 52 35 WG_50     JSR Write_Block
3533 a5 90              LDA IO_STATUS
3535 d0 09              BNE WG_Err
3537 ca                 DEX
3538 d0 f6              BNE WG_50
353a 20 ae ff           JSR UNLSN
353d 4c 32 36           JMP Close_Save_File

3540 20 ae ff WG_Err    JSR UNLSN
3543 20 68 34           JSR Read_Disk_Status
                        Print(DSTATUS)
3546 a9 3c              LDA #<DSTATUS
3548 a0 03              LDY #>DSTATUS
354a a2 00              LDX #?DSTATUS
354c 20 76 33           JSR PrintText

354f 4c 32 36           JMP Close_Save_File

              ; ***********
3552            Write_Block
              ; ***********

3552 a0 00              LDY #0
3554 84 42              STY X0L
3556 84 90              STY IO_STATUS
3558 b1 0b    WrBl_10   LDA (RAM_LO),Y
355a 20 a8 ff           JSR CIOUT
355d c8                 INY
355e d0 f8              BNE WrBl_10
3560 e6 0c              INC RAM_HI
3562 a9 2e              LDA #'.'
3564 4c ae 32           JMP CHROUT

              ; *********
3567            z_restore
              ; *********

3567 20 75 35           JSR Restore_Game
356a 4c 09 25           JMP Main_True

              ; *************
356d            z_ext_restore
              ; *************

356d 20 75 35           JSR Restore_Game
3570 a9 02              LDA #2
3572 4c bc 24           JMP Store_Byte

              ; ************
3575            Restore_Game
              ; ************

                        Print(LOADUNIT)
3575 a9 6c              LDA #<LOADUNIT
3577 a0 38              LDY #>LOADUNIT
3579 a2 12              LDX #?LOADUNIT
357b 20 76 33           JSR PrintText

357e 20 ef 33           JSR Unit_Dialog
                        Print(LOADFILE)
3581 a9 7e              LDA #<LOADFILE
3583 a0 38              LDY #>LOADFILE
3585 a2 12              LDX #?LOADFILE
3587 20 76 33           JSR PrintText

358a 20 4f 34           JSR File_Dialog

358d a2 1f              LDX #$1f             ; Save local variables
358f bd 00 3a RG_02     LDA Z_VAR,X          ; to stack bottom -
3592 9d 00 02           STA Charbuf,X        ; if restoring fails
3595 ca                 DEX                  ; we can retrieve them
3596 10 f7              BPL RG_02
3598 ad 35 38           LDA Save_Unit
359b 85 ba              STA FA
359d 20 b1 ff           JSR LISTEN           ; open Pos,Device,3
35a0 a9 f3              LDA #$f3
35a2 20 93 ff           JSR SECOND
35a5 a0 00              LDY #0
35a7 b9 1b 38 RG_10     LDA File_Text,Y
35aa c9 20              CMP #' '
35ac 90 06              BCC RG_20
35ae 20 a8 ff           JSR CIOUT
35b1 c8                 INY
35b2 10 f3              BPL RG_10
35b4 20 ae ff RG_20     JSR UNLSN

              ; Check drive error channel

35b7 ad 35 38           LDA Save_Unit
35ba 85 ba              STA FA
35bc 20 b4 ff           JSR TALK
35bf a9 63              LDA #$63
35c1 20 96 ff           JSR TKSA
35c4 a9 3a              LDA #>Z_VAR
35c6 85 0c              STA RAM_HI
35c8 20 42 36           JSR Read_Block      ; Read Z_VAR
35cb ad 20 3a           LDA Z_VAR+$20
35ce cd 02 3d           CMP Z_HEADER+2      ; Check for
35d1 d0 08              BNE RG_03           ; correct version
35d3 ad 21 3a           LDA Z_VAR+$21
35d6 cd 03 3d           CMP Z_HEADER+3
35d9 f0 11              BEQ RG_05           ; OK -> continue restoring
35db a2 1f    RG_03     LDX #$1f            ; Restore local variables
35dd bd 00 02 RG_04     LDA Charbuf,X       ; and abort restoring
35e0 9d 00 3a           STA Z_VAR,X
35e3 ca                 DEX
35e4 10 f7              BPL RG_04
35e6 20 cd 33           JSR Reset_Screen
35e9 4c fd 24           JMP Main_False

35ec ad 10 3d RG_05     LDA h_flags_hi      ; save flags
35ef 48                 PHA
35f0 ad 11 3d           LDA h_flags_lo
35f3 48                 PHA

35f4 a2 02              LDX #2
35f6 86 3e              STX A0L
35f8 20 42 36 RG_77     JSR Read_Block
35fb c6 3e              DEC A0L
35fd d0 f9              BNE RG_77

35ff a9 3d              LDA #>Z_HEADER
3601 85 0c              STA RAM_HI
3603 ae 0e 3d           LDX h_dynamic_size_hi
3606 e8                 INX                 ; # of blocks
3607 86 3e              STX A0L             ; block counter
3609 20 42 36 RG_06     JSR Read_Block
360c c6 3e              DEC A0L
360e d0 f9              BNE RG_06

3610 68                 PLA                 ; restore flags
3611 8d 11 3d           STA h_flags_lo
3614 68                 PLA
3615 8d 10 3d           STA h_flags_hi

3618 ad 22 3a           LDA Z_VAR+$22
361b 85 2c              STA z_stack_ptr
361d ad 24 3a           LDA Z_VAR+$24
3620 85 2d              STA z_frame_ptr
3622 a2 02              LDX #2
3624 bd 26 3a RG_07     LDA Z_VAR+$26,X
3627 95 03              STA QI0,X
3629 ca                 DEX
362a 10 f8              BPL RG_07
362c 20 ab ff           JSR UNTLK
362f 4c 32 36           JMP Close_Save_File


              ; ***************
3632            Close_Save_File
              ; ***************

3632 ad 35 38           LDA Save_Unit
3635 85 ba              STA FA
3637 20 b1 ff           JSR LISTEN
363a a9 e3              LDA #$e3
363c 20 93 ff           JSR SECOND
363f 4c ae ff           JMP UNLSN

              ; **********
3642            Read_Block
              ; **********

3642 a0 00              LDY #0
3644 84 42              STY X0L
3646 84 90              STY IO_STATUS
3648 20 a5 ff ReBl_10   JSR ACPTR
364b 91 0b              STA (RAM_LO),Y
364d c8                 INY
364e d0 f8              BNE ReBl_10
3650 e6 0c              INC RAM_HI
3652 a9 2e              LDA #'.'
3654 4c ae 32           JMP CHROUT

              ; **********
3657            ASCII_Hex
              ; **********

              ; Output: (X) = High nibble (A) = Low nibble
3657 48                PHA
3658 4a                LSR A
3659 4a                LSR A
365a 4a                LSR A
365b 4a                LSR A
365c 09 30             ORA #'0'
365e c9 3a             CMP #$3a
3660 90 02             BCC Hex_11
3662 69 06             ADC #6
3664 aa       Hex_11   TAX
3665 68                PLA
3666 29 0f             AND #15
3668 09 30             ORA #'0'
366a c9 3a             CMP #$3a
366c 90 02             BCC Hex_12
366e 69 06             ADC #6
3670 60       Hex_12   RTS ;Size   26 [ASCII_Hex]

              ; ******************
3671            Select_Text_Window
              ; ******************

3671 a9 01             LDA #1
3673 8d 74 39          STA Win_Top
3676 a5 28             LDA Last_Row
3678 8d 75 39          STA Win_Bot
367b 60                RTS ;Size   11 [Select_Text_Window]

              ; ********************
367c            Select_Status_Window
              ; ********************

367c a2 00             LDX #0
367e 8e 74 39          STX Win_Top
3681 4c 81 21          JMP Set_Screen_Pointer_X

              ; ***********
3684            Save_Cursor
              ; ***********

3684 20 aa 21           JSR Get_Row_Col
3687 86 25              STX C_Save_Row
3689 84 24              STY C_Save_Col
368b 60                 RTS ;Size    8 [Save_Cursor]


              ; **************
368c            Restore_Cursor
              ; **************

368c a6 25              LDX C_Save_Row
368e a4 24              LDY C_Save_Col
3690 4c 97 21           JMP Set_Row_Col

              ; **************
3693            Erase_Last_Row
              ; **************

3693 a2 18              LDX #ROWS-1
3695 a0 00              LDY #0

              ; *********
3697            Erase_Row
              ; *********

3697 20 81 21           JSR Set_Screen_Pointer_X
369a a9 20              LDA #' '
369c a4 29              LDY Last_Col
369e 91 57    ClRo_10   STA (Scr_Adr),Y
36a0 88                 DEY
36a1 10 fb              BPL ClRo_10
36a3 60                 RTS ;Size   13 [Erase_Row]

              ; ******************
36a4            Erase_Upper_Window
              ; ******************
36a4 a2 00              LDX #0
36a6 a0 00    EUW_10    LDY #0
36a8 20 97 36           JSR Erase_Row
36ab e8                 INX
36ac ec 72 21           CPX Z_Upper_Size
36af 90 f5              BCC EUW_10
36b1 60                 RTS ;Size   14 [Erase_Upper_Window]

              ; ********
36b2            ASCII_TS
              ; ********

              ; Convert binary number in (A) to
              ; two decimal digits in (X) and (A)

36b2 a2 2f              LDX #'0'-1
36b4 38                 SEC
36b5 e8       asts_01   INX
36b6 e9 0a              SBC #10
36b8 b0 fb              BCS asts_01
36ba 69 3a              ADC #$3a
36bc 60                 RTS ;Size   11 [ASCII_TS]

              ; *********
36bd            Load_Page
              ; *********

              ; Read 256 bytes of data from disk and store them in RAM
              ; at the address (RAM_LO) = 32 bit address.
              ; The I/O routines TALK, TKSA, ACPTR, and UNTLK are used
              ; ACPTR sets the STATUS bit 6 ($40) on error

36bd a5 ba              LDA FA
36bf 20 b4 ff           JSR TALK            ; open channel
36c2 a9 68              LDA #$68            ; SA = 8
36c4 20 96 ff           JSR TKSA            ; select channel to disk buffer
36c7 a3 00              LDZ #0
36c9 64 90              STZ IO_STATUS
36cb 20 a5 ff LoPa_10   JSR ACPTR
36ce ea 92 0b           STA [RAM_LO],Z
36d1 a5 90              LDA IO_STATUS
36d3 d0 03              BNE LoPa_20
36d5 1b                 INZ
36d6 d0 f3              BNE LoPa_10
36d8 20 ab ff LoPa_20   JSR UNTLK           ; 256 bytes read, send untalk
36db e6 14              INC Block_Lo        ; increment block number Block_Lo/Hi
36dd d0 02              BNE LoPa_30
36df e6 15              INC Block_Hi
36e1 e6 0c    LoPa_30   INC RAM_HI          ; advance RAM pointer page
36e3 60                 RTS                 ; return OK ;Size   39 [Load_Page]

              ; **********
36e4            Load_Story
              ; **********

              ; Continue story loading in bank 4 and bank 5

36e4 a2 00              LDX #0
36e6 86 0c              STX RAM_HI
36e8 a2 04              LDX #4
36ea 86 0d              STX RAM_BA         ; load at $040000
36ec 20 bd 36 LoSt_10   JSR Load_Page
36ef a5 90              LDA IO_STATUS
36f1 d0 17              BNE LoSt_90        ; end of file
36f3 a5 14              LDA Block_Lo
36f5 29 07              AND #7
36f7 d0 05              BNE LoSt_20
36f9 a9 2e              LDA #'.'
36fb 20 ae 32           JSR CHROUT
36fe a5 0c    LoSt_20   LDA RAM_HI
3700 d0 ea              BNE LoSt_10
3702 e6 0d              INC RAM_BA
3704 a5 0d              LDA RAM_BA
3706 c9 06              CMP #6
3708 90 e2              BCC LoSt_10
370a 4c 3f 34 LoSt_90   JMP Close_Story

              ; *************
370d            Delete_Config
              ; *************

370d ad 34 38           LDA Game_Unit
3710 85 ba              STA FA
3712 20 b1 ff           JSR LISTEN
3715 a9 6f              LDA #$6f
3717 20 93 ff           JSR SECOND
371a a0 00              LDY #0
371c b9 98 39 DeCo_10   LDA ConfigDel,Y
371f 20 a8 ff           JSR CIOUT
3722 c8                 INY
3723 c0 09              CPY #[?ConfigDel + ?Configname]
3725 90 f5              BCC DeCo_10
3727 4c ae ff           JMP UNLSN

              ; ***********
372a            Prep_Config
              ; ***********

372a a9 a3              LDA #<CONFIG_START
372c a0 39              LDY #>CONFIG_START
372e 85 3e              STA A0L
3730 84 3f              STY A0H
3732 a9 aa              LDA #<CONFIG_END
3734 a0 39              LDY #>CONFIG_END
3736 85 40              STA A1L
3738 84 41              STY A1H
373a a9 06              LDA #?Configname
373c a2 9b              LDX #<Configname
373e a0 39              LDY #>Configname
3740 4c bd ff           JMP SETNAM

              ; ***********
3743            Save_Config
              ; ***********

3743 20 0d 37           JSR Delete_Config
3746 20 2a 37           JSR Prep_Config
3749 e6 b7              INC FNLEN           ; add ','
374b e6 b7              INC FNLEN           ; add 'W'
374d 4c b2 37           JMP Save_File

              ; ***********
3750            Load_Config
              ; ***********

3750 20 2a 37           JSR Prep_Config
3753 20 57 37           JSR Load_File
3756 60                 RTS ;Size    7 [Load_Config]


              ; *********
3757            Load_File
              ; *********

              ; Input : (A0) = start address
              ;       : (A1) = end   address
              ;       : SETNAM was called

3757 a5 ba              LDA FA
3759 20 b1 ff           JSR LISTEN
375c a9 f3              LDA #$f3
375e 20 93 ff           JSR SECOND
3761 a0 00              LDY #0
3763 84 90              STY IO_STATUS
3765 b1 bb    LoFi_10   LDA (FNADR),Y
3767 20 a8 ff           JSR CIOUT
376a c8                 INY
376b c4 b7              CPY FNLEN
376d 90 f6              BCC LoFi_10
376f 20 ae ff           JSR UNLSN
3772 a5 ba              LDA FA
3774 20 b4 ff           JSR TALK
3777 a9 63              LDA #$63
3779 20 96 ff           JSR TKSA
377c a0 00              LDY #0
377e 20 a5 ff           JSR ACPTR           ; read first byte
3781 a6 90              LDX IO_STATUS
3783 f0 05              BEQ LoFi_30
3785 d0 1b              BNE LoFi_60

3787 20 a5 ff LoFi_20   JSR ACPTR
378a 91 3e    LoFi_30   STA (A0L),Y
378c a5 90              LDA IO_STATUS
378e d0 12              BNE LoFi_60         ; EOF
3790 e6 3e              INC A0L
3792 d0 02              BNE LoFi_40
3794 e6 3f              INC A0H
3796 a5 3f    LoFi_40   LDA A0H
3798 c5 41              CMP A1H
379a 90 eb              BCC LoFi_20
379c a5 3e              LDA A0L
379e c5 40              CMP A1L
37a0 90 e5              BCC LoFi_20

37a2 20 ab ff LoFi_60   JSR UNTLK           ; close file
37a5 a5 ba              LDA FA
37a7 20 b1 ff           JSR LISTEN
37aa a9 e3              LDA #$e3
37ac 20 93 ff           JSR SECOND
37af 4c ae ff           JMP UNLSN

              ; *********
37b2            Save_File
              ; *********

              ; Input : (A0) = start address
              ;       : (A1) = end   address
              ;       : SETNAM was called

37b2 a5 ba              LDA FA
37b4 20 b1 ff           JSR LISTEN
37b7 a9 f3              LDA #$f3
37b9 20 93 ff           JSR SECOND
37bc a0 00              LDY #0
37be 84 90              STY IO_STATUS
37c0 b1 bb    SaFi_10   LDA (FNADR),Y
37c2 20 a8 ff           JSR CIOUT
37c5 c8                 INY
37c6 c4 b7              CPY FNLEN
37c8 90 f6              BCC SaFi_10
37ca 20 ae ff           JSR UNLSN

              ; TODO: check error channel

37cd a5 ba              LDA FA
37cf 20 b1 ff           JSR LISTEN
37d2 a9 63              LDA #$63
37d4 20 93 ff           JSR SECOND
37d7 a0 00              LDY #0
37d9 b1 3e    SaFi_20   LDA (A0L),Y
37db 20 a8 ff           JSR CIOUT
37de e6 3e              INC A0L
37e0 d0 02              BNE SaFi_40
37e2 e6 3f              INC A0H
37e4 a5 3f    SaFi_40   LDA A0H
37e6 c5 41              CMP A1H
37e8 90 ef              BCC SaFi_20
37ea a5 3e              LDA A0L
37ec c5 40              CMP A1L
37ee 90 e9              BCC SaFi_20

37f0 20 ae ff SaFi_60   JSR UNLSN           ; close file
37f3 a5 ba              LDA FA
37f5 20 b1 ff           JSR LISTEN
37f8 a9 e3              LDA #$e3
37fa 20 93 ff           JSR SECOND
37fd 4c ae ff           JMP UNLSN

3800 00 00 00 TEXT_WORD       .FILL  9 (0) ; unpacked ASCII word ; 9 bytes
3809 00 00 00 DICT_WORD       .FILL 11 (0) ;   packed ZSCII word ; 11 bytes

3814 00       Location_Length .BYTE 0
3815 00       Tokenizer_Flag  .BYTE 0

              ; ------- data for unit dialog --------
3816 02       Unit_Buf        .BYTE 2 ; input length
3817 30 38 00 Unit_Text       .BYTE "08",0
              ; ------- data for file name dialog----
381a 14       File_Buf        .BYTE 20 ; input length
381b 73 61 76 File_Text .BYTE "savename",0
3824 00 00 00           .FILL 12 (0) ; 12 bytes
              ; ------- story signature ------------
3830 5a 33 20 Storyname .BYTE "Z3 *"
3834 08       Game_Unit .BYTE 8
3835 09       Save_Unit .BYTE 9

3836 0d 50 72 PRESSRET  .BYTE "\rPress <RETURN> to continue."
3852 53 61 76 SAVEUNIT  .BYTE "Save to unit:"
385f 53 61 76 SAVEFILE  .BYTE "Save to file:"
386c 52 65 73 LOADUNIT  .BYTE "Restore from unit:"
387e 52 65 73 LOADFILE  .BYTE "Restore from file:"
3890 12 3c 4d MORE      .BYTE REVERSE_ON,"<MORE>",REVERSE_OFF
3898 45 6e 64 EOS       .BYTE "End of session - press any key"
38b6 4e 4f 20 NOSTORY   .BYTE "NO Z3 STORY"


38c1 93 42 49 BITSHIFTER .BYTE CLEAR,"BIT SHIFTER 06-AUG-2020\r"
38da 0d       InfoClr    .BYTE CR
38db 50 72 6f InfoPro    .BYTE 'Program: 0001 - 00FF    0 Pages\r'
38fb 42 61 6e InfoSta    .BYTE 'Bank  0: 0000 - 00FF    0 Pages\r'
391b 53 74 6f InfoSto    .BYTE 'Story  :        Size    0 Pages\r',0
393c          InfoEnd

393c 20 20 20 BLANKS    .BYTE "            "

3948 13 12 20 PRE_STATUS .BYTE HOME,REVERSE_ON," "
0034          STAT_SCORE = 52
0016          MOVES_COL  = 22

394b 53 63 6f SCORE      .BYTE "Score: 0       Moves: 0     ",0
3968 54 69 6d STIME      .BYTE "Time: 00:00",0
0007          SCORE_COL  =  7
0006          STIME_COL  =  6

3974 00       Win_Top    .BYTE  0
3975 18       Win_Bot    .BYTE 24

3976 0d 52 41 RAMB_0    .BYTE '\rRAM Bank 0: '
3983 0d 52 41 RAMB_1    .BYTE '\rRAM Bank 1: '

3990 45 72 72 INTERR    .BYTE "Error 00"

3998 53 30 3a ConfigDel  .BYTE "S0:"        ; prefix for scratch command
399b 43 4f 4e Configname .BYTE "CONFIG"
39a1 2c 57    ConfigWri  .BYTE ",W"         ; postfix for write command


39a3          CONFIG_START
39a3 01       FG_Color   .BYTE WHITE        ; f1 133
39a4 01       TI_Color   .BYTE WHITE        ; f3 134
39a5 06       BO_Color   .BYTE BLUE         ; f5 135
39a6 06       BG_Color   .BYTE BLUE         ; f2 137
39a7 02       TB_Color   .BYTE RED          ; f4 138
39a8 00                  .BYTE 0            ; f6 139
39a9 00                  .BYTE 0            ; f8 140
39aa          CONFIG_END

              ; ***
39aa            EOP
              ; ***



  793 Symbols
-------------
BLACK                          $0000    27
R6510                          $0001   174D   387
WHITE                          $0001    28D  3765   4171   5039   5040
Z_Code                         $0002    70D   520    678    828    869
                                       899    919    924   1138   2088
                                      3474
RED                            $0002    29D  5043
QI0                            $0003    71D   785   1353   1354   1442
                                      1449   1678   2092   2378   2384
                                      2994   3016   4468   4637
ZV                             $0003     8D   694
CYAN                           $0003    30D  4098   4120
O_PARENT                       $0004   285D  1561   1601   1628   1847
                                      1936
V_SIZE                         $0004   291D  2910
QI1                            $0004    72D   783   1356   1357   1681
                                      2094   2375   2387   2997   3008
                                      3018
PURPLE                         $0004    31
QI2                            $0005    73D  1362   1363   1682   2098
                                      2374   2390   2995   3011   3020
GREEN                          $0005    32
O_SIBLING                      $0005   286D  1542   1613   1619   1623
                                      1945
BLUE                           $0006    33D  5041   5042
STIME_COL                      $0006  5023D  3703   3712
WORD_LENGTH                    $0006   292D  2700   2707   3217   3293
O_CHILD                        $0006   287D  1549   1609   1938
QDL                            $0006    77D  3108   3141   3167   3177
                                      3780   3814
YELLOW                         $0007    34D  3755
SCORE_COL                      $0007  5022D  3731
O_PROP                         $0007   288D  1645   3360
QDH                            $0007    78D  3048   3152   3156   3160
                                      3166   3175   3179   3181   3183
                                      3187   3188
QD0                            $0008    79D  1443   1448   1708   1983
                                      2851   2852   2863   2901   2946
                                      2968   3038   3124
BACKSPACE                      $0008    48
ORANGE                         $0008    35
QD1                            $0009    80D  1711   1986   2854   2864
                                      2903   2949   2960   2970   3039
                                      3128
O_SIZE                         $0009   289
BROWN                          $0009    36
TAB                            $0009    49
QD2                            $000a    81D  1714   1989   2856   2866
                                      2947   2963   2972   3041   3131
PINK                           $000a    37
DARKGREY                       $000b    38
RAM_LO/RAM_HI                  $000b    85D  2967   3015   4531y  4663y
                                      4790     86D   520    691   2953
                                      2962   3001   3010   4500   4508
                                      4535   4590   4618   4666   4799
                                      4809   4820
GREY                           $000c    39
CR                             $000d    50D  3515   3584   3867   3895
                                      4051   4431   5008
LT_GREEN                       $000d    40
RAM_BA                         $000d    87D  2945   2966   2993   3014
                                      4811   4822   4823
LT_BLUE                        $000e    41
LV0                            $000f    91D  2140   2146   2147   2236
                                      2238   2245   2251   2264   3084
                                      3086   3613   3622   3627   3636
                                      3641   3650
LT_GREY                        $000f    42
LV1                            $0010    92D  2139   2149   2150   2237
                                      2242   2246   2253   2265   3614
                                      3618   3623   3628   3632   3637
                                      3642   3646
LV2                            $0011    93D  2183   2202   2517   2519
                                      3098   3102
CURSOR_DOWN                    $0011    51
LV3                            $0012    94D  2185   2199
REVERSE_ON                     $0012    52D  4053   5002   5016
HOME                           $0013    53D  4047   5016
alphabet                       $0013    96D  3050   3060   3062
Block_Lo                       $0014    97D   770    775   4796   4815
DEL                            $0014    54D  3869   4057   4132
Block_Hi                       $0015    98D  4798
MOVES_COL                      $0016  5018D  3734
Charbuf_Ptr                    $0016    99D  3519   3529   3539   3554
                                      3583   3586   3592   3598   3601
Charbuf_End                    $0017   100D  3533   3538   3551
Chars_Left                     $0018   101D  2688   2721   2725   2733
                                      2739   2777   2785   4097   4123
                                      4125   4148   4170
Info_Pages                     $0019   102D   606    745    751
ROWS                           $0019   173D   564    566    644    727
                                      4005   4008   4196   4733
OP_Type                        $001a   103D  1096   1098   1132
ESC                            $001b    55
ParNum                         $001c   104D   826   1108   1109   1135
                                      1745   1753   1759   2406   2423
                                      2606
CURSOR_RIGHT                   $001d    56
Parse_Index                    $001d   105D  2676   2753   2770
QuotL                          $001e   106D  2162   2187   2219   2220
                                      2234   2249
P_MASK                         $001f   290D  3377   3413
QuotH                          $001f   107D  2163   2189   2222   2223
                                      2235   2250
RemL                           $0020   108D  2171   2193   2206   2207
                                      2230   2240   2252   2542
RemH                           $0021   109D  2172   2195   2209   2210
                                      2231   2243   2254   2540
Resident_Pages                 $0022   110D   705    750    776   2950
                                      2961   2998   3009
Cols                           $0023   111D   567    635    738   3738
                                      3906   3929
C_Save_Col                     $0024   112D  4717   4726
C_Save_Row                     $0025   113D  4716   4725
C_Save_Adr                     $0026   114
Last_Row                       $0028   115D   645   3564   3942   4699
Last_Col                       $0029   116D   569    637    740   3503
                                      3525   3720   3746   3760   3797
                                      3918   3944   4080   4153   4742
Status_Col                     $002a   117D   688   3505   3513   3786
                                      3793   3801
MORE_Counter                   $002b   118D  3561   3562   3568   4119
                                      4310
z_stack_ptr                    $002c   119D   686   1186   1205   1209
                                      1486   1488   1662   2426   4463
                                      4632
z_frame_ptr                    $002d   120D   687   1661   1685   2371
                                      2427   4465   4634
NUMBER                         $002e   121D   618   2514   3621   3635
                                      3649   3656   3658   3661   3664
                                      3686   3704   3706   3713   3716
P0L                            $0033   122
P0H                            $0034   123
STAT_SCORE                     $0034  5017D  3737
P1L                            $0035   124
P1H                            $0036   125
P2L                            $0037   126
P2H                            $0038   127
P3L                            $0039   128
P3H                            $003a   129
DPL                            $003b   130D  2658   2876
DPH                            $003c   131D  2659   2877
DPI                            $003d   132D  2883   2916
A0L/A0H                        $003e   133D   356    363y  1173y  1176y
                                      1260y  1263y  1283   1410   1420
                                      1430   1603   1607y  1616y  1625y
                                      1649y  1840   1896y  1906y  1907y
                                      1916y  1917y  1942y  2002   2023
                                      2037y  2040y  2072   2438y  2441y
                                      2450y  2460   2481y  2484y  3117
                                      3122y  3126y  3322   3331   3340
                                      3345y  3365y  3366   3369y  3372
                                      3373   3376y  3385y  3407   3408
                                      3412y  4612   4614   4621   4623
                                      4851   4912y  4915   4921   4960y
                                      4962   4968    134D   359    367
                                      1279   1281   1284   1287   1412
                                      1422   1432   1605   1830   1833
                                      1837   2005   2026   2075   2464
                                      3120   3324   3326   3328   3330
                                      3333   3337   3341   3344   3367
                                      3375   3410   4852   4917   4918
                                      4964   4965
A1L/A1H                        $0040   135D   357    364y  1604   1614y
                                      1624y  1629y  1631y  1937y  1946y
                                      4855   4922   4969    136D   361
                                       368    369   1606   2392   2416
                                      2421   4856   4919   4966
X0L                            $0042   137D   607    657    660    664
                                      1104   1112   1113   1165   1177
                                      1192   1236   1248   1262   1390
                                      1400   1429   1495   1552   1570
                                      1580   1583   1737   1839   2544
                                      3608   3789   4529   4660
X0H                            $0043   138D   605    655    661    666
                                      1102   1114   1115   1163   1174
                                      1193   1230   1250   1259   1331
                                      1333   1347   1359   1392   1402
                                      1431   1494   1572   1582   1738
                                      1831   1834   1836   1954   2541
                                      2546   3609   3790
X1L/X1H                        $0044   139D  1146   1184   1371   1381
                                      1389   1409   1474   1532   1590
                                      1611   1621   1638   1689   1698
                                      1706   1727   1747   1859   1876
                                      1887   1941   1981   2070   2110
                                      2122   2145   2186   2363   2382
                                      2412   2459   2494   2501   2508
                                      2529   2536   2553   2584y  2592y
                                      2716y  2728y  2780y  3305   4093
                                      4096y  4101y  4122y  4160y  4167y
                                      4193   4283    140D  1373   1382
                                      1391   1411   1475   1533   1591
                                      1639   1690   1699   1709   1730
                                      1748   1863   1873   1884   1984
                                      2073   2113   2125   2148   2182
                                      2188   2364   2385   2414   2462
                                      2502   2511   2531   2538   2554
                                      2615   2617   4094
X2L/X2H                        $0046   141D  1399   1419   1749   1849
                                      1858   1860   1877   1888   1935
                                      1971   1982   2027   2051   2111
                                      2123   2142   2153   2192   2434
                                      2458   2530   2609   2668y  2673y
                                      2694y  2765y  3432   3455   3460
                                       142D  1401   1421   1751   1862
                                      1864   1874   1885   1972   1985
                                      2114   2126   2141   2154   2184
                                      2194   2435   2461   2532   2610
                                      2661   2663
X3L                            $0048   143D  1755   2440   2449   2483
                                      2653
X3H                            $0049   144D  1757   2437   2480   2654
X4L                            $004a   145D  1761   2887   2895   2896
                                      2919
X4H                            $004b   146D  1763   2885   2888   2890
                                      2898   2899   2921
X5L                            $004c   147D  2678   2714   2722   2727
                                      2735   2741   2779   2784
X5H                            $004d   148D  2681   2689   2699   2704
                                      2731   2734   2740   2745   2752
                                      2783
X6L                            $004e   149D  2680   2685   2750
X6H                            $004f   150D  2674   2686
X7L                            $0050   151D  2715   2747   2756   2764
                                      2904   2926
COLS                           $0050   172D   452    453    454    455
                                       456    457    458    459    460
                                       461    462    463    464    465
                                       466    467    468    469    470
                                       471    472    473    474    475
                                       478    479    480    481    482
                                       483    484    485    486    487
                                       488    489    490    491    492
                                       493    494    495    496    497
                                       498    499    500    501    634
                                       706    725    737
X7H                            $0051   152D  2757   2902   2925
X8L                            $0052   153
X8H                            $0053   154
Cursor_Col                     $0054   156D   572    583   3524   3837
                                      3846   3959   3990   4002   4035
                                      4039   4063   4076   4079   4151
Cursor_Row                     $0055   157D   532    571    582   4003
                                      4009   4200
Cursor_Vis                     $0056   158D  3840   3850
Scr_Adr                        $0057   159D   539    542   3839y  3848y
                                      3905   3909   3920   3927   3933
                                      3946   3975y  3978   4038y  4078y
                                      4743
Col_Adr                        $0059   160D   540    544    631    633
                                      3922   3928   3935   3948   3984
                                      3987   4065
ZP_END                         $005d   162D   681
KEY_F1                         $0085    14
KEY_F3                         $0086    15
KEY_F5                         $0087    16
KEY_F7                         $0088    17
KEY_F2                         $0089    18
KEY_F4                         $008a    19
KEY_F6                         $008b    20
KEY_F8                         $008c    21
IO_STATUS                      $0090   175D   768   4420   4422   4473
                                      4492   4503   4512   4530   4661
                                      4788   4791   4813   4894   4907
                                      4913   4945
CURSOR_UP                      $0091    58
REVERSE_OFF                    $0092    59D  3763   4055   5002
CLEAR                          $0093    57D  4049   5007
CURSOR_LEFT                    $009d    60
SAP                            $00ac   176D  3907   3911   3919   3926
                                      3930   3932   3936   3938
TAP                            $00ae   177D  3908   3913   3915   3917
                                      3921   3931   3940
FNLEN                          $00b7   178D  4868   4869   4898   4949
FA                             $00ba   179D   401   4368   4387   4415
                                      4475   4495   4569   4585   4649
                                      4783   4833   4889   4901   4926
                                      4940   4955   4973
FNADR                          $00bb   180D  4895y  4946
MEMUSS                         $00c3   181D  4178   4179   4181
RVS                            $00c7   182D  4019   4028   4077
BLNSW                          $00cc   183D   398
BLNCT                          $00cd   184
BLNON                          $00cf   185
Charbuf                        $0200   166D  3520   3534   3548   3549
                                      3585   3595   4565   4599
COLOR                          $0286   186D   409   3756   3766   4064
                                      4098   4120   4171
SCNMPG                         $0288   187D   394
KEYRPT                         $028a   188
MODE                           $0291   189
CINV                           $0314   190D   442
DSTATUS                        $033c   191D  4424   4432   4434   4437
                                      4521   4521   4521
SCREEN                         $0800   192D   451    452    453    454
                                       455    456    457    458    459
                                       460    461    462    463    464
                                       465    466    467    468    469
                                       470    471    472    473    474
                                       475    477    478    479    480
                                       481    482    483    484    485
                                       486    487    488    489    490
                                       491    492    493    494    495
                                       496    497    498    499    500
                                       501
START                          $2001   316D   318    321    321    744
                                       746
Link                           $203b   344D   327
ReLoop                         $2052   363D   366    371
MEGA_Setup                     $2066   376D   348    372
Set_Mode_80                    $20b7   420D   406    781
Set_Kernal_Vectors             $20cc   437D   392
KeVE_10                        $20ce   441D   444
Row_Lo                         $20d8   451D   538
Row_Hi                         $20f1   477D   541
Z_STATUS                       $210a   503D  3502   3743   3758   3759
                                      3795
L_Encode_A                     $2164   504D  3239   3243   3253   3262
L_Encode_Y                     $2165   505D  3238   3264   3268
Sep_Std_List                   $2166   509D  2835   2836
Z_Arg_Count                    $216c   510D  1665   2420   2425
Z_Buffer_Mode                  $216d   511
Z_Call_Type                    $216e   512D  1677   1687   2362   2366
                                      2379
Z_Monospace                    $216f   513
Z_Underline                    $2170   514D  4222
Z_Active_Window                $2171   515
Z_Upper_Size                   $2172   517D   554   3567   3902   4118
                                      4198   4201   4309   4755
Z_Copy                         $2173   520
Breakpoint                     $217e   521
Set_Screen_Pointer             $217f   529D   573   4204
Set_Screen_Pointer_X           $2181   535D  3903   3960   3971   3991
                                      4010   4709   4740
Window_Home                    $2192   549D  4203
Set_Row_Col                    $2197   558D  4727
SRC_10                         $219d   567D   565
SRC_20                         $21a3   571D   568
Get_Row_Col                    $21aa   576D  4715
Info_Print                     $21af   587D   749    756
Info_Size                      $21ce   610D   759
InSi_10                        $21d7   618D   623
Screen_Setup                   $21e3   627D   407    685
Set_Screen_Rows                $21f2   640
Story_Pages                    $21f8   649D   757
STTS_10                        $2213   667D   663    665
z_restart                      $2214   671D   416   1027
Start_10                       $221c   679D   682
Start_20                       $224c   698D   695
Start_30                       $22c8   767D   777
Start_40                       $22da   775D   772
Start_50                       $22e0   779D   769
PC_30                          $22f6   823
PC_LOOP                        $22f6   789D   940
z_op_var                       $230c   858
opvar_10                       $230c   868
opvar_20                       $230f   869
z_op_zero                      $231c   878D   853
z_op_one                       $2321   888D   851
z_op_two                       $232f   906D   849
z_exe_1f                       $2343   925D   871
z_execute                      $2345   928D   875    885    903
JSRMOD                         $2353   939D   936    938
DumpQI                         $2359   942
z_error_2                      $235a   944D  1035
z_error_3                      $235f   945
z_error_4                      $2364   946D   958    986    987    988
                                       989
z_opcode                       $2369   949D   874    884    902    935
                                       937
opcodes_1op                    $23a9   992D   902
opcodes_0op                    $23c9  1017D   884
opcodes_var                    $23e9  1038D   874
z_error_1                      $2429  1074D  1053   1055   1057   1061
Get_Operand                    $242e  1083D   898    918    923   1130
opcodes_ext                    $242e  1077
geop_01                        $243b  1102D  1100
geop_02                        $2445  1106D  1099
geop_03                        $244a  1108D  1105
geop_04                        $2459  1117D  1106
Load_4_Operands                $245a  1120D   868   1137
L4OP_20                        $2469  1138D  1131
Get_Var_X1L                    $246c  1143D  1569   1579   1721
Get_Var_A                      $2476  1152D  1107
GeVa_10                        $247e  1159D  1147   1156
Get_Global_Var                 $248e  1169D  1160   3681   3701   3710
                                      3788
Put_Var                        $249b  1181D  1573   1584   1925   2561
Push_X0                        $24a1  1189D  1149   1243
Push_AY                        $24a5  1196D  2372   2376   2380   2398
                                      2422   2555
z_error_6                      $24b5  1212D  1210
Store_Zero                     $24ba  1215D  2008   2059   2323
Store_Byte                     $24bc  1221D   293   1963   2054   2058
                                      2081   2369   4552
Store_Object                   $24bc   293D  1551   1563
Store_AX                       $24be  1227D  1691   1878   1889   2041
Store_A_X0H                    $24c0  1233D  1956
Store_X0                       $24c2  1239D  1722   1739   2547
stx0_01                        $24c7  1245D  1185
Put_Global_Var                 $24d7  1255D  1246
Get_Global_Var_Addr            $24e4  1267D  1172   1258
GGVA_Ret                       $24fc  1288D  1307
Main_False                     $24fd  1301D  1535   1555   1766   1780
                                      1793   1806   1820   1852   1867
                                      1898   4604
Bran_01                        $2502  1306D  1315
Main_True                      $2509  1311D  1033   1536   1554   1765
                                      1779   1792   1805   1819   1851
                                      1866   1899   4449   4544
Bran_10                        $250e  1316D  1305
Bran_11                        $251a  1323D  1318
Bran_12                        $2524  1329D  1325
Bran_13                        $2527  1331D  1328
Bran_14                        $2530  1335D  1322
Branch_XA                      $2536  1341D  1334   1700
Bran_20                        $253e  1352D  1350
Bran_21                        $2550  1362D  1360
z_rtrue                        $2555  1367D  1020   1338   1467
z_rfalse                       $255f  1377D  1021   1336
X1_TO_X0                       $2568  1386D  1775
X2_TO_X0                       $2571  1396D  1789   1816   1924
X1_TO_A0                       $257a  1406D  1788
X2_TO_A0                       $2583  1416D  1776   1802
X0_TO_A0                       $258c  1426D  1815
z_print                        $2595  1436D  1022   1465
z_prin_1                       $2597  1442D  1445
zprin_2                        $25a3  1448D  1451
z_nop                          $25aa  1454D  1024
z_print_ret                    $25ab  1460D  1023
z_ret_popped                   $25b4  1470D  1028
z_pop                          $25be  1479D  1029   1148   1157   1473
                                      1664   1669   1676   1680   1684
                                      2560
z_error_5                      $25d2  1498D  1487
z_quit                         $25d7  1501D  1030   3496
quit_10                        $25dc  1509D  1512
quit_20                        $25ed  1516D   697   1517
quit_30                        $25f7  1521D  1519
z_catch                        $25fa  1524
z_jz                           $25fb  1529D   999
z_jz_t                         $2604  1536D  1534
z_get_sibling                  $2607  1539D  1000
z_get_child                    $260b  1546D  1001
zg_chi_1                       $260d  1550D  1543
zg_chi_f                       $261a  1555D  1553
z_get_parent                   $261d  1558D  1002
z_inc                          $2625  1566D  1004   1814
z_inc_1                        $262e  1573D  1571
z_dec                          $2631  1576D  1005   1801
z_dec_1                        $263a  1583D  1581
z_print_addr                   $263f  1587D  1006
z_remove_obj                   $2646  1595D  1008   1934
zro_10                         $2669  1619D  1612   1622
zro_20                         $2678  1627D  1617
zro_30                         $2681  1632D  1608
z_print_obj                    $2682  1635D  1009
z_print_obj_A                  $2686  1642D  3791
zpo_10                         $2694  1654D  1652
z_ret                          $2697  1658D  1010   1374   1383   1476
zret_10                        $26a4  1669D  1674
zret_20                        $26b1  1676D  1667
zret_30                        $26d1  1692D  1688
z_jump                         $26d2  1695D  1011
z_print_paddr                  $26d9  1703D  1012
z_load                         $26eb  1718D  1013
z_not                          $26f1  1725D  1014   1065
Store_XA                       $26fa  1734D  2007   2115   2127   2155
                                      2164   2173
z_je                           $2701  1742D   959
z_je_1                         $2711  1753D  1750
z_je_2                         $271d  1759D  1756
z_je_t                         $2729  1765D  1752   1758
z_je_f                         $272c  1766D  1754   1760   1762   1764
z_error_9                      $272f  1767D  1746
z_jl                           $2734  1770D   960
z_jl_f                         $2742  1780D  1778
z_jg                           $2745  1783D   961
z_jg_f                         $2753  1793D  1791
z_dec_chk                      $2756  1796D   962
z_dec_cf                       $2764  1806D  1804
z_inc_chk                      $2767  1809D   963
z_inc_cf                       $2778  1820D  1818
CMP_A0_X0                      $277b  1823D  1777   1790   1803   1817
cmpax_1                        $2786  1836D  1832
cmpax_2                        $2790  1841D  1838
z_jin                          $2791  1844D   964
z_jin_f                        $279d  1852D  1850
z_test                         $27a0  1855D   965
z_test_f                       $27b3  1867D  1861   1865
z_or                           $27b6  1870D   966
z_and                          $27c2  1881D   967
z_test_attr                    $27ce  1892D   968
z_teat_t                       $27d8  1899D  1897
z_set_attr                     $27db  1902D   969
z_clear_attr                   $27e3  1911D   970
z_store                        $27ed  1921D   971
z_insert_obj                   $27f3  1928D   972
zinob_1                        $280d  1947D  1944
z_loadw                        $280e  1950D   973
z_loadb                        $2819  1959D   974
Word_Array                     $281f  1966D  1953
Byte_Array                     $2823  1975D  1962
z_get_prop_addr                $2838  1993D   976
gepa_10                        $2849  2008D  2001
z_get_prop                     $284c  2012D   975
zgp_10                         $2865  2033D  2020
zgp_20                         $286b  2037D  2031
zgp_30                         $286f  2040D  2035
z_get_next_prop                $2874  2045D   977
zgnp_10                        $287e  2055D  2052
zgnp_20                        $2889  2059D  2056
z_get_prop_len                 $288c  2063D  1003
Dump_QI                        $28a4  2084
z_add                          $28d1  2106D   978
z_sub                          $28de  2118D   979
z_mul                          $28eb  2130D   980
z_mul_1                        $28ee  2139D  2152
z_mul_2                        $2905  2151D  2143
z_div                          $290f  2158D   981
z_mod                          $2919  2167D   982
Divide_Signed                  $2923  2176D  2161   2170   2539
Divi_01                        $2938  2192D  2190
Divi_02                        $2945  2198D  2196
Divi_03                        $294f  2202D  2200
Divi_04                        $2953  2204D  2197
Divi_05                        $2960  2211D  2203
Negate_Quot                    $2961  2214D  2191   2201
Divide_Unsigned                $296f  2227D  2198
DiUn_01                        $2978  2234D  2248
DiUn_02                        $2990  2247D  2244
z_error_8                      $29a0  2256D  2232
Prep_Mult_Div                  $29a1  2259D  2138   2233
z_scan_table                   $29ab  2270D  1064
zpt_40                         $29ab  2291
z_print_table                  $29ab  2283D  1071
z_copy_table                   $29ab  2274D  1070
z_tokenize                     $29ac  2294D  1068
z_check_argc                   $29ad  2305D  1072
z_log_shift                    $29ae  2310
z_set_font                     $29ae  2314
Z_Active_Font                  $29b1  2324
z_set_color                    $29b2  2327D   985
z_call_n                       $29b6  2339D   984   1066   1067
z_call_s                       $29ba  2346D   983   1007   1041
call_00                        $29bc  2362D  2343
call_10                        $29cb  2369D  2367
call_20                        $29ce  2371D  2365
call_30                        $29fa  2396D  2418
call_40                        $2a22  2416D  2407
call_50                        $2a27  2420D  2393
z_storew                       $2a3a  2431D  1042
z_storeb                       $2a4b  2445D  1043
X1_PLUS_X2_TO_A0               $2a53  2454D  2436   2448
z_put_prop                     $2a65  2469D  1044
zpupr_3                        $2a78  2483D  2477
z_error10                      $2a7d  2487D  2475
z_error11                      $2a82  2488D  2479
z_print_char                   $2a87  2491D  1046
z_print_num                    $2a8c  2498D  1047
zprnu_1                        $2aa1  2512D  2503
zprnu_2                        $2aa6  2514D  2522
zprnu_3                        $2ab3  2520D  2516
z_random                       $2ab9  2526D  1048
zrand_1                        $2add  2547D  2545
z_push                         $2ae0  2550D  1049
z_pull                         $2ae7  2558D  1050
z_encode_text                  $2aed  2565D  1069
z_read_char                    $2aed  2574D  1063
Lower_Case_X1                  $2aee  2581D  2620
LCX1_10                        $2af0  2584D  2594
LCX1_20                        $2b02  2593D  2588   2590
LCX1_Ret                       $2b05  2595D  2586
z_read                         $2b06  2598D  1045
zread_10                       $2b1e  2613D  2608   2611
zread_20                       $2b32  2624D  2622
Parse_Input                    $2b33  2629D  2623
Parse_05                       $2b3b  2656D  2652
Parse_07                       $2b41  2658D  2655
Parse_10                       $2b56  2672D  2669
Parse_15                       $2b5a  2674D  2671
Parse_20                       $2b69  2685D  2723   2736   2746   2771
Parse_25                       $2b75  2692D  2687
Parse_30                       $2b7b  2699D  2690
Parse_35                       $2b84  2704D  2701
Parse_40                       $2b8a  2708D  2710
Parse_45                       $2ba6  2725D  2705   2720
Parse_50                       $2bc1  2738D  2718
Parse_55                       $2bca  2745D  2726   2730
Parse_60                       $2bef  2764D  2755   2758   2769
Parse_70                       $2bf9  2770D  2763
Skip_Surplus                   $2bfe  2774D  2702
SkSu_10                        $2c02  2779D  2786
SkSu_Ret                       $2c13  2787D  2778   2782
Sep_All                        $2c14  2790D  2729   2781
Sep_Dict                       $2c19  2802D  2717
SeDi_10                        $2c2a  2817D  2811   2821
SeDi_20                        $2c35  2823D  2819
SeDi_Ret                       $2c36  2824D  2799
Sep_Std                        $2c37  2827D  2719   2798
SeSt_10                        $2c39  2836D  2839
SeSt_Ret                       $2c42  2841D  2837
Skip_Data                      $2c43  2844D  2881
SkDa_Ret                       $2c50  2857D  2853   2855
Set_Data_AY                    $2c51  2860D  2814   2878
Dictionary_Search              $2c5a  2870D  2749
DiSe_20                        $2c8b  2901D  2891   2920   2922
DiSe_30                        $2c95  2906D  2911
DiSe_50                        $2ca3  2914D  2909   2917
DiSe_70                        $2cb5  2925D  2889
Next_Datum                     $2cba  2930D  1955   1990   2815   2817
                                      2880   2882   2884   2886   2906
                                      2914   3172   3176
NEDA_10                        $2cd1  2959D  2948   2951
NEDA_50                        $2ce0  2967D  2954
NEDA_80                        $2ced  2973D  2969   2971
Next_Instruction               $2cf0  2977D   827    855   1101   1103
                                      1155   1242   1304   1308   1314
                                      1332   2391   2401   2403
NEIN_10                        $2d07  3007D  2996   2999
NEIN_50                        $2d16  3015D  3002
NEIN_80                        $2d23  3021D  3017   3019
ZSCII_2                        $2d26  3028D  3066   3245
Swap_Ret                       $2d40  3030D  3052
Decode_YX                      $2d41  3033D  1592   1654
Decode_Text                    $2d49  3044D  1446   1715   3135
DeTe_10                        $2d4d  3049D  3076   3145
DeTe_15                        $2d51  3051D  3061
DeTe_20                        $2d5c  3056D  3053
DeTe_25                        $2d68  3062D  3059
DeTe_30                        $2d76  3070D  3064
DeTe_35                        $2d7e  3074D  3071
DeTe_40                        $2d80  3075D  3055   3067   3073   3087
DeTe_50                        $2d86  3078D  3068
DeTe_55                        $2d98  3091D  3057
DeTe_60                        $2dac  3108D  3111
DeTe_65                        $2dd5  3140D  3144
Get_Packed_Char                $2de0  3149D  3051   3078   3085   3099
GPC_10                         $2df6  3165D  3157
GPC_20                         $2e00  3172D  3153
GPC_Ret                        $2e25  3195D  3155
Encode                         $2e26  3198D  2748
Enco_10                        $2e2c  3214D  3222
Enco_20                        $2e2e  3215D  3229   3236   3265   3270
Enco_30                        $2e37  3221D  3212
Enco_35                        $2e48  3231D  3225   3227
Enco_40                        $2e54  3238D  3232   3234
Enco_50                        $2e65  3245D  3248
Enco_60                        $2e8c  3267D  3246
Enco_70                        $2e94  3272D  3218
Enco_80                        $2e98  3274D  3294
Get_Object_X1                  $2ec6  3302D  1550   1562   1602   1848
                                      3361   3454
Get_Object_Reg                 $2ec8  3308D  1610   1620   1646   1939
GOA_01                         $2edd  3334D  3332
GOA_02                         $2ee4  3338D  3336
First_Property                 $2ef6  3349D  2053   3431
FiPr_10                        $2f13  3376D  3374
Property_Size                  $2f18  3382D  2033   2078   2476   3404
Next_Property                  $2f21  3395D  2057   3435
NePr_20                        $2f2f  3411D  3409
Find_Property                  $2f36  3417D  2000   2019   2055   2474
FIPR_10                        $2f39  3432D  3436
FIPR_20                        $2f45  3437D  3433
FIPR_30                        $2f46  3438D  3434
Get_Attr_Addr                  $2f47  3441D  1895   1905   1914
gaa_01                         $2f59  3465D  3467
gaa_02                         $2f5a  3466D  3464
Dump_Code                      $2f5e  3471D  3494
Dump_Byte                      $2f60  3477D  2089   2093   2095   2099
INTERNAL_ERROR                 $2f6c  3487D   944    945    946   1074
                                      1212   1498   1767   2487   2488
                                      4272
Print_To_Status                $2f87  3499D  3514
PTS_01                         $2f90  3506D  3504
Print_Formatted                $2f91  3510D  2495   2505   2518   3075
PrFo_25                        $2fad  3530D  3518
PrFo_30                        $2fae  3532D  3526
PrFo_35                        $2fb2  3534D  3537
PrFo_40                        $2fbc  3539D  3535
PrFo_45                        $2fc9  3548D  3553
PrFo_50                        $2fd0  3551D  3546
z_new_line                     $2fd8  3558D  1031   1466   3493   3516
                                      3542
znl_10                         $2ff8  3572D  3574
Terminate_Buffer               $300d  3580D  3565
Print_Buffer                   $3016  3589D  2333   2602   4192
PrBu_10                        $301c  3595D  3599
PrBu_Ret                       $302b  3602D  3593
Format_Integer                 $302c  3605D   614   3682   3702   3711
Format_XA                      $3030  3610D  2512
FORINT_01                      $3033  3612D  3620
FORINT_02                      $304b  3626D  3634
FORINT_03                      $3063  3640D  3648
FORINT_04                      $3079  3653D  3655
FORINT_05                      $3088  3661D  3667
FORINT_06                      $3095  3668D  3663
Status_Number                  $3096  3671D  3732   3735
StNu_10                        $30a2  3686D  3693
StNu_20                        $30ac  3691D  3688
Print_Time                     $30b2  3697D  3807
Print_Score                    $30e6  3727D  3805
PrSc_10                        $30fc  3741D  3739
PrSc_20                        $30fe  3742D  3724   3747
Print_Status                   $310b  3751D  3808
z_show_status                  $3133  3770D  1032   2601   3566
zss_10                         $3138  3780D  3783
zss_20                         $3154  3795D  3798
zss_30                         $316d  3807D  3804
zss_40                         $3170  3808D  3806
zss_90                         $3175  3813D  3817
Fix_Colors                     $3180  3823
FiCo_10                        $3182  3827D  3831
Cursor_On                      $318e  3835D  3864
Cursor_Off                     $3197  3844D  3892
Get_Character                  $31a2  3854D  4130   4357
GeCh_10                        $31a7  3865D  3866   3889
GeCh_22                        $31c0  3878D  3874
GeCh_24                        $31cc  3885D  3881
GeCh_30                        $31d0  3888D  3872   3879
GeCh_40                        $31d6  3891D  3868   3870   3876   3883
                                      3886
Scroll_Main_Window             $31df  3899D  4007
SMW_10                         $3200  3918D  3943
SMW_20                         $3203  3919D  3924
SMW_30                         $3237  3945D  3950
Home_Screen                    $3244  3954D  4048
Clear_Screen                   $324e  3965D   414   4050   4307
ClSc_10                        $325b  3975D  3977   3980
ClSc_20                        $326b  3984D  3986   3989
Return_Screen                  $327e  3997D  4052   4082   4308
ReSc_10                        $3290  4009D  4006
Screen_Reverse_Off             $3297  4015D  4056
Screen_Reverse_On              $329c  4024D  4054
Screen_Del                     $32a1  4032D  4058
ScDe_Ret                       $32ac  4040D  4036
CHROUT                         $32ae  4044D   774   2087   2091   2097
                                      2101   2103   3482   3484   3596
                                      3764   4111   4143   4161   4168
                                      4183   4295   4537   4668   4819
CHRO_20                        $32dd  4072D  4069
CHRO_80                        $32e3  4076D  4071   4073
CHRO_90                        $32f2  4083D  4081
Got_Line                       $32f5  4088D  4341   4399
goli_01                        $3306  4100D  4112
goli_10                        $3319  4111D  4107   4109
Get_Line_X1                    $331f  4115D  2619
GLX_10                         $3333  4126D  4124
GLX_20                         $3333  4130D  4104   4138   4144   4157
                                      4162
GLX_30                         $3346  4142D  4135
GLX_40                         $334c  4148D  4133
GLX_45                         $3352  4151D  4149
GLX_50                         $3359  4156D  4150
GLX_70                         $335f  4159D  4154
GLX_90                         $3367  4166D  4131
PrintText                      $3376  4175D   696    760    765   1514
                                      3495   3571   3576   3757   3762
                                      4355   4454   4456   4521   4558
                                      4560
PrTe_A                         $337c  4181D  4186
PrTe_B                         $3387  4187D  4182
z_split_window                 $3388  4190D  1051
split_10                       $3391  4196D  4194
split_20                       $33a5  4204D  4202
split_err                      $33a9  4206D  4197
z_set_window                   $33aa  4209D  1052
zsw_ret                        $33aa  4211
Set_Underline                  $33ab  4215
Sund_10                        $33af  4222D  4220
z_set_text_style               $33b3  4226D  1058
z_buffer_mode                  $33b4  4239D  1059
z_set_cursor                   $33b5  4244D  1056
z_output_stream                $33b6  4253D  1060
z_erase_window                 $33b7  4263D  1054
zew_20                         $33b7  4265
z_extension                    $33b8  4268D  1034
z_error12                      $33b9  4272
z_save_undo                    $33be  4276
z_sound_effect                 $33be  4280D  1062
Error_Beep                     $33c7  4291D  3888   4136   4156   4287
                                      4359
Click                          $33cc  4298D  4285
Reset_Screen                   $33cd  4304D   786   4603
Empty_Keyboard_Queue           $33d9  4314D  3569   4318   4356
Decode_Unit                    $33df  4322D  4344
DeUn_10                        $33e6  4328D  4325
DeUn_20                        $33ec  4331D  4327   4329
Unit_Dialog                    $33ef  4336D  4455   4559
Wait_for_Return                $3403  4349D   780
wfret_10                       $340f  4357D  4360
wfret_99                       $341a  4361D  4358
Open_Story                     $341b  4364D   689
Close_Story                    $343f  4383D  4826
File_Dialog                    $344f  4394D  4457   4561
FiDi_10                        $3458  4401D  4407
FiDi_20                        $3464  4406D  4403
Read_Disk_Status               $3468  4411D  4520
RDS_10                         $3478  4421D  4429
RDS_20                         $348b  4430D  4426
RDS_30                         $348e  4431D  4423
z_ext_save                     $34a0  4442
z_save                         $34a0  4445D  1025
Save_Game                      $34a6  4452D  4448
WG_10                          $34d6  4468D  4471
WG_20                          $34f0  4480D  4485
WG_30                          $34fd  4487D  4482
WG_40                          $351e  4502D  4506
WG_50                          $3530  4511D  4515
WG_Err                         $3540  4519D  4493   4504   4513
Write_Block                    $3552  4525D  4502   4511
WrBl_10                        $3558  4531D  4534
z_restore                      $3567  4540D  1026
z_ext_restore                  $356d  4547
Restore_Game                   $3575  4555D  4543   4550
RG_02                          $358f  4564D  4567
RG_10                          $35a7  4574D  4579
RG_20                          $35b4  4580D  4576
RG_03                          $35db  4598D  4594
RG_04                          $35dd  4599D  4602
RG_05                          $35ec  4606D  4597
RG_77                          $35f8  4613D  4615
RG_06                          $3609  4622D  4624
RG_07                          $3624  4636D  4639
Close_Save_File                $3632  4645D  4517   4522   4641
Read_Block                     $3642  4656D  4591   4613   4622
ReBl_10                        $3648  4662D  4665
ASCII_Hex                      $3657  4671D   595    600   3479
Hex_11                         $3664  4684D  4682
Hex_12                         $3670  4691D  4689
Select_Text_Window             $3671  4694D   761   3767
Select_Status_Window           $367c  4704D  3754
Save_Cursor                    $3684  4712D  3570   3775
Restore_Cursor                 $368c  4722D  3575   3577   3819
Erase_Last_Row                 $3693  4730
Erase_Row                      $3697  4737D  4753
ClRo_10                        $369e  4743D  4745
Erase_Upper_Window             $36a4  4749
EUW_10                         $36a6  4752D  4756
ASCII_TS                       $36b2  4760D  3490
asts_01                        $36b5  4768D  4770
Load_Page                      $36bd  4775D   692    767   4812
LoPa_10                        $36cb  4789D  4794
LoPa_20                        $36d8  4795D  4792
LoPa_30                        $36e1  4799D  4797
Load_Story                     $36e4  4803D   779
LoSt_10                        $36ec  4812D  4821   4825
LoSt_20                        $36fe  4820D  4817
LoSt_90                        $370a  4826D  4814
Delete_Config                  $370d  4829D  4866
DeCo_10                        $371c  4838D  4842
Prep_Config                    $372a  4846D  4867   4876
Save_Config                    $3743  4863D  1504
Load_Config                    $3750  4873D   405
Load_File                      $3757  4882D  4877
LoFi_10                        $3765  4895D  4899
LoFi_20                        $3787  4911D  4920   4923
LoFi_30                        $378a  4912D  4908
LoFi_40                        $3796  4918D  4916
LoFi_60                        $37a2  4925D  4909   4914
Save_File                      $37b2  4933D  4870
SaFi_10                        $37c0  4946D  4950
SaFi_20                        $37d9  4960D  4967   4970
SaFi_40                        $37e4  4965D  4963
SaFi_60                        $37f0  4972
TEXT_WORD                      $3800  4979D  2708   2732   2738   3221
DICT_WORD                      $3809  4980D  2908   3215   3241   3251
                                      3260   3274   3279   3281   3282
                                      3284   3285   3287   3295   3297
Location_Length                $3814  4982D  3794
Tokenizer_Flag                 $3815  4983D  2604   2754
Unit_Buf                       $3816  4986D  4339   4340
Unit_Text                      $3817  4987D  4342   4343
File_Buf                       $381a  4989D  4397   4398
File_Text                      $381b  4990D  4401   4405   4480   4574
Storyname                      $3830  4993
Game_Unit                      $3834  4994D   402   4367   4386   4832
Save_Unit                      $3835  4995D   403   4345   4474   4568
                                      4584   4648
PRESSRET                       $3836  4997D  4352   4353   4354
SAVEUNIT                       $3852  4998D  4354   4454   4454   4454
SAVEFILE                       $385f  4999D  4456   4456   4456
LOADUNIT                       $386c  5000D  4558   4558   4558
LOADFILE                       $387e  5001D  4560   4560   4560
MORE                           $3890  5002D  3571   3571   3571
EOS                            $3898  5003D  1514   1514   1514
NOSTORY                        $38b6  5004D   696    696    696
BITSHIFTER                     $38c1  5007D   760    760    760
InfoClr                        $38da  5008D   762    763    764
InfoPro                        $38db  5009D   596    598    601    603
                                       619    755    758
InfoSta                        $38fb  5010D   755
InfoSto                        $391b  5011D   758
BLANKS                         $393c  5014D  3576   3576   3576
InfoEnd                        $393c  5012D   764
PRE_STATUS                     $3948  5016D  3757   3757   3757
SCORE                          $394b  5020D  3689   3723   3742
STIME                          $3968  5021D  3705   3707   3715   3717
                                      3723
Win_Top                        $3974  5025D  4199   4698   4708
Win_Bot                        $3975  5026D  4700
RAMB_0                         $3976  5028
RAMB_1                         $3983  5029
INTERR                         $3990  5031D  3491   3492   3495   3495
                                      3495
ConfigDel                      $3998  5033D  4838   4841
Configname                     $399b  5034D  4841   4857   4858   4859
ConfigWri                      $39a1  5035
CONFIG_START                   $39a3  5038D  4849   4850
FG_Color                       $39a3  5039D   408   3827   3829
TI_Color                       $39a4  5040
BO_Color                       $39a5  5041D   412
BG_Color                       $39a6  5042D   410
TB_Color                       $39a7  5043
EOP                            $39aa  5049D   225    321    358    360
                                       744    747
CONFIG_END                     $39aa  5046D  4853   4854
Z_VAR                          $3a00   225D   226    230    231   4460
                                      4462   4464   4466   4469   4499
                                      4564   4589   4592   4595   4600
                                      4631   4633   4636
Lvar_Lo                        $3a00   230D  1164   1249   1670   2397
                                      2404   2413
Lvar_Hi                        $3a10   231D  1162   1251   1672   2396
                                      2402   2415
Z_STACK_LO                     $3b00   226D   227    229   1208   1489
Filename                       $3b00   229
Z_STACK_HI                     $3c00   227D   228   1206   1491
h_version                      $3d00   237D   693
Z_HEADER                       $3d00   228D   237    238    239    240
                                       241    242    243    244    245
                                       246    247    248    249    250
                                       251    252    253    254    255
                                       256    257    258    259    260
                                       261    262    263    264    265
                                       266    267    268    269    270
                                       271    272    273    274    275
                                       277    278    690    704    753
                                       754   1286   2003   2006   2025
                                      2071   2074   2463   2616   2662
                                      2952   3000   3119   3343   3362
                                      4459   4461   4507   4593   4596
                                      4617
h_config                       $3d01   238D   709    718   3802
h_resident_size_hi             $3d04   239
h_resident_size_lo             $3d05   240
h_start_pc_hi                  $3d06   241D   782
h_start_pc_lo                  $3d07   242D   784
h_dictionary_hi                $3d08   243D  2657   2813
h_dictionary_lo                $3d09   244D  2656   2812
h_objects_hi                   $3d0a   245D  2024   3342
h_objects_lo                   $3d0b   246D  2022   3339
h_globals_hi                   $3d0c   247D  1285
h_globals_lo                   $3d0d   248D  1282
h_dynamic_size_hi              $3d0e   249D  4509   4619
h_dynamic_size_lo              $3d0f   250
h_flags_hi                     $3d10   251D  4606   4629
h_flags_lo                     $3d11   252D   720    721   4608   4627
h_serial                       $3d12   253
h_abbreviations_hi             $3d18   254D  3118
h_abbreviations_lo             $3d19   255D  3116
h_file_size_hi                 $3d1a   256D   656
h_file_size_lo                 $3d1b   257D   658
h_checksum_hi                  $3d1c   258
h_checksum_lo                  $3d1d   259
h_interpreter_number           $3d1e   260D   733
h_interpreter_version          $3d1f   261D   735
h_screen_rows                  $3d20   262
h_screen_cols                  $3d21   263D   707
h_screen_width_hi              $3d22   264D   723
h_screen_width_lo              $3d23   265D   726
h_screen_height_hi             $3d24   266D   724
h_screen_height_lo             $3d25   267D   728
h_font_width                   $3d26   268D   730
h_font_height                  $3d27   269D   731
h_functions_offset_hi          $3d28   270
h_functions_offset_lo          $3d29   271
h_strings_offset_hi            $3d2a   272
h_strings_offset_lo            $3d2b   273
h_default_bg_color             $3d2c   274
h_default_fg_color             $3d2d   275
h_alphabet_hi                  $3d34   277
h_alphabet_lo                  $3d35   278
Raster                         $d012   194D  2535
BorderCol                      $d020   195D   413
BackgCol0                      $d021   196D   411
Random                         $d41b   197D  2534
COLRAM                         $d800   193
ROM_Vectors                    $fd30   198D   441
Init_IO                        $fda3   199D   391
Init_Editor                    $ff5b   200D   395
SETMSG                         $ff90   207D   415
SECOND                         $ff93   208D  4371   4390   4478   4498
                                      4572   4652   4836   4892   4929
                                      4943   4958   4976
TKSA                           $ff96   209D  4418   4588   4786   4904
ACPTR                          $ffa5   210D  4421   4662   4789   4906
                                      4911
CIOUT                          $ffa8   211D  4373   4375   4377   4379
                                      4483   4488   4490   4532   4577
                                      4839   4896   4947   4961
UNTLK                          $ffab   212D  4430   4640   4795   4925
UNLSN                          $ffae   213D  4380   4391   4491   4516
                                      4519   4580   4653   4843   4900
                                      4930   4951   4972   4977
LISTEN                         $ffb1   214D  4369   4388   4476   4496
                                      4570   4650   4834   4890   4927
                                      4941   4956   4974
TALK                           $ffb4   215D  4416   4586   4784   4902
SETNAM                         $ffbd   216D  4860
GETIN                          $ffe4   217D  1516   3572   3865   4317
PLOT                           $fff0   218
RESET                          $fffc   219D  1521
A0L/A0H                        $003e   133D   356    363y  1173y  1176y
                                      1260y  1263y  1283   1410   1420
                                      1430   1603   1607y  1616y  1625y
                                      1649y  1840   1896y  1906y  1907y
                                      1916y  1917y  1942y  2002   2023
                                      2037y  2040y  2072   2438y  2441y
                                      2450y  2460   2481y  2484y  3117
                                      3122y  3126y  3322   3331   3340
                                      3345y  3365y  3366   3369y  3372
                                      3373   3376y  3385y  3407   3408
                                      3412y  4612   4614   4621   4623
                                      4851   4912y  4915   4921   4960y
                                      4962   4968    134D   359    367
                                      1279   1281   1284   1287   1412
                                      1422   1432   1605   1830   1833
                                      1837   2005   2026   2075   2464
                                      3120   3324   3326   3328   3330
                                      3333   3337   3341   3344   3367
                                      3375   3410   4852   4917   4918
                                      4964   4965
X1L/X1H                        $0044   139D  1146   1184   1371   1381
                                      1389   1409   1474   1532   1590
                                      1611   1621   1638   1689   1698
                                      1706   1727   1747   1859   1876
                                      1887   1941   1981   2070   2110
                                      2122   2145   2186   2363   2382
                                      2412   2459   2494   2501   2508
                                      2529   2536   2553   2584y  2592y
                                      2716y  2728y  2780y  3305   4093
                                      4096y  4101y  4122y  4160y  4167y
                                      4193   4283    140D  1373   1382
                                      1391   1411   1475   1533   1591
                                      1639   1690   1699   1709   1730
                                      1748   1863   1873   1884   1984
                                      2073   2113   2125   2148   2182
                                      2188   2364   2385   2414   2462
                                      2502   2511   2531   2538   2554
                                      2615   2617   4094
COLS                           $0050   172D   452    453    454    455
                                       456    457    458    459    460
                                       461    462    463    464    465
                                       466    467    468    469    470
                                       471    472    473    474    475
                                       478    479    480    481    482
                                       483    484    485    486    487
                                       488    489    490    491    492
                                       493    494    495    496    497
                                       498    499    500    501    634
                                       706    725    737
X2L/X2H                        $0046   141D  1399   1419   1749   1849
                                      1858   1860   1877   1888   1935
                                      1971   1982   2027   2051   2111
                                      2123   2142   2153   2192   2434
                                      2458   2530   2609   2668y  2673y
                                      2694y  2765y  3432   3455   3460
                                       142D  1401   1421   1751   1862
                                      1864   1874   1885   1972   1985
                                      2114   2126   2141   2154   2184
                                      2194   2435   2461   2532   2610
                                      2661   2663
X0H                            $0043   138D   605    655    661    666
                                      1102   1114   1115   1163   1174
                                      1193   1230   1250   1259   1331
                                      1333   1347   1359   1392   1402
                                      1431   1494   1572   1582   1738
                                      1831   1834   1836   1954   2541
                                      2546   3609   3790
X0L                            $0042   137D   607    657    660    664
                                      1104   1112   1113   1165   1177
                                      1192   1236   1248   1262   1390
                                      1400   1429   1495   1552   1570
                                      1580   1583   1737   1839   2544
                                      3608   3789   4529   4660
A1L/A1H                        $0040   135D   357    364y  1604   1614y
                                      1624y  1629y  1631y  1937y  1946y
                                      4855   4922   4969    136D   361
                                       368    369   1606   2392   2416
                                      2421   4856   4919   4966
RAM_LO/RAM_HI                  $000b    85D  2967   3015   4531y  4663y
                                      4790     86D   520    691   2953
                                      2962   3001   3010   4500   4508
                                      4535   4590   4618   4666   4799
                                      4809   4820
FA                             $00ba   179D   401   4368   4387   4415
                                      4475   4495   4569   4585   4649
                                      4783   4833   4889   4901   4926
                                      4940   4955   4973
IO_STATUS                      $0090   175D   768   4420   4422   4473
                                      4492   4503   4512   4530   4661
                                      4788   4791   4813   4894   4907
                                      4913   4945
LV1                            $0010    92D  2139   2149   2150   2237
                                      2242   2246   2253   2265   3614
                                      3618   3623   3628   3632   3637
                                      3642   3646
LV0                            $000f    91D  2140   2146   2147   2236
                                      2238   2245   2251   2264   3084
                                      3086   3613   3622   3627   3636
                                      3641   3650
Scr_Adr                        $0057   159D   539    542   3839y  3848y
                                      3905   3909   3920   3927   3933
                                      3946   3975y  3978   4038y  4078y
                                      4743
Cursor_Col                     $0054   156D   572    583   3524   3837
                                      3846   3959   3990   4002   4035
                                      4039   4063   4076   4079   4151
NUMBER                         $002e   121D   618   2514   3621   3635
                                      3649   3656   3658   3661   3664
                                      3686   3704   3706   3713   3716
Last_Col                       $0029   116D   569    637    740   3503
                                      3525   3720   3746   3760   3797
                                      3918   3944   4080   4153   4742
QI0                            $0003    71D   785   1353   1354   1442
                                      1449   1678   2092   2378   2384
                                      2994   3016   4468   4637
Chars_Left                     $0018   101D  2688   2721   2725   2733
                                      2739   2777   2785   4097   4123
                                      4125   4148   4170
QD0                            $0008    79D  1443   1448   1708   1983
                                      2851   2852   2863   2901   2946
                                      2968   3038   3124
Col_Adr                        $0059   160D   540    544    631    633
                                      3922   3928   3935   3948   3984
                                      3987   4065
QDH                            $0007    78D  3048   3152   3156   3160
                                      3166   3175   3179   3181   3183
                                      3187   3188
X5H                            $004d   148D  2681   2689   2699   2704
                                      2731   2734   2740   2745   2752
                                      2783
z_stack_ptr                    $002c   119D   686   1186   1205   1209
                                      1486   1488   1662   2426   4463
                                      4632
ParNum                         $001c   104D   826   1108   1109   1135
                                      1745   1753   1759   2406   2423
                                      2606
QD1                            $0009    80D  1711   1986   2854   2864
                                      2903   2949   2960   2970   3039
                                      3128
QI1                            $0004    72D   783   1356   1357   1681
                                      2094   2375   2387   2997   3008
                                      3018
Z_Code                         $0002    70D   520    678    828    869
                                       899    919    924   1138   2088
                                      3474
Charbuf_Ptr                    $0016    99D  3519   3529   3539   3554
                                      3583   3586   3592   3598   3601
QD2                            $000a    81D  1714   1989   2856   2866
                                      2947   2963   2972   3041   3131
QI2                            $0005    73D  1362   1363   1682   2098
                                      2374   2390   2995   3011   3020
SAP                            $00ac   176D  3907   3911   3919   3926
                                      3930   3932   3936   3938
X5L                            $004c   147D  2678   2714   2722   2727
                                      2735   2741   2779   2784
RemH                           $0021   109D  2172   2195   2209   2210
                                      2231   2243   2254   2540
RemL                           $0020   108D  2171   2193   2206   2207
                                      2230   2240   2252   2542
ROWS                           $0019   173D   564    566    644    727
                                      4005   4008   4196   4733
TAP                            $00ae   177D  3908   3913   3915   3917
                                      3921   3931   3940
X4H                            $004b   146D  1763   2885   2888   2890
                                      2898   2899   2921
z_frame_ptr                    $002d   120D   687   1661   1685   2371
                                      2427   4465   4634
Resident_Pages                 $0022   110D   705    750    776   2950
                                      2961   2998   3009
CR                             $000d    50D  3515   3584   3867   3895
                                      4051   4431   5008
RAM_BA                         $000d    87D  2945   2966   2993   3014
                                      4811   4822   4823
Cursor_Row                     $0055   157D   532    571    582   4003
                                      4009   4200
X7L                            $0050   151D  2715   2747   2756   2764
                                      2904   2926
Status_Col                     $002a   117D   688   3505   3513   3786
                                      3793   3801
Cols                           $0023   111D   567    635    738   3738
                                      3906   3929
QuotH                          $001f   107D  2163   2189   2222   2223
                                      2235   2250
QuotL                          $001e   106D  2162   2187   2219   2220
                                      2234   2249
LV2                            $0011    93D  2183   2202   2517   2519
                                      3098   3102
QDL                            $0006    77D  3108   3141   3167   3177
                                      3780   3814
X4L                            $004a   145D  1761   2887   2895   2896
                                      2919
X3L                            $0048   143D  1755   2440   2449   2483
                                      2653
MORE_Counter                   $002b   118D  3561   3562   3568   4119
                                      4310
O_SIBLING                      $0005   286D  1542   1613   1619   1623
                                      1945
O_PARENT                       $0004   285D  1561   1601   1628   1847
                                      1936
FNLEN                          $00b7   178D  4868   4869   4898   4949
X3H                            $0049   144D  1757   2437   2480   2654
Last_Row                       $0028   115D   645   3564   3942   4699
Block_Lo                       $0014    97D   770    775   4796   4815
WORD_LENGTH                    $0006   292D  2700   2707   3217   3293
WHITE                          $0001    28D  3765   4171   5039   5040
RVS                            $00c7   182D  4019   4028   4077
MEMUSS                         $00c3   181D  4178   4179   4181
REVERSE_OFF                    $0092    59D  3763   4055   5002
X7H                            $0051   152D  2757   2902   2925
X6L                            $004e   149D  2680   2685   2750
Parse_Index                    $001d   105D  2676   2753   2770
OP_Type                        $001a   103D  1096   1098   1132
Info_Pages                     $0019   102D   606    745    751
Charbuf_End                    $0017   100D  3533   3538   3551
DEL                            $0014    54D  3869   4057   4132
alphabet                       $0013    96D  3050   3060   3062
REVERSE_ON                     $0012    52D  4053   5002   5016
O_CHILD                        $0006   287D  1549   1609   1938
FNADR                          $00bb   180D  4895y  4946
CLEAR                          $0093    57D  4049   5007
Cursor_Vis                     $0056   158D  3840   3850
X6H                            $004f   150D  2674   2686
DPI                            $003d   132D  2883   2916
DPH                            $003c   131D  2659   2877
DPL                            $003b   130D  2658   2876
C_Save_Row                     $0025   113D  4716   4725
C_Save_Col                     $0024   112D  4717   4726
P_MASK                         $001f   290D  3377   3413
HOME                           $0013    53D  4047   5016
LV3                            $0012    94D  2185   2199
O_PROP                         $0007   288D  1645   3360
STIME_COL                      $0006  5023D  3703   3712
BLUE                           $0006    33D  5041   5042
CYAN                           $0003    30D  4098   4120
BLNSW                          $00cc   183D   398
ZP_END                         $005d   162D   681
STAT_SCORE                     $0034  5017D  3737
MOVES_COL                      $0016  5018D  3734
Block_Hi                       $0015    98D  4798
YELLOW                         $0007    34D  3755
SCORE_COL                      $0007  5022D  3731
V_SIZE                         $0004   291D  2910
ZV                             $0003     8D   694
RED                            $0002    29D  5043
R6510                          $0001   174D   387
BLNON                          $00cf   185
BLNCT                          $00cd   184
CURSOR_LEFT                    $009d    60
CURSOR_UP                      $0091    58
KEY_F8                         $008c    21
KEY_F6                         $008b    20
KEY_F4                         $008a    19
KEY_F2                         $0089    18
KEY_F7                         $0088    17
KEY_F5                         $0087    16
KEY_F3                         $0086    15
KEY_F1                         $0085    14
X8H                            $0053   154
X8L                            $0052   153
P3H                            $003a   129
P3L                            $0039   128
P2H                            $0038   127
P2L                            $0037   126
P1H                            $0036   125
P1L                            $0035   124
P0H                            $0034   123
P0L                            $0033   122
C_Save_Adr                     $0026   114
CURSOR_RIGHT                   $001d    56
ESC                            $001b    55
CURSOR_DOWN                    $0011    51
LT_GREY                        $000f    42
LT_BLUE                        $000e    41
LT_GREEN                       $000d    40
GREY                           $000c    39
DARKGREY                       $000b    38
PINK                           $000a    37
BROWN                          $0009    36
TAB                            $0009    49
O_SIZE                         $0009   289
BACKSPACE                      $0008    48
ORANGE                         $0008    35
GREEN                          $0005    32
PURPLE                         $0004    31
BLACK                          $0000    27
A0L/A0H                        $003e   133D   356    363y  1173y  1176y
                                      1260y  1263y  1283   1410   1420
                                      1430   1603   1607y  1616y  1625y
                                      1649y  1840   1896y  1906y  1907y
                                      1916y  1917y  1942y  2002   2023
                                      2037y  2040y  2072   2438y  2441y
                                      2450y  2460   2481y  2484y  3117
                                      3122y  3126y  3322   3331   3340
                                      3345y  3365y  3366   3369y  3372
                                      3373   3376y  3385y  3407   3408
                                      3412y  4612   4614   4621   4623
                                      4851   4912y  4915   4921   4960y
                                      4962   4968    134D   359    367
                                      1279   1281   1284   1287   1412
                                      1422   1432   1605   1830   1833
                                      1837   2005   2026   2075   2464
                                      3120   3324   3326   3328   3330
                                      3333   3337   3341   3344   3367
                                      3375   3410   4852   4917   4918
                                      4964   4965
X1L/X1H                        $0044   139D  1146   1184   1371   1381
                                      1389   1409   1474   1532   1590
                                      1611   1621   1638   1689   1698
                                      1706   1727   1747   1859   1876
                                      1887   1941   1981   2070   2110
                                      2122   2145   2186   2363   2382
                                      2412   2459   2494   2501   2508
                                      2529   2536   2553   2584y  2592y
                                      2716y  2728y  2780y  3305   4093
                                      4096y  4101y  4122y  4160y  4167y
                                      4193   4283    140D  1373   1382
                                      1391   1411   1475   1533   1591
                                      1639   1690   1699   1709   1730
                                      1748   1863   1873   1884   1984
                                      2073   2113   2125   2148   2182
                                      2188   2364   2385   2414   2462
                                      2502   2511   2531   2538   2554
                                      2615   2617   4094
Z_HEADER                       $3d00   228D   237    238    239    240
                                       241    242    243    244    245
                                       246    247    248    249    250
                                       251    252    253    254    255
                                       256    257    258    259    260
                                       261    262    263    264    265
                                       266    267    268    269    270
                                       271    272    273    274    275
                                       277    278    690    704    753
                                       754   1286   2003   2006   2025
                                      2071   2074   2463   2616   2662
                                      2952   3000   3119   3343   3362
                                      4459   4461   4507   4593   4596
                                      4617
COLS                           $0050   172D   452    453    454    455
                                       456    457    458    459    460
                                       461    462    463    464    465
                                       466    467    468    469    470
                                       471    472    473    474    475
                                       478    479    480    481    482
                                       483    484    485    486    487
                                       488    489    490    491    492
                                       493    494    495    496    497
                                       498    499    500    501    634
                                       706    725    737
X2L/X2H                        $0046   141D  1399   1419   1749   1849
                                      1858   1860   1877   1888   1935
                                      1971   1982   2027   2051   2111
                                      2123   2142   2153   2192   2434
                                      2458   2530   2609   2668y  2673y
                                      2694y  2765y  3432   3455   3460
                                       142D  1401   1421   1751   1862
                                      1864   1874   1885   1972   1985
                                      2114   2126   2141   2154   2184
                                      2194   2435   2461   2532   2610
                                      2661   2663
SCREEN                         $0800   192D   451    452    453    454
                                       455    456    457    458    459
                                       460    461    462    463    464
                                       465    466    467    468    469
                                       470    471    472    473    474
                                       475    477    478    479    480
                                       481    482    483    484    485
                                       486    487    488    489    490
                                       491    492    493    494    495
                                       496    497    498    499    500
                                       501
X0H                            $0043   138D   605    655    661    666
                                      1102   1114   1115   1163   1174
                                      1193   1230   1250   1259   1331
                                      1333   1347   1359   1392   1402
                                      1431   1494   1572   1582   1738
                                      1831   1834   1836   1954   2541
                                      2546   3609   3790
X0L                            $0042   137D   607    657    660    664
                                      1104   1112   1113   1165   1177
                                      1192   1236   1248   1262   1390
                                      1400   1429   1495   1552   1570
                                      1580   1583   1737   1839   2544
                                      3608   3789   4529   4660
A1L/A1H                        $0040   135D   357    364y  1604   1614y
                                      1624y  1629y  1631y  1937y  1946y
                                      4855   4922   4969    136D   361
                                       368    369   1606   2392   2416
                                      2421   4856   4919   4966
RAM_LO/RAM_HI                  $000b    85D  2967   3015   4531y  4663y
                                      4790     86D   520    691   2953
                                      2962   3001   3010   4500   4508
                                      4535   4590   4618   4666   4799
                                      4809   4820
CHROUT                         $32ae  4044D   774   2087   2091   2097
                                      2101   2103   3482   3484   3596
                                      3764   4111   4143   4161   4168
                                      4183   4295   4537   4668   4819
Z_VAR                          $3a00   225D   226    230    231   4460
                                      4462   4464   4466   4469   4499
                                      4564   4589   4592   4595   4600
                                      4631   4633   4636
FA                             $00ba   179D   401   4368   4387   4415
                                      4475   4495   4569   4585   4649
                                      4783   4833   4889   4901   4926
                                      4940   4955   4973
IO_STATUS                      $0090   175D   768   4420   4422   4473
                                      4492   4503   4512   4530   4661
                                      4788   4791   4813   4894   4907
                                      4913   4945
LV1                            $0010    92D  2139   2149   2150   2237
                                      2242   2246   2253   2265   3614
                                      3618   3623   3628   3632   3637
                                      3642   3646
LV0                            $000f    91D  2140   2146   2147   2236
                                      2238   2245   2251   2264   3084
                                      3086   3613   3622   3627   3636
                                      3641   3650
PrintText                      $3376  4175D   696    760    765   1514
                                      3495   3571   3576   3757   3762
                                      4355   4454   4456   4521   4558
                                      4560
Scr_Adr                        $0057   159D   539    542   3839y  3848y
                                      3905   3909   3920   3927   3933
                                      3946   3975y  3978   4038y  4078y
                                      4743
DICT_WORD                      $3809  4980D  2908   3215   3241   3251
                                      3260   3274   3279   3281   3282
                                      3284   3285   3287   3295   3297
Cursor_Col                     $0054   156D   572    583   3524   3837
                                      3846   3959   3990   4002   4035
                                      4039   4063   4076   4079   4151
NUMBER                         $002e   121D   618   2514   3621   3635
                                      3649   3656   3658   3661   3664
                                      3686   3704   3706   3713   3716
Last_Col                       $0029   116D   569    637    740   3503
                                      3525   3720   3746   3760   3797
                                      3918   3944   4080   4153   4742
Next_Instruction               $2cf0  2977D   827    855   1101   1103
                                      1155   1242   1304   1308   1314
                                      1332   2391   2401   2403
Main_True                      $2509  1311D  1033   1536   1554   1765
                                      1779   1792   1805   1819   1851
                                      1866   1899   4449   4544
QI0                            $0003    71D   785   1353   1354   1442
                                      1449   1678   2092   2378   2384
                                      2994   3016   4468   4637
Next_Datum                     $2cba  2930D  1955   1990   2815   2817
                                      2880   2882   2884   2886   2906
                                      2914   3172   3176
Chars_Left                     $0018   101D  2688   2721   2725   2733
                                      2739   2777   2785   4097   4123
                                      4125   4148   4170
QD0                            $0008    79D  1443   1448   1708   1983
                                      2851   2852   2863   2901   2946
                                      2968   3038   3124
Main_False                     $24fd  1301D  1535   1555   1766   1780
                                      1793   1806   1820   1852   1867
                                      1898   4604
Col_Adr                        $0059   160D   540    544    631    633
                                      3922   3928   3935   3948   3984
                                      3987   4065
QDH                            $0007    78D  3048   3152   3156   3160
                                      3166   3175   3179   3181   3183
                                      3187   3188
INTERNAL_ERROR                 $2f6c  3487D   944    945    946   1074
                                      1212   1498   1767   2487   2488
                                      4272
z_pop                          $25be  1479D  1029   1148   1157   1473
                                      1664   1669   1676   1680   1684
                                      2560
X5H                            $004d   148D  2681   2689   2699   2704
                                      2731   2734   2740   2745   2752
                                      2783
z_stack_ptr                    $002c   119D   686   1186   1205   1209
                                      1486   1488   1662   2426   4463
                                      4632
ParNum                         $001c   104D   826   1108   1109   1135
                                      1745   1753   1759   2406   2423
                                      2606
QD1                            $0009    80D  1711   1986   2854   2864
                                      2903   2949   2960   2970   3039
                                      3128
QI1                            $0004    72D   783   1356   1357   1681
                                      2094   2375   2387   2997   3008
                                      3018
Z_Code                         $0002    70D   520    678    828    869
                                       899    919    924   1138   2088
                                      3474
Charbuf_Ptr                    $0016    99D  3519   3529   3539   3554
                                      3583   3586   3592   3598   3601
QD2                            $000a    81D  1714   1989   2856   2866
                                      2947   2963   2972   3041   3131
QI2                            $0005    73D  1362   1363   1682   2098
                                      2374   2390   2995   3011   3020
Z_Upper_Size                   $2172   517D   554   3567   3902   4118
                                      4198   4201   4309   4755
Charbuf                        $0200   166D  3520   3534   3548   3549
                                      3585   3595   4565   4599
SAP                            $00ac   176D  3907   3911   3919   3926
                                      3930   3932   3936   3938
X5L                            $004c   147D  2678   2714   2722   2727
                                      2735   2741   2779   2784
RemH                           $0021   109D  2172   2195   2209   2210
                                      2231   2243   2254   2540
RemL                           $0020   108D  2171   2193   2206   2207
                                      2230   2240   2252   2542
ROWS                           $0019   173D   564    566    644    727
                                      4005   4008   4196   4733
InfoPro                        $38db  5009D   596    598    601    603
                                       619    755    758
Store_Byte                     $24bc  1221D   293   1963   2054   2058
                                      2081   2369   4552
Set_Screen_Pointer_X           $2181   535D  3903   3960   3971   3991
                                      4010   4709   4740
DSTATUS                        $033c   191D  4424   4432   4434   4437
                                      4521   4521   4521
COLOR                          $0286   186D   409   3756   3766   4064
                                      4098   4120   4171
TAP                            $00ae   177D  3908   3913   3915   3917
                                      3921   3931   3940
X4H                            $004b   146D  1763   2885   2888   2890
                                      2898   2899   2921
z_frame_ptr                    $002d   120D   687   1661   1685   2371
                                      2427   4465   4634
Resident_Pages                 $0022   110D   705    750    776   2950
                                      2961   2998   3009
CR                             $000d    50D  3515   3584   3867   3895
                                      4051   4431   5008
RAM_BA                         $000d    87D  2945   2966   2993   3014
                                      4811   4822   4823
Lvar_Hi                        $3a10   231D  1162   1251   1672   2396
                                      2402   2415
Lvar_Lo                        $3a00   230D  1164   1249   1670   2397
                                      2404   2413
EOP                            $39aa  5049D   225    321    358    360
                                       744    747
Save_Unit                      $3835  4995D   403   4345   4474   4568
                                      4584   4648
Get_Object_X1                  $2ec6  3302D  1550   1562   1602   1848
                                      3361   3454
Store_XA                       $26fa  1734D  2007   2115   2127   2155
                                      2164   2173
Push_AY                        $24a5  1196D  2372   2376   2380   2398
                                      2422   2555
Cursor_Row                     $0055   157D   532    571    582   4003
                                      4009   4200
X7L                            $0050   151D  2715   2747   2756   2764
                                      2904   2926
Status_Col                     $002a   117D   688   3505   3513   3786
                                      3793   3801
Cols                           $0023   111D   567    635    738   3738
                                      3906   3929
QuotH                          $001f   107D  2163   2189   2222   2223
                                      2235   2250
QuotL                          $001e   106D  2162   2187   2219   2220
                                      2234   2249
LV2                            $0011    93D  2183   2202   2517   2519
                                      3098   3102
QDL                            $0006    77D  3108   3141   3167   3177
                                      3780   3814
INTERR                         $3990  5031D  3491   3492   3495   3495
                                      3495
STIME                          $3968  5021D  3705   3707   3715   3717
                                      3723
Error_Beep                     $33c7  4291D  3888   4136   4156   4287
                                      4359
GLX_20                         $3333  4130D  4104   4138   4144   4157
                                      4162
GeCh_40                        $31d6  3891D  3868   3870   3876   3883
                                      3886
z_new_line                     $2fd8  3558D  1031   1466   3493   3516
                                      3542
Get_Global_Var                 $248e  1169D  1160   3681   3701   3710
                                      3788
z_opcode                       $2369   949D   874    884    902    935
                                       937
z_error_4                      $2364   946D   958    986    987    988
                                       989
Z_Call_Type                    $216e   512D  1677   1687   2362   2366
                                      2379
Z_STATUS                       $210a   503D  3502   3743   3758   3759
                                      3795
START                          $2001   316D   318    321    321    744
                                       746
X4L                            $004a   145D  1761   2887   2895   2896
                                      2919
X3L                            $0048   143D  1755   2440   2449   2483
                                      2653
MORE_Counter                   $002b   118D  3561   3562   3568   4119
                                      4310
O_SIBLING                      $0005   286D  1542   1613   1619   1623
                                      1945
O_PARENT                       $0004   285D  1561   1601   1628   1847
                                      1936
h_flags_lo                     $3d11   252D   720    721   4608   4627
Z_STACK_LO                     $3b00   226D   227    229   1208   1489
Configname                     $399b  5034D  4841   4857   4858   4859
SAVEUNIT                       $3852  4998D  4354   4454   4454   4454
Game_Unit                      $3834  4994D   402   4367   4386   4832
File_Text                      $381b  4990D  4401   4405   4480   4574
TEXT_WORD                      $3800  4979D  2708   2732   2738   3221
Format_Integer                 $302c  3605D   614   3682   3702   3711
Print_Formatted                $2f91  3510D  2495   2505   2518   3075
Dump_Byte                      $2f60  3477D  2089   2093   2095   2099
Find_Property                  $2f36  3417D  2000   2019   2055   2474
Property_Size                  $2f18  3382D  2033   2078   2476   3404
Get_Object_Reg                 $2ec8  3308D  1610   1620   1646   1939
Enco_20                        $2e2e  3215D  3229   3236   3265   3270
Get_Packed_Char                $2de0  3149D  3051   3078   3085   3099
DeTe_40                        $2d80  3075D  3055   3067   3073   3087
Parse_20                       $2b69  2685D  2723   2736   2746   2771
CMP_A0_X0                      $277b  1823D  1777   1790   1803   1817
z_je_f                         $272c  1766D  1754   1760   1762   1764
z_ret                          $2697  1658D  1010   1374   1383   1476
Store_AX                       $24be  1227D  1691   1878   1889   2041
Put_Var                        $249b  1181D  1573   1584   1925   2561
Get_Operand                    $242e  1083D   898    918    923   1130
z_error_1                      $2429  1074D  1053   1055   1057   1061
L_Encode_A                     $2164   504D  3239   3243   3253   3262
FNLEN                          $00b7   178D  4868   4869   4898   4949
X3H                            $0049   144D  1757   2437   2480   2654
Last_Row                       $0028   115D   645   3564   3942   4699
Block_Lo                       $0014    97D   770    775   4796   4815
WORD_LENGTH                    $0006   292D  2700   2707   3217   3293
WHITE                          $0001    28D  3765   4171   5039   5040
h_config                       $3d01   238D   709    718   3802
Z_STACK_HI                     $3c00   227D   228   1206   1491
FG_Color                       $39a3  5039D   408   3827   3829
Win_Top                        $3974  5025D  4199   4698   4708
SCORE                          $394b  5020D  3689   3723   3742
PRE_STATUS                     $3948  5016D  3757   3757   3757
BLANKS                         $393c  5014D  3576   3576   3576
InfoClr                        $38da  5008D   762    763    764
BITSHIFTER                     $38c1  5007D   760    760    760
NOSTORY                        $38b6  5004D   696    696    696
EOS                            $3898  5003D  1514   1514   1514
MORE                           $3890  5002D  3571   3571   3571
LOADFILE                       $387e  5001D  4560   4560   4560
LOADUNIT                       $386c  5000D  4558   4558   4558
SAVEFILE                       $385f  4999D  4456   4456   4456
PRESSRET                       $3836  4997D  4352   4353   4354
Load_Page                      $36bd  4775D   692    767   4812
Restore_Cursor                 $368c  4722D  3575   3577   3819
ASCII_Hex                      $3657  4671D   595    600   3479
Read_Block                     $3642  4656D  4591   4613   4622
Close_Save_File                $3632  4645D  4517   4522   4641
WG_Err                         $3540  4519D  4493   4504   4513
Empty_Keyboard_Queue           $33d9  4314D  3569   4318   4356
Return_Screen                  $327e  3997D  4052   4082   4308
Clear_Screen                   $324e  3965D   414   4050   4307
z_show_status                  $3133  3770D  1032   2601   3566
Print_Buffer                   $3016  3589D  2333   2602   4192
Get_Attr_Addr                  $2f47  3441D  1895   1905   1914
Decode_Text                    $2d49  3044D  1446   1715   3135
DiSe_20                        $2c8b  2901D  2891   2920   2922
Parse_60                       $2bef  2764D  2755   2758   2769
z_call_s                       $29ba  2346D   983   1007   1041
z_call_n                       $29b6  2339D   984   1066   1067
Divide_Signed                  $2923  2176D  2161   2170   2539
X2_TO_X0                       $2571  1396D  1789   1816   1924
z_rtrue                        $2555  1367D  1020   1338   1467
Store_X0                       $24c2  1239D  1722   1739   2547
Store_Zero                     $24ba  1215D  2008   2059   2323
Get_Var_X1L                    $246c  1143D  1569   1579   1721
z_execute                      $2345   928D   875    885    903
Z_Arg_Count                    $216c   510D  1665   2420   2425
L_Encode_Y                     $2165   505D  3238   3264   3268
RVS                            $00c7   182D  4019   4028   4077
MEMUSS                         $00c3   181D  4178   4179   4181
REVERSE_OFF                    $0092    59D  3763   4055   5002
X7H                            $0051   152D  2757   2902   2925
X6L                            $004e   149D  2680   2685   2750
Parse_Index                    $001d   105D  2676   2753   2770
OP_Type                        $001a   103D  1096   1098   1132
Info_Pages                     $0019   102D   606    745    751
Charbuf_End                    $0017   100D  3533   3538   3551
DEL                            $0014    54D  3869   4057   4132
alphabet                       $0013    96D  3050   3060   3062
REVERSE_ON                     $0012    52D  4053   5002   5016
O_CHILD                        $0006   287D  1549   1609   1938
h_flags_hi                     $3d10   251D  4606   4629
h_dynamic_size_hi              $3d0e   249D  4509   4619
h_objects_lo                   $3d0b   246D  2022   3339
h_objects_hi                   $3d0a   245D  2024   3342
h_dictionary_lo                $3d09   244D  2656   2812
h_dictionary_hi                $3d08   243D  2657   2813
CONFIG_END                     $39aa  5046D  4853   4854
CONFIG_START                   $39a3  5038D  4849   4850
ConfigDel                      $3998  5033D  4838   4841
File_Buf                       $381a  4989D  4397   4398
Unit_Text                      $3817  4987D  4342   4343
Unit_Buf                       $3816  4986D  4339   4340
Tokenizer_Flag                 $3815  4983D  2604   2754
SaFi_20                        $37d9  4960D  4967   4970
LoFi_60                        $37a2  4925D  4909   4914
LoFi_20                        $3787  4911D  4920   4923
Prep_Config                    $372a  4846D  4867   4876
LoSt_10                        $36ec  4812D  4821   4825
Save_Cursor                    $3684  4712D  3570   3775
Select_Text_Window             $3671  4694D   761   3767
Restore_Game                   $3575  4555D  4543   4550
Write_Block                    $3552  4525D  4502   4511
File_Dialog                    $344f  4394D  4457   4561
Unit_Dialog                    $33ef  4336D  4455   4559
DeUn_20                        $33ec  4331D  4327   4329
Reset_Screen                   $33cd  4304D   786   4603
goli_10                        $3319  4111D  4107   4109
Got_Line                       $32f5  4088D  4341   4399
CHRO_80                        $32e3  4076D  4071   4073
ClSc_20                        $326b  3984D  3986   3989
ClSc_10                        $325b  3975D  3977   3980
GeCh_30                        $31d0  3888D  3872   3879
GeCh_10                        $31a7  3865D  3866   3889
Get_Character                  $31a2  3854D  4130   4357
PrSc_20                        $30fe  3742D  3724   3747
Status_Number                  $3096  3671D  3732   3735
Next_Property                  $2f21  3395D  2057   3435
First_Property                 $2ef6  3349D  2053   3431
Enco_40                        $2e54  3238D  3232   3234
Enco_35                        $2e48  3231D  3225   3227
DeTe_10                        $2d4d  3049D  3076   3145
Decode_YX                      $2d41  3033D  1592   1654
ZSCII_2                        $2d26  3028D  3066   3245
NEIN_80                        $2d23  3021D  3017   3019
NEIN_10                        $2d07  3007D  2996   2999
NEDA_80                        $2ced  2973D  2969   2971
NEDA_10                        $2cd1  2959D  2948   2951
DiSe_50                        $2ca3  2914D  2909   2917
Set_Data_AY                    $2c51  2860D  2814   2878
SkDa_Ret                       $2c50  2857D  2853   2855
Sep_Std                        $2c37  2827D  2719   2798
SeDi_10                        $2c2a  2817D  2811   2821
Sep_All                        $2c14  2790D  2729   2781
SkSu_Ret                       $2c13  2787D  2778   2782
Parse_55                       $2bca  2745D  2726   2730
Parse_45                       $2ba6  2725D  2705   2720
zread_10                       $2b1e  2613D  2608   2611
LCX1_20                        $2b02  2593D  2588   2590
X1_PLUS_X2_TO_A0               $2a53  2454D  2436   2448
Prep_Mult_Div                  $29a1  2259D  2138   2233
Negate_Quot                    $2961  2214D  2191   2201
z_test_f                       $27b3  1867D  1861   1865
z_je_t                         $2729  1765D  1752   1758
z_not                          $26f1  1725D  1014   1065
zro_10                         $2669  1619D  1612   1622
z_remove_obj                   $2646  1595D  1008   1934
z_dec                          $2631  1576D  1005   1801
z_inc                          $2625  1566D  1004   1814
quit_20                        $25ed  1516D   697   1517
z_quit                         $25d7  1501D  1030   3496
z_print                        $2595  1436D  1022   1465
X2_TO_A0                       $2583  1416D  1776   1802
z_rfalse                       $255f  1377D  1021   1336
Branch_XA                      $2536  1341D  1334   1700
Get_Global_Var_Addr            $24e4  1267D  1172   1258
Store_Object                   $24bc   293D  1551   1563
Push_X0                        $24a1  1189D  1149   1243
GeVa_10                        $247e  1159D  1147   1156
Load_4_Operands                $245a  1120D   868   1137
JSRMOD                         $2353   939D   936    938
z_restart                      $2214   671D   416   1027
STTS_10                        $2213   667D   663    665
Screen_Setup                   $21e3   627D   407    685
Info_Print                     $21af   587D   749    756
Set_Screen_Pointer             $217f   529D   573   4204
Sep_Std_List                   $2166   509D  2835   2836
Set_Mode_80                    $20b7   420D   406    781
MEGA_Setup                     $2066   376D   348    372
ReLoop                         $2052   363D   366    371
FNADR                          $00bb   180D  4895y  4946
CLEAR                          $0093    57D  4049   5007
Cursor_Vis                     $0056   158D  3840   3850
X6H                            $004f   150D  2674   2686
DPI                            $003d   132D  2883   2916
DPH                            $003c   131D  2659   2877
DPL                            $003b   130D  2658   2876
C_Save_Row                     $0025   113D  4716   4725
C_Save_Col                     $0024   112D  4717   4726
P_MASK                         $001f   290D  3377   3413
HOME                           $0013    53D  4047   5016
LV3                            $0012    94D  2185   2199
O_PROP                         $0007   288D  1645   3360
STIME_COL                      $0006  5023D  3703   3712
BLUE                           $0006    33D  5041   5042
CYAN                           $0003    30D  4098   4120
h_font_height                  $3d27   269D   731
h_font_width                   $3d26   268D   730
h_screen_height_lo             $3d25   267D   728
h_screen_height_hi             $3d24   266D   724
h_screen_width_lo              $3d23   265D   726
h_screen_width_hi              $3d22   264D   723
h_screen_cols                  $3d21   263D   707
h_interpreter_version          $3d1f   261D   735
h_interpreter_number           $3d1e   260D   733
h_file_size_lo                 $3d1b   257D   658
h_file_size_hi                 $3d1a   256D   656
h_abbreviations_lo             $3d19   255D  3116
h_abbreviations_hi             $3d18   254D  3118
h_globals_lo                   $3d0d   248D  1282
h_globals_hi                   $3d0c   247D  1285
h_start_pc_lo                  $3d07   242D   784
h_start_pc_hi                  $3d06   241D   782
h_version                      $3d00   237D   693
BG_Color                       $39a6  5042D   410
BO_Color                       $39a5  5041D   412
Win_Bot                        $3975  5026D  4700
InfoEnd                        $393c  5012D   764
InfoSto                        $391b  5011D   758
InfoSta                        $38fb  5010D   755
Location_Length                $3814  4982D  3794
SaFi_40                        $37e4  4965D  4963
SaFi_10                        $37c0  4946D  4950
Save_File                      $37b2  4933D  4870
LoFi_40                        $3796  4918D  4916
LoFi_30                        $378a  4912D  4908
LoFi_10                        $3765  4895D  4899
Load_File                      $3757  4882D  4877
Load_Config                    $3750  4873D   405
Save_Config                    $3743  4863D  1504
DeCo_10                        $371c  4838D  4842
Delete_Config                  $370d  4829D  4866
LoSt_90                        $370a  4826D  4814
LoSt_20                        $36fe  4820D  4817
Load_Story                     $36e4  4803D   779
LoPa_30                        $36e1  4799D  4797
LoPa_20                        $36d8  4795D  4792
LoPa_10                        $36cb  4789D  4794
asts_01                        $36b5  4768D  4770
ASCII_TS                       $36b2  4760D  3490
EUW_10                         $36a6  4752D  4756
ClRo_10                        $369e  4743D  4745
Erase_Row                      $3697  4737D  4753
Select_Status_Window           $367c  4704D  3754
Hex_12                         $3670  4691D  4689
Hex_11                         $3664  4684D  4682
ReBl_10                        $3648  4662D  4665
RG_07                          $3624  4636D  4639
RG_06                          $3609  4622D  4624
RG_77                          $35f8  4613D  4615
RG_05                          $35ec  4606D  4597
RG_04                          $35dd  4599D  4602
RG_03                          $35db  4598D  4594
RG_20                          $35b4  4580D  4576
RG_10                          $35a7  4574D  4579
RG_02                          $358f  4564D  4567
z_restore                      $3567  4540D  1026
WrBl_10                        $3558  4531D  4534
WG_50                          $3530  4511D  4515
WG_40                          $351e  4502D  4506
WG_30                          $34fd  4487D  4482
WG_20                          $34f0  4480D  4485
WG_10                          $34d6  4468D  4471
Save_Game                      $34a6  4452D  4448
z_save                         $34a0  4445D  1025
RDS_30                         $348e  4431D  4423
RDS_20                         $348b  4430D  4426
RDS_10                         $3478  4421D  4429
Read_Disk_Status               $3468  4411D  4520
FiDi_20                        $3464  4406D  4403
FiDi_10                        $3458  4401D  4407
Close_Story                    $343f  4383D  4826
Open_Story                     $341b  4364D   689
wfret_99                       $341a  4361D  4358
wfret_10                       $340f  4357D  4360
Wait_for_Return                $3403  4349D   780
DeUn_10                        $33e6  4328D  4325
Decode_Unit                    $33df  4322D  4344
Click                          $33cc  4298D  4285
z_sound_effect                 $33be  4280D  1062
z_extension                    $33b8  4268D  1034
z_erase_window                 $33b7  4263D  1054
z_output_stream                $33b6  4253D  1060
z_set_cursor                   $33b5  4244D  1056
z_buffer_mode                  $33b4  4239D  1059
z_set_text_style               $33b3  4226D  1058
Sund_10                        $33af  4222D  4220
z_set_window                   $33aa  4209D  1052
split_err                      $33a9  4206D  4197
split_20                       $33a5  4204D  4202
split_10                       $3391  4196D  4194
z_split_window                 $3388  4190D  1051
PrTe_B                         $3387  4187D  4182
PrTe_A                         $337c  4181D  4186
GLX_90                         $3367  4166D  4131
GLX_70                         $335f  4159D  4154
GLX_50                         $3359  4156D  4150
GLX_45                         $3352  4151D  4149
GLX_40                         $334c  4148D  4133
GLX_30                         $3346  4142D  4135
GLX_10                         $3333  4126D  4124
Get_Line_X1                    $331f  4115D  2619
goli_01                        $3306  4100D  4112
CHRO_90                        $32f2  4083D  4081
CHRO_20                        $32dd  4072D  4069
ScDe_Ret                       $32ac  4040D  4036
Screen_Del                     $32a1  4032D  4058
Screen_Reverse_On              $329c  4024D  4054
Screen_Reverse_Off             $3297  4015D  4056
ReSc_10                        $3290  4009D  4006
Home_Screen                    $3244  3954D  4048
SMW_30                         $3237  3945D  3950
SMW_20                         $3203  3919D  3924
SMW_10                         $3200  3918D  3943
Scroll_Main_Window             $31df  3899D  4007
GeCh_24                        $31cc  3885D  3881
GeCh_22                        $31c0  3878D  3874
Cursor_Off                     $3197  3844D  3892
Cursor_On                      $318e  3835D  3864
FiCo_10                        $3182  3827D  3831
zss_90                         $3175  3813D  3817
zss_40                         $3170  3808D  3806
zss_30                         $316d  3807D  3804
zss_20                         $3154  3795D  3798
zss_10                         $3138  3780D  3783
Print_Status                   $310b  3751D  3808
PrSc_10                        $30fc  3741D  3739
Print_Score                    $30e6  3727D  3805
Print_Time                     $30b2  3697D  3807
StNu_20                        $30ac  3691D  3688
StNu_10                        $30a2  3686D  3693
FORINT_06                      $3095  3668D  3663
FORINT_05                      $3088  3661D  3667
FORINT_04                      $3079  3653D  3655
FORINT_03                      $3063  3640D  3648
FORINT_02                      $304b  3626D  3634
FORINT_01                      $3033  3612D  3620
Format_XA                      $3030  3610D  2512
PrBu_Ret                       $302b  3602D  3593
PrBu_10                        $301c  3595D  3599
Terminate_Buffer               $300d  3580D  3565
znl_10                         $2ff8  3572D  3574
PrFo_50                        $2fd0  3551D  3546
PrFo_45                        $2fc9  3548D  3553
PrFo_40                        $2fbc  3539D  3535
PrFo_35                        $2fb2  3534D  3537
PrFo_30                        $2fae  3532D  3526
PrFo_25                        $2fad  3530D  3518
PTS_01                         $2f90  3506D  3504
Print_To_Status                $2f87  3499D  3514
Dump_Code                      $2f5e  3471D  3494
gaa_02                         $2f5a  3466D  3464
gaa_01                         $2f59  3465D  3467
FIPR_30                        $2f46  3438D  3434
FIPR_20                        $2f45  3437D  3433
FIPR_10                        $2f39  3432D  3436
NePr_20                        $2f2f  3411D  3409
FiPr_10                        $2f13  3376D  3374
GOA_02                         $2ee4  3338D  3336
GOA_01                         $2edd  3334D  3332
Enco_80                        $2e98  3274D  3294
Enco_70                        $2e94  3272D  3218
Enco_60                        $2e8c  3267D  3246
Enco_50                        $2e65  3245D  3248
Enco_30                        $2e37  3221D  3212
Enco_10                        $2e2c  3214D  3222
Encode                         $2e26  3198D  2748
GPC_Ret                        $2e25  3195D  3155
GPC_20                         $2e00  3172D  3153
GPC_10                         $2df6  3165D  3157
DeTe_65                        $2dd5  3140D  3144
DeTe_60                        $2dac  3108D  3111
DeTe_55                        $2d98  3091D  3057
DeTe_50                        $2d86  3078D  3068
DeTe_35                        $2d7e  3074D  3071
DeTe_30                        $2d76  3070D  3064
DeTe_25                        $2d68  3062D  3059
DeTe_20                        $2d5c  3056D  3053
DeTe_15                        $2d51  3051D  3061
Swap_Ret                       $2d40  3030D  3052
NEIN_50                        $2d16  3015D  3002
NEDA_50                        $2ce0  2967D  2954
DiSe_70                        $2cb5  2925D  2889
DiSe_30                        $2c95  2906D  2911
Dictionary_Search              $2c5a  2870D  2749
Skip_Data                      $2c43  2844D  2881
SeSt_Ret                       $2c42  2841D  2837
SeSt_10                        $2c39  2836D  2839
SeDi_Ret                       $2c36  2824D  2799
SeDi_20                        $2c35  2823D  2819
Sep_Dict                       $2c19  2802D  2717
SkSu_10                        $2c02  2779D  2786
Skip_Surplus                   $2bfe  2774D  2702
Parse_70                       $2bf9  2770D  2763
Parse_50                       $2bc1  2738D  2718
Parse_40                       $2b8a  2708D  2710
Parse_35                       $2b84  2704D  2701
Parse_30                       $2b7b  2699D  2690
Parse_25                       $2b75  2692D  2687
Parse_15                       $2b5a  2674D  2671
Parse_10                       $2b56  2672D  2669
Parse_07                       $2b41  2658D  2655
Parse_05                       $2b3b  2656D  2652
Parse_Input                    $2b33  2629D  2623
zread_20                       $2b32  2624D  2622
z_read                         $2b06  2598D  1045
LCX1_Ret                       $2b05  2595D  2586
LCX1_10                        $2af0  2584D  2594
Lower_Case_X1                  $2aee  2581D  2620
z_read_char                    $2aed  2574D  1063
z_encode_text                  $2aed  2565D  1069
z_pull                         $2ae7  2558D  1050
z_push                         $2ae0  2550D  1049
zrand_1                        $2add  2547D  2545
z_random                       $2ab9  2526D  1048
zprnu_3                        $2ab3  2520D  2516
zprnu_2                        $2aa6  2514D  2522
zprnu_1                        $2aa1  2512D  2503
z_print_num                    $2a8c  2498D  1047
z_print_char                   $2a87  2491D  1046
z_error11                      $2a82  2488D  2479
z_error10                      $2a7d  2487D  2475
zpupr_3                        $2a78  2483D  2477
z_put_prop                     $2a65  2469D  1044
z_storeb                       $2a4b  2445D  1043
z_storew                       $2a3a  2431D  1042
call_50                        $2a27  2420D  2393
call_40                        $2a22  2416D  2407
call_30                        $29fa  2396D  2418
call_20                        $29ce  2371D  2365
call_10                        $29cb  2369D  2367
call_00                        $29bc  2362D  2343
z_set_color                    $29b2  2327D   985
z_check_argc                   $29ad  2305D  1072
z_tokenize                     $29ac  2294D  1068
z_scan_table                   $29ab  2270D  1064
z_print_table                  $29ab  2283D  1071
z_copy_table                   $29ab  2274D  1070
z_error_8                      $29a0  2256D  2232
DiUn_02                        $2990  2247D  2244
DiUn_01                        $2978  2234D  2248
Divide_Unsigned                $296f  2227D  2198
Divi_05                        $2960  2211D  2203
Divi_04                        $2953  2204D  2197
Divi_03                        $294f  2202D  2200
Divi_02                        $2945  2198D  2196
Divi_01                        $2938  2192D  2190
z_mod                          $2919  2167D   982
z_div                          $290f  2158D   981
z_mul_2                        $2905  2151D  2143
z_mul_1                        $28ee  2139D  2152
z_mul                          $28eb  2130D   980
z_sub                          $28de  2118D   979
z_add                          $28d1  2106D   978
z_get_prop_len                 $288c  2063D  1003
zgnp_20                        $2889  2059D  2056
zgnp_10                        $287e  2055D  2052
z_get_next_prop                $2874  2045D   977
zgp_30                         $286f  2040D  2035
zgp_20                         $286b  2037D  2031
zgp_10                         $2865  2033D  2020
z_get_prop                     $284c  2012D   975
gepa_10                        $2849  2008D  2001
z_get_prop_addr                $2838  1993D   976
Byte_Array                     $2823  1975D  1962
Word_Array                     $281f  1966D  1953
z_loadb                        $2819  1959D   974
z_loadw                        $280e  1950D   973
zinob_1                        $280d  1947D  1944
z_insert_obj                   $27f3  1928D   972
z_store                        $27ed  1921D   971
z_clear_attr                   $27e3  1911D   970
z_set_attr                     $27db  1902D   969
z_teat_t                       $27d8  1899D  1897
z_test_attr                    $27ce  1892D   968
z_and                          $27c2  1881D   967
z_or                           $27b6  1870D   966
z_test                         $27a0  1855D   965
z_jin_f                        $279d  1852D  1850
z_jin                          $2791  1844D   964
cmpax_2                        $2790  1841D  1838
cmpax_1                        $2786  1836D  1832
z_inc_cf                       $2778  1820D  1818
z_inc_chk                      $2767  1809D   963
z_dec_cf                       $2764  1806D  1804
z_dec_chk                      $2756  1796D   962
z_jg_f                         $2753  1793D  1791
z_jg                           $2745  1783D   961
z_jl_f                         $2742  1780D  1778
z_jl                           $2734  1770D   960
z_error_9                      $272f  1767D  1746
z_je_2                         $271d  1759D  1756
z_je_1                         $2711  1753D  1750
z_je                           $2701  1742D   959
z_load                         $26eb  1718D  1013
z_print_paddr                  $26d9  1703D  1012
z_jump                         $26d2  1695D  1011
zret_30                        $26d1  1692D  1688
zret_20                        $26b1  1676D  1667
zret_10                        $26a4  1669D  1674
zpo_10                         $2694  1654D  1652
z_print_obj_A                  $2686  1642D  3791
z_print_obj                    $2682  1635D  1009
zro_30                         $2681  1632D  1608
zro_20                         $2678  1627D  1617
z_print_addr                   $263f  1587D  1006
z_dec_1                        $263a  1583D  1581
z_inc_1                        $262e  1573D  1571
z_get_parent                   $261d  1558D  1002
zg_chi_f                       $261a  1555D  1553
zg_chi_1                       $260d  1550D  1543
z_get_child                    $260b  1546D  1001
z_get_sibling                  $2607  1539D  1000
z_jz_t                         $2604  1536D  1534
z_jz                           $25fb  1529D   999
quit_30                        $25f7  1521D  1519
quit_10                        $25dc  1509D  1512
z_error_5                      $25d2  1498D  1487
z_ret_popped                   $25b4  1470D  1028
z_print_ret                    $25ab  1460D  1023
z_nop                          $25aa  1454D  1024
zprin_2                        $25a3  1448D  1451
z_prin_1                       $2597  1442D  1445
X0_TO_A0                       $258c  1426D  1815
X1_TO_A0                       $257a  1406D  1788
X1_TO_X0                       $2568  1386D  1775
Bran_21                        $2550  1362D  1360
Bran_20                        $253e  1352D  1350
Bran_14                        $2530  1335D  1322
Bran_13                        $2527  1331D  1328
Bran_12                        $2524  1329D  1325
Bran_11                        $251a  1323D  1318
Bran_10                        $250e  1316D  1305
Bran_01                        $2502  1306D  1315
GGVA_Ret                       $24fc  1288D  1307
Put_Global_Var                 $24d7  1255D  1246
stx0_01                        $24c7  1245D  1185
Store_A_X0H                    $24c0  1233D  1956
z_error_6                      $24b5  1212D  1210
Get_Var_A                      $2476  1152D  1107
L4OP_20                        $2469  1138D  1131
geop_04                        $2459  1117D  1106
geop_03                        $244a  1108D  1105
geop_02                        $2445  1106D  1099
geop_01                        $243b  1102D  1100
opcodes_var                    $23e9  1038D   874
opcodes_0op                    $23c9  1017D   884
opcodes_1op                    $23a9   992D   902
z_error_2                      $235a   944D  1035
z_exe_1f                       $2343   925D   871
z_op_two                       $232f   906D   849
z_op_one                       $2321   888D   851
z_op_zero                      $231c   878D   853
PC_LOOP                        $22f6   789D   940
Start_50                       $22e0   779D   769
Start_40                       $22da   775D   772
Start_30                       $22c8   767D   777
Start_20                       $224c   698D   695
Start_10                       $221c   679D   682
Story_Pages                    $21f8   649D   757
InSi_10                        $21d7   618D   623
Info_Size                      $21ce   610D   759
Get_Row_Col                    $21aa   576D  4715
SRC_20                         $21a3   571D   568
SRC_10                         $219d   567D   565
Set_Row_Col                    $2197   558D  4727
Window_Home                    $2192   549D  4203
Z_Underline                    $2170   514D  4222
Row_Hi                         $20f1   477D   541
Row_Lo                         $20d8   451D   538
KeVE_10                        $20ce   441D   444
Set_Kernal_Vectors             $20cc   437D   392
Link                           $203b   344D   327
CINV                           $0314   190D   442
SCNMPG                         $0288   187D   394
BLNSW                          $00cc   183D   398
ZP_END                         $005d   162D   681
STAT_SCORE                     $0034  5017D  3737
MOVES_COL                      $0016  5018D  3734
Block_Hi                       $0015    98D  4798
YELLOW                         $0007    34D  3755
SCORE_COL                      $0007  5022D  3731
V_SIZE                         $0004   291D  2910
ZV                             $0003     8D   694
RED                            $0002    29D  5043
R6510                          $0001   174D   387
h_alphabet_lo                  $3d35   278
h_alphabet_hi                  $3d34   277
h_default_fg_color             $3d2d   275
h_default_bg_color             $3d2c   274
h_strings_offset_lo            $3d2b   273
h_strings_offset_hi            $3d2a   272
h_functions_offset_lo          $3d29   271
h_functions_offset_hi          $3d28   270
h_screen_rows                  $3d20   262
h_checksum_lo                  $3d1d   259
h_checksum_hi                  $3d1c   258
h_serial                       $3d12   253
h_dynamic_size_lo              $3d0f   250
h_resident_size_lo             $3d05   240
h_resident_size_hi             $3d04   239
Filename                       $3b00   229
TB_Color                       $39a7  5043
TI_Color                       $39a4  5040
ConfigWri                      $39a1  5035
RAMB_1                         $3983  5029
RAMB_0                         $3976  5028
Storyname                      $3830  4993
SaFi_60                        $37f0  4972
Erase_Upper_Window             $36a4  4749
Erase_Last_Row                 $3693  4730
z_ext_restore                  $356d  4547
z_ext_save                     $34a0  4442
z_save_undo                    $33be  4276
z_error12                      $33b9  4272
zew_20                         $33b7  4265
Set_Underline                  $33ab  4215
zsw_ret                        $33aa  4211
Fix_Colors                     $3180  3823
Z_Active_Font                  $29b1  2324
z_set_font                     $29ae  2314
z_log_shift                    $29ae  2310
zpt_40                         $29ab  2291
Dump_QI                        $28a4  2084
z_catch                        $25fa  1524
opcodes_ext                    $242e  1077
z_error_3                      $235f   945
DumpQI                         $2359   942
opvar_20                       $230f   869
z_op_var                       $230c   858
opvar_10                       $230c   868
PC_30                          $22f6   823
Set_Screen_Rows                $21f2   640
Breakpoint                     $217e   521
Z_Copy                         $2173   520
Z_Active_Window                $2171   515
Z_Monospace                    $216f   513
Z_Buffer_Mode                  $216d   511
MODE                           $0291   189
KEYRPT                         $028a   188
BLNON                          $00cf   185
BLNCT                          $00cd   184
CURSOR_LEFT                    $009d    60
CURSOR_UP                      $0091    58
KEY_F8                         $008c    21
KEY_F6                         $008b    20
KEY_F4                         $008a    19
KEY_F2                         $0089    18
KEY_F7                         $0088    17
KEY_F5                         $0087    16
KEY_F3                         $0086    15
KEY_F1                         $0085    14
X8H                            $0053   154
X8L                            $0052   153
P3H                            $003a   129
P3L                            $0039   128
P2H                            $0038   127
P2L                            $0037   126
P1H                            $0036   125
P1L                            $0035   124
P0H                            $0034   123
P0L                            $0033   122
C_Save_Adr                     $0026   114
CURSOR_RIGHT                   $001d    56
ESC                            $001b    55
CURSOR_DOWN                    $0011    51
LT_GREY                        $000f    42
LT_BLUE                        $000e    41
LT_GREEN                       $000d    40
GREY                           $000c    39
DARKGREY                       $000b    38
PINK                           $000a    37
BROWN                          $0009    36
TAB                            $0009    49
O_SIZE                         $0009   289
BACKSPACE                      $0008    48
ORANGE                         $0008    35
GREEN                          $0005    32
PURPLE                         $0004    31
BLACK                          $0000    27
