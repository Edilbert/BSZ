              *************************************
              * BSZ = Bit Shifter's Z interpreter *
              *       for MEGA65      26-Oct-2020 *
              *************************************

              .CPU 45GS02

              ***********************
              * Commodore KEY codes *
              ***********************

0085          KEY_F1       = 133
0086          KEY_F3       = 134
0087          KEY_F5       = 135
0088          KEY_F7       = 136
0089          KEY_F2       = 137
008a          KEY_F4       = 138
008b          KEY_F6       = 139
008c          KEY_F8       = 140

0011          CURSOR_DOWN  = $11
001d          CURSOR_RIGHT = $1d
0091          CURSOR_UP    = $91
009d          CURSOR_LEFT  = $9d

              *************************
              * Commodore Color Codes *
              *************************

0000          BLACK    =  0
0001          WHITE    =  1
0002          RED      =  2
0003          CYAN     =  3
0004          PURPLE   =  4
0005          GREEN    =  5
0006          BLUE     =  6
0007          YELLOW   =  7
0008          ORANGE   =  8
0009          BROWN    =  9
000a          PINK     = 10
000b          DARKGREY = 11
000c          GREY     = 12
000d          LT_GREEN = 13
000e          LT_BLUE  = 14
000f          LT_GREY  = 15

              *************************
              * display control codes *
              *************************

000d          CR       = $0d
0014          DEL      = $14
0094          INS      = $94

              **************
              * attributes *
              **************

0000          NORMAL    = $00
0010          BLINK     = $10
0020          REVERSE   = $20
0040          BOLD      = $40
0080          UNDERLINE = $80

              **********
              * Z keys *
              **********

0081          KEY_UP    = $81
0082          KEY_DOWN  = $82
0083          KEY_LEFT  = $83
0084          KEY_RIGHT = $84

              ********************************************************
              * Interpreter Zero page variables (occupy BASIC space) *
              ********************************************************

0002          & = $02

              ; Instruction pointer     LDZ QI0  ->  LDA [RAMD],Z

0002          Z_Code         .BSS 2           ; current code byte & previous
0004          QI0            .BSS 1           ; Byte 0  pc = (QI0/QI1/QI2)
0005          QI1            .BSS 1           ; Byte 1  Floppy block low
0006          QI2            .BSS 1           ; Byte 2  Floppy block high

              ; Data pointer            LDZ QD0  ->  LDA [RAMD],Z

0007          QDL            .BSS 1           ; current packed data low
0008          QDH            .BSS 1           ; current packed data high
0009          QD0            .BSS 1           ; Byte 0  pc = (QD0/QD1/QD2)
000a          QD1            .BSS 1           ; Byte 1  Floppy block low
000b          QD2            .BSS 1           ; Byte 2  Floppy block high

              ; keep above variables together (block push/pull)

000c          RAMD           .BSS 4           ; 32 bit RAM address for story data

              ; Multi purpose local variables

0010          LV0            .BSS 1
0011          LV1            .BSS 1
0012          LV2            .BSS 1

0013          Alphabet       .BSS 1
0014          Attribute      .BSS 1
0015          Block_Lo       .BSS 1
0016          Block_Hi       .BSS 1
0017          Call_Type      .BSS 1
0018          Charbuf_Ptr    .BSS 1
0019          Charbuf_End    .BSS 1
001a          Chars_Left     .BSS 1
001b          Colour         .BSS 1
001c          C_Save_Col     .BSS 1           ; save column
001d          C_Save_Row     .BSS 1           ; save row
001e          Info_Pages     .BSS 1
001f          Left_Margin    .BSS 1
0020          Log            .BSS 1
0021          MORE_Counter   .BSS 1
0022          NUMBER         .BSS 5
0027          OP_Type        .BSS 2
0029          ParNum         .BSS 1
002a          Parse_Index    .BSS 1
002b          Prop_Mask      .BSS 1
002c          Resident_Pages .BSS 1
002d          Right_Margin   .BSS 1
002e          Save_Unit      .BSS 1
002f          Status_Col     .BSS 1
0030          Timeout        .BSS 2           ; timeout [jiffies]
0032          Tok_Flag       .BSS 1           ; tokeniser flag
0033          TO_Flag        .BSS 1           ; timeout flag
0034          Upper_Size     .BSS 1           ; rows of upper window
0035          Version        .BSS 1           ; $80 = version > 3
0036          Vocab_Length   .BSS 1           ; length of packed vocab
0037          Win_Bot        .BSS 1
0038          Win_Top        .BSS 1           ; upper row of active window
0039          Word_Length    .BSS 1           ; length of dictionary words
003a          z_stack_ptr    .BSS 2           ; Z_STACK_LO -> Z_STACK_HI
003c          z_frame_ptr    .BSS 2           ; save stack pointer
003e          DPL            .BSS 1           ; dictionary pointer
003f          DPH            .BSS 1
0040          DPI            .BSS 1
0041          A0L            .BSS 1           ; primary   address register
0042          A0H            .BSS 1
0043          A1L            .BSS 1           ; secondary address register
0044          A1H            .BSS 1
0045          X0L            .BSS 1           ; primary value   register
0046          X0H            .BSS 1
0047          X1L            .BSS 1           ; parameter register
0048          X1H            .BSS 1           ; X1L - X4H must be contiguous
0049          X2L            .BSS 1
004a          X2H            .BSS 1
004b          X3L            .BSS 1
004c          X3H            .BSS 1
004d          X4L            .BSS 1
004e          X4H            .BSS 1
004f          X5L            .BSS 1
0050          X5H            .BSS 1
0051          X6L            .BSS 1
0052          X6H            .BSS 1
0053          X7L            .BSS 1
0054          X7H            .BSS 1
0055          X8L            .BSS 1
0056          X8H            .BSS 1
0057          GLL            .BSS 1           ; Get_Line pointer
0058          GLH            .BSS 1

0059          Font_Sel       .BSS 1           ; font selector normal - graphics
005a          Cursor_Col     .BSS 1
005b          Cursor_Row     .BSS 1
005c          Z_Mem_Base     .BSS 2           ; stream address
005e          Z_Mem_Ptr      .BSS 2           ; Z memory pointer
0060          ZP_CLEAR       .BSS 1

              ; following variables are NOT cleared at restart

0061          Segment        .BSS 1
0062          Scr_Adr        .BSS 2           ; screen RAM 16 bit address
0064          Col_Adr        .BSS 4           ; colour RAM 32 bit address
0068          DICT_WORD      .BSS 6           ; packed ZSCII dictionary word
006e          TEXT_WORD      .BSS 9           ; unpacked     dictionary word



              ********************
              * system variables *
              ********************

0050          COLS        =  80
0019          ROWS        =  25
0001          R6510       = $01               ; C64 bank switching CPU port
0090          IO_STATUS   = $90               ; used by I/O routines
00a0          Jiffy       = $a0               ; jiffy clock
00ac          Scr_Row     = $ac               ; used in screen scrolling
00ae          Col_Row     = $ae               ; used in screen scrolling
00b7          FNLEN       = $b7
00ba          FA          = $ba
00bb          FNADR       = $bb
00c3          MEMUSS      = $c3               ; string address
00cc          BLNSW       = $cc               ; cursor blink flag
00cd          BLNCT       = $cd
00cf          BLNON       = $cf
0200          Charbuf     = $200
0288          SCNMPG      = $288              ; screen memory page for C64 mode
0314          CINV        = $314              ; kernal vector table
033c          DSTATUS     = $33c              ; 40 bytes disk status
0800          SCREEN      = $0800             ; character RAM in 80 column mode
d800          COLRAM      = $d800             ; color     RAM
d012          Raster      = $d012
d020          BorderCol   = $d020
d021          BackgCol0   = $d021
d400          Voc1FreqLo  = $d400
d401          Voc1FreqHi  = $d401
d404          Voc1Control = $d404
d406          Voc1SusRel  = $d406
d418          FiltMode    = $d418
d41b          Random      = $d41b
fd30          ROM_Vectors = $fd30
fda3          Init_IO     = $fda3
ff5b          Init_Editor = $ff5b

              **********
              * Kernal *
              ******** *

ff90          SETMSG = $ff90
ff93          SECOND = $ff93
ff96          TKSA   = $ff96
ffa5          ACPTR  = $ffa5
ffa8          CIOUT  = $ffa8
ffab          UNTLK  = $ffab
ffae          UNLSN  = $ffae
ffb1          LISTEN = $ffb1
ffb4          TALK   = $ffb4
ffbd          SETNAM = $ffbd
ffe4          GETIN  = $ffe4
fff0          PLOT   = $fff0
fffc          RESET  = $fffc

              ************
              * Z arrays *
              ************

0400          Z_VAR       = $0400             ; variables
0500          Z_STACK_LO  = $0500             ; stack bottom
0800          Z_STACK_HI  = $0800             ; stack top
033c          Z_STATUS    = $033c             ; version 3
0400          Lvar_Lo     = Z_VAR
0410          Lvar_Hi     = Z_VAR + $10
2f00          Z_HEADER    = [EOP + $ff] & $ff00

              ****************
              * STORY HEADER *
              ****************

2f00          h_version             = Z_HEADER
2f01          h_config              = Z_HEADER +   1
2f04          h_resident_size_hi    = Z_HEADER +   4
2f05          h_resident_size_lo    = Z_HEADER +   5
2f06          h_start_pc_hi         = Z_HEADER +   6
2f07          h_start_pc_lo         = Z_HEADER +   7
2f08          h_dictionary_hi       = Z_HEADER +   8
2f09          h_dictionary_lo       = Z_HEADER +   9
2f0a          h_objects_hi          = Z_HEADER +  10
2f0b          h_objects_lo          = Z_HEADER +  11
2f0c          h_globals_hi          = Z_HEADER +  12
2f0d          h_globals_lo          = Z_HEADER +  13
2f0e          h_dynamic_size_hi     = Z_HEADER +  14
2f0f          h_dynamic_size_lo     = Z_HEADER +  15
2f10          h_flags_hi            = Z_HEADER +  16
2f11          h_flags_lo            = Z_HEADER +  17
2f12          h_serial              = Z_HEADER +  18
2f18          h_abbreviations_hi    = Z_HEADER +  24
2f19          h_abbreviations_lo    = Z_HEADER +  25
2f1a          h_file_size_hi        = Z_HEADER +  26; in words for version 1-3
2f1b          h_file_size_lo        = Z_HEADER +  27; in words for version 1-3
2f1c          h_checksum_hi         = Z_HEADER +  28
2f1d          h_checksum_lo         = Z_HEADER +  29
2f1e          h_interpreter_number  = Z_HEADER +  30
2f1f          h_interpreter_version = Z_HEADER +  31
2f20          h_screen_rows         = Z_HEADER +  32
2f21          h_screen_cols         = Z_HEADER +  33
2f22          h_screen_width_hi     = Z_HEADER +  34
2f23          h_screen_width_lo     = Z_HEADER +  35
2f24          h_screen_height_hi    = Z_HEADER +  36
2f25          h_screen_height_lo    = Z_HEADER +  37
2f26          h_font_width          = Z_HEADER +  38
2f27          h_font_height         = Z_HEADER +  39
2f28          h_functions_offset_hi = Z_HEADER +  40
2f29          h_functions_offset_lo = Z_HEADER +  41
2f2a          h_strings_offset_hi   = Z_HEADER +  42
2f2b          h_strings_offset_lo   = Z_HEADER +  43
2f2c          h_default_bg_color    = Z_HEADER +  44
2f2d          h_default_fg_color    = Z_HEADER +  45

2f34          h_Alphabet_hi         = Z_HEADER +  52
2f35          h_Alphabet_lo         = Z_HEADER +  53

ffffffff          * = 0

              ***************
              * Print Macro *
              ***************

            MACRO Print(lab)
                    LDA  #<lab
                    LDY  #>lab
                    LDX  #?lab
                    JSR  PrintText
            ENDMAC

            MACRO ERROR(num)
                    LDA  #num
                    JMP  INTERNAL_ERROR
            ENDMAC

1001          START = $1001                   ; *** BASIC ***

0000          * = START

                      .STORE START,EOC-START,"bsz-mega65"

              ****************
              * BASIC header *
              ****************

1001 3b 10            .WORD Link
1003 e4 07            .WORD 2020              ; line number
1005 8b               .BYTE $8b               ; IF   token
1006 c2               .BYTE $c2               ; PEEK token
1007 28 34 34         .BYTE "(44)"
100b b2               .BYTE $b2               ; =    token
100c 38               .BYTE "8"
100d a7               .BYTE $a7               ; THEN token
100e 9e               .BYTE $9e               ; SYS  token
100f 28 32 31         .BYTE "(2113):"         ; C64  start
1016 d5               .BYTE $d5               ; ELSE token
1017 fe 02            .BYTE $fe,$02           ; BANK token
1019 30 3a            .BYTE "0:"              ; BANK argument
101b 9e               .BYTE $9e               ; SYS  token
101c 28 38 32         .BYTE "(8253):"         ; C65  start
1023 8f               .BYTE $8f               ; REM  token
1024 20 42 49         .BYTE " BIT SHIFTER 26-OCT-20",0
103b 00 00    Link    .WORD 0                 ; BASIC end marker

103d 78               SEI
103e 4c 81 46         JMP  Mode_65 + $1000    ; relocate for 65 mode

              **************
              Module Mode_64
              **************

1041 a9 41            lDA  #65                ; 40MHz CPU
1043 85 00            STA  0

1045 a0 00            LDY  #0
1047 84 41            STY  A0L
1049 84 43            STY  A1L
104b a9 2e            LDA  #>[EOC - $0800]
104d 85 42            STA  A0H
104f a9 36            LDA  #>EOC
1051 85 44            STA  A1H

1053 b1 41    _loop   LDA  (A0L),Y
1055 91 43            STA  (A1L),Y
1057 c8               INY
1058 d0 f9            BNE  _loop
105a c6 42            DEC  A0H
105c c6 44            DEC  A1H
105e a5 44            LDA  A1H
1060 c9 10            CMP  #>START
1062 b0 ef            BCS  _loop
1064 4c 67 10         JMP  MEGA_Setup
1067          EndMod [Mode_64] Size = 38 [$26]

              *****************
              Module MEGA_Setup
              *****************

1067 78               SEI
1068 a9 00            LDA  #0                 ; Configure MEGA65 memory
106a aa               TAX
106b a8               TAY
106c 4b               TAZ
106d 5c               MAP
106e ea               EOM

106f a9 36            LDA  #$36               ; I/O & kernal
1071 85 01            STA  R6510
1073 a9 41            LDA  #65                ; 40 MHz
1075 85 00            STA  0

1077 20 a3 fd         JSR  Init_IO
107a 20 f9 10         JSR  Set_Kernal_Vectors
107d a9 04            LDA  #$04               ; C64 default value
107f 8d 88 02         STA  SCNMPG             ; set screen memory page
1082 20 5b ff         JSR  Init_Editor
1085 a9 ff            LDA  #-1                ; cursor off
1087 85 cc            STA  BLNSW
1089 58               CLI
108a a2 08            LDX  #8
108c 86 ba            STX  FA
108e 8e c7 2c         STX  Game_Unit
1091 86 2e            STX  Save_Unit          ; default SAVE unit = GAME unit

1093 20 b7 10         JSR  Set_Mode_80
1096 20 55 2e         JSR  Load_Charset
1099 20 25 26         JSR  Screen_Setup
109c 20 05 11         JSR  Set_Attic_RAM
109f ad 51 2e         LDA  BG_Color
10a2 8d 21 d0         STA  BackgCol0
10a5 ad 50 2e         LDA  BO_Color
10a8 8d 20 d0         STA  BorderCol
10ab 20 03 29         JSR  Clear_Screen
10ae 20 4f 2c         JSR  Load_Config
10b1 20 90 ff         JSR  SETMSG             ; disable kernal messages
10b4 4c 75 26         JMP  z_restart
10b7          EndMod [MEGA_Setup] Size = 80 [$50]

              ******************
              Module Set_Mode_80
              ******************

              *       make VIC IV registers visible
              *       by using the knock sequence $47 $53

10b7 a9 47            LDA  #$47
10b9 8d 2f d0         STA  $d02f
10bc a9 53            LDA  #$53
10be 8d 2f d0         STA  $d02f

              *       test, whether bank 3 is write protected

10c1 a3 00            LDZ  #0                 ; address = $030000
10c3 a9 03            LDA  #3
10c5 64 53            STZ  X7L
10c7 64 54            STZ  X7H
10c9 85 55            STA  X8L
10cb 64 56            STZ  X8H
10cd ea b2 53         LDA  [X7L],Z
10d0 49 ff            EOR  #$ff
10d2 ea 92 53         STA  [X7L],Z
10d5 ea d2 53         CMP  [X7L],Z
10d8 f0 06            BEQ  BATE_20            ; -> is writable

              *       remove write protection from bank 2 & 3
              *       bank 3 will be used for data storage

10da a9 70            LDA  #$70
10dc 8d 40 d6         STA  $D640              ; toggle write protection
10df ea               NOP

10e0          BATE_20
10e0 a9 47            LDA  #$47
10e2 8d 2f d0         STA  $d02f
10e5 a9 53            LDA  #$53
10e7 8d 2f d0         STA  $d02f
10ea a9 e0            LDA  #$e0               ; H640, DAFAST, ATTR
10ec 8d 31 d0         STA  $d031
10ef a9 24            LDA  #$24               ; SCR = $0800,  CHB = $0000
10f1 8d 18 d0         STA  $d018
10f4 a9 41            LDA  #65
10f6 85 00            STA  0
10f8 60               RTS
10f9          EndMod [Set_Mode_80] Size = 66 [$42]

              *************************
              Module Set_Kernal_Vectors
              *************************

10f9 a0 1f            LDY  #$1F               ; 16 vectors
10fb b9 30 fd _loop   LDA  ROM_Vectors,Y
10fe 99 14 03         STA  CINV,Y
1101 88               DEY
1102 10 f7            BPL  _loop
1104 60               RTS
1105          EndMod [Set_Kernal_Vectors] Size = 12 [$c]

              ********************
              Module Set_Attic_RAM
              ********************
1105 a2 08            LDX  #$08               ; RAMD = $0800 0000
1107 a3 00            LDZ  #0                 ; aka Attic RAM
1109 64 0c            STZ  RAMD
110b 64 0d            STZ  RAMD+1
110d 64 0e            STZ  RAMD+2
110f 86 0f            STX  RAMD+3
1111 ea b2 0c         LDA  [RAMD],Z
1114 49 ff            EOR  #$ff
1116 ea 92 0c         STA  [RAMD],Z
1119 ea d2 0c         CMP  [RAMD],Z
111c f0 03            BEQ  _attic
111e 64 61            STZ  Segment            ; use Chip  RAM
1120 60               RTS
1121 86 61    _attic  STX  Segment            ; use Attic RAM
                      Print(Msg_Attic)
1123 a9 4c            LDA  #<Msg_Attic
1125 a0 2d            LDY  #>Msg_Attic
1127 a2 1f            LDX  #?Msg_Attic
1129 20 e9 2a         JSR  PrintText

112c 60               RTS
112d          EndMod [Set_Attic_RAM] Size = 40 [$28]

              ****************
              Module Header_X1
              ****************

112d 18               CLC
112e a5 48            LDA  X1H
1130 69 2f            ADC  #>Z_HEADER
1132 85 48            STA  X1H
1134 60               RTS
1135          EndMod [Header_X1] Size = 8 [$8]

              **************
              Module PC_LOOP
              **************

              * read next instruction byte from Z-program counter
              * read optional operand bytes and call operator subroutine

1135 a9 00            LDA  #0
1137 85 29            STA  ParNum             ; reset # of operands
1139 a5 02            LDA  Z_Code
113b 85 03            STA  Z_Code+1           ; for debugging
113d 20 b8 27         JSR  Next_Instruction
1140 85 02            STA  Z_Code             ; remember op code
1142 24 20            BIT  Log
1144 10 00            BPL  _nolog
              ;       JSR  Log_A
1146 a5 02    _nolog  LDA  Z_Code
1148 10 3c            BPL  z_op_two           ; [$00 - $7f] -> codes with  2 operands
114a c9 b0            CMP  #$b0
114c 90 2a            BCC  z_op_one           ; [$80 - $af] -> codes with  1 operand
114e c9 c0            CMP  #$c0
1150 90 22            BCC  z_op_zero          ; [$b0 - $bf] -> codes with no operand

1152 20 b8 27         JSR  Next_Instruction   ; [$c0 - $ff] -> codes with 0-4 operands

              ; max 4 operands (11223344) for version 3
              ;  or 8 operands for version > 3
              ; ---------------------------------------
              ; 00 = 16 bit constant
              ; 01 =  8 bit constant
              ; 10 = 16 bit variable
              ; 11 = no operand (end marker)

1155 a6 02            LDX  Z_Code
1157 e0 ec            CPX  #$ec               ; call with 8 arguments
1159 f0 04            BEQ  _var_10
115b e0 fa            CPX  #$fa               ; call with 8 arguments
115d d0 05            BNE  _var_20
115f 20 c0 12 _var_10 JSR Load_8_Operands
1162 80 03            BRA  _var_30
1164 20 ae 12 _var_20 JSR Load_4_Operands
1167 a5 02    _var_30 LDA Z_Code
1169 c9 e0            CMP  #$e0
116b 90 2d            BCC  _twop           ; [$c0 - $df] -> use 2 operand table
116d 29 1f            AND  #$1f               ; [$e0 - $ff] -> use variable operands
116f 18               CLC
1170 69 40            ADC  #[opcodes_var - z_opcode] >> 1
1172 d0 28            BNE  z_execute          ; always

              *********
1174          z_op_zero
              *********

              ; opcodes with no operand, opcode = $b0 - $bf

1174 e9 7f            SBC  #$af - [[opcodes_0op - z_opcode] >> 1] ; carry is clear
1176 d0 24            BNE  z_execute          ; always

              ********
1178          z_op_one
              ********

              ; opcode = 10tt cccc  opcodes with 1 operand
              ;     tt = 00 : 16 bit constant $8x
              ;     tt = 01 :  8 bit constant $9x
              ;     tt = 10 :    variable     $ax

1178 0a               ASL  A
1179 0a               ASL  A
117a 20 83 12         JSR  Get_Operand
117d a5 02            LDA  Z_Code
117f 29 0f            AND  #15
1181 18               CLC
1182 69 20            ADC  #[opcodes_1op - z_opcode] >> 1
1184 d0 16            BNE  z_execute

              ********
1186          z_op_two
              ********

              ; opcode = 0fsc cccc  opcodes with 2 operands
              ;      f = 0 : 1st. op = short constant
              ;      f = 1 : 1st. op = variable
              ;      s = 0 : 2nd. op = short constant
              ;      s = 1 : 2nd. op = variable

1186 18               CLC
1187 29 40            AND  #$40               ; $40 if 1st. op variable
1189 69 40            ADC  #$40               ; $80 if 1st. op variable
118b 20 83 12         JSR  Get_Operand        ; $80 variable, $40 8 bit constant
118e a5 02            LDA  Z_Code
1190 0a               ASL  A                  ; C=0
1191 29 40            AND  #$40
1193 69 40            ADC  #$40
1195 20 83 12         JSR  Get_Operand
1198 a5 02            LDA  Z_Code
119a 29 1f    _twop   AND  #$1f               ; fall through

              *********
119c          z_execute
              *********

              ; Input : A = index to opcode table

119c 0a               ASL  A                  ; convert to word index
119d aa               TAX
119e 23 a8 11         JSR  (z_opcode,X)
11a1 80 92            BRA  PC_LOOP
11a3          EndMod [PC_LOOP] Size = 110 [$6e]

              z_error_4 ERROR(4)
11a3 a9 04            LDA  #4
11a5 4c 71 21         JMP  INTERNAL_ERROR


              ********
11a8          z_opcode
              ********

              ; $00-$1f : byte const + short const
              ; $20-$3f : byte const + variable
              ; $40-$5f : variable   + byte const
              ; $60-$7f : variable   + variable
              ; $c0-$df : 0-4 arguments defined in follow up byte

11a8 a3 11            .WORD z_error_4         ; 00 20 40 60   c0
11aa cf 15            .WORD z_je              ; 01 21 41 61   c1
11ac e9 15            .WORD z_jl              ; 02 22 42 62   c2
11ae fb 15            .WORD z_jg              ; 03 23 43 63   c3
11b0 0d 16            .WORD z_dec_chk         ; 04 24 44 64   c4
11b2 22 16            .WORD z_inc_chk         ; 05 25 45 65   c5
11b4 37 16            .WORD z_jin             ; 06 26 46 66   c6
11b6 4d 16            .WORD z_test            ; 07 27 47 67   c7
11b8 5e 16            .WORD z_or              ; 08 28 48 68   c8
11ba 6a 16            .WORD z_and             ; 09 29 49 69   c9
11bc 76 16            .WORD z_test_attr       ; 0a 2a 4a 6a   ca
11be 81 16            .WORD z_set_attr        ; 0b 2b 4b 6b   cb
11c0 89 16            .WORD z_clear_attr      ; 0c 2c 4c 6c   cc
11c2 93 16            .WORD z_store           ; 0d 2d 4d 6d   cd
11c4 9e 16            .WORD z_insert_obj      ; 0e 2e 4e 6e   ce
11c6 ff 16            .WORD z_loadw           ; 0f 2f 4f 6f   cf
11c8 0a 17            .WORD z_loadb           ; 10 30 50 70   d0
11ca 10 17            .WORD z_get_prop        ; 11 31 51 71   d1
11cc 38 17            .WORD z_get_prop_addr   ; 12 32 52 72   d2
11ce 4a 17            .WORD z_get_next_prop   ; 13 33 53 73   d3
11d0 62 17            .WORD z_add             ; 14 34 54 74   d4
11d2 6f 17            .WORD z_sub             ; 15 35 55 75   d5
11d4 7c 17            .WORD z_mul             ; 16 36 56 76   d6
11d6 0a 18            .WORD z_div             ; 17 37 57 77   d7
11d8 14 18            .WORD z_mod             ; 18 38 58 78   d8
11da 1a 18            .WORD z_call_s          ; 19 39 59 79   d9
11dc 1e 18            .WORD z_call_n          ; 1a 3a 5a 7a   da
11de b9 18            .WORD z_set_colour      ; 1b 3b 5b 7b   db
11e0 a3 11            .WORD z_error_4         ; 1c 3c 5c 7c   dc
11e2 a3 11            .WORD z_error_4         ; 1d 3d 5d 7d   dd
11e4 a3 11            .WORD z_error_4         ; 1e 3e 5e 7e   de
11e6 a3 11            .WORD z_error_4         ; 1f 3f 5f 7f   df

              ***********
11e8          opcodes_1op
              ***********

              ; $80-$8f : word constant
              ; $90-$9f : byte constant
              ; $a0-$af : variable

11e8 33 14            .WORD z_jz              ; 80 90 a0
11ea 3d 14            .WORD z_get_sibling     ; 81 91 a1
11ec 46 14            .WORD z_get_child       ; 82 92 a2
11ee 5d 14            .WORD z_get_parent      ; 83 93 a3
11f0 6a 14            .WORD z_get_prop_len    ; 84 94 a4
11f2 91 14            .WORD z_inc             ; 85 95 a5
11f4 99 14            .WORD z_dec             ; 86 96 a6
11f6 a1 14            .WORD z_print_addr      ; 87 97 a7
11f8 1a 18            .WORD z_call_s          ; 88 98 a8
11fa a8 14            .WORD z_remove_obj      ; 89 99 a9
11fc 3b 15            .WORD z_print_obj       ; 8a 9a aa
11fe 58 15            .WORD z_ret             ; 8b 9b ab
1200 9b 15            .WORD z_jump            ; 8c 9c ac
1202 a2 15            .WORD z_print_paddr     ; 8d 9d ad
1204 b9 15            .WORD z_load            ; 8e 9e ae
1206 1e 18    ZV8F    .WORD z_call_n          ; 8f 9f af  V3/4 = z_not

              ***********
1208          opcodes_0op
              ***********

1208 c8 13            .WORD z_rtrue           ; b0
120a d2 13            .WORD z_rfalse          ; b1
120c db 13            .WORD z_print           ; b2
120e f1 13            .WORD z_print_ret       ; b3
1210 f9 13            .WORD z_nop             ; b4
1212 ff 23            .WORD z_save            ; b5
1214 cb 24            .WORD z_restore         ; b6
1216 75 26            .WORD z_restart         ; b7
1218 fa 13            .WORD z_ret_popped      ; b8
121a 20 14    ZVB9    .WORD z_catch           ; b9 V3 = z_pop
121c 25 14            .WORD z_quit            ; ba
121e 05 22            .WORD z_new_line        ; bb
1220 f4 27            .WORD z_show_status     ; bc
1222 7c 13            .WORD Main_True         ; bd z_verify
1224 4b 23            .WORD z_extension       ; be
1226 7c 13            .WORD Main_True         ; bf z_piracy

              ***********
1228          opcodes_var
              ***********

1228 1a 18            .WORD z_call_s          ; e0 V3 call with 0-3 args
122a 49 19            .WORD z_storew          ; e1
122c 59 19            .WORD z_storeb          ; e2
122e 61 19            .WORD z_put_prop        ; e3
1230 83 19            .WORD z_read            ; e4
1232 b7 19            .WORD z_print_char      ; e5
1234 bc 19            .WORD z_print_num       ; e6
1236 e5 19            .WORD z_random          ; e7
1238 01 1a            .WORD z_push            ; e8
123a 08 1a            .WORD z_pull            ; e9
123c 0e 1a            .WORD z_split_window    ; ea
123e 28 1a            .WORD z_set_window      ; eb
1240 1a 18            .WORD z_call_s          ; ec z_call_s 0-7 args
1242 59 1a            .WORD z_erase_window    ; ed
1244 8e 1a            .WORD z_erase_line      ; ee
1246 a0 1a            .WORD z_set_cursor      ; ef
1248 b4 1a            .WORD z_get_cursor      ; f0
124a da 1a            .WORD z_set_text_style  ; f1
124c ed 1a            .WORD z_buffer_mode     ; f2
124e f6 1a            .WORD z_output_stream   ; f3
1250 68 12            .WORD z_error_1         ; f4 z_input_stream
1252 56 1b            .WORD z_sound_effect    ; f5
1254 5f 1b            .WORD z_read_char       ; f6
1256 88 1b            .WORD z_scan_table      ; f7
1258 bf 15            .WORD z_not             ; f8
125a 1e 18            .WORD z_call_n          ; f9 z_call_n 0-3 args
125c 1e 18            .WORD z_call_n          ; fa z_call_n 0-7 args
125e e0 1b            .WORD z_tokenise        ; fb
1260 f4 1b            .WORD z_encode_text     ; fc
1262 42 1c            .WORD z_copy_table      ; fd
1264 ac 1c            .WORD z_print_table     ; fe
1266 d8 1c            .WORD z_check_argc      ; ff

              z_error_1 ERROR(1)
1268 a9 01            LDA  #1
126a 4c 71 21         JMP  INTERNAL_ERROR


              ***********
126d          opcodes_ext
              ***********

126d f7 23            .WORD z_ext_save        ; 00
126f d1 24            .WORD z_ext_restore     ; 01
1271 e4 18            .WORD z_log_shift       ; 02
1273 fd 18            .WORD z_art_shift       ; 03
1275 1c 19            .WORD z_set_font        ; 04
1277 68 23            .WORD z_error12         ; 05 z_draw_picture,
1279 68 23            .WORD z_error12         ; 06 z_picture_data,
127b 68 23            .WORD z_error12         ; 07 z_erase_picture,
127d 68 23            .WORD z_error12         ; 08 z_set_margins,
127f 6d 23            .WORD z_save_undo       ; 09
1281 73 23            .WORD z_restore_undo    ; 0a

              ;    0b z_print_unicode,
              ;    0c z_check_unicode,
              ;    0d __illegal__,
              ;    0e __illegal__,
              ;    0f __illegal__,
              ;    10 z_move_window,
              ;    11 z_window_size,
              ;    12 z_window_style,
              ;    13 z_get_wind_prop,
              ;    14 z_scroll_window,
              ;    15 z_pop_stack,
              ;    16 z_read_mouse,
              ;    17 z_mouse_window,
              ;    18 z_push_stack,
              ;    19 z_put_wind_prop,
              ;    1a z_print_form,
              ;    1b z_make_menu,
              ;    1c z_picture_table


              ******************
              Module Get_Operand
              ******************

              ; Input: (A) = tt00 0000
              ; ----------------------
              ; tt = 00 : 16 bit constant
              ; tt = 01 :  8 bit constant
              ; tt = 10 :    variable
              ; tt = 11 :    none

              ; Output: Store 1st. in X1, 2nd. in X2, etc. until X8
              ;         Overflow set if none

1283 85 27            STA  OP_Type
1285 a9 00            LDA  #0                 ; preset high byte
1287 24 27            BIT  OP_Type
1289 30 0e            BMI  _check             ; 1x -> var or end
128b 70 03            BVS  _const             ; 01 -> byte constant
128d 20 b8 27         JSR  Next_Instruction   ; get constant high
1290 85 46    _const  STA  X0H
1292 20 b8 27         JSR  Next_Instruction   ; get constant low
1295 85 45            STA  X0L
1297 80 05            BRA  _store
1299 70 12    _check  BVS  _return            ; 11 -> end
129b 20 e6 12         JSR  Get_Var_A          ; 10 -> variable
129e e6 29    _store  INC  ParNum             ; parameter count
12a0 a5 29            LDA  ParNum
12a2 0a               ASL  A
12a3 aa               TAX
12a4 a5 45            LDA  X0L
12a6 95 45            STA  X0L,X
12a8 a5 46            LDA  X0H
12aa 95 46            STA  X0H,X
12ac b8               CLV                     ; not at end
12ad 60       _return RTS
12ae          EndMod [Get_Operand] Size = 43 [$2b]

              **********************
              Module Load_4_Operands
              **********************

              ; max 4 operands (2 type bits)
              ; ----------------------------
              ; 00 = 16 bit constant
              ; 01 =  8 bit constant
              ; 10 = 16 bit variable
              ; 11 = no operand (end marker)

12ae 20 83 12         JSR  Get_Operand
12b1 70 0a            BVS  _return            ; V=1 -> end of args
12b3 a5 27            LDA  OP_Type
12b5 0a               ASL  A
12b6 0a               ASL  A                  ; shift next 2 type bits to 7 and 6
12b7 a6 29            LDX  ParNum
12b9 e0 04            CPX  #4
12bb 90 f1            BCC  Load_4_Operands
12bd a5 02    _return LDA  Z_Code
12bf 60               RTS
12c0          EndMod [Load_4_Operands] Size = 18 [$12]

              **********************
              Module Load_8_Operands
              **********************

              ; max 8 operands (2 type bits)
              ; ----------------------------
              ; 00 = 16 bit constant
              ; 01 =  8 bit constant
              ; 10 = 16 bit variable
              ; 11 = no operand (end marker)

12c0 48               PHA                     ; 1st. type byte
12c1 20 b8 27         JSR  Next_Instruction   ; 2nd. type byte
12c4 85 28            STA  OP_Type+1
12c6 68               PLA
12c7 20 83 12 _loop   JSR  Get_Operand
12ca 70 0e            BVS  _return            ; V=1 -> end of args
12cc a5 27            LDA  OP_Type
12ce 06 28            ASL  OP_Type+1
12d0 2a               ROL  A
12d1 06 28            ASL  OP_Type+1
12d3 2a               ROL  A
12d4 a6 29            LDX  ParNum
12d6 e0 08            CPX  #8
12d8 90 ed            BCC  _loop
12da a5 02    _return LDA  Z_Code
12dc 60               RTS
12dd          EndMod [Load_8_Operands] Size = 29 [$1d]

              ******************
              Module Get_Var_X1L
              ******************

12dd a5 47            LDA  X1L
12df d0 0b            BNE  GeVa_10
12e1 20 04 14         JSR  z_pop
12e4 80 2b            BRA  Push_X0

              *********
12e6          Get_Var_A
              *********

12e6 20 b8 27         JSR  Next_Instruction
12e9 f3 19 01         LBEQ z_pop

12ec c9 10    GeVa_10 CMP  #16
12ee b0 0c            BCS  Get_Global_Var
12f0 aa               TAX
12f1 bd 10 04         LDA  Lvar_Hi,X
12f4 85 46            STA  X0H
12f6 bd 00 04         LDA  Lvar_Lo,X
12f9 85 45            STA  X0L
12fb 60               RTS
12fc          EndMod [Get_Var_X1L] Size = 31 [$1f]

              *********************
              Module Get_Global_Var
              *********************

12fc 20 57 13         JSR  Get_Global_Var_Addr
12ff b1 41            LDA  (A0L),Y
1301 85 46            STA  X0H
1303 c8               INY
1304 b1 41            LDA  (A0L),Y
1306 85 45            STA  X0L
1308 60               RTS
1309          EndMod [Get_Global_Var] Size = 13 [$d]

              **************
              Module Put_Var
              **************

1309 a5 47            LDA  X1L                ; X1L == 0 : push  X0
130b d0 2d            BNE  Store_Var          ; X1L != 0 : store X0
130d c3 3a            DEW  z_stack_ptr        ; X0 replaces top of stack
130f c3 3a            DEW  z_stack_ptr
1311          EndMod [Put_Var] Size = 8 [$8]

              **************
              Module Push_X0
              **************

1311 a5 45            LDA  X0L
1313 a4 46            LDY  X0H
1315          EndMod [Push_X0] Size = 4 [$4]

              **************
              Module Push_AY
              **************

              ; Input : A = low  byte
              ;         Y = high byte
              ; X register is preserved

1315 a3 00            LDZ  #0
1317 92 3a            STA  (z_stack_ptr),Z
1319 e3 3a            INW  z_stack_ptr
131b 98               TYA
131c 92 3a            STA  (z_stack_ptr),Z
131e e3 3a            INW  z_stack_ptr
1320 ab 3b 00         LDZ  z_stack_ptr+1
1323 c2 08            CPZ  #>Z_STACK_HI
1325 b0 01            BCS  z_error_6
1327 60               RTS
              z_error_6 ERROR(6)
1328 a9 06            LDA  #6
132a 4c 71 21         JMP  INTERNAL_ERROR

132d          EndMod [Push_AY] Size = 24 [$18]


              **********
132d          Store_Zero
              **********

132d a9 00            LDA  #0

              **********
132f          Store_Byte
              **********

132f a2 00            LDX  #0

              ********
1331          Store_AX
              ********

1331 86 46            STX  X0H

              ***********
1333          Store_A_X0H
              ***********

1333 85 45            STA  X0L

              ********
1335          Store_X0
              ********

1335 20 b8 27         JSR  Next_Instruction
1338 f0 d7            BEQ  Push_X0            ;    0: push   value

              *********
133a          Store_Var
              *********

133a c9 10            CMP  #16                ; 1-15: local  variable
133c b0 0c            BCS  Put_Global_Var     ; > 15: global variable
133e aa               TAX
133f a5 45            LDA  X0L
1341 9d 00 04         STA  Lvar_Lo,X
1344 a5 46            LDA  X0H
1346 9d 10 04         STA  Lvar_Hi,X
1349 60               RTS

              *********************
              Module Put_Global_Var
              *********************

134a 20 57 13         JSR  Get_Global_Var_Addr
134d a5 46            LDA  X0H                ; store in big endian order
134f 91 41            STA  (A0L),Y
1351 c8               INY
1352 a5 45            LDA  X0L
1354 91 41            STA  (A0L),Y
1356 60               RTS
1357          EndMod [Put_Global_Var] Size = 13 [$d]

              **************************
              Module Get_Global_Var_Addr
              **************************

              ;  Input: (A)  = Variable # ( 16 - 255)
              ; Output: (A0) = Address of Variable
              ;         (Y)  = 0  IMPORTANT: used by callers

              ; A0 = Z_HEADER + h_globals + 2 * (A)

1357 38               SEC
1358 e9 10            SBC  #16                ; variable index = number - 16
135a a0 00            LDY  #0
135c 84 42            STY  A0H
135e 0a               ASL  A
135f 26 42            ROL  A0H                ; (A/A0H) = index * 2 (C=0)
1361 6d 0d 2f         ADC  h_globals_lo
1364 85 41            STA  A0L
1366 a5 42            LDA  A0H                ; 0 or 1
1368 6d 0c 2f         ADC  h_globals_hi
136b 69 2f            ADC  #>Z_HEADER
136d 85 42            STA  A0H
136f 60               RTS
1370          EndMod [Get_Global_Var_Addr] Size = 25 [$19]

              ; Take a jump after an instruction based on the flag, either true or
              ; false. The branch can be short or long; it is encoded in one or two
              ; bytes respectively. When bit 7 of the first byte is set, the jump
              ; takes place if the flag is true; otherwise it is taken if the flag
              ; is false. When bit 6 of the first byte is set, the branch is short;
              ; otherwise it is long. The offset occupies the bottom 6 bits of the
              ; first byte plus all the bits in the second byte for long branches.
              ; Uniquely, an offset of 0 means return false, and an offset of 1 is
              ; return true. The branch distance is offset - 2.

              *****************
              Module Main_False
              *****************

1370 20 b8 27         JSR  Next_Instruction
1373 10 0c            BPL  _mft_20
1375 29 40    _mft_10 AND  #$40
1377 d0 4e            BNE  _return
1379 4c b8 27         JMP  Next_Instruction

              *********
137c          Main_True
              *********

137c 20 b8 27         JSR  Next_Instruction   ; A = specifier
137f 10 f4            BPL  _mft_10
1381 aa       _mft_20 TAX                     ; X = specifier
1382 29 40            AND  #$40               ; bit 6: 1=short 0=long
1384 f0 07            BEQ  _mft_30            ; ---------------------
1386 8a               TXA                     ; short forward branch
1387 29 3f            AND  #$3f               ; A = offset (6 bits)
1389 a2 00            LDX  #0                 ; X = 0 (high offset)
138b f0 16            BEQ  _mft_60            ; ---------------------
138d 8a       _mft_30 TXA                     ; long branch
138e 29 20            AND  #$20               ; sign bit of offset
1390 f0 05            BEQ  _mft_40            ; -> positive offset
1392 8a               TXA
1393 09 c0            ORA  #$c0               ; negative offset
1395 d0 03            BNE  _mft_50            ; -> always
1397 8a       _mft_40 TXA
1398 29 3f            AND  #$3f               ; positive offset
139a 85 46    _mft_50 STA  X0H                ; high byte offset (6 bits)
139c 20 b8 27         JSR  Next_Instruction   ; A = low  byte of long offset
139f a6 46            LDX  X0H                ; X = high byte of long offset
13a1 d0 06            BNE  Branch_XA          ; -> long branch
13a3 a8       _mft_60 TAY                     ; Y = offset
13a4 f0 2c            BEQ  z_rfalse           ; Offset 0: return false
13a6 88               DEY                     ; Y = offset - 1
13a7 f0 1f            BEQ  z_rtrue            ; Offset 1: return true

              *********
13a9          Branch_XA
              *********

              ; branch to IP + (A/X) - 2
              ; Input : (A/X) = signed word with 14 significant bits

13a9 86 46            STX  X0H                ; offset high
13ab 38               SEC
13ac e9 02            SBC  #2
13ae b0 01            BCS  _mft_70
13b0 ca               DEX
13b1 18       _mft_70 CLC                     ; (A/X) = offset - 2
13b2 65 04            ADC  QI0
13b4 85 04            STA  QI0
13b6 8a               TXA
13b7 65 05            ADC  QI1
13b9 85 05            STA  QI1
13bb a9 00            LDA  #0                 ; A = 0
13bd 24 46            BIT  X0H                ; check sign of offset
13bf 10 02            BPL  _mft_80            ; -> positive
13c1 a9 ff            LDA  #-1                ; A = -1
13c3 65 06    _mft_80 ADC  QI2                ; add carry and sign
13c5 85 06            STA  QI2
13c7 60       _return RTS
13c8          EndMod [Main_False] Size = 88 [$58]

              ****************************
              Module z_rtrue ; opcode # b0
              ****************************

13c8 a2 01            LDX  #1
13ca 86 47            STX  X1L
13cc ca               DEX
13cd 86 48            STX  X1H
13cf 4c 58 15         JMP  z_ret
13d2          EndMod [z_rtrue] Size = 10 [$a]

              *****************************
              Module z_rfalse ; opcode # b1
              *****************************

13d2 a2 00            LDX  #0
13d4 86 47            STX  X1L
13d6 86 48            STX  X1H
13d8 4c 58 15         JMP  z_ret
13db          EndMod [z_rfalse] Size = 9 [$9]

              ****************************
              Module z_print ; opcode # b2
              ****************************

              ; print text from instruction pointer (QI).

13db a2 02            LDX  #2
13dd b5 04    _id     LDA  QI0,X              ; copy QI -> QD
13df 95 09            STA  QD0,X
13e1 ca               DEX
13e2 10 f9            BPL  _id
13e4 20 fa 1e         JSR  Decode_Text        ; print text from (QD)
13e7 a2 02            LDX  #2
13e9 b5 09    _di     LDA  QD0,X              ; copy QD -> QI
13eb 95 04            STA  QI0,X
13ed ca               DEX
13ee 10 f9            BPL  _di
13f0 60               RTS
13f1          EndMod [z_print] Size = 22 [$16]

              ********************************
              Module z_print_ret ; opcode # b3
              ********************************

              ; print text from instruction pointer (QI) add a new line and return true.

13f1 20 db 13         JSR  z_print
13f4 20 05 22         JSR  z_new_line
13f7 80 cf            BRA  z_rtrue
13f9          EndMod [z_print_ret] Size = 8 [$8]

              **************************
              Module z_nop ; opcode # b4
              **************************

13f9 60               RTS
13fa          EndMod [z_nop] Size = 1 [$1]

              *********************************
              Module z_ret_popped ; opcode # b8
              *********************************

13fa 20 04 14         JSR  z_pop
13fd 85 47            STA  X1L
13ff 84 48            STY  X1H
1401 4c 58 15         JMP  z_ret
1404          EndMod [z_ret_popped] Size = 10 [$a]

              **************************
              Module z_pop ; opcode # b9
              **************************

              ; pop 16 bit word from Z stack
              ; Output: (X0) = (A/Y)  = value
              ; X register preserved

1404 a3 00            LDZ  #0
1406 c3 3a            DEW  z_stack_ptr
1408 b2 3a            LDA  (z_stack_ptr),Z
140a a8               TAY
140b c3 3a            DEW  z_stack_ptr
140d b2 3a            LDA  (z_stack_ptr),Z
140f 84 46            STY  X0H
1411 85 45            STA  X0L
1413 ab 3b 00         LDZ  z_stack_ptr+1
1416 c2 05            CPZ  #>Z_STACK_LO
1418 90 01            BCC  z_error_5
141a 60               RTS
              z_error_5 ERROR(5)
141b a9 05            LDA  #5
141d 4c 71 21         JMP  INTERNAL_ERROR

1420          EndMod [z_pop] Size = 28 [$1c]

              ****************************
              Module z_catch ; opcode # b9
              ****************************
                      ERROR(7)
1420 a9 07            LDA  #7
1422 4c 71 21         JMP  INTERNAL_ERROR

1425          EndMod [z_catch] Size = 5 [$5]

              ***************************
              Module z_quit ; opcode # ba
              ***************************

1425 20 27 2c         JSR  Save_Config
              quit_20 Print(EOS)
1428 a9 28            LDA  #<EOS
142a a0 2d            LDY  #>EOS
142c a2 1a            LDX  #?EOS
142e 20 e9 2a         JSR  PrintText

1431 80 fe    quit_30 BRA  quit_30
1433          EndMod [z_quit] Size = 14 [$e]




              *******************************
              Module z_jz ; opcode # 80 90 a0
              *******************************

              ; jump if (X1 == 0)

1433 a5 47            LDA  X1L
1435 05 48            ORA  X1H
1437 f3 43 ff         LBEQ Main_True
143a 4c 70 13         JMP  Main_False
143d          EndMod [z_jz] Size = 10 [$a]

              ****************************************
              Module z_get_sibling ; opcode # 81 91 a1
              ****************************************

143d a0 05            LDY  #5                 ; version = 3 sibling
143f 7f 35 0b         BBR7 Version,_get
1442 a0 08            LDY  #8                 ; version > 3 sibling
1444 80 07            BRA  _get

              *******************************
1446          z_get_child ; opcode # 82 92 a2
              *******************************

1446 a0 06            LDY  #6                 ; version = 3 child
1448 7f 35 02         BBR7 Version,_get
144b a0 0a            LDY  #10                ; version > 3 child

144d 20 a4 20 _get    JSR Get_Object_X1       ; X1 object's address -> A0
1450 20 31 13         JSR  Store_AX           ; (A/X) -> (X0) -> Store
1453 a5 45            LDA  X0L
1455 05 46            ORA  X0H
1457 f3 17 ff         LBEQ Main_False         ; there is no object
145a 4c 7c 13         JMP  Main_True          ; there is an object
145d          EndMod [z_get_sibling] Size = 32 [$20]

              ***************************************
              Module z_get_parent ; opcode # 83 93 a3
              ***************************************

145d a0 04            LDY  #4                 ; version = 3 parent
145f 7f 35 02         BBR7 Version,_get
1462 a0 06            LDY  #6                 ; version > 3 parent
1464 20 a4 20 _get    JSR  Get_Object_X1      ; (A/X) = parent object
1467 4c 31 13         JMP  Store_AX
146a          EndMod [z_get_parent] Size = 13 [$d]

              *****************************************
              Module z_get_prop_len ; opcode # 84 94 a4
              *****************************************

              ; get length of property, which address is in X1
              ; The length info is stored one byte before (X1)

146a 18               CLC
146b a5 47            LDA  X1L
146d 69 ff            ADC  #<[Z_HEADER-1]
146f 85 41            STA  A0L
1471 a5 48            LDA  X1H
1473 69 2e            ADC  #>[Z_HEADER-1]
1475 85 42            STA  A0H                ; (A0) = (X1) + Header - 1
1477 a0 00            LDY  #0
1479 7f 35 0e         BBR7 Version,_V3
147c b1 41            LDA  (A0L),Y
147e 30 05            BMI  _mask              ; -> length = lower 6 bits
1480 0a               ASL  A                  ; bit 7 = length info
1481 0a               ASL  A                  ; carry = length info
1482 98               TYA                     ; A = 0
1483 69 01            ADC  #1                 ; A = 1 or 2
1485 29 3f    _mask   AND  #$3f               ; version > 3 mask
1487 4c 2f 13         JMP  Store_Byte

148a 20 f5 20 _V3     JSR  Property_Size
148d 1a               INC  A
148e 4c 2f 13         JMP  Store_Byte
1491          EndMod [z_get_prop_len] Size = 39 [$27]

              ********************************
              Module z_inc ; opcode # 85 95 a5
              ********************************

1491 20 dd 12         JSR  Get_Var_X1L
1494 e3 45            INW  X0L
1496 4c 09 13         JMP  Put_Var
1499          EndMod [z_inc] Size = 8 [$8]

              ********************************
              Module z_dec ; opcode # 86 96 a6
              ********************************

1499 20 dd 12         JSR  Get_Var_X1L
149c c3 45            DEW  X0L
149e 4c 09 13         JMP  Put_Var
14a1          EndMod [z_dec] Size = 8 [$8]

              ***************************************
              Module z_print_addr ; opcode # 87 97 a7
              ***************************************

14a1 a4 47            LDY  X1L
14a3 a6 48            LDX  X1H
14a5 4c f2 1e         JMP  Decode_YX
14a8          EndMod [z_print_addr] Size = 7 [$7]

              ***************************************
              Module z_remove_obj ; opcode # 89 99 a9
              ***************************************

              ; Remove (unlink) object (X1)

14a8 7f 35 54         BBR7 Version, _V3
14ab a0 06            LDY  #6                 ; parent offset
14ad 20 a4 20         JSR  Get_Object_X1      ; object's address -> A0
14b0 a5 41            LDA  A0L                ; object's address -> A1
14b2 85 43            STA  A1L
14b4 a5 42            LDA  A0H
14b6 85 44            STA  A1H
14b8 8a               TXA                     ; parent high
14b9 11 41            ORA  (A0L),Y            ; parent low
14bb f0 41            BEQ  _ret40             ; return if no parent

              ; Get parent's 1st. child

14bd b1 41            LDA  (A0L),Y            ; parent low (X = high)
14bf a0 0a            LDY  #10                ; child offset
14c1 20 a8 20         JSR  Get_Object_Reg     ; parent's address -> A0
14c4 c5 47            CMP  X1L                ; object == parent's 1st. Child ?
14c6 d0 15            BNE  _ro_10             ; -> no
14c8 e4 48            CPX  X1H                ; object == parent's 1st. Child ?
14ca d0 11            BNE  _ro_10             ; -> no

              ; Parent's 1st. child is this object, so
              ; make object's sibling the 1st. child of parent

14cc a0 08            LDY  #8                 ; sibling offset
14ce b1 43            LDA  (A1L),Y            ; object's sibling high
14d0 c8               INY
14d1 c8               INY                     ; Y = 10
14d2 91 41            STA  (A0L),Y            ; parent's child high
14d4 88               DEY                     ; Y =  9
14d5 b1 43            LDA  (A1L),Y            ; object's sibling low
14d7 c8               INY
14d8 c8               INY                     ; Y = 11
14d9 91 41            STA  (A0L),Y            ; parent's child low
14db d0 16            BNE  _ro_20             ; always (INY)

              ; Parent's 1st. child is not this object
              ; Loop through siblings until found

14dd a0 08    _ro_10  LDY  #8                 ; sibling offset
14df 20 a8 20         JSR  Get_Object_Reg     ; parent's child -> A0
14e2 c5 47            CMP  X1L                ; object == parent's child's sibling ?
14e4 d0 f7            BNE  _ro_10             ; -> no
14e6 e4 48            CPX  X1H                ; object == parent's child's sibling ?
14e8 d0 f3            BNE  _ro_10             ; -> no, try next sibling (A/X)

              ; Link younger sibling to older sibling

14ea b1 43            LDA  (A1L),Y            ; younger sibling low
14ec 91 41            STA  (A0L),Y            ; older   sibling low
14ee 88               DEY                     ; Y = 8
14ef b1 43            LDA  (A1L),Y            ; younger sibling high
14f1 91 41            STA  (A0L),Y            ; older   sibling high

              ; clear object's parent & sibling (Y=6 .. 9)

14f3 a9 00    _ro_20  LDA  #0
14f5 a0 06            LDY  #6                 ; parent offset
14f7 91 43    _ro_30  STA  (A1L),Y            ; clear parent & sibling
14f9 c8               INY
14fa c0 0a            CPY  #10                ; after sibling
14fc 90 f9            BCC  _ro_30
14fe 60       _ret40  RTS

14ff a0 04    _V3     LDY  #4                 ; parent offset
1501 20 a4 20         JSR  Get_Object_X1
1504 a5 41            LDA  A0L
1506 85 43            STA  A1L
1508 a5 42            LDA  A0H
150a 85 44            STA  A1H
150c b1 41            LDA  (A0L),Y            ; A = parent object
150e f0 2a            BEQ  _ret70             ; -> has no parent
1510 a0 06            LDY  #6                 ; child offset
1512 20 a8 20         JSR  Get_Object_Reg     ; A = child of parent
1515 c5 47            CMP  X1L                ; is it me ?
1517 d0 09            BNE  _ro_50             ; -> no
1519 a0 05            LDY  #5                 ; sibling offset
151b b1 43            LDA  (A1L),Y            ; my sibling
151d c8               INY                     ; Y = child offset
151e 91 41            STA  (A0L),Y            ; is parent's cild
1520 d0 0f            BNE  _ro_60             ; always

1522 a0 05    _ro_50  LDY  #5                 ; A = sibling of parnent's
1524 20 a8 20         JSR  Get_Object_Reg     ; child
1527 c5 47            CMP  X1L                ; me ?
1529 d0 f7            BNE  _ro_50             ; -> no
152b a0 05            LDY  #5                 ; sibling offset
152d b1 43            LDA  (A1L),Y            ; my sibling is
152f 91 41            STA  (A0L),Y            ; parent's child sibling

1531 a9 00    _ro_60  LDA  #0
1533 a0 04            LDY  #4                 ; parent offset
1535 91 43            STA  (A1L),Y            ; I have no parnet
1537 c8               INY                     ; Y = sibling offset
1538 91 43            STA  (A1L),Y            ; I have no sibling
153a 60       _ret70  RTS
153b          EndMod [z_remove_obj] Size = 147 [$93]

              **************************************
              Module z_print_obj ; opcode # 8a 9a aa
              **************************************

153b a5 47            LDA  X1L
153d a6 48            LDX  X1H

              *************
153f          z_print_obj_A
              *************

153f a0 0c            LDY  #12                ; version > 3 offset
1541 ff 35 02         BBS7 Version,_prio_1
1544 a0 07            LDY  #7                 ; version = 3 offset
1546 20 a8 20 _prio_1 JSR  Get_Object_Reg
1549 ff 35 04         BBS7 Version,_V4
154c aa               TAX                     ; object prop high
154d c8               INY
154e b1 41            LDA  (A0L),Y
1550 a8       _V4     TAY                     ; object prop low
1551 c8               INY
1552 d0 01            BNE  _decode
1554 e8               INX                     ; object prop high
1555 4c f2 1e _decode JMP  Decode_YX
1558          EndMod [z_print_obj] Size = 29 [$1d]

              ********************************
              Module z_ret ; opcode # 8b 9b ab
              ********************************

1558 a5 3c            LDA  z_frame_ptr        ; stack ptr = frame ptr
155a 85 3a            STA  z_stack_ptr
155c a5 3d            LDA  z_frame_ptr+1      ; stack ptr = frame ptr
155e 85 3b            STA  z_stack_ptr+1

1560 20 04 14         JSR  z_pop
1563 8c de 25         STY  Z_Arg_Count        ; # of args
1566 aa               TAX                     ; # of local vars
1567 f0 0d            BEQ  _noloc             ; -> no locals vars

1569 20 04 14 _loop   JSR  z_pop              ; pop next local var
156c 9d 00 04         STA  Lvar_Lo,X          ; and restore it
156f 98               TYA
1570 9d 10 04         STA  Lvar_Hi,X
1573 ca               DEX
1574 d0 f3            BNE  _loop              ; -> loop

1576 20 04 14 _noloc  JSR  z_pop
1579 85 17            STA  Call_Type
157b 84 04            STY  QI0                ; restore instruction pointer L

157d 20 04 14         JSR  z_pop
1580 85 05            STA  QI1                ; restore instruction pointer M
1582 84 06            STY  QI2                ; restore instruction pointer H

1584 20 04 14         JSR  z_pop
1587 85 3c            STA  z_frame_ptr
1589 84 3d            STY  z_frame_ptr+1

158b a5 17            LDA  Call_Type
158d 30 09            BMI  _irqret            ; -> return from IRQ
158f d0 09            BNE  _return            ; -> no return value
1591 a5 47            LDA  X1L
1593 a6 48            LDX  X1H
1595 4c 31 13         JMP  Store_AX
1598 68       _irqret PLA
1599 68               PLA
159a 60       _return RTS
159b          EndMod [z_ret] Size = 67 [$43]

              *********************************
              Module z_jump ; opcode # 8c 9c ac
              *********************************

159b a5 47            LDA  X1L
159d a6 48            LDX  X1H
159f 4c a9 13         JMP  Branch_XA
15a2          EndMod [z_jump] Size = 7 [$7]

              ****************************************
              Module z_print_paddr ; opcode # 8d 9d ad
              ****************************************

15a2 a4 47            LDY  X1L
15a4 a5 48            LDA  X1H
15a6 20 7f 1b         JSR  Set_Data_YA
15a9 06 09            ASL  QD0
15ab eb 0a 00         ROW  QD1
15ae 7f 35 05         BBR7 Version,_label
15b1 06 09            ASL  QD0
15b3 eb 0a 00         ROW  QD1
15b6 4c fa 1e _label  JMP  Decode_Text
15b9          EndMod [z_print_paddr] Size = 23 [$17]

              *********************************
              Module z_load ; opcode # 8e 9e ae
              *********************************

15b9 20 dd 12         JSR  Get_Var_X1L
15bc 4c 35 13         JMP  Store_X0
15bf          EndMod [z_load] Size = 6 [$6]

              *********************************
              Module z_not ; opcode #  8f 9f af
              *********************************
15bf a5 47            LDA  X1L
15c1 49 ff            EOR  #$ff
15c3 aa               TAX
15c4 a5 48            LDA  X1H
15c6 49 ff            EOR  #$ff               ; fall through
15c8          EndMod [z_not] Size = 9 [$9]

              ***************
              Module Store_XA
              ***************

15c8 86 45            STX  X0L
15ca 85 46            STA  X0H
15cc 4c 35 13         JMP  Store_X0
15cf          EndMod [Store_XA] Size = 7 [$7]

              *************************************
              Module z_je ; opcode # 01 21 41 61 c1
              *************************************

              ; jump if (X1 == X2 || X1 == X3 || X1 == X4)

15cf a5 29            LDA  ParNum
15d1 0a               ASL  A
15d2 aa               TAX
15d3 e0 04    _loop   CPX  #4
15d5 93 99 fd         LBCC Main_False
15d8 ca               DEX
15d9 ca               DEX
15da a5 47            LDA  X1L
15dc d5 47            CMP  X1L,X
15de d0 f3            BNE  _loop
15e0 a5 48            LDA  X1H
15e2 d5 48            CMP  X1H,X
15e4 d0 ed            BNE  _loop
15e6 4c 7c 13         JMP  Main_True
15e9          EndMod [z_je] Size = 26 [$1a]

              *************************************
              Module z_jl ; opcode # 02 22 42 62 c2
              *************************************

              ; jump if (X1 < X2) signed 16 bit

15e9 a5 47            LDA  X1L
15eb c5 49            CMP  X2L
15ed a5 48            LDA  X1H
15ef e5 4a            SBC  X2H
15f1 50 02            BVC  _sig
15f3 49 80            EOR  #$80
15f5 33 85 fd _sig    LBMI Main_True
15f8 4c 70 13         JMP  Main_False
15fb          EndMod [z_jl] Size = 18 [$12]

              *************************************
              Module z_jg ; opcode # 03 23 43 63 c3
              *************************************

              ; jump if (X1 > X2) signed 16 bit

15fb a5 49            LDA  X2L
15fd c5 47            CMP  X1L
15ff a5 4a            LDA  X2H
1601 e5 48            SBC  X1H
1603 50 02            BVC  _sig
1605 49 80            EOR  #$80
1607 33 73 fd _sig    LBMI Main_True
160a 4c 70 13         JMP  Main_False
160d          EndMod [z_jg] Size = 18 [$12]

              ******************************************
              Module z_dec_chk ; opcode # 04 24 44 64 c4
              ******************************************

              ; jump if ((X0 = --Var[X1]) < X2)

160d 20 99 14         JSR  z_dec
1610 a5 45            LDA  X0L
1612 c5 49            CMP  X2L
1614 a5 46            LDA  X0H
1616 e5 4a            SBC  X2H
1618 50 02            BVC  _sig
161a 49 80            EOR  #$80
161c 33 5e fd _sig    LBMI Main_True
161f 4c 70 13         JMP  Main_False
1622          EndMod [z_dec_chk] Size = 21 [$15]

              ******************************************
              Module z_inc_chk ; opcode # 05 25 45 65 c5
              ******************************************

              ; jump if ((X0 = ++Var[X1]) > X2)

1622 20 91 14         JSR  z_inc
1625 a5 49            LDA  X2L
1627 c5 45            CMP  X0L
1629 a5 4a            LDA  X2H
162b e5 46            SBC  X0H
162d 50 02            BVC  _sig
162f 49 80            EOR  #$80
1631 33 49 fd _sig    LBMI Main_True
1634 4c 70 13         JMP  Main_False
1637          EndMod [z_inc_chk] Size = 21 [$15]

              **************************************
              Module z_jin ; opcode # 06 26 46 66 c6
              **************************************

              ; jump if (X1 is child of X2)

1637 a0 04            LDY  #4                 ; version = 3 parent
1639 7f 35 02         BBR7 Version,_get
163c a0 06            LDY  #6                 ; version > 3 parent
163e 20 a4 20 _get    JSR  Get_Object_X1
1641 e4 4a            CPX  X2H
1643 d0 05            BNE  _false
1645 c5 49            CMP  X2L
1647 f3 33 fd         LBEQ Main_True
164a 4c 70 13 _false  JMP  Main_False
164d          EndMod [z_jin] Size = 22 [$16]

              ***************************************
              Module z_test ; opcode # 07 27 47 67 c7
              ***************************************

              ; jump if ((X1 & X2) == X2)

164d a2 01            LDX  #1
164f b5 47    _loop   LDA  X1L,X
1651 35 49            AND  X2L,X
1653 d5 49            CMP  X2L,X
1655 d3 19 fd         LBNE Main_False
1658 ca               DEX
1659 10 f4            BPL  _loop
165b 4c 7c 13         JMP  Main_True
165e          EndMod [z_test] Size = 17 [$11]

              *************************************
              Module z_or ; opcode # 08 28 48 68 c8
              *************************************

              ; (X1 | X2)

165e a5 48            LDA  X1H
1660 05 4a            ORA  X2H
1662 aa               TAX
1663 a5 47            LDA  X1L
1665 05 49            ORA  X2L
1667 4c 31 13         JMP  Store_AX
166a          EndMod [z_or] Size = 12 [$c]

              **************************************
              Module z_and ; opcode # 09 29 49 69 c9
              **************************************

              ; (X1 & X2)

166a a5 48            LDA  X1H
166c 25 4a            AND  X2H
166e aa               TAX
166f a5 47            LDA  X1L
1671 25 49            AND  X2L
1673 4c 31 13         JMP  Store_AX
1676          EndMod [z_and] Size = 12 [$c]

              ********************************************
              Module z_test_attr ; opcode # 0a 2a 4a 6a ca
              ********************************************

              ; jump if attribute X2 of object X1 is set

1676 20 40 21         JSR  Get_Attr_Addr
1679 31 41            AND  (A0L),Y
167b d3 ff fc         LBNE Main_True
167e 4c 70 13         JMP  Main_False
1681          EndMod [z_test_attr] Size = 11 [$b]

              *******************************************
              Module z_set_attr ; opcode # 0b 2b 4b 6b cb
              *******************************************

              ; set attribute X2 of object X1

1681 20 40 21         JSR  Get_Attr_Addr
1684 11 41            ORA  (A0L),Y
1686 91 41            STA  (A0L),Y
1688 60               RTS
1689          EndMod [z_set_attr] Size = 8 [$8]

              *********************************************
              Module z_clear_attr ; opcode # 0c 2c 4c 6c cc
              *********************************************

              ; clear attribute X2 of object X1

1689 20 40 21         JSR  Get_Attr_Addr
168c 49 ff            EOR  #$ff
168e 31 41            AND  (A0L),Y
1690 91 41            STA  (A0L),Y
1692 60               RTS
1693          EndMod [z_clear_attr] Size = 10 [$a]

              ****************************************
              Module z_store ; opcode # 0d 2d 4d 6d cd
              ****************************************

              ; Var[X1] = X2

1693 a5 49            LDA  X2L
1695 85 45            STA  X0L
1697 a5 4a            LDA  X2H
1699 85 46            STA  X0H
169b 4c 09 13         JMP  Put_Var
169e          EndMod [z_store] Size = 11 [$b]

              *********************************************
              Module z_insert_obj ; opcode # 0e 2e 4e 6e ce
              *********************************************

              ; insert object (X1) as 1st. child of object (X2)

169e 20 a8 14         JSR  z_remove_obj       ; unlink object (X1)
16a1 7f 35 2b         BBR7 Version,_V3
16a4 a0 06            LDY  #6                 ; parent offset
16a6 a5 4a            LDA  X2H
16a8 91 43            STA  (A1L),Y            ; X1's parent = X2 high
16aa aa               TAX
16ab c8               INY                     ; Y = 7
16ac a5 49            LDA  X2L
16ae 91 43            STA  (A1L),Y            ; X1's parent = X2 low

16b0 a0 0a            LDY  #10                ; child offset
16b2 20 a8 20         JSR  Get_Object_Reg     ; X2 object's address -> A0
16b5 85 10            STA  LV0                ; old child of X2 low
16b7 a5 47            LDA  X1L                ; Y = 11
16b9 91 41            STA  (A0L),Y            ; new child low  = X1L
16bb 88               DEY                     ; Y = 10
16bc a5 48            LDA  X1H
16be 91 41            STA  (A0L),Y            ; new child high = X1H

16c0 8a               TXA                     ; X2's old child high
16c1 05 10            ORA  LV0                ; X2's old child low
16c3 f0 21            BEQ  _return            ; -> old child was zero

16c5 88               DEY                     ; Y =  9
16c6 a5 10            LDA  LV0                ; X2's old child   low
16c8 91 43            STA  (A1L),Y            ; X1's new sibling low
16ca 88               DEY                     ; Y =  8
16cb 8a               TXA                     ; X2's old child   high
16cc 91 43            STA  (A1L),Y            ; X1's new sibling high
16ce 60               RTS

16cf a5 49    _V3     LDA  X2L
16d1 a0 04            LDY  #4                 ; parent offset
16d3 91 43            STA  (A1L),Y            ; object's new parent
16d5 a0 06            LDY  #6                 ; child offset
16d7 20 a8 20         JSR  Get_Object_Reg     ; get new parent's child
16da aa               TAX                     ; X = parent's first child
16db a5 47            LDA  X1L
16dd 91 41            STA  (A0L),Y            ; object becomes parent's first child
16df 8a               TXA
16e0 f0 04            BEQ  _return            ; parent had no child before
16e2 a0 05            LDY  #5                 ; sibling offset
16e4 91 43            STA  (A1L),Y            ; old child becommes sibling
16e6 60       _return RTS
16e7          EndMod [z_insert_obj] Size = 73 [$49]

              *****************
              Module Word_Array
              *****************

              ; called from z_loadw
              ; address QD = base (X1) + index (X2 * 2)

16e7 cb 49 00         ASW  X2L                ; fall through
16ea          EndMod [Word_Array] Size = 3 [$3]

              *****************
              Module Byte_Array
              *****************

              ; called from z_loadb
              ; address QD = base (X1) + index (X2)

16ea 18               CLC
16eb a5 47            LDA  X1L
16ed 65 49            ADC  X2L
16ef 85 09            STA  QD0
16f1 a5 48            LDA  X1H
16f3 65 4a            ADC  X2H
16f5 85 0a            STA  QD1
16f7 a9 00            LDA  #0
16f9 2a               ROL  A                  ; add carry for address > 64K
16fa 85 0b            STA  QD2
16fc 4c 7e 27         JMP  Next_Datum         ; get next byte
16ff          EndMod [Byte_Array] Size = 21 [$15]

              ****************************************
              Module z_loadw ; opcode # 0f 2f 4f 6f cf
              ****************************************

              ; load word value from array X1[X2]

16ff 20 e7 16         JSR  Word_Array         ; set &X1[X2]
1702 85 46            STA  X0H                ; put high byte
1704 20 7e 27         JSR  Next_Datum         ; get low  byte
1707 4c 33 13         JMP  Store_A_X0H        ; return word
170a          EndMod [z_loadw] Size = 11 [$b]

              ****************************************
              Module z_loadb ; opcode # 10 30 50 70 d0
              ****************************************

              ; load byte value from array X1[X2]

170a 20 ea 16         JSR  Byte_Array         ; set &X1[X2]
170d 4c 2f 13         JMP  Store_Byte         ; return byte
1710          EndMod [z_loadb] Size = 6 [$6]

              *******************************************
              Module z_get_prop ; opcode # 11 31 51 71 d1
              *******************************************

              ; get property X2 of object X1
              ; if X1 has no property X2 use default value
              ; the routine must access properties of size byte or word only

1710 20 28 21         JSR  Find_Property
1713 f0 14            BEQ  _found             ; -> found property

1715 ad 0b 2f         LDA  h_objects_lo       ; use default
1718 85 41            STA  A0L
171a ad 0a 2f         LDA  h_objects_hi
171d 69 2f            ADC  #>Z_HEADER         ; carry is clear
171f 85 42            STA  A0H                ; A0 = address of default properties
1721 a5 49            LDA  X2L                ; property #
1723 e9 00            SBC  #0                 ; (C=0) : minus 1
1725 0a               ASL  A                  ; default properties have word size
1726 a8               TAY
1727 80 06            BRA  _read

1729 20 f5 20 _found  JSR  Property_Size      ; get size
172c aa               TAX                     ; 1: word
172d f0 04            BEQ  _low               ; 0: byte (X=0)

172f b1 41    _read   LDA  (A0L),Y            ; property value high
1731 aa               TAX
1732 c8               INY
1733 b1 41    _low    LDA  (A0L),Y            ; property value low
1735 4c 31 13         JMP  Store_AX
1738          EndMod [z_get_prop] Size = 40 [$28]

              ************************************************
              Module z_get_prop_addr ; opcode # 12 32 52 72 d2
              ************************************************

              ; get address of property X2 of object X1
              ; store address of property if found
              ; else store zero

1738 20 28 21         JSR  Find_Property
173b d3 f0 fb         LBNE Store_Zero
173e a5 41            LDA  A0L
1740 e9 fe            SBC  #<[Z_HEADER-2]     ; carry from Find_Property
1742 aa               TAX                     ; set address after ID/size info
1743 a5 42            LDA  A0H
1745 e9 2e            SBC  #>[Z_HEADER-2]
1747 4c c8 15         JMP  Store_XA
174a          EndMod [z_get_prop_addr] Size = 18 [$12]

              ************************************************
              Module z_get_next_prop ; opcode # 13 33 53 73 d3
              ************************************************

              ; for X2L == 0 find first property of object X1
              ; otherwise find next property after property X2L

174a a5 49            LDA  X2L
174c d0 06            BNE  _next              ; -> next prop after X2
174e 20 ca 20         JSR  First_Property
1751 4c 2f 13         JMP  Store_Byte
1754 20 28 21 _next   JSR  Find_Property
1757 d0 06            BNE  _zero              ; -> prop X2 was not found
1759 20 13 21         JSR  Next_Property
175c 4c 2f 13         JMP  Store_Byte
175f 4c 2d 13 _zero   JMP  Store_Zero
1762          EndMod [z_get_next_prop] Size = 24 [$18]

              **************************************
              Module z_add ; opcode # 14 34 54 74 d4
              **************************************

              ; (X1 + X2)

1762 18               CLC
1763 a5 47            LDA  X1L
1765 65 49            ADC  X2L
1767 aa               TAX
1768 a5 48            LDA  X1H
176a 65 4a            ADC  X2H
176c 4c c8 15         JMP  Store_XA
176f          EndMod [z_add] Size = 13 [$d]

              **************************************
              Module z_sub ; opcode # 15 35 55 75 d5
              **************************************

              ; (X1 - X2)

176f 38               SEC
1770 a5 47            LDA  X1L
1772 e5 49            SBC  X2L
1774 aa               TAX
1775 a5 48            LDA  X1H
1777 e5 4a            SBC  X2H
1779 4c c8 15         JMP  Store_XA
177c          EndMod [z_sub] Size = 13 [$d]

              **************************************
              Module z_mul ; opcode # 16 36 56 76 d6
              **************************************

              ; (X1 * X2) signed 16 bit

177c a2 10            LDX  #16
177e a9 00            LDA  #0
1780 85 45            STA  X0L
1782 85 46            STA  X0H
1784 18               CLC
1785 66 46    _loop   ROR  X0H
1787 66 45            ROR  X0L
1789 66 4a            ROR  X2H
178b 66 49            ROR  X2L
178d 90 0d            BCC  _zero
178f 18               CLC
1790 a5 47            LDA  X1L
1792 65 45            ADC  X0L
1794 85 45            STA  X0L
1796 a5 48            LDA  X1H
1798 65 46            ADC  X0H
179a 85 46            STA  X0H
179c ca       _zero   DEX
179d 10 e6            BPL  _loop
179f a6 49            LDX  X2L
17a1 a5 4a            LDA  X2H
17a3 4c c8 15         JMP  Store_XA
17a6          EndMod [z_mul] Size = 42 [$2a]

              **********************
              Module Divide_Unsigned
              **********************

              ; Quotient : X1 = X1 / X2
              ; Remainder: X0 = X1 % X2

17a6 a5 49            LDA  X2L
17a8 05 4a            ORA  X2H
17aa f0 29            BEQ  z_error_8          ; Divisor is zero
17ac a2 10            LDX  #16
17ae a9 00            LDA  #0
17b0 85 45            STA  X0L
17b2 85 46            STA  X0H
17b4 18               CLC
17b5 26 47    _loop   ROL  X1L
17b7 26 48            ROL  X1H
17b9 26 45            ROL  X0L
17bb 26 46            ROL  X0H
17bd a5 45            LDA  X0L
17bf 38               SEC
17c0 e5 49            SBC  X2L
17c2 a8               TAY
17c3 a5 46            LDA  X0H
17c5 e5 4a            SBC  X2H
17c7 90 04            BCC  _next
17c9 84 45            STY  X0L
17cb 85 46            STA  X0H
17cd ca       _next   DEX
17ce d0 e5            BNE  _loop
17d0 26 47            ROL  X1L
17d2 26 48            ROL  X1H
17d4 60               RTS
              z_error_8 ERROR(8)              ; Divide by zero
17d5 a9 08            LDA  #8
17d7 4c 71 21         JMP  INTERNAL_ERROR

17da          EndMod [Divide_Unsigned] Size = 52 [$34]

              ********************
              Module Divide_Signed
              ********************

              ; (X1) = (X1) / (X2)
              ; (X0) = (X1) % (X2)

17da a5 48            LDA  X1H
17dc 48               PHA                     ; sign of remainder
17dd 45 4a            EOR  X2H
17df 48               PHA                     ; sign of quotient
17e0 a2 47            LDX  #X1L
17e2 a5 48            LDA  X1H
17e4 20 fa 17         JSR  Sign_ZPX           ; make dividend positive
17e7 a2 49            LDX  #X2L
17e9 a5 4a            LDA  X2H
17eb 20 fa 17         JSR  Sign_ZPX           ; make divisor positive
17ee 20 a6 17         JSR  Divide_Unsigned
17f1 a2 47            LDX  #X1L
17f3 68               PLA                     ; sign of quotient
17f4 20 fa 17         JSR  Sign_ZPX
17f7 a2 45            LDX  #X0L
17f9 68               PLA                     ; sign of remainder
17fa          EndMod                          ; fall through [Divide_Signed] Size = 32 [$20]

              ***************
              Module Sign_ZPX
              ***************

              ; negate word at (0,X) if N flag is set

17fa 10 0d            BPL  _return
17fc 38               SEC
17fd a9 00            LDA  #0
17ff f5 00            SBC  0,X
1801 95 00            STA  0,X
1803 a9 00            LDA  #0
1805 f5 01            SBC  1,X
1807 95 01            STA  1,X
1809 60       _return RTS
180a          EndMod [Sign_ZPX] Size = 16 [$10]

              **************************************
              Module z_div ; opcode # 17 37 57 77 d7
              **************************************

180a 20 da 17         JSR  Divide_Signed      ; X1 = X1 / X2
180d a6 47            LDX  X1L
180f a5 48            LDA  X1H
1811 4c c8 15         JMP  Store_XA
1814          EndMod [z_div] Size = 10 [$a]

              **************************************
              Module z_mod ; opcode # 18 38 58 78 d8
              **************************************

1814 20 da 17         JSR  Divide_Signed      ; X0 = X1 % X2
1817 4c 35 13         JMP  Store_X0
181a          EndMod [z_mod] Size = 6 [$6]

              *****************************************
              Module z_call_s ; opcode # 19 39 59 79 d9
              *****************************************

181a a9 00            LDA  #0
181c 80 02            BRA  call_00            ; always
181e          EndMod [z_call_s] Size = 4 [$4]

              *****************************************
              Module z_call_n ; opcode # 1a 3a 5a 7a da
              *****************************************

              ; call subroutine (X1) with 0 - 3 arguments
              ; X1 = subroutine address / 2 (word count)
              ; X2 - X4 arguments
              ; If (X1 == 0) push zero and return
              ; Push saved stack pointer & QI0
              ; Push QI1 & QI2
              ; For # of args do:
              ;     Push local variable
              ;     Set default from instruction stream
              ;     Replace from argument if set
              ; Push argument count & count eor'd with $ff

181e a9 01            LDA  #1
1820 85 17    call_00 STA  Call_Type
1822 a5 47            LDA  X1L
1824 05 48            ORA  X1H
1826 d0 08            BNE  call_20
1828 a5 17            LDA  Call_Type
182a f0 01            BEQ  call_10
182c 60               RTS
182d 4c 2f 13 call_10 JMP  Store_Byte

1830 a5 3c    call_20 LDA  z_frame_ptr        ; push frame pointer
1832 a4 3d            LDY  z_frame_ptr+1
1834 20 15 13         JSR  Push_AY

1837 a4 06            LDY  QI2                ; push instruction pointer H
1839 a5 05            LDA  QI1                ; push instruction pointer M
183b 20 15 13         JSR  Push_AY

183e a4 04            LDY  QI0                ; push instruction pointer L
1840 a5 17            LDA  Call_Type          ; push call type
1842 20 15 13         JSR  Push_AY

1845 a5 47            LDA  X1L                ; compute call address
1847 0a               ASL  A
1848 85 04            STA  QI0
184a a5 48            LDA  X1H
184c 2a               ROL  A
184d 85 05            STA  QI1
184f a9 00            LDA  #0
1851 2a               ROL  A
1852 85 06            STA  QI2                ; IP = (X1) * 2
1854 7f 35 05         BBR7 Version,call_25
1857 06 04            ASL  QI0
1859 eb 05 00         ROW  QI1                ; IP = (X1) * 4
185c 20 b8 27 call_25 JSR  Next_Instruction
185f 85 44            STA  A1H                ; number of local variables
1861 f0 3f            BEQ  call_50            ; no local variables
1863 a2 01            LDX  #1

1865 bc 10 04 call_30 LDY  Lvar_Hi,X
1868 bd 00 04         LDA  Lvar_Lo,X
186b 20 15 13         JSR  Push_AY            ; push local var of caller
              ;-----------------------------
186e a5 35            LDA  Version
1870 c9 85            CMP  #$85               ; version 5
1872 90 0a            BCC  call_32
1874 a9 00            LDA  #0                 ; initialize with zero
1876 9d 10 04         STA  Lvar_Hi,X
1879 9d 00 04         STA  Lvar_Lo,X
187c 80 0c            BRA  call_36
              ;-----------------------------
187e 20 b8 27 call_32 JSR  Next_Instruction   ; initialize with default value
1881 9d 10 04         STA  Lvar_Hi,X
1884 20 b8 27         JSR  Next_Instruction   ; from instruction stream
1887 9d 00 04         STA  Lvar_Lo,X
              ;-----------------------------
188a e4 29    call_36 CPX  ParNum             ; index > # of args ?
188c b0 0f            BCS  call_40            ; -> stay with default value

188e 8a               TXA
188f 0a               ASL  A                  ; or replace with arg value
1890 a8               TAY
1891 b9 47 00         LDA  X1L,Y
1894 9d 00 04         STA  Lvar_Lo,X
1897 b9 48 00         LDA  X1H,Y
189a 9d 10 04         STA  Lvar_Hi,X
189d e4 44    call_40 CPX  A1H                ; # of vars to process
189f e8               INX
18a0 90 c3            BCC  call_30

18a2 ac de 25 call_50 LDY  Z_Arg_Count
18a5 a5 44            LDA  A1H                ; push # of local vars
18a7 20 15 13         JSR  Push_AY
18aa a4 29            LDY  ParNum
18ac 88               DEY
18ad 8c de 25         STY  Z_Arg_Count
18b0 a5 3a            LDA  z_stack_ptr
18b2 85 3c            STA  z_frame_ptr        ; set new frame pointer
18b4 a5 3b            LDA  z_stack_ptr+1
18b6 85 3d            STA  z_frame_ptr+1      ; set new frame pointer
18b8 60               RTS
18b9          EndMod [z_call_n] Size = 155 [$9b]

              *********************************************
              Module z_set_colour ; opcode # 1b 3b 5b 7b db
              *********************************************

              ; Input : X1 = foreground colour
              ;         X2 = background colour

18b9 20 58 22         JSR  Print_Buffer
18bc a6 47            LDX  X1L
18be e0 0d            CPX  #13
18c0 b0 14            BCS  _ret
18c2 bd d7 18         LDA  _coltab,X
18c5 85 1b            STA  Colour
18c7 a6 49            LDX  X2L
18c9 e0 0d            CPX  #13
18cb b0 09            BCS  _ret
18cd bd d7 18         LDA  _coltab,X
18d0 8d 20 d0         STA  BorderCol
18d3 8d 21 d0         STA  BackgCol0
18d6 60       _ret    RTS

18d7 00       _coltab .BYTE $00               ;  0 current
18d8 00               .BYTE $00               ;  1 default
18d9 00               .BYTE $00               ;  2 black
18da 02               .BYTE $02               ;  3 red
18db 05               .BYTE $05               ;  4 green
18dc 07               .BYTE $07               ;  5 yellow
18dd 06               .BYTE $06               ;  6 blue
18de 04               .BYTE $04               ;  7 magenta
18df 03               .BYTE $03               ;  8 cyan
18e0 01               .BYTE $01               ;  9 white
18e1 0f               .BYTE $0f               ; 10 light  grey
18e2 0c               .BYTE $0c               ; 11 medium grey
18e3 0b               .BYTE $0b               ; 12 dark   grey
18e4          EndMod [z_set_colour] Size = 43 [$2b]

              ***********************
              Module z_log_shift ; 02
              ***********************

              ; Input : X1 = number
              ;         X2 = shifts

18e4 a5 47            LDA  X1L
18e6 a4 49            LDY  X2L
18e8 30 08            BMI  _right
18ea 0a       _left   ASL  A
18eb 26 48            ROL  X1H
18ed 88               DEY
18ee d0 fa            BNE  _left
18f0 f0 06            BEQ  _store

18f2 46 48    _right  LSR  X1H
18f4 6a               ROR  A
18f5 c8               INY
18f6 d0 fa            BNE  _right

18f8 a6 48    _store  LDX  X1H
18fa 4c 31 13         JMP  Store_AX
18fd          EndMod [z_log_shift] Size = 25 [$19]

              ***********************
              Module z_art_shift ; 03
              ***********************

              ; Input : X1 = number
              ;         X2 = shifts

18fd a5 47            LDA  X1L
18ff a4 49            LDY  X2L
1901 30 08            BMI  _right
1903 0a       _left   ASL  A
1904 26 48            ROL  X1H
1906 88               DEY
1907 d0 fa            BNE  _left
1909 f0 0c            BEQ  _store

190b a5 48    _right  LDA  X1H
190d 0a               ASL  A
190e 66 48            ROR  X1H
1910 66 47            ROR  X1L
1912 c8               INY
1913 d0 f6            BNE  _right
1915 a5 47            LDA  X1L

1917 a6 48    _store  LDX  X1H
1919 4c 31 13         JMP  Store_AX
191c          EndMod [z_art_shift] Size = 31 [$1f]

              *****************
              Module z_set_font
              *****************

              ; 0 : previous font
              ; 1 : normal   font
              ; 2 : picture  font
              ; 3 : character graphics
              ; 4 : fixed pitch

191c 20 58 22         JSR  Print_Buffer
191f ae e0 25         LDX  Z_Active_Window    ; 0 = main, 1 = upper
1922 a9 00            LDA  #0                 ; default font
1924 a4 47            LDY  X1L                ; new font
1926 c0 03            CPY  #3                 ; graphics ?
1928 d0 02            BNE  _offset            ; -> no
192a a9 80            LDA  #$80               ; graphics offset
192c 85 59    _offset STA  Font_Sel           ; graphics font
192e bd e1 25         LDA  Z_Active_Font,X    ; old font
1931 8b e1 25         STY  Z_Active_Font,X    ; new font
1934 4c 2f 13         JMP  Store_Byte
1937          EndMod [z_set_font] Size = 27 [$1b]

              ***********************
              Module X1_PLUS_X2_TO_A0
              ***********************

1937 18               CLC
1938 a5 49            LDA  X2L
193a 65 47            ADC  X1L
193c 85 41            STA  A0L
193e a5 4a            LDA  X2H
1940 65 48            ADC  X1H
1942 69 2f            ADC  #>Z_HEADER
1944 85 42            STA  A0H
1946 a0 00            LDY  #0
1948 60               RTS
1949          EndMod [X1_PLUS_X2_TO_A0] Size = 18 [$12]

              ********************
              Module z_storew ; e1
              ********************

              ; X1[X2] = X3

1949 cb 49 00         ASW  X2L
194c 20 37 19         JSR  X1_PLUS_X2_TO_A0
194f a5 4c            LDA  X3H
1951 91 41            STA  (A0L),Y
1953 c8               INY
1954 a5 4b            LDA  X3L
1956 91 41            STA  (A0L),Y
1958 60               RTS
1959          EndMod [z_storew] Size = 16 [$10]

              ********************
              Module z_storeb ; e2
              ********************

              ; X1[X2] = X3

1959 20 37 19         JSR  X1_PLUS_X2_TO_A0
195c a5 4b            LDA  X3L
195e 91 41            STA  (A0L),Y
1960 60               RTS
1961          EndMod [z_storeb] Size = 8 [$8]

              **********************
              Module z_put_prop ; e3
              **********************

              ; object (X1) property (X2) = X3

1961 20 28 21         JSR  Find_Property
1964 d0 13            BNE  z_error10
1966 20 f5 20         JSR  Property_Size
1969 f0 09            BEQ  _byte              ; 0: byte
196b c9 01            CMP  #1                 ; 1: word
196d d0 0f            BNE  z_error11
196f a5 4c            LDA  X3H
1971 91 41            STA  (A0L),Y
1973 c8               INY
1974 a5 4b    _byte   LDA  X3L
1976 91 41            STA  (A0L),Y
1978 60               RTS
              z_error10 ERROR(10)
1979 a9 0a            LDA  #10
197b 4c 71 21         JMP  INTERNAL_ERROR

              z_error11 ERROR(11)
197e a9 0b            LDA  #11
1980 4c 71 21         JMP  INTERNAL_ERROR

1983          EndMod [z_put_prop] Size = 34 [$22]

              ******************
              Module z_read ; e4
              ******************

              ; read an input line and call parser

              ; X1 = text  buffer
              ; X2 = parse buffer
              ; X3 = timeout interval [1/10 seconds]
              ; X4 = timeout interrupt routine

1983 20 e3 1c         JSR  Set_Timeout        ; for Borderzone
1986 ff 35 03         BBS7 Version,_V4
1989 20 f4 27         JSR  z_show_status      ; only in version 3
198c 20 58 22 _V4     JSR  Print_Buffer       ; print prompt
198f a2 00            LDX  #0
1991 86 32            STX  Tok_Flag
1993 20 2d 11         JSR  Header_X1
1996 20 0f 2a         JSR  Get_Line_X1        ; read input from user
1999 a5 33            LDA  TO_Flag            ; timeout ?
199b d3 90 f9         LBNE Store_Zero
199e c6 29            DEC  ParNum
19a0 f0 09            BEQ  _skip              ; -> no parse buffer
19a2 a5 49            LDA  X2L
19a4 05 4a            ORA  X2H
19a6 f0 03            BEQ  _skip              ; -> no parse buffer
19a8 20 65 1d         JSR  Parse_Input
19ab a5 35    _skip   LDA  Version
19ad c9 85            CMP  #$85
19af 90 05            BCC  _return
19b1 a9 0d            LDA  #CR
19b3 4c 2f 13         JMP  Store_Byte
19b6 60       _return RTS
19b7          EndMod [z_read] Size = 52 [$34]

              ************************
              Module z_print_char ; e5
              ************************

19b7 a5 47            LDA  X1L
19b9 4c aa 21         JMP  Print_Formatted
19bc          EndMod [z_print_char] Size = 5 [$5]

              ***********************
              Module z_print_num ; e6
              ***********************

19bc a2 47            LDX  #X1L
19be a5 48            LDA  X1H
19c0 10 08            BPL  _pos
19c2 20 fa 17         JSR  Sign_ZPX
19c5 a9 2d            LDA  #'-'
19c7 20 aa 21         JSR  Print_Formatted
19ca a4 47    _pos    LDY  X1L
19cc ab 48 00         LDZ  X1H
19cf 20 73 22         JSR  Format_YZ
19d2 a2 00            LDX  #0
19d4 b5 22    _loop   LDA  NUMBER,X
19d6 c9 20            CMP  #' '
19d8 f0 05            BEQ  _next
19da da               PHX
19db 20 aa 21         JSR  Print_Formatted
19de fa               PLX
19df e8       _next   INX
19e0 e0 05            CPX  #5
19e2 90 f0            BCC  _loop
19e4 60               RTS
19e5          EndMod [z_print_num] Size = 41 [$29]

              ********************
              Module z_random ; e7
              ********************

19e5 a5 47            LDA  X1L
19e7 85 49            STA  X2L
19e9 a5 48            LDA  X1H
19eb 85 4a            STA  X2H
19ed ad 1b d4         LDA  Random
19f0 ae 12 d0         LDX  Raster
19f3 86 47            STX  X1L
19f5 29 7f            AND  #$7f
19f7 85 48            STA  X1H
19f9 20 da 17         JSR  Divide_Signed
19fc e3 45            INW  X0L
19fe 4c 35 13         JMP  Store_X0
1a01          EndMod [z_random] Size = 28 [$1c]

              ******************
              Module z_push ; e8
              ******************

1a01 a5 47            LDA  X1L
1a03 a4 48            LDY  X1H
1a05 4c 15 13         JMP  Push_AY
1a08          EndMod [z_push] Size = 7 [$7]

              ******************
              Module z_pull ; e9
              ******************

1a08 20 04 14         JSR  z_pop
1a0b 4c 09 13         JMP  Put_Var
1a0e          EndMod [z_pull] Size = 6 [$6]

              **************************
              Module z_split_window ; ea
              **************************

1a0e 20 58 22         JSR  Print_Buffer
1a11 a6 47            LDX  X1L                ; new size
1a13 e0 19            CPX  #ROWS
1a15 b0 10            BCS  _return
1a17 86 34            STX  Upper_Size         ; update size
1a19 86 38            STX  Win_Top
1a1b a6 5b            LDX  Cursor_Row
1a1d e4 34            CPX  Upper_Size
1a1f b0 03            BCS  _set
1a21 20 f6 25         JSR  Window_Home
1a24 20 e3 25 _set    JSR Set_Screen_Pointer
1a27 60       _return RTS
1a28          EndMod [z_split_window] Size = 26 [$1a]

              ************************
              Module z_set_window ; eb
              ************************

1a28 20 58 22         JSR  Print_Buffer
1a2b a6 47            LDX  X1L                ; new active window
1a2d 8e e0 25         STX  Z_Active_Window
1a30 bd 4e 2e         LDA  FG_Color,X
1a33 85 1b            STA  Colour
1a35 a9 00            LDA  #0
1a37 bc e1 25         LDY  Z_Active_Font,X
1a3a c0 03            CPY  #3
1a3c d0 02            BNE  _font
1a3e a9 80            LDA  #$80
1a40 85 59    _font   STA Font_Sel
1a42 8a               TXA
1a43 f0 07            BEQ  _lower

1a45 a9 00            LDA  #0                 ; window 1: upper
1a47 a6 34            LDX  Upper_Size
1a49 ca               DEX
1a4a 80 04            BRA  _set

1a4c a5 34    _lower  LDA  Upper_Size         ; window 0: lower
1a4e a2 18            LDX  #ROWS-1

1a50 85 38    _set    STA  Win_Top
1a52 86 37            STX  Win_Bot
1a54 a0 00            LDY  #0
1a56 4c fa 25         JMP  Set_Row_Col
1a59          EndMod [z_set_window] Size = 49 [$31]

              **************************
              Module z_erase_window ; ed
              **************************

1a59 20 58 22         JSR  Print_Buffer
1a5c a6 47            LDX  X1L
1a5e f0 13            BEQ  _lower             ;  0: erase lower window
1a60 e0 ff            CPX  #-1                ; -1: unsplit
1a62 f0 1a            BEQ  _unspl
1a64 e0 fe            CPX  #-2                ; -2: clear screen
1a66 f0 23            BEQ  _clear
1a68 a2 00            LDX  #0                 ;  1: erase upper window
1a6a 20 69 2b _uloop  JSR  Erase_Row
1a6d e8               INX
1a6e e4 34            CPX Upper_Size
1a70 90 f8            BCC  _uloop
1a72 60               RTS

1a73 a6 34    _lower  LDX  Upper_Size
1a75 20 69 2b _lloop  JSR  Erase_Row
1a78 e8               INX
1a79 e0 19            CPX  #ROWS
1a7b 90 f8            BCC  _lloop
1a7d 60               RTS

1a7e a9 00    _unspl  LDA  #0
1a80 85 34            STA  Upper_Size
1a82 85 38            STA  Win_Top
1a84 8d e0 25         STA  Z_Active_Window
1a87 a9 18            LDA  #ROWS-1
1a89 85 37            STA  Win_Bot
1a8b 4c 03 29 _clear  JMP  Clear_Screen

1a8e          EndMod [z_erase_window] Size = 53 [$35]

              ************************
              Module z_erase_line ; ee
              ************************

1a8e a6 47            LDX  X1L
1a90 e0 01            CPX  #1
1a92 d0 0b            BNE  _return
1a94 a4 5a            LDY  Cursor_Col
1a96 a9 20            LDA  #' '
1a98 91 62    _loop   STA  (Scr_Adr),Y
1a9a c8               INY
1a9b c0 50            CPY  #COLS
1a9d 90 f9            BCC  _loop
1a9f 60       _return RTS
1aa0          EndMod [z_erase_line] Size = 18 [$12]

              ************************
              Module z_set_cursor ; ef
              ************************

              ; Input : X1 = new row position relative to window top
              ;         X2 = new column position
              ;         X3 = window (version>= 6)
              ;         the Z  cursor home is [1:1]
              ;         the OS cursor home is [0:0]

1aa0 a5 34            LDA  Upper_Size
1aa2 85 21            STA  MORE_Counter
1aa4 20 58 22         JSR  Print_Buffer
1aa7 a5 47            LDA  X1L
1aa9 3a               DEC  A
1aaa 18               CLC
1aab 65 38            ADC  Win_Top
1aad aa               TAX
1aae a4 49            LDY  X2L
1ab0 88               DEY
1ab1 4c fa 25         JMP  Set_Row_Col
1ab4          EndMod [z_set_cursor] Size = 20 [$14]

              ************************
              Module z_get_cursor ; f0
              ************************

              ; Input : X1 = receiving word array
              ;         the Z  cursor home is [1:1]
              ;         the OS cursor home is [0:0]

1ab4 a9 00            LDA  #0
1ab6 a8               TAY
1ab7 91 47            STA  (X1L),Y            ; row high
1ab9 a5 5b            LDA  Cursor_Row
1abb 1a               INC  A
1abc c8               INY                     ; Y = 1
1abd 91 47            STA  (X1L),Y            ; row low
1abf a9 00            LDA  #0
1ac1 c8               INY
1ac2 91 47            STA  (X1L),Y            ; col high
1ac4 a5 5a            LDA  Cursor_Col
1ac6 1a               INC  A
1ac7 c8               INY                     ; Y = 1
1ac8 91 47            STA  (X1L),Y            ; col low
1aca 60               RTS
1acb          EndMod [z_get_cursor] Size = 23 [$17]

              *****************
              Module Reverse_On
              *****************

1acb a9 20            LDA  #REVERSE
1acd 85 14            STA  Attribute
1acf 60               RTS
1ad0          EndMod [Reverse_On] Size = 5 [$5]

              *******************
              Module Underline_On
              *******************

1ad0 a9 80            LDA  #UNDERLINE
1ad2 85 14            STA  Attribute
1ad4 60               RTS
1ad5          EndMod [Underline_On] Size = 5 [$5]

              **************
              Module Bold_On
              **************

1ad5 a9 40            LDA  #BOLD
1ad7 85 14            STA  Attribute
1ad9 60               RTS
1ada          EndMod [Bold_On] Size = 5 [$5]

              ****************************
              Module z_set_text_style ; f1
              ****************************

              ; % 76543210 Z                C128
              ;       ^--- 8: fixed pitch   ignore (font is fixed anyway)
              ;        ^-- 4: Italic        Attribute = UNDERLINE
              ;         ^- 2: Bold          Attribute = BOLD
              ;          ^ 1: Reverse       Attribute = REVERSE
              ;            0: Normal        Attribute = 0

              ;       JSR Print_Buffer
              ;       LDA #'{'
              ;       JSR CHROUT
              ;       LDA X1L
              ;       ORA #'0'
              ;       JSR CHROUT
              ;       LDA #'}'
              ;       JSR CHROUT

1ada 20 58 22         JSR  Print_Buffer
1add a5 47            LDA  X1L
1adf 4a               LSR  A
1ae0 b0 e9            BCS  Reverse_On
1ae2 4a               LSR  A
1ae3 b0 f0            BCS  Bold_On
1ae5 4a               LSR  A
1ae6 b0 e8            BCS  Underline_On
1ae8 a9 00            LDA  #0
1aea 85 14            STA  Attribute
1aec 60               RTS
1aed          EndMod [z_set_text_style] Size = 19 [$13]

              *************************
              Module z_buffer_mode ; f2
              *************************

1aed 20 58 22         JSR  Print_Buffer
1af0 a5 47            LDA  X1L
1af2 8d df 25         STA  Z_Buffer_Mode
1af5 60               RTS
1af6          EndMod [z_buffer_mode] Size = 9 [$9]

              ***************************
              Module z_output_stream ; f3
              ***************************

              ; X1 = stream number  3:  select memory
              ;                    -3:deselect memory
              ; X2 = table address
              ; X3 = width

1af6 20 58 22         JSR  Print_Buffer       ; flush buffer
1af9 a5 47            LDA  X1L                ; stream number
1afb c9 fd            CMP  #-3                ; deselect memory stream ?
1afd f0 19            BEQ  _close             ; -> do
1aff c9 03            CMP  #3                 ; select memory stream ?
1b01 d0 14            BNE  _return             ; no -> return
1b03 a9 ff            LDA  #-1
1b05 8d aa 2c         STA  Z_Mem_Flag         ; open memory channel
1b08 18               CLC
1b09 a5 4a            LDA  X2H
1b0b 69 2f            ADC  #>Z_HEADER
1b0d 85 5d            STA  Z_Mem_Base+1       ; Z_Mem_Base = TABLE
1b0f 85 5f            STA  Z_Mem_Ptr+1
1b11 a5 49            LDA  X2L
1b13 85 5c            STA  Z_Mem_Base
1b15 85 5e            STA  Z_Mem_Ptr          ; Z_Mem_Ptr = TABLE
1b17 60       _return RTS

              ; close memory channel
              ; store length of TABLE in first word of (Z_Mem_Base)

1b18 a0 01    _close  LDY  #1
1b1a 38               SEC
1b1b a5 5e            LDA  Z_Mem_Ptr
1b1d e5 5c            SBC  Z_Mem_Base
1b1f 91 5c            STA  (Z_Mem_Base),Y
1b21 88               DEY                     ; Y = 0
1b22 8c aa 2c         STY  Z_Mem_Flag         ; close channel
1b25 a5 5f            LDA  Z_Mem_Ptr+1
1b27 e5 5d            SBC  Z_Mem_Base+1
1b29 91 5c            STA  (Z_Mem_Base),Y
1b2b 60               RTS
1b2c          EndMod [z_output_stream] Size = 54 [$36]

              **********
1b2c          Error_Beep
              **********


              ************
              Module Click
              ************

1b2c a9 3c            LDA  #$3c
1b2e 8d 00 d4         STA  Voc1FreqLo
1b31 a9 32            LDA  #$32
1b33 8d 01 d4         STA  Voc1FreqHi
1b36 a9 fc            LDA  #$fc
1b38 85 a2            STA  Jiffy+2
1b3a a9 f0            LDA  #$f0
1b3c 8d 06 d4         STA  Voc1SusRel
1b3f a9 8f            LDA  #$8f
1b41 8d 18 d4         STA  FiltMode
1b44 a9 41            LDA  #$41
1b46 8d 04 d4         STA  Voc1Control
1b49 a5 a2    _wait   LDA  Jiffy+2
1b4b d0 fc            BNE  _wait
1b4d 8d 04 d4         STA  Voc1Control
1b50 a9 80            LDA  #$80
1b52 8d 18 d4         STA  FiltMode
1b55 60               RTS
1b56          EndMod [Error_Beep] Size = 42 [$2a]

              **************************
              Module z_sound_effect ; f5
              **************************

              ; X1  = sound effect number
              ;       1: high pitched beep
              ;       2: low  pitched beep
              ; X2L = volume
              ; X2H = repeats
              ; X3  = routine to be called after finish

1b56 a6 47            LDX  X1L
1b58 ca               DEX
1b59 f0 d1            BEQ  Click
1b5b ca               DEX
1b5c f0 ce            BEQ  Error_Beep
1b5e 60               RTS
1b5f          EndMod [z_sound_effect] Size = 9 [$9]

              ***********************
              Module z_read_char ; f6
              ***********************

1b5f 20 e3 1c         JSR  Set_Timeout
1b62 20 58 22         JSR  Print_Buffer
1b65 a5 34            LDA  Upper_Size
1b67 85 21            STA  MORE_Counter
1b69 20 3e 28         JSR  Cursor_On
1b6c 20 75 28 _loop   JSR  Get_Character
1b6f c9 00            CMP  #0
1b71 f0 f9            BEQ  _loop
1b73 20 4e 28         JSR  Cursor_Off
1b76 c9 14            CMP  #DEL
1b78 d0 02            BNE  _exit
1b7a a9 08            LDA  #8
1b7c 4c 2f 13 _exit   JMP  Store_Byte
1b7f          EndMod [z_read_char] Size = 32 [$20]

              ******************
              Module Set_Data_YA
              ******************

1b7f 84 09            STY  QD0
1b81 85 0a            STA  QD1
1b83 a0 00            LDY  #0
1b85 84 0b            STY  QD2
1b87 60               RTS

              ************************
              Module z_scan_table ; f7
              ************************

              ; Input : X1 = search value
              ;         X2 = address of table
              ;         X3 = number of table entries
              ;         X4 = type (default = $82)

1b88 a5 4c            LDA  X3H
1b8a 30 48            BMI  zst_fa             ; length  < 0 : false
1b8c 05 4b            ORA  X3L
1b8e f0 44            BEQ  zst_fa             ; length == 0 : false

1b90 a5 29            LDA  ParNum
1b92 c9 04            CMP  #4                 ; type parameter given ?
1b94 f0 04            BEQ  _all               ; -> yes
1b96 a9 82            LDA  #$82               ; default: word table, size=2
1b98 85 4d            STA  X4L                ; word/byte flag

1b9a ff 4d 04 _all    BBS7 X4L,_addr          ; -> word
1b9d a5 47            LDA  X1L
1b9f 85 48            STA  X1H                ; byte to search

1ba1 a4 49    _addr   LDY  X2L                ; setup table address
1ba3 a5 4a            LDA  X2H
1ba5 20 7f 1b         JSR  Set_Data_YA

1ba8 a5 09    _loop   LDA  QD0                ; remember address
1baa 85 45            STA  X0L
1bac a5 0a            LDA  QD1
1bae 85 46            STA  X0H

1bb0 20 7e 27         JSR  Next_Datum         ; next table item high (or byte)
1bb3 c5 48            CMP  X1H                ; compare
1bb5 d0 0a            BNE  _next              ; -> no match
1bb7 7f 4d 20         BBR7 X4L,zst_tr         ; -> compare bytes
1bba 20 7e 27         JSR  Next_Datum         ; next table item low
1bbd c5 47            CMP  X1L                ; compare
1bbf f0 19            BEQ  zst_tr             ; -> match

1bc1 a5 4d    _next   LDA  X4L
1bc3 29 7f            AND  #$7f               ; length
1bc5 18               CLC
1bc6 65 45            ADC  X0L                ; QD = X0 + item length
1bc8 85 09            STA  QD0
1bca a9 00            LDA  #0
1bcc 65 46            ADC  X0H
1bce 85 0a            STA  QD1
1bd0 c3 4b            DEW  X3L                ; countdown
1bd2 d0 d4            BNE  _loop

1bd4 20 2d 13 zst_fa  JSR  Store_Zero         ; Store 0 and return false
1bd7 4c 70 13         JMP  Main_False

1bda 20 35 13 zst_tr  JSR  Store_X0           ; store X and return true
1bdd 4c 7c 13         JMP  Main_True
1be0          EndMod [z_scan_table] Size = 88 [$58]

              **********************
              Module z_tokenise ; fb
              **********************

              ;         X1 = text input buffer
              ;         X2 = parse buffer
              ;         X3 = dictionary
              ;         X4 = flag

1be0 20 2d 11         JSR  Header_X1
1be3 a6 29            LDX  ParNum
1be5 ca               DEX
1be6 ca               DEX
1be7 f3 7c 01         LBEQ  Parse_Input       ; standard dictionary
1bea ca               DEX
1beb 86 32            STX  Tok_Flag     ; 0 or 1
1bed a5 4b            LDA  X3L
1bef a4 4c            LDY  X3H
1bf1 4c 6b 1d         JMP  Parse_AY_Dict
1bf4          EndMod [z_tokenise] Size = 20 [$14]

              *************************
              Module z_encode_text ; fc
              *************************

              ; Input : X1 = text buffer
              ;         X2 = length of word
              ;         X3 = start index
              ;         X4 = encoded text

1bf4 20 2d 11         JSR  Header_X1
1bf7 a9 00            LDA  #0
1bf9 a2 09            LDX  #9                 ; word length
1bfb 95 6d    _clear  STA  TEXT_WORD-1,X
1bfd ca               DEX
1bfe d0 fb            BNE  _clear

1c00 a4 4b            LDY  X3L                ; copy word from buffer
1c02 b1 47    _loop   LDA  (X1L),Y            ; to TEXT_WORD
1c04 da               PHX
1c05 5a               PHY
1c06 20 44 1e         JSR  Sep_All
1c09 7a               PLY
1c0a fa               PLX
1c0b b0 0c            BCS  _next
1c0d 95 6e            STA  TEXT_WORD,X
1c0f c8               INY
1c10 e8               INX
1c11 e4 39            CPX  Word_Length
1c13 b0 04            BCS  _next
1c15 e4 49            CPX  X2L
1c17 90 e9            BCC  _loop

1c19 20 d7 1f _next   JSR  Encode
1c1c 18               CLC
1c1d a5 4e            LDA  X4H
1c1f 69 2f            ADC  #>Z_HEADER
1c21 85 4e            STA  X4H
1c23 a4 36            LDY  Vocab_Length
1c25 88               DEY
1c26 b9 68 00 _copy   LDA  DICT_WORD,Y
1c29 91 4d            STA  (X4L),Y
1c2b 88               DEY
1c2c 10 f8            BPL  _copy
1c2e 60               RTS
1c2f          EndMod [z_encode_text] Size = 59 [$3b]

              ******************
              Module Clear_Table
              ******************

1c2f 20 2d 11         JSR  Header_X1
1c32 a0 00            LDY  #0                 ; Y = 0
1c34 a9 00    ClTa_10 LDA  #0                 ; A = 0
1c36 91 47            STA  (X1L),Y
1c38 c8               INY
1c39 d0 02            BNE  ClTa_20
1c3b e6 48            INC  X1H
1c3d c3 4b    ClTa_20 DEW  X3L
1c3f d0 f3            BNE  ClTa_10
1c41 60               RTS
1c42          EndMod [Clear_Table] Size = 19 [$13]

              ************************
              Module z_copy_table ; fd
              ************************

              ; Input : X1 = source
              ;         X2 = target
              ;         X3 = size

1c42 a5 49            LDA  X2L
1c44 05 4a            ORA  X2H
1c46 f0 e7            BEQ  Clear_Table        ; no copy
1c48 a5 4b            LDA  X3L
1c4a 05 4c            ORA  X3H
1c4c f0 30            BEQ  _return            ; size = 0

1c4e a2 4b            LDX  #X3L
1c50 a5 4c            LDA  X3H
1c52 10 05            BPL  _safe              ; -> safe copy
1c54 20 fa 17         JSR  Sign_ZPX           ; make size positive
1c57 80 0a            BRA  _fwd               ; -> forced forward

1c59 a5 47    _safe   LDA  X1L
1c5b c5 49            CMP  X2L
1c5d a5 48            LDA  X1H
1c5f e5 4a            SBC  X2H
1c61 90 1c            BCC  _bwd               ; -> (X1 < X2) backward

              ; forward copy (X1 may point to high memory)

1c63 a4 47    _fwd    LDY  X1L                ; data pointer = source
1c65 a5 48            LDA  X1H
1c67 20 7f 1b         JSR  Set_Data_YA

1c6a 18               CLC
1c6b a5 4a            LDA  X2H
1c6d 69 2f            ADC  #>Z_HEADER
1c6f 85 4a            STA  X2H

1c71 20 7e 27 _floop  JSR  Next_Datum         ; LDA (source)
1c74 a0 00            LDY  #0
1c76 91 49            STA  (X2L),Y            ; STA (target)
1c78 e3 49            INW  X2L                ; ++X2
1c7a c3 4b            DEW  X3L                ; --X3 (counter)
1c7c d0 f3            BNE  _floop             ; -> loop
1c7e 60       _return RTS

              ; backward copy

1c7f 18       _bwd    CLC                     ; set source end
1c80 a5 47            LDA  X1L
1c82 65 4b            ADC  X3L
1c84 85 47            STA  X1L
1c86 a5 48            LDA  X1H
1c88 65 4c            ADC  X3H
1c8a 69 2f            ADC  #>Z_HEADER
1c8c 85 48            STA  X1H
1c8e 18               CLC                     ; set target end
1c8f a5 49            LDA  X2L
1c91 65 4b            ADC  X3L
1c93 85 49            STA  X2L
1c95 a5 4a            LDA  X2H
1c97 65 4c            ADC  X3H
1c99 69 2f            ADC  #>Z_HEADER
1c9b 85 4a            STA  X2H
1c9d a0 00            LDY  #0
1c9f c3 47    _bloop  DEW  X1L                ; --X1
1ca1 c3 49            DEW  X2L                ; --X2
1ca3 b1 47            LDA  (X1L),Y
1ca5 91 49            STA  (X2L),Y            ; copy byte
1ca7 c3 4b            DEW  X3L                ; --X3
1ca9 d0 f4            BNE  _bloop             ; loop
1cab 60               RTS
1cac          EndMod [z_copy_table] Size = 106 [$6a]

              *************************
              Module z_print_table ; fe
              *************************

              ; Input : X1 = zscii text
              ;         X2 = width
              ;         X3 = height
              ;         X4 = skip

1cac 20 58 22         JSR  Print_Buffer
1caf a4 47            LDY  X1L                ; set text address
1cb1 a5 48            LDA  X1H
1cb3 20 7f 1b         JSR  Set_Data_YA
1cb6 a5 29            LDA  ParNum
1cb8 c9 03            CMP  #3
1cba b0 04            BCS  _start
1cbc a9 01            LDA  #1                 ; default height = 1
1cbe 85 4b            STA  X3L
1cc0 20 5a 2b _start  JSR  Save_Cursor
1cc3 20 62 2b _rloop  JSR  Restore_Cursor
1cc6 a6 49            LDX  X2L                ; width
1cc8 20 7e 27 _cloop  JSR  Next_Datum
1ccb 20 69 29         JSR  CHROUT
1cce ca               DEX                     ; column countdown
1ccf d0 f7            BNE  _cloop
1cd1 e6 1d            INC  C_Save_Row         ; next row
1cd3 c6 4b            DEC  X3L                ; row countdown
1cd5 d0 ec            BNE  _rloop
1cd7 60               RTS
1cd8          EndMod [z_print_table] Size = 44 [$2c]

              *******************************
              Module z_check_argc ; opcode ff
              *******************************

1cd8 ad de 25         LDA  Z_Arg_Count
1cdb c5 47            CMP  X1L
1cdd b3 9d f6         LBCS Main_True
1ce0 4c 70 13         JMP  Main_False
1ce3          EndMod [z_check_argc] Size = 11 [$b]

              ******************
              Module Set_Timeout
              ******************
1ce3 a0 00            LDY  #0
1ce5 84 30            STY  Timeout
1ce7 84 31            STY  Timeout+1
1ce9 a5 29            LDA  ParNum
1ceb c9 03            CMP  #3
1ced 90 29            BCC  _return
1cef a5 4d            LDA  X4L                ; timeout routine
1cf1 8d ab 2c         STA  Z_Timeout
1cf4 a5 4e            LDA  X4H
1cf6 8d ac 2c         STA  Z_Timeout+1
1cf9 a5 4b            LDA  X3L                ; timeout value
1cfb 85 30            STA  Timeout            ; [1/10 seconds]
1cfd a6 4c            LDX  X3H
1cff 86 31            STX  Timeout+1
1d01 eb 30 00         ROW  Timeout            ; * 2
1d04 65 30            ADC  Timeout
1d06 85 30            STA  Timeout
1d08 8a               TXA
1d09 65 31            ADC  Timeout+1
1d0b 85 31            STA  Timeout+1          ; * 3
1d0d eb 30 00         ROW  Timeout            ; * 6 = Jiffies
1d10 78               SEI
1d11 84 a0            STY  Jiffy              ; reset clock
1d13 84 a1            STY  Jiffy+1
1d15 84 a2            STY  Jiffy+2
1d17 58               CLI
1d18 60       _return RTS
1d19          EndMod [Set_Timeout] Size = 54 [$36]

              ************
              Module Log_A
              ************
1d19 48               PHA
1d1a ad e0 25         LDA  Z_Active_Window
1d1d d0 21            BNE  _return
1d1f a9 7b            LDA  #'{'
1d21 20 69 29         JSR  CHROUT
1d24 68               PLA
1d25 48               PHA
1d26 20 2a 2b         JSR  ASCII_Hex
1d29 48               PHA
1d2a 8a               TXA
1d2b 20 69 29         JSR  CHROUT
1d2e 68               PLA
1d2f 20 69 29         JSR  CHROUT
1d32 a9 7d            LDA  #'}'
1d34 20 69 29         JSR  CHROUT
1d37 a5 5a            LDA  Cursor_Col
1d39 c9 4c            CMP  #76
1d3b 90 03            BCC  _return
1d3d 20 11 29         JSR  Return_Screen
1d40 68       _return PLA
1d41 60               RTS
1d42          EndMod [Log_A] Size = 41 [$29]

              *************
              Module Dump_A
              *************
1d42 20 2a 2b         JSR  ASCII_Hex
1d45 48               PHA
1d46 8a               TXA
1d47 20 69 29         JSR  CHROUT
1d4a 68               PLA
1d4b 4c 69 29         JMP  CHROUT
1d4e          EndMod [Dump_A] Size = 12 [$c]

              ****************
              Module Dump_Word
              ****************
              ; Input: X = ZP address
1d4e a9 7b            LDA  #'{'
1d50 20 69 29         JSR  CHROUT
1d53 b9 01 00         LDA  1,Y
1d56 20 42 1d         JSR  Dump_A
1d59 b9 00 00         LDA  0,Y
1d5c 20 42 1d         JSR  Dump_A
1d5f a9 7d            LDA  #'}'
1d61 20 69 29         JSR  CHROUT
1d64 60               RTS
1d65          EndMod [Dump_Word] Size = 23 [$17]

              ******************
              Module Parse_Input
              ******************

              ;         X1    = text input buffer
              ;         X1[0] = buffer size
              ;         X1[1] = string length (Version > 3)

              ;         X2    = parse buffer  (item size = 4)
              ;         X2[0] = buffer size   (max. 59 items)
              ;         X2[1] = buffer length (items)

              ;         X7L   = item[0] dictionary address high
              ;         X7H   = item[1] dictionary address low
              ;         X8L   = item[2] # of characters
              ;         X8H   = item[3] start of word in text buffer

              ;         X5L   = index to text buffer
              ;         X5H   = size of word (characters)
              ;         X6L   = X2[1] = items parsed
              ;         X6H   = X2[0] = parse buffer limit

1d65 ad 09 2f         LDA  h_dictionary_lo
1d68 ac 08 2f         LDY  h_dictionary_hi

              *************
1d6b          Parse_AY_Dict
              *************

1d6b 85 3e            STA  DPL
1d6d 84 3f            STY  DPH
1d6f 18               CLC
1d70 a5 4a            LDA  X2H                ; X2 += Header
1d72 69 2f            ADC  #>Z_HEADER         ; parse buffer
1d74 85 4a            STA  X2H

              ; limit buffer capacity to 59 items

1d76 a0 00            LDY  #0
1d78 b1 49            LDA  (X2L),Y
1d7a f0 04            BEQ  Parse_10           ; -> use default
1d7c c9 3c            CMP  #60
1d7e 90 04            BCC  Parse_15           ; -> OK (1..59)
1d80 a9 3b    Parse_10  LDA #59
1d82 91 49            STA  (X2L),Y            ; use default
1d84 85 52    Parse_15  STA X6H               ; copy of parse buffer limit
1d86 7f 35 05         BBR7 Version,Parse_17
1d89 c8               INY                     ; Y = 1
1d8a b1 47            LDA  (X1L),Y
1d8c 85 1a            STA  Chars_Left         ; Version > 3
1d8e a0 02    Parse_17  LDY #2                ; Y = 2
1d90 84 2a            STY  Parse_Index        ; start in parse buffer
1d92 ff 35 01         BBS7 Version,Parse_18
1d95 88               DEY                     ; start at 1 for Version = 3
1d96 84 4f    Parse_18  STY X5L               ; buffer index
1d98 a0 00            LDY  #0
1d9a 84 51            STY  X6L                ; items parsed
1d9c 84 50            STY  X5H                ; word size = 0

              ; parse loop for items (words or delimiters)

1d9e a6 51    Parse_20  LDX X6L               ; items parsed
1da0 e4 52            CPX  X6H                ; items max.
1da2 b0 06            BCS  Parse_25           ; -> exceeded # of words
1da4 a5 1a            LDA  Chars_Left
1da6 05 50            ORA  X5H                ; word size
1da8 d0 06            BNE  Parse_30

1daa a0 01    Parse_25  LDY #1                ; finish
1dac 8a               TXA
1dad 91 49            STA  (X2L),Y            ; items parsed
1daf 60               RTS                     ; exit

              ; continue parsing word

1db0 a5 50    Parse_30  LDA X5H               ; word size
1db2 c5 39            CMP  Word_Length
1db4 90 03            BCC  Parse_35           ; -> word length < max
1db6 20 2e 1e         JSR  Skip_Surplus       ; skip to next delimiter

1db9 a5 50    Parse_35  LDA X5H               ; word size
1dbb d0 1d            BNE  Parse_45           ; -> search word in dictionary

1dbd a2 08            LDX  #8                 ; clear Word buffer
1dbf 95 6e    Parse_40  STA TEXT_WORD,X
1dc1 ca               DEX
1dc2 10 fb            BPL  Parse_40

              ; not a word, is this character a delimiter ?

1dc4 a4 4f            LDY  X5L                ; buffer index
1dc6 84 56            STY  X7L+3              ; X8H = word position
1dc8 b1 47            LDA  (X1L),Y
1dca 20 49 1e         JSR  Sep_Dict           ; dot, comma, quote
1dcd b0 24            BCS  Parse_50           ; -> in dictionary
1dcf 20 67 1e         JSR  Sep_Std            ; standard separators
1dd2 90 06            BCC  Parse_45
1dd4 c6 1a            DEC  Chars_Left         ; ignore ! or ?
1dd6 e6 4f            INC  X5L                ; ++buffer index
1dd8 d0 c4            BNE  Parse_20           ; always

1dda a5 1a    Parse_45  LDA Chars_Left
1ddc f0 1d            BEQ  Parse_55
1dde a4 4f            LDY  X5L                ; buffer index
1de0 b1 47            LDA  (X1L),Y
1de2 20 44 1e         JSR  Sep_All            ; check all separators
1de5 b0 14            BCS  Parse_55
1de7 a6 50            LDX  X5H                ; word size
1de9 95 6e            STA  TEXT_WORD,X
1deb c6 1a            DEC  Chars_Left
1ded e6 50            INC  X5H                ; ++word size
1def e6 4f            INC  X5L                ; ++buffer index
1df1 80 ab            BRA  Parse_20

1df3 85 6e    Parse_50  STA TEXT_WORD         ; word is a separator
1df5 c6 1a            DEC  Chars_Left
1df7 e6 50            INC  X5H                ; ++word size
1df9 e6 4f            INC  X5L                ; ++buffer index

              ; start parsing

1dfb a5 50    Parse_55  LDA X5H               ; word size
1dfd f0 9f            BEQ  Parse_20           ; -> nothing to parse
1dff 85 55            STA  X7L+2              ; X8L = # of letters
1e01 20 d7 1f         JSR  Encode             ; convert to packed format
1e04 20 7d 1e         JSR  Dictionary_Search  ; result -> X7
1e07 e6 51            INC  X6L                ; Inc # of items
1e09 a2 00            LDX  #0
1e0b 86 50            STX  X5H                ; word size
1e0d a4 2a            LDY  Parse_Index
1e0f a5 32            LDA  Tok_Flag     ; 1 : store matches only
1e11 f0 0c            BEQ  Parse_60           ; -> store anyhow
1e13 a5 53            LDA  X7L
1e15 05 54            ORA  X7H
1e17 d0 06            BNE  Parse_60
1e19 c8               INY                     ; skip this entry
1e1a c8               INY                     ; no synonym replacement
1e1b c8               INY
1e1c c8               INY
1e1d d0 0a            BNE  Parse_70           ; 0 : Dict address hi
1e1f b5 53    Parse_60  LDA X7L,X             ; 1 : Dict address lo
1e21 91 49            STA  (X2L),Y            ; 2 : # of letters
1e23 c8               INY                     ; 3 : text buffer position
1e24 e8               INX
1e25 e0 04            CPX  #4
1e27 90 f6            BCC  Parse_60
1e29 84 2a    Parse_70  STY Parse_Index       ; Parse_Index += 4
1e2b 4c 9e 1d         JMP  Parse_20
1e2e          EndMod [Parse_Input] Size = 201 [$c9]

              ************
1e2e          Skip_Surplus
              ************

1e2e a5 1a            LDA  Chars_Left
1e30 f0 11            BEQ  SkSu_Ret
1e32 a4 4f    SkSu_10 LDY  X5L                ; buffer index
1e34 b1 47            LDA  (X1L),Y
1e36 20 44 1e         JSR  Sep_All
1e39 b0 08            BCS  SkSu_Ret
1e3b e6 50            INC  X5H                ; word size
1e3d e6 4f            INC  X5L                ; buffer index
1e3f c6 1a            DEC  Chars_Left
1e41 d0 ef            BNE  SkSu_10
1e43 60       SkSu_Ret  RTS

              *******
1e44          Sep_All
              *******

              ; Input : (A) = character
              ; Output: C=1 is separator, C=0 is not

              ; check standard list and dictionary list

1e44 20 67 1e         JSR  Sep_Std
1e47 b0 1d            BCS  SeDi_Ret           ; -> is separator

              ********
1e49          Sep_Dict
              ********

              ; Input : (A) = character
              ; Output: C=1 is separator, C=0 is not

              ; typical list: , . "

1e49 48               PHA
1e4a 8d 5e 1e         STA  SeDi_10+4          ; search character
1e4d ac 09 2f         LDY  h_dictionary_lo
1e50 ad 08 2f         LDA  h_dictionary_hi
1e53 20 7f 1b         JSR  Set_Data_YA
1e56 20 7e 27         JSR  Next_Datum
1e59 aa               TAX                     ; X = # of separators
1e5a 20 7e 27 SeDi_10 JSR  Next_Datum
1e5d c9 20            CMP  #' '               ; modified !
1e5f f0 04            BEQ  SeDi_20            ; yes: return with C=1
1e61 ca               DEX
1e62 d0 f6            BNE  SeDi_10
1e64 18               CLC                     ; no : return with C=0
1e65 68       SeDi_20 PLA
1e66 60       SeDi_Ret  RTS

              *******
1e67          Sep_Std
              *******

              ; Input : (A) = character
              ; Output: C=1 is separator, C=0 is not

              ; standard list: ! ? , . CR SPACE

1e67 a2 05            LDX  #?Sep_Std_List-1   ; size of separator list
1e69 dd d8 25 SeSt_10 CMP  Sep_Std_List,X
1e6c f0 04            BEQ  SeSt_Ret           ; yes: return with C=1
1e6e ca               DEX
1e6f 10 f8            BPL  SeSt_10
1e71 18               CLC                     ; no : return with C=0
1e72 60       SeSt_Ret  RTS

              ****************
              Module Skip_Data
              ****************

              ; Input : A = # of bytes to skip
              ; Output: QD pointer updated

1e73 18               CLC
1e74 65 09            ADC  QD0
1e76 85 09            STA  QD0
1e78 90 02            BCC  _return
1e7a e3 0a            INW  QD1
1e7c 60       _return RTS
1e7d          EndMod [Skip_Data] Size = 10 [$a]

              *****************
1e7d          Dictionary_Search
              *****************

              ; Input : DP = dictionary
              ;         RA = search token

1e7d a4 3e            LDY  DPL                ; start of dictionary
1e7f a5 3f            LDA  DPH
1e81 20 7f 1b         JSR  Set_Data_YA

1e84 20 7e 27         JSR  Next_Datum         ; size of separator list
1e87 20 73 1e         JSR  Skip_Data          ; skip list
1e8a 20 7e 27         JSR  Next_Datum         ; item size
1e8d 85 40            STA  DPI
1e8f 20 7e 27         JSR  Next_Datum         ; item count hi
1e92 85 4e            STA  X4H
1e94 20 7e 27         JSR  Next_Datum         ; item count lo
1e97 85 4d            STA  X4L
1e99 05 4e            ORA  X4H
1e9b f0 36            BEQ  DiSe_70            ; -> empty dictionary
1e9d a5 4e            LDA  X4H
1e9f 30 0d            BMI  DiSe_20            ; -> entries are unsorted

1ea1 38               SEC
1ea2 a9 00            LDA  #0                 ; positive countdown is sorted
1ea4 e5 4d            SBC  X4L                ; make count down negative
1ea6 85 4d            STA  X4L
1ea8 a9 00            LDA  #0
1eaa e5 4e            SBC  X4H
1eac 85 4e            STA  X4H

1eae a5 09    DiSe_20 LDA  QD0                ; X7 = address of next item
1eb0 85 54            STA  X7H
1eb2 a5 0a            LDA  QD1
1eb4 85 53            STA  X7L
1eb6 a2 00            LDX  #0                 ; X = token byte index
1eb8 20 7e 27 DiSe_30 JSR  Next_Datum
1ebb e8               INX
1ebc d5 67            CMP  DICT_WORD-1,X
1ebe d0 05            BNE  DiSe_50
1ec0 e4 36            CPX  Vocab_Length
1ec2 90 f4            BCC  DiSe_30
1ec4 60               RTS                     ; -> match

1ec5 20 7e 27 DiSe_50 JSR  Next_Datum         ; skip to next item
1ec8 e8               INX
1ec9 e4 40            CPX  DPI                ; item_Size
1ecb 90 f8            BCC  DiSe_50

1ecd e3 4d            INW  X4L                ; count up to zero
1ecf d0 dd            BNE  DiSe_20

1ed1 a9 00            LDA  #0
1ed3 85 54    DiSe_70 STA  X7H                ; not found: return (X7) = 0
1ed5 85 53            STA  X7L
1ed7 60       DiSe_Ret  RTS


              ;                6789abcdef0123456789abcdef
              ;                --------------------------
              ;         .BYTE "abcdefghijklmnopqrstuvwxyz"
              ;         .BYTE "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
1ed8 00 0d 30 ZSCII_2 .BYTE "\0\r0123456789.,!?_#'\"/\\-:()"

              *********
1ef2          Decode_YX
              *********

              ; print 5bit encoded text from address (Y/X)

1ef2 84 09            STY  QD0
1ef4 86 0a            STX  QD1
1ef6 a9 00            LDA  #0
1ef8 85 0b            STA  QD2

              ***********
1efa          Decode_Text
              ***********

              ;         LDA #'{'
              ;         JSR Print_Formatted
              ;         LDA QD2
              ;         JSR Dump_For
              ;         LDA QD1
              ;         JSR Dump_For
              ;         LDA QD0
              ;         JSR Dump_For
              ;         LDA #'}'
              ;         JSR Print_Formatted

1efa a2 00            LDX  #0
1efc 86 08            STX  QDH
1efe a2 00    DeTe_10 LDX  #0
1f00 86 13            STX  Alphabet
1f02 20 91 1f DeTe_15 JSR  Get_Packed_Char
1f05 b0 d0            BCS  DiSe_Ret           ; return
1f07 d0 04            BNE  DeTe_20
1f09 a9 20            LDA  #' '               ; 0 : space
1f0b d0 24            BNE  DeTe_40
1f0d c9 04    DeTe_20 CMP  #4                 ; 1,2,3 : abbreviations
1f0f 90 38            BCC  DeTe_55
1f11 c9 06            CMP  #6                 ; shift 4:capital, 5:numeric
1f13 b0 04            BCS  DeTe_25
1f15 85 13            STA  Alphabet
1f17 90 e9            BCC  DeTe_15
1f19 a6 13    DeTe_25 LDX  Alphabet
1f1b e0 05            CPX  #5                 ; numeric
1f1d d0 08            BNE  DeTe_30
1f1f aa               TAX
1f20 bd d2 1e         LDA  ZSCII_2-6,X
1f23 d0 0c            BNE  DeTe_40
1f25 f0 10            BEQ  DeTe_50

1f27 e0 04    DeTe_30 CPX  #4                 ; upper case
1f29 d0 04            BNE  DeTe_35
1f2b 69 3a            ADC  #$3a               ; carry is set   from CPX
1f2d d0 02            BNE  DeTe_40
1f2f 69 5b    DeTe_35 ADC  #$5b               ; carry is clear from CPX
1f31 20 aa 21 DeTe_40 JSR  Print_Formatted
1f34 4c fe 1e         JMP  DeTe_10

1f37 20 91 1f DeTe_50 JSR  Get_Packed_Char    ; 10 bit ZSCII
1f3a 0a               ASL  A
1f3b 0a               ASL  A
1f3c 0a               ASL  A
1f3d 0a               ASL  A
1f3e 0a               ASL  A
1f3f 85 10            STA  LV0
1f41 20 91 1f         JSR  Get_Packed_Char
1f44 05 10            ORA  LV0
1f46 4c 31 1f         JMP  DeTe_40

              ; process code for abbreviations (1,2,3) plus abbr. index

1f49 e9 00    DeTe_55 SBC  #0                 ; subtract 1 (C=0)
1f4b 0a               ASL  A                  ; 0, 1, 2
1f4c 0a               ASL  A
1f4d 0a               ASL  A
1f4e 0a               ASL  A
1f4f 0a               ASL  A
1f50 0a               ASL  A
1f51 85 12            STA  LV2                ; -> $00, $40, $80
1f53 20 91 1f         JSR  Get_Packed_Char
1f56 0a               ASL  A
1f57 18               CLC
1f58 65 12            ADC  LV2                ; add offset
1f5a a8               TAY                     ; index to abbr. table

              ; push QD2, QD1, QD0, QDH, QDL for recursive call

1f5b a2 04            LDX  #4
1f5d b5 07    DeTe_60 LDA  QDL,X
1f5f 48               PHA
1f60 ca               DEX
1f61 10 fa            BPL  DeTe_60

              ; recursive call of Decode_Text for abbreviation

1f63 18               CLC
1f64 ad 19 2f         LDA  h_abbreviations_lo
1f67 85 41            STA  A0L
1f69 ad 18 2f         LDA  h_abbreviations_hi
1f6c 69 2f            ADC  #>Z_HEADER
1f6e 85 42            STA  A0H                ; (A0) = start of abbr. pointer
1f70 c8               INY
1f71 b1 41            LDA  (A0L),Y            ; address low
1f73 0a               ASL  A                  ; x 2
1f74 85 09            STA  QD0
1f76 88               DEY
1f77 b1 41            LDA  (A0L),Y            ; address high
1f79 2a               ROL  A                  ; x 2
1f7a 85 0a            STA  QD1
1f7c a9 00            LDA  #0
1f7e 2a               ROL  A                  ; high mem
1f7f 85 0b            STA  QD2

              ; recursive call

1f81 20 fa 1e         JSR  Decode_Text

              ; pull QDL, QDH, QD0, QD1, QD2 after recursive call

1f84 a2 00            LDX  #0
1f86 68       DeTe_65 PLA
1f87 95 07            STA  QDL,X
1f89 e8               INX
1f8a e0 05            CPX  #5
1f8c 90 f8            BCC  DeTe_65
1f8e 4c fe 1e         JMP  DeTe_10
1f91                  .SIZE [BLACK] Size = 8081 [$1f91]
1f91                  .SIZE [BLACK] Size = 8081 [$1f91]

              ***************
1f91          Get_Packed_Char
              ***************

1f91 a5 08            LDA  QDH
1f93 f0 1c            BEQ  GPC_20             ; load next word
1f95 c9 80            CMP  #%100 00000        ; EOS flag
1f97 f0 3d            BEQ  GPC_Ret            ; return with C=1 : End-Of-String
1f99 24 08            BIT  QDH                ; valid 2nd. char ?
1f9b 50 0a            BVC  GPC_10             ; goto  3rd. cahr
1f9d 29 9f            AND  #%100 11111        ; save EOS clear bit 6
1f9f 09 20            ORA  #%001 00000        ; make non zero
1fa1 85 08            STA  QDH
1fa3 29 1f            AND  #%000 11111        ; extract data
1fa5 18               CLC
1fa6 60               RTS                     ; return with 2nd. char

1fa7 29 80    GPC_10  AND  #%100 00000        ; save EOS only
1fa9 85 08            STA  QDH
1fab a5 07            LDA  QDL
1fad 29 1f            AND  #%000 11111        ; extract 5 bit
1faf 18               CLC
1fb0 60               RTS                     ; return with 3rd. char

1fb1 20 7e 27 GPC_20  JSR  Next_Datum
1fb4 aa               TAX                     ; x = first half
1fb5 29 03            AND  #%0000 0011        ; extract part of 2nd. char
1fb7 85 08            STA  QDH
1fb9 20 7e 27         JSR  Next_Datum
1fbc 85 07            STA  QDL
1fbe 0a               ASL  A
1fbf 26 08            ROL  QDH
1fc1 0a               ASL  A
1fc2 26 08            ROL  QDH
1fc4 0a               ASL  A
1fc5 26 08            ROL  QDH
1fc7 8a               TXA
1fc8 29 80            AND  #%1000 0000        ; save EOS flag
1fca 09 40            ORA  #%0100 0000        ; set valid 2nd. char flag
1fcc 05 08            ORA  QDH                ; add value
1fce 85 08            STA  QDH                ; save 2nd. char

1fd0 8a               TXA
1fd1 4a               LSR  A
1fd2 4a               LSR  A
1fd3 29 1f            AND  #%000 11111
1fd5 18               CLC
1fd6 60       GPC_Ret RTS                     ; return with 1st. char

              ******
1fd7          Encode
              ******

              ; The encode takes 9 ASCII characters (6 in version 3) and
              ; converts them to packed ZSCII. This routine is called from the parser
              ; only, which already converts uppercase to lowercase letters.
              ; Also the output length is restricted to 6 characters (4 in bersion 3)
              ; because this is the size of a dictionary entry.

              ; Input:  6-9 ASCII charcaters in TEXT_WORD
              ; Output: 4-6 Z     characters in DICT_WORD

1fd7 a0 00            LDY  #0                 ; TEXT_WORD[Y]
1fd9 a2 00            LDX  #0                 ; DICT_WORD[X]
1fdb f0 0a            BEQ  Enco_30

1fdd a9 05    Enco_10 LDA  #5                 ; void (numeric shift)
1fdf 95 68    Enco_20 STA  DICT_WORD,X        ; store next ZSCII
1fe1 e8               INX
1fe2 e4 39            CPX  Word_Length
1fe4 b0 5b            BCS  Enco_70

1fe6 c8               INY
1fe7 b9 6e 00 Enco_30 LDA  TEXT_WORD,Y        ; get next ASCII char
1fea f0 f1            BEQ  Enco_10            ; insert void char

1fec c9 5b            CMP  #'Z'+1             ; (A-Z) upper range
1fee b0 08            BCS  Enco_35
1ff0 c9 41            CMP  #'A'               ; (A-Z) lower range
1ff2 90 04            BCC  Enco_35
1ff4 e9 3b            SBC  #$3b               ; (A-Z) -> $06-$1f
1ff6 d0 e7            BNE  Enco_20            ; -> loop always

1ff8 c9 7b    Enco_35 CMP  #'z'+1             ; (a-z) upper range
1ffa b0 08            BCS  Enco_40
1ffc c9 61            CMP  #'a'               ; (a-z) lower range
1ffe 90 04            BCC  Enco_40
2000 e9 5b            SBC  #$5b               ; (a-z) -> $06-$1f
2002 d0 db            BNE  Enco_20            ; -> loop always

2004 8c d7 25 Enco_40 STY  L_Encode_Y
2007 8d d6 25         STA  L_Encode_A
200a a9 05            LDA  #5
200c 95 68            STA  DICT_WORD,X
200e e8               INX
200f ad d6 25         LDA  L_Encode_A
2012 a0 19            LDY  #25
2014 d9 d8 1e Enco_50 CMP  ZSCII_2,Y
2017 f0 20            BEQ  Enco_60            ; found ZSCII in table 3
2019 88               DEY
201a d0 f8            BNE  Enco_50

201c a9 06            LDA  #6                 ; shift to 10 bit char
201e 95 68            STA  DICT_WORD,X
2020 e8               INX
2021 ad d6 25         LDA  L_Encode_A
2024 4a               LSR  A
2025 4a               LSR  A
2026 4a               LSR  A
2027 4a               LSR  A
2028 4a               LSR  A
2029 29 03            AND  #3
202b 95 68            STA  DICT_WORD,X
202d e8               INX
202e ad d6 25         LDA  L_Encode_A
2031 29 1f            AND  #$1f
2033 ac d7 25         LDY  L_Encode_Y
2036 4c df 1f         JMP  Enco_20

2039 98       Enco_60 TYA                     ; use index to table 3 as value
203a ac d7 25         LDY  L_Encode_Y         ; restore read index
203d 69 05            ADC  #5                 ; add offset 6 (5 + carry)
203f d0 9e            BNE  Enco_20            ; loop always

2041 a2 00    Enco_70 LDX  #0
2043 a0 00            LDY  #0
2045 b5 69    Enco_80 LDA  DICT_WORD+1,X
2047 0a               ASL  A
2048 0a               ASL  A
2049 0a               ASL  A
204a 0a               ASL  A
204b 36 68            ROL  DICT_WORD,X
204d 0a               ASL  A
204e 36 68            ROL  DICT_WORD,X
2050 15 6a            ORA  DICT_WORD+2,X
2052 48               PHA
2053 b5 68            LDA  DICT_WORD,X
2055 99 68 00         STA  DICT_WORD,Y
2058 68               PLA
2059 99 69 00         STA  DICT_WORD+1,Y
205c e8               INX
205d e8               INX
205e e8               INX
205f c8               INY
2060 c8               INY
2061 e4 39            CPX  Word_Length
2063 90 e0            BCC  Enco_80
2065 b9 66 00         LDA  DICT_WORD-2,Y
2068 09 80            ORA  #$80               ; end of string flag
206a 99 66 00         STA  DICT_WORD-2,Y
206d 60               RTS

              *************
              Module A0_x_8
              *************

206e 85 41            STA  A0L
2070 86 42            STX  A0H                ; (A0) = object
2072 0a               ASL  A
2073 26 42            ROL  A0H                ; (A/A0H) = object *  2
2075 0a               ASL  A
2076 26 42            ROL  A0H                ; (A/A0H) = object *  4
2078 0a               ASL  A
2079 26 42            ROL  A0H                ; (A/A0H) = object *  8
207b 60               RTS
207c          EndMod [A0_x_8] Size = 14 [$e]

              ********************
              Module Object_Offset
              ********************

              ; V3 Address = (h_objects) + 53 + 9 * object

207c ff 35 0f         BBS7 Version,_V4
207f a2 00            LDX  #0
2081 20 6e 20         JSR  A0_x_8
2084 65 41            ADC  A0L
2086 90 03            BCC  _label
2088 e6 42            INC  A0H                ; (A/A0H) = object *  9
208a 18               CLC
208b 69 35    _label  ADC  #53                ; V3 offset 53
208d 60               RTS

              ; V4 Address = (h_objects) + 112 + 14 * object

208e 20 6e 20 _V4     JSR  A0_x_8
2091 38               SEC
2092 e5 41            SBC  A0L
2094 48               PHA                     ; low  of  (object *  7)
2095 a5 42            LDA  A0H
2097 86 42            STX  A0H
2099 e5 42            SBC  A0H
209b 85 42            STA  A0H                ; high of  (object *  7)
209d 68               PLA
209e 0a               ASL  A
209f 26 42            ROL  A0H                ; (A/A0H) = object * 14
20a1 69 70            ADC  #112               ; V4 offset 112
20a3 60               RTS
20a4          EndMod [Object_Offset] Size = 40 [$28]

              ********************
              Module Get_Object_X1
              ********************

20a4 a5 47            LDA  X1L
20a6 a6 48            LDX  X1H

              **************
20a8          Get_Object_Reg
              **************

              ; Compute address of object

              ; Version > 3:
              ; -----------------------------------------
              ; Address = (h_objects) + 112 + 14 * object
              ; Input : (A/X) = input  object id
              ;         Y     = object item
              ; Output: (A/X) = output object id
              ;         (A0L) = address

20a8 20 7c 20         JSR  Object_Offset
20ab 90 03            BCC  _label
20ad e6 42            INC  A0H
20af 18               CLC
20b0 6d 0b 2f _label  ADC  h_objects_lo
20b3 85 41            STA  A0L
20b5 a5 42            LDA  A0H
20b7 6d 0a 2f         ADC  h_objects_hi
20ba 69 2f            ADC  #>Z_HEADER
20bc 85 42            STA  A0H
20be a2 00            LDX  #0                 ; object hi for V3
20c0 7f 35 04         BBR7 Version,_objlow
20c3 b1 41            LDA  (A0L),Y
20c5 aa               TAX                     ; object hi
20c6 c8               INY
20c7 b1 41    _objlow LDA  (A0L),Y            ; object lo
20c9 60               RTS
20ca          EndMod [Get_Object_X1] Size = 38 [$26]

              *********************
              Module First_Property
              *********************

              ; Find address of property table of object (X1)

              ; Input : (X1) = object ID
              ; Output: (A0) = pointer to property table after NAME
              ;          A   = ID of first property
              ;          Y   = 0

20ca a0 07            LDY  #7                 ; version = 3 offset to property pointer
20cc 7f 35 02         BBR7 Version,_fips_1
20cf a0 0c            LDY  #12                ; version > 3 offset to property pointer
20d1 20 a4 20 _fips_1 JSR  Get_Object_X1
20d4 ff 35 04         BBS7 Version,_fips_2
20d7 aa               TAX                     ; property pointer high
20d8 c8               INY
20d9 b1 41            LDA  (A0L),Y            ; property pointer low
20db 85 41    _fips_2 STA  A0L                ; property table low
20dd 8a               TXA                     ; property table high
20de 69 2f            ADC  #>Z_HEADER         ; C=0 from Get_Object
20e0 85 42            STA  A0H                ; (A0) = property table
20e2 a0 00            LDY  #0                 ; offset to NAME property
20e4 b1 41            LDA  (A0L),Y            ; size of name (words)
20e6 0a               ASL  A                  ; size of name (bytes)
20e7 38               SEC                     ; add size + 1
20e8 65 41            ADC  A0L
20ea 85 41            STA  A0L
20ec 90 02            BCC  FiPr_10
20ee e6 42            INC  A0H
20f0 b1 41    FiPr_10 LDA  (A0L),Y
20f2 25 2b            AND  Prop_Mask          ; A = property ID
20f4 60               RTS
20f5          EndMod [First_Property] Size = 43 [$2b]

              ********************
              Module Property_Size
              ********************

20f5 7f 35 12         BBR7 Version,_V3
20f8 b1 41            LDA  (A0L),Y
20fa 10 07            BPL  _one
20fc c8               INY
20fd b1 41            LDA  (A0L),Y            ; 2nd. size byte
20ff c8               INY
2100 25 2b            AND  Prop_Mask
2102 60               RTS

2103 c8       _one    INY                     ; Y points after size
2104 0a               ASL  A                  ; bit 7 = length info
2105 0a               ASL  A                  ; carry = length info
2106 2a               ROL  A                  ; bit 0 = length info
2107 29 01            AND  #1
2109 60               RTS

210a b1 41    _V3     LDA  (A0L),Y
210c c8               INY
210d 4a               LSR  A
210e 4a               LSR  A
210f 4a               LSR  A
2110 4a               LSR  A
2111 4a               LSR  A
2112 60               RTS
2113          EndMod [Property_Size] Size = 30 [$1e]

              *************
2113          Next_Property
              *************

              ; use size info and point to next property (V3-V5)

              ; Input : (A0) = pointer to current property
              ; Output: (A0) = pointer to next property
              ;            Y = 0

2113 20 f5 20         JSR  Property_Size
2116 18               CLC
2117 69 02            ADC  #2
2119 65 41            ADC  A0L
211b 85 41            STA  A0L
211d 90 02            BCC  NePr_20
211f e6 42            INC  A0H
2121 a0 00    NePr_20 LDY  #0
2123 b1 41            LDA  (A0L),Y
2125 25 2b            AND  Prop_Mask
2127 60               RTS

              ********************
              Module Find_Property
              ********************

              ; search for property X2L of object X1

              ; Input : (X1)  = object   ID
              ;         (X2L) = property ID

              ; Output: Z=0 if property was not found
              ;         Z=1 if property was found
              ;             A = 0
              ;             Y = 0
              ;             C = 1 if separate length byte

2128 20 ca 20         JSR  First_Property     ; -> (A0) and Y = 0
212b c5 49    _loop   CMP  X2L
212d f0 07            BEQ  _match
212f 90 0e            BCC  _return            ; -> not in table (Z=0)
2131 20 13 21         JSR  Next_Property
2134 80 f5            BRA  _loop
2136 18       _match  CLC
2137 7f 35 03         BBR7 Version,_ok
213a b1 41            LDA  (A0L),Y            ; prepare pointer advancement
213c 0a               ASL  A                  ; C=1 for 2 byte header
213d a9 00    _ok     LDA  #0                 ; set zero flag
213f 60       _return RTS                     ; Z=1 success, Z=0 not found
2140          EndMod [Find_Property] Size = 24 [$18]

              *************
2140          Get_Attr_Addr
              *************

              ; Input
              ; -----
              ; X1L = object #
              ; X2L = flag   #
              ;
              ; Output
              ; ------
              ; (A0L),Y = Address of attribute
              ; (A)     = Attribute mask

2140 20 a4 20         JSR  Get_Object_X1
2143 a5 49            LDA  X2L                ; flag #
2145 4a               LSR  A
2146 4a               LSR  A
2147 4a               LSR  A
2148 a8               TAY                     ; offset = flag / 8
2149 a5 49            LDA  X2L
214b 29 07            AND  #7                 ; flag mod 8
214d aa               TAX
214e a9 80            LDA  #$80               ; flag 0
2150 d0 01            BNE  gaa_02
2152 4a       gaa_01  LSR  A
2153 ca       gaa_02  DEX
2154 10 fc            BPL  gaa_01
2156 60               RTS

              ****************
              Module Dump_Code
              ****************

2157 a0 01            LDY  #1
2159 b9 02 00 _loop   LDA  Z_Code,Y
215c 20 2a 2b         JSR  ASCII_Hex
215f 48               PHA
2160 8a               TXA
2161 20 69 29         JSR  CHROUT
2164 68               PLA
2165 20 69 29         JSR  CHROUT
2168 a9 20            LDA  #' '
216a 20 69 29         JSR  CHROUT
216d 88               DEY
216e 10 e9            BPL  _loop
2170 60               RTS
2171          EndMod [Dump_Code] Size = 26 [$1a]


              **************
2171          INTERNAL_ERROR
              **************

2171 20 7d 2b         JSR  ASCII_TS
2174 8e 40 2e         STX  INTERR+7
2177 8d 41 2e         STA  INTERR+8
217a 20 05 22         JSR  z_new_line
217d 20 57 21         JSR  Dump_Code
                      Print(INTERR)
2180 a9 39            LDA  #<INTERR
2182 a0 2e            LDY  #>INTERR
2184 a2 0a            LDX  #?INTERR
2186 20 e9 2a         JSR  PrintText

2189 a2 02            LDX  #2
218b b5 00    INER_10 LDA  0,X
218d 9d 00 40         STA  $4000,X
2190 e8               INX
2191 d0 f8            BNE  INER_10
2193 4c 25 14         JMP  z_quit

              ***************
2196          Print_To_Status
              ***************

2196 99 3c 03         STA  Z_STATUS,Y
2199 c0 4f            CPY  #COLS-1
219b b0 02            BCS  PTS_01
219d e6 2f            INC  Status_Col
219f 60       PTS_01  RTS

              ****************
              Module Print_Mem
              ****************

21a0 a0 02            LDY  #2
21a2 91 5e            STA  (Z_Mem_Ptr),Y
21a4 e3 5e            INW  Z_Mem_Ptr
21a6 60               RTS
21a7          EndMod [Print_Mem] Size = 7 [$7]

              ****************
21a7          Print_Unbuffered
              ****************

21a7 4c 69 29         JMP  CHROUT

              **********************
              Module Print_Formatted
              **********************

21aa 7f 35 11         BBR7 Version,PrFo_10
21ad 2c aa 2c         BIT  Z_Mem_Flag
21b0 30 ee            BMI  Print_Mem          ; print to stream # 3
21b2 ac df 25         LDY  Z_Buffer_Mode
21b5 f0 f0            BEQ  Print_Unbuffered
21b7 ac e0 25         LDY  Z_Active_Window
21ba d0 eb            BNE  Print_Unbuffered
21bc f0 04            BEQ  PrFo_20
21be a4 2f    PrFo_10 LDY  Status_Col         ; Version 3
21c0 10 d4            BPL  Print_To_Status
21c2 c9 0d    PrFo_20 CMP  #CR
21c4 f0 3f            BEQ  z_new_line
21c6 c9 20            CMP  #' '               ; not printable ?
21c8 90 10            BCC  PrFo_25
21ca a4 18            LDY  Charbuf_Ptr
21cc 99 00 02         STA  Charbuf,Y
21cf aa               TAX                     ; X = char
21d0 18               CLC
21d1 98               TYA
21d2 65 5a            ADC  Cursor_Col
21d4 c9 50            CMP  #COLS
21d6 b0 03            BCS  PrFo_30            ; -> buffer full: print row


21d8 e6 18            INC  Charbuf_Ptr
21da 60       PrFo_25 RTS

21db a9 20    PrFo_30 LDA  #' '               ; scan backwards for blank
21dd 84 19            STY  Charbuf_End
21df d9 00 02 PrFo_35 CMP  Charbuf,Y
21e2 f0 05            BEQ  PrFo_40
21e4 88               DEY
21e5 d0 f8            BNE  PrFo_35
21e7 a4 19            LDY  Charbuf_End        ; no blanks found
21e9 84 18    PrFo_40 STY  Charbuf_Ptr        ; print line before Charbuf_Ptr
21eb 98               TYA
21ec 48               PHA                     ; save line break col
21ed 20 05 22         JSR  z_new_line         ; print line
21f0 68               PLA
21f1 aa               TAX                     ; line break col
21f2 a0 00            LDY  #0
21f4 f0 07            BEQ  PrFo_50

21f6 bd 00 02 PrFo_45 LDA  Charbuf,X          ; scroll rest of buffer
21f9 99 00 02         STA  Charbuf,Y
21fc c8               INY
21fd e4 19    PrFo_50 CPX  Charbuf_End
21ff e8               INX
2200 90 f4            BCC  PrFo_45
2202 84 18            STY  Charbuf_Ptr
2204 60               RTS
2205          EndMod [Print_Formatted] Size = 91 [$5b]

              *******************************
              Module z_new_line ; opcode # bb
              *******************************

2205 e6 21            INC  MORE_Counter
2207 a6 21            LDX  MORE_Counter
2209 e0 19            CPX  #ROWS
220b 90 42            BCC  Terminate_Buffer
220d a5 34            LDA  Upper_Size
220f 85 21            STA  MORE_Counter
2211 20 76 23         JSR  Empty_Keyboard_Queue
2214 20 5a 2b         JSR  Save_Cursor
2217 a2 18            LDX  #ROWS-1
2219 a0 00            LDY  #0
221b 20 fa 25         JSR  Set_Row_Col
221e a5 1b            LDA  Colour
2220 48               PHA
2221 a5 14            LDA  Attribute
2223 48               PHA
2224 20 cb 1a         JSR  Reverse_On
2227 a9 07            LDA  #YELLOW
2229 85 1b            STA  Colour
                      Print(MORE)
222b a9 22            LDA  #<MORE
222d a0 2d            LDY  #>MORE
222f a2 06            LDX  #?MORE
2231 20 e9 2a         JSR  PrintText

2234 68               PLA
2235 85 14            STA  Attribute
2237 68               PLA
2238 85 1b            STA  Colour
223a 20 e4 ff _wait   JSR  GETIN
223d aa               TAX
223e f0 fa            BEQ  _wait
2240 20 62 2b         JSR  Restore_Cursor
                      Print(BLANKS)
2243 a9 05            LDA  #<BLANKS
2245 a0 2e            LDY  #>BLANKS
2247 a2 0c            LDX  #?BLANKS
2249 20 e9 2a         JSR  PrintText

224c 20 62 2b         JSR  Restore_Cursor
224f          EndMod [z_new_line] Size = 74 [$4a]

              ****************
224f          Terminate_Buffer
              ****************

224f a6 18            LDX  Charbuf_Ptr
2251 a9 0d            LDA  #CR
2253 9d 00 02         STA  Charbuf,X
2256 e6 18            INC  Charbuf_Ptr

              ************
2258          Print_Buffer
              ************

2258 a5 18            LDA  Charbuf_Ptr
225a f0 11            BEQ  PrBu_Ret           ; -> nothing to print
225c a2 00            LDX  #0
225e bd 00 02 PrBu_10 LDA  Charbuf,X          ; flush buffer
2261 20 69 29         JSR  CHROUT
2264 e8               INX
2265 e4 18            CPX  Charbuf_Ptr
2267 90 f5            BCC  PrBu_10
2269 a2 00            LDX  #0
226b 86 18            STX  Charbuf_Ptr
226d 60       PrBu_Ret  RTS

              *********************
              Module Format_Integer
              *********************

226e a4 45            LDY  X0L
2270 ab 46 00         LDZ  X0H

              *********
2273          Format_YZ
              *********

2273 a2 00            LDX  #0
2275 a9 30    _loop   LDA  #'0'
2277 95 22            STA  NUMBER,X
2279 38       _sub    SEC
227a 98               TYA
227b fd a8 22         SBC  FormLo,X
227e 48               PHA
227f 6b               TZA
2280 fd ac 22         SBC  FormHi,X
2283 90 06            BCC  _next
2285 f6 22            INC  NUMBER,X
2287 4b               TAZ
2288 7a               PLY
2289 80 ee            BRA  _sub
228b 68       _next   PLA
228c e8               INX
228d e0 04            CPX  #4
228f 90 e4            BCC  _loop
2291 98               TYA
2292 09 30            ORA  #'0'
2294 85 26            STA  NUMBER+4
2296 a0 20            LDY  #' '
2298 a9 30            LDA  #'0'
229a a2 00            LDX  #0
229c d5 22    _blanks CMP  NUMBER,X
229e d0 07            BNE  _return
22a0 94 22            STY  NUMBER,X
22a2 e8               INX
22a3 e0 04            CPX  #4
22a5 90 f5            BCC  _blanks
22a7 60       _return RTS

22a8 10       FormLo  .BYTE <10000
22a9 e8               .BYTE  <1000
22aa 64               .BYTE   <100
22ab 0a               .BYTE    <10
22ac 27       FormHi  .BYTE >10000
22ad 03               .BYTE  >1000
22ae 00               .BYTE   >100
22af 00               .BYTE    >10
22b0          EndMod [Format_Integer] Size = 66 [$42]

              ********************
              Module Status_Number
              ********************

              ; This routine is used in version 3 stories
              ; Insert number (score, moves, time) into status line
              ; Imput : (A) = global variable
              ;         (Y) = status line column

22b0 5a               PHY
22b1 20 fc 12         JSR  Get_Global_Var
22b4 20 6e 22         JSR  Format_Integer
22b7 7a               PLY
22b8 a2 00            LDX  #0
22ba b5 22    StNu_10 LDA  NUMBER,X
22bc c9 20            CMP  #' '
22be f0 04            BEQ  StNu_20
22c0 99 11 2e         STA  SCORE,Y
22c3 c8               INY
22c4 e8       StNu_20 INX
22c5 e0 05            CPX  #5
22c7 90 f1            BCC  StNu_10
22c9 60               RTS
22ca          EndMod [Status_Number] Size = 26 [$1a]

              *****************
              Module Print_Time
              *****************

22ca a9 11            LDA  #$11               ; hours var
22cc 20 fc 12         JSR  Get_Global_Var
22cf 20 6e 22         JSR  Format_Integer
22d2 a0 06            LDY  #STIME_COL
22d4 a5 25            LDA  NUMBER+3
22d6 99 2d 2e         STA  STIME,Y
22d9 a5 26            LDA  NUMBER+4
22db 99 2e 2e         STA  STIME+1,Y

22de a9 12            LDA  #$12               ; minutes var
22e0 20 fc 12         JSR  Get_Global_Var
22e3 20 6e 22         JSR  Format_Integer
22e6 a0 06            LDY  #STIME_COL
22e8 a5 25            LDA  NUMBER+3
22ea 09 30            ORA  #'0'               ; blank -> '0'
22ec 99 30 2e         STA  STIME+3,Y
22ef a5 26            LDA  NUMBER+4
22f1 99 31 2e         STA  STIME+4,Y

22f4 a2 00            LDX  #0
22f6 bd 2d 2e _loop   LDA  STIME,X
22f9 9d 7f 03         STA  Z_STATUS+67,X
22fc e8               INX
22fd e0 0c            CPX  #12
22ff 90 f5            BCC  _loop
2301 60               RTS
2302          EndMod [Print_Time] Size = 56 [$38]

              ******************
              Module Print_Score
              ******************

2302 a9 20            LDA  #' '
2304 a0 0b            LDY  #SCORE_COL+4
2306 99 11 2e _clr_sc STA  SCORE,Y            ; clear score
2309 88               DEY
230a c0 07            CPY  #SCORE_COL
230c d0 f8            BNE  _clr_sc
230e a9 11            LDA  #$11               ; score var
2310 20 b0 22         JSR  Status_Number      ; print score
2313 a9 20            LDA  #' '
2315 a0 1a            LDY  #MOVES_COL+4
2317 99 11 2e _clr_mv STA  SCORE,Y            ; clear score
231a 88               DEY
231b c0 16            CPY  #MOVES_COL
231d d0 f8            BNE  _clr_mv
231f a9 12            LDA  #$12               ; moves var
2321 20 b0 22         JSR  Status_Number

2324 a2 00            LDX  #0
2326 bd 11 2e _loop   LDA  SCORE,X
2329 9d 70 03         STA  Z_STATUS+STAT_SCORE,X
232c e8               INX
232d e0 1c            CPX  #COLS-STAT_SCORE
232f 90 f5            BCC  _loop
2331 60               RTS
2332          EndMod [Print_Score] Size = 48 [$30]

              *******************
              Module Print_Status
              *******************

2332 20 53 2b         JSR  Select_Status_Window
2335 a9 07            LDA  #YELLOW
2337 85 1b            STA  Colour
2339 20 f7 28         JSR  Home_Screen
233c 20 cb 1a         JSR  Reverse_On
233f a9 3b            LDA  #<(Z_STATUS-1)
2341 a0 03            LDY  #>(Z_STATUS-1)
2343 a2 50            LDX  #COLS
2345 20 e9 2a         JSR  PrintText
2348 4c 44 2b         JMP  Select_Text_Window
234b          EndMod [Print_Status] Size = 25 [$19]

              ******************
              Module z_extension
              ******************
234b 68               PLA                     ; remove return address
234c 68               PLA
234d 20 b8 27         JSR  Next_Instruction   ; extendedcode
2350 85 02            STA  Z_Code
2352 20 b8 27         JSR  Next_Instruction   ; operand type
2355 20 ae 12         JSR  Load_4_Operands
2358 a5 02            LDA  Z_Code
235a 29 1f            AND  #$1f
235c c9 0b            CMP  #$0b
235e b0 08            BCS  z_error12
2360 0a               ASL  A
2361 aa               TAX
2362 23 6d 12         JSR  (opcodes_ext,X)
2365 4c 35 11         JMP  PC_LOOP
              z_error12 ERROR(12)
2368 a9 0c            LDA  #12
236a 4c 71 21         JMP  INTERNAL_ERROR

236d          EndMod [z_extension] Size = 34 [$22]


              ******************
              Module z_save_undo
              ******************

236d a9 ff            LDA  #-1
236f aa               TAX
2370 4c 31 13         JMP  Store_AX
2373          EndMod [z_save_undo] Size = 6 [$6]

              *********************
              Module z_restore_undo
              *********************

2373 4c 2d 13         JMP Store_Zero
2376          EndMod [z_restore_undo] Size = 3 [$3]

              ********************
2376          Empty_Keyboard_Queue
              ********************

2376 20 e4 ff         JSR  GETIN
2379 d0 fb            BNE  Empty_Keyboard_Queue
237b 60               RTS

              ***********
237c          Decode_Unit
              ***********
237c c9 30            CMP  #'0'
237e b0 03            BCS  DeUn_10
2380 8a               TXA                     ; one digit
2381 d0 06            BNE  DeUn_20
2383 e0 31    DeUn_10 CPX  #'1'
2385 d0 02            BNE  DeUn_20
2387 69 09            ADC  #9                 ; two digits 10 - 15
2389 29 0f    DeUn_20 AND  #15
238b 60               RTS


              ***********
238c          Unit_Dialog
              ***********

238c a2 ad            LDX  #<Unit_Buf
238e a0 2c            LDY  #>Unit_Buf
2390 20 e4 29         JSR  Got_Line
2393 ae ae 2c         LDX  Unit_Text          ; 10
2396 ad af 2c         LDA  Unit_Text+1        ;  1
2399 20 7c 23         JSR  Decode_Unit
239c 85 2e            STA  Save_Unit
239e 60               RTS

              ***************
239f          Wait_for_Return
              ***************

239f a9 c8            LDA  #<PRESSRET
23a1 a0 2c            LDY  #>PRESSRET
23a3 a2 1c            LDX  #[SAVEUNIT-PRESSRET]
23a5 20 e9 2a         JSR  PrintText
23a8 20 76 23         JSR  Empty_Keyboard_Queue
23ab 20 75 28 wfret_10  JSR Get_Character
23ae c9 0d            CMP  #CR
23b0 f0 05            BEQ  wfret_99
23b2 20 2c 1b         JSR  Error_Beep
23b5 80 f4            BRA  wfret_10
23b7 60       wfret_99  RTS

              ***********
23b8          File_Dialog
              ***********

23b8 a2 b1            LDX  #<File_Buf
23ba a0 2c            LDY  #>File_Buf
23bc 4c e4 29         JMP  Got_Line

              ****************
23bf          Read_Disk_Status
              ****************
23bf 8a               TXA
23c0 48               PHA
23c1 a5 ba            LDA  FA
23c3 20 b4 ff         JSR  TALK
23c6 a9 6f            LDA  #$6f
23c8 20 96 ff         JSR  TKSA
23cb a0 00            LDY  #0
23cd 84 90            STY  IO_STATUS
23cf 20 a5 ff RDS_10  JSR  ACPTR              ; read status
23d2 a6 90            LDX  IO_STATUS
23d4 d0 0f            BNE  RDS_30
23d6 99 3c 03         STA  DSTATUS,Y
23d9 c9 20            CMP  #' '
23db 90 05            BCC  RDS_20
23dd c8               INY
23de c0 28            CPY  #40
23e0 90 ed            BCC  RDS_10
23e2 20 ab ff RDS_20  JSR  UNTLK              ; close channel
23e5 a9 0d    RDS_30  LDA  #CR
23e7 99 3c 03         STA  DSTATUS,Y
23ea a9 00            LDA  #0
23ec 99 3d 03         STA  DSTATUS+1,Y
23ef 68               PLA
23f0 aa               TAX
23f1 ad 3c 03         LDA  DSTATUS
23f4 29 0f            AND  #15                ; return with 1st. value
23f6 60               RTS

              **********
23f7          z_ext_save
              **********
23f7 20 05 24         JSR  Save_Game
23fa a9 01            LDA  #1
23fc 4c 2f 13         JMP  Store_Byte
              ******
23ff          z_save
              ******

23ff 20 05 24         JSR  Save_Game
2402 4c 7c 13         JMP  Main_True

              ****************
              Module Save_Game
              ****************
                      Print(SAVEUNIT)
2405 a9 e4            LDA  #<SAVEUNIT
2407 a0 2c            LDY  #>SAVEUNIT
2409 a2 0d            LDX  #?SAVEUNIT
240b 20 e9 2a         JSR  PrintText

240e 20 8c 23         JSR  Unit_Dialog
                      Print(SAVEFILE)
2411 a9 f1            LDA  #<SAVEFILE
2413 a0 2c            LDY  #>SAVEFILE
2415 a2 0d            LDX  #?SAVEFILE
2417 20 e9 2a         JSR  PrintText

241a 20 b8 23         JSR  File_Dialog

241d ad 02 2f         LDA  Z_HEADER+2         ; save config
2420 8d 20 04         STA  Z_VAR+$20
2423 ad 03 2f         LDA  Z_HEADER+3
2426 8d 21 04         STA  Z_VAR+$21
2429 a2 03            LDX  #3
242b b5 3a    WG_05   LDA  z_stack_ptr,X      ; save stack pointer
242d 9d 22 04         STA  Z_VAR+$22,X        ; and  frame pointer
2430 ca               DEX
2431 10 f8            BPL  WG_05
2433 a2 02            LDX  #2
2435 b5 04    WG_10   LDA  QI0,X              ; save IP
2437 9d 26 04         STA  Z_VAR+$26,X
243a ca               DEX
243b 10 f8            BPL  WG_10
243d e8               INX                     ; X = 0
243e 86 90            STX  IO_STATUS          ; clear status
2440 a5 2e            LDA  Save_Unit
2442 85 ba            STA  FA
2444 20 b1 ff         JSR  LISTEN             ; open Pos,Device,3
2447 a9 f3            LDA  #$f3
2449 20 93 ff         JSR  SECOND
244c a0 00            LDY  #0
244e b9 b2 2c WG_20   LDA  File_Text,Y
2451 c9 20            CMP  #' '
2453 90 0c            BCC  WG_30
2455 c9 61            CMP  #'a'
2457 90 02            BCC  WG_25
2459 e9 20            SBC  #$20
245b 20 a8 ff WG_25   JSR  CIOUT
245e c8               INY
245f d0 ed            BNE  WG_20

2461 a9 2c    WG_30   LDA  #','
2463 20 a8 ff         JSR  CIOUT
2466 a9 57            LDA  #'W'
2468 20 a8 ff         JSR  CIOUT
246b 20 ae ff         JSR  UNLSN
246e a5 90            LDA  IO_STATUS
2470 d0 32            BNE  WG_Err

2472 a5 ba            LDA  FA
2474 20 b1 ff         JSR  LISTEN
2477 a9 63            LDA  #$63
2479 20 93 ff         JSR  SECOND
247c a9 04            LDA  #>Z_VAR            ; Save variables & stack
247e 85 0d            STA  RAMD+1
2480 a2 04            LDX  #>[Z_STACK_HI - Z_VAR]; # of blocks
2482 20 b6 24 WG_40   JSR  Write_Block
2485 a5 90            LDA  IO_STATUS
2487 d0 1b            BNE  WG_Err
2489 ca               DEX
248a d0 f6            BNE  WG_40
248c a9 2f            LDA  #>Z_HEADER
248e 85 0d            STA  RAMD+1
2490 ae 0e 2f         LDX  h_dynamic_size_hi
2493 e8               INX                     ; # of blocks
2494 20 b6 24 WG_50   JSR  Write_Block
2497 a5 90            LDA  IO_STATUS
2499 d0 09            BNE  WG_Err
249b ca               DEX
249c d0 f6            BNE  WG_50
249e 20 ae ff         JSR  UNLSN
24a1 4c e4 2b         JMP  Close_File

24a4 20 ae ff WG_Err  JSR  UNLSN
24a7 20 bf 23         JSR  Read_Disk_Status
                      Print(DSTATUS)
24aa a9 3c            LDA  #<DSTATUS
24ac a0 03            LDY  #>DSTATUS
24ae a2 00            LDX  #?DSTATUS
24b0 20 e9 2a         JSR  PrintText

24b3 4c e4 2b         JMP  Close_File
24b6          EndMod [Save_Game] Size = 177 [$b1]

              ***********
24b6          Write_Block
              ***********

24b6 a0 00            LDY  #0
24b8 84 45            STY  X0L
24ba 84 90            STY  IO_STATUS
24bc b1 0c    WrBl_10 LDA  (RAMD),Y
24be 20 a8 ff         JSR  CIOUT
24c1 c8               INY
24c2 d0 f8            BNE  WrBl_10
24c4 e6 0d            INC  RAMD+1
24c6 a9 2e            LDA  #'.'
24c8 4c 69 29         JMP  CHROUT

              *********
24cb          z_restore
              *********

24cb 20 d9 24         JSR  Restore_Game
24ce 4c 7c 13         JMP  Main_True

              *************
24d1          z_ext_restore
              *************

24d1 20 d9 24         JSR  Restore_Game
24d4 a9 02            LDA  #2
24d6 4c 2f 13         JMP  Store_Byte

              *******************
              Module Restore_Game
              *******************

                      Print(LOADUNIT)
24d9 a9 fe            LDA  #<LOADUNIT
24db a0 2c            LDY  #>LOADUNIT
24dd a2 12            LDX  #?LOADUNIT
24df 20 e9 2a         JSR  PrintText

24e2 20 8c 23         JSR  Unit_Dialog
                      Print(LOADFILE)
24e5 a9 10            LDA  #<LOADFILE
24e7 a0 2d            LDY  #>LOADFILE
24e9 a2 12            LDX  #?LOADFILE
24eb 20 e9 2a         JSR  PrintText

24ee 20 b8 23         JSR  File_Dialog

24f1 a2 1f            LDX  #$1f               ; Save local variables
24f3 bd 00 04 _saveloc  LDA Z_VAR,X           ; to stack bottom -
24f6 9d 00 02         STA  Charbuf,X          ; if restoring fails
24f9 ca               DEX                     ; we can retrieve them
24fa 10 f7            BPL  _saveloc
24fc a5 2e            LDA  Save_Unit
24fe 85 ba            STA  FA
2500 20 b1 ff         JSR  LISTEN             ; open Pos,Unit,3
2503 a9 f3            LDA  #$f3
2505 20 93 ff         JSR  SECOND
2508 a0 00            LDY  #0
250a b9 b2 2c _fn_loop  LDA File_Text,Y
250d c9 20            CMP  #' '
250f 90 0c            BCC  _fn_done
2511 c9 61            CMP  #'a'
2513 90 02            BCC  _no_conv
2515 e9 20            SBC  #$20               ; convert to lower case
2517 20 a8 ff _no_conv  JSR CIOUT
251a c8               INY
251b 10 ed            BPL  _fn_loop
251d 20 ae ff _fn_done  JSR UNLSN

              ; Check drive error channel

2520 a5 2e            LDA  Save_Unit
2522 85 ba            STA  FA
2524 20 b4 ff         JSR  TALK
2527 a9 63            LDA  #$63
2529 20 96 ff         JSR  TKSA
252c a9 04            LDA  #>Z_VAR
252e 85 0d            STA  RAMD+1
2530 20 91 25         JSR  Read_Block         ; Read Z_VAR
2533 ad 20 04         LDA  Z_VAR+$20
2536 cd 02 2f         CMP  Z_HEADER+2         ; correct version ?
2539 d0 08            BNE  _cancel            ; -> nope
253b ad 21 04         LDA  Z_VAR+$21
253e cd 03 2f         CMP  Z_HEADER+3
2541 f0 11            BEQ  _ver_ok            ; OK -> continue restoring
2543 a2 1f    _cancel LDX  #$1f               ; Restore local variables
2545 bd 00 02 _resloop  LDA Charbuf,X         ; and abort restoring
2548 9d 00 04         STA  Z_VAR,X
254b ca               DEX
254c 10 f7            BPL  _resloop
254e 20 fb 2a         JSR  Reset_Screen
2551 4c 70 13         JMP  Main_False

2554 ad 10 2f _ver_ok LDA  h_flags_hi         ; save flags
2557 48               PHA
2558 ad 11 2f         LDA  h_flags_lo
255b 48               PHA

255c a3 03            LDZ  #>[Z_STACK_HI - Z_STACK_LO] ; stack pages
255e 20 91 25 _st_loop  JSR Read_Block
2561 3b               DEZ
2562 d0 fa            BNE  _st_loop

2564 a9 2f            LDA  #>Z_HEADER
2566 85 0d            STA  RAMD+1
2568 ab 0e 2f         LDZ  h_dynamic_size_hi
256b 1b               INZ                     ; # of blocks
256c 20 91 25 _hd_loop  JSR Read_Block
256f 3b               DEZ
2570 d0 fa            BNE  _hd_loop

2572 68               PLA                     ; restore flags
2573 8d 11 2f         STA  h_flags_lo
2576 68               PLA
2577 8d 10 2f         STA  h_flags_hi

257a a2 03            LDX  #3
257c bd 22 04 _stack  LDA  Z_VAR+$22,X
257f 95 3a            STA  z_stack_ptr,X
2581 ca               DEX
2582 10 f8            BPL  _stack

2584 a2 02            LDX  #2
2586 bd 26 04 _PC     LDA  Z_VAR+$26,X
2589 95 04            STA  QI0,X
258b ca               DEX
258c 10 f8            BPL  _PC
258e 20 ab ff         JSR  UNTLK              ; fall through
2591          EndMod [Restore_Game] Size = 184 [$b8]


              *****************
              Module Read_Block
              *****************

2591 a0 00            LDY  #0
2593 84 90            STY  IO_STATUS
2595 20 a5 ff _loop   JSR  ACPTR
2598 91 0c            STA  (RAMD),Y
259a c8               INY
259b d0 f8            BNE  _loop
259d e6 0d            INC  RAMD+1
259f a9 2e            LDA  #'.'
25a1 4c 69 29         JMP  CHROUT
25a4          EndMod [Read_Block] Size = 19 [$13]


              ********
              * DATA *
              ********

25a4 00       Row_Lo  .BYTE <[SCREEN]
25a5 50               .BYTE <[SCREEN +  1 * COLS]
25a6 a0               .BYTE <[SCREEN +  2 * COLS]
25a7 f0               .BYTE <[SCREEN +  3 * COLS]
25a8 40               .BYTE <[SCREEN +  4 * COLS]
25a9 90               .BYTE <[SCREEN +  5 * COLS]
25aa e0               .BYTE <[SCREEN +  6 * COLS]
25ab 30               .BYTE <[SCREEN +  7 * COLS]
25ac 80               .BYTE <[SCREEN +  8 * COLS]
25ad d0               .BYTE <[SCREEN +  9 * COLS]
25ae 20               .BYTE <[SCREEN + 10 * COLS]
25af 70               .BYTE <[SCREEN + 11 * COLS]
25b0 c0               .BYTE <[SCREEN + 12 * COLS]
25b1 10               .BYTE <[SCREEN + 13 * COLS]
25b2 60               .BYTE <[SCREEN + 14 * COLS]
25b3 b0               .BYTE <[SCREEN + 15 * COLS]
25b4 00               .BYTE <[SCREEN + 16 * COLS]
25b5 50               .BYTE <[SCREEN + 17 * COLS]
25b6 a0               .BYTE <[SCREEN + 18 * COLS]
25b7 f0               .BYTE <[SCREEN + 19 * COLS]
25b8 40               .BYTE <[SCREEN + 20 * COLS]
25b9 90               .BYTE <[SCREEN + 21 * COLS]
25ba e0               .BYTE <[SCREEN + 22 * COLS]
25bb 30               .BYTE <[SCREEN + 23 * COLS]
25bc 80               .BYTE <[SCREEN + 24 * COLS]

25bd 08       Row_Hi  .BYTE >[SCREEN]
25be 08               .BYTE >[SCREEN +  1 * COLS]
25bf 08               .BYTE >[SCREEN +  2 * COLS]
25c0 08               .BYTE >[SCREEN +  3 * COLS]
25c1 09               .BYTE >[SCREEN +  4 * COLS]
25c2 09               .BYTE >[SCREEN +  5 * COLS]
25c3 09               .BYTE >[SCREEN +  6 * COLS]
25c4 0a               .BYTE >[SCREEN +  7 * COLS]
25c5 0a               .BYTE >[SCREEN +  8 * COLS]
25c6 0a               .BYTE >[SCREEN +  9 * COLS]
25c7 0b               .BYTE >[SCREEN + 10 * COLS]
25c8 0b               .BYTE >[SCREEN + 11 * COLS]
25c9 0b               .BYTE >[SCREEN + 12 * COLS]
25ca 0c               .BYTE >[SCREEN + 13 * COLS]
25cb 0c               .BYTE >[SCREEN + 14 * COLS]
25cc 0c               .BYTE >[SCREEN + 15 * COLS]
25cd 0d               .BYTE >[SCREEN + 16 * COLS]
25ce 0d               .BYTE >[SCREEN + 17 * COLS]
25cf 0d               .BYTE >[SCREEN + 18 * COLS]
25d0 0d               .BYTE >[SCREEN + 19 * COLS]
25d1 0e               .BYTE >[SCREEN + 20 * COLS]
25d2 0e               .BYTE >[SCREEN + 21 * COLS]
25d3 0e               .BYTE >[SCREEN + 22 * COLS]
25d4 0f               .BYTE >[SCREEN + 23 * COLS]
25d5 0f               .BYTE >[SCREEN + 24 * COLS]

25d6 00       L_Encode_A  .BYTE 0             ;
25d7 00       L_Encode_Y  .BYTE 0             ;

              ; data for separators / delimiters in parsing

25d8 21 3f 2c Sep_Std_List    .BYTE "!?,.\r " ; built in standard
25de 00       Z_Arg_Count     .BYTE 0         ; argument count
25df 01       Z_Buffer_Mode   .BYTE 1         ; output buffering on or off
25e0 00       Z_Active_Window .BYTE 0
25e1 00 00    Z_Active_Font   .BYTE 0,0

              ******************************
              * Cursor, Windows and Screen *
              ******************************

              ******************
25e3          Set_Screen_Pointer
              ******************

25e3 a6 5b            LDX  Cursor_Row

              ********************
25e5          Set_Screen_Pointer_X
              ********************

25e5 bd a4 25         LDA  Row_Lo,X
25e8 85 62            STA  Scr_Adr
25ea 85 64            STA  Col_Adr
25ec bd bd 25         LDA  Row_Hi,X
25ef 85 63            STA  Scr_Adr+1
25f1 29 07            AND  #7
25f3 85 65            STA  Col_Adr+1
25f5 60               RTS


              ***********
25f6          Window_Home
              ***********

25f6 a6 34            LDX  Upper_Size
25f8 a0 00            LDY  #0

              ***********
25fa          Set_Row_Col
              ***********

              ; Input : X = screen row    (0 .. 24)
              ;         Y = screen column (0 .. 79)

25fa e0 19            CPX  #ROWS
25fc 90 02            BCC  SRC_10
25fe a2 18            LDX  #ROWS-1
2600 c0 50    SRC_10  CPY  #COLS
2602 90 02            BCC  SRC_20
2604 a0 4f            LDY  #COLS-1

2606 86 5b    SRC_20  STX  Cursor_Row
2608 84 5a            STY  Cursor_Col
260a 20 e3 25         JSR  Set_Screen_Pointer

              ***********
260d          Get_Row_Col
              ***********

              ; Output: X = screen row    (0 .. 24)
              ;         Y = screen column (0 .. 79)

260d a6 5b            LDX  Cursor_Row
260f a4 5a            LDY  Cursor_Col
2611 60               RTS

              *********
2612          Info_Size
              *********
2612 5a               PHY
2613 20 6e 22         JSR  Format_Integer
2616 7a               PLY
2617 a2 01            LDX  #1
2619 b5 22    InSi_10 LDA  NUMBER,X
261b 99 99 2d         STA  InfoPro+21,Y
261e c8               INY
261f e8               INX
2620 e0 05            CPX  #5
2622 90 f5            BCC  InSi_10
2624 60               RTS

              *******************
              Module Screen_Setup
              *******************

2625 a9 0f            LDA  #$0F               ; colour RAM: $FF80000
2627 85 67            STA  Col_Adr+3
2629 a9 f8            LDA  #$F8
262b 85 66            STA  Col_Adr+2
262d 60               RTS
262e          EndMod [Screen_Setup] Size = 9 [$9]

              ******************
              Module Story_Pages
              ******************

              ; Leave story size in X0L/X0H for printing

262e a9 00            LDA  #0
2630 85 46            STA  X0H
2632 ad 1a 2f         LDA  h_file_size_hi     ; size in words high
2635 85 45            STA  X0L
2637 ad 1b 2f         LDA  h_file_size_lo     ; size in words low
263a 0a               ASL  A
263b eb 45 00         ROW  X0L                ; size * 2 (version 3)
263e 7f 35 04         BBR7 Version,_round
2641 0a               ASL  A
2642 eb 45 00         ROW  X0L                ; size * 4 (version 4 and 5)
2645 aa       _round  TAX
2646 f0 02            BEQ  _return            ; at page boundary
2648 e3 45            INW  X0L                ; add 1 to round up
264a 60       _return RTS
264b          EndMod [Story_Pages] Size = 29 [$1d]

              ****************
              Module Modify_Op
              ****************
264b a9 bf            LDA  #<z_not
264d 8d 06 12         STA  ZV8F
2650 a9 15            LDA  #>z_not
2652 8d 07 12         STA  ZV8F+1
2655 a9 04            LDA  #<z_pop
2657 8d 1a 12         STA  ZVB9
265a a9 14            LDA  #>z_pop
265c 8d 1b 12         STA  ZVB9+1
265f 60               RTS
2660          EndMod [Modify_Op] Size = 21 [$15]

              **********************
              Module Version_4_Setup
              **********************
2660 20 4b 26         JSR  Modify_Op
2663 60               RTS
2664          EndMod [Version_4_Setup] Size = 4 [$4]

              **********************
              Module Version_5_Setup
              **********************
2664 a9 09            LDA  #9
2666 85 39            STA  Word_Length
2668 a9 06            LDA  #6
266a 85 36            STA  Vocab_Length
266c a9 3f            LDA  #$3f
266e 85 2b            STA  Prop_Mask
2670 a9 18            LDA  #ROWS-1
2672 85 37            STA Win_Bot
2674 60               RTS
2675          EndMod [Version_5_Setup] Size = 17 [$11]

              ****************
              Module z_restart
              ****************

2675 d8               CLD
2676 a2 fb            LDX  #$fb               ; default stack initialisation
2678 9a               TXS
2679 a9 36            LDA  #$36
267b 85 01            STA  R6510
267d a9 00            LDA  #0                 ; clear ZP variables
267f a2 02            LDX  #Z_Code            ; start of interpreter variables
2681 95 00    _clear  STA  0,X
2683 e8               INX
2684 e0 60            CPX  #ZP_CLEAR
2686 90 f9            BCC  _clear
2688 ad 4e 2e         LDA  FG_Color
268b 85 1b            STA  Colour
268d a9 01            LDA  #1
268f 85 34            STA  Upper_Size         ; status line for version 3
2691 a9 05            LDA  #>Z_STACK_LO
2693 85 3b            STA  z_stack_ptr+1
2695 85 3d            STA  z_frame_ptr+1
2697 c6 2f            DEC  Status_Col         ; -1
2699 20 64 26         JSR  Version_5_Setup    ; default settings
269c 20 06 2b         JSR  Open_Story         ; open  8,8,8,"z*"
269f a9 2f            LDA  #>Z_HEADER
26a1 85 0d            STA  RAMD+1
26a3 20 88 2b         JSR  Load_Page          ; load first block to Z_HEADER

              ; version dependant initialisation

26a6 ad 00 2f         LDA  h_version          ; allow 3 >= version <= 5
26a9 c9 04            CMP  #4
26ab 90 02            BCC  _V3
26ad 09 80            ORA  #$80               ; version > 3
26af 85 35    _V3     STA  Version
26b1 c9 85            CMP  #$85
26b3 b0 2d            BCS  _config            ; version 5 = default
26b5 c9 84            CMP  #$84
26b7 d0 05            BNE  _check3
26b9 20 60 26         JSR  Version_4_Setup
26bc 80 24            BRA  _config
26be c9 03    _check3 CMP  #3
26c0 f0 0c            BEQ  _set3
                      Print(NOSTORY)
26c2 a9 42            LDA  #<NOSTORY
26c4 a0 2d            LDY  #>NOSTORY
26c6 a2 0a            LDX  #?NOSTORY
26c8 20 e9 2a         JSR  PrintText

26cb 4c 28 14         JMP  quit_20

              ; Version 3 initialisation

26ce a9 06    _set3   LDA  #6
26d0 85 39            STA  Word_Length
26d2 a9 04            LDA  #4
26d4 85 36            STA  Vocab_Length
26d6 a9 1f            LDA  #$1f
26d8 85 2b            STA  Prop_Mask
26da 20 4b 26         JSR  Modify_Op
26dd a9 20            LDA  #' '
26df 8d 3b 03         STA  Z_STATUS-1

26e2 a2 a1    _config LDX  #>[$D000 - Z_HEADER]
26e4 86 2c            STX  Resident_Pages     ; reserved
26e6 a2 50            LDX  #COLS
26e8 8e 21 2f         STX  h_screen_cols
26eb 8e 23 2f         STX  h_screen_width_lo
26ee a2 19            LDX  #ROWS
26f0 8e 20 2f         STX  h_screen_rows
26f3 8e 25 2f         STX  h_screen_height_lo
26f6 a9 00            LDA  #0
26f8 8d 22 2f         STA  h_screen_width_hi
26fb 8d 24 2f         STA  h_screen_height_hi

26fe ad 01 2f         LDA  h_config
2701 ff 35 04         BBS7 Version,_V4_Flags
2704 09 30            ORA  #%0011 0000
              ;               0--- ---- 7:unused
              ;                0-- ---- 6:prop font
              ;                 1- ---- 5:split screen
              ;                  1 ---- 4:status available
              ;                    0--- 3:unused
              ;                     0-- 2:file split(1)
              ;                      0- 1:score(0) or time(1)
              ;                       0 0:unused
2706 80 02            BRA  _setconf
2708 09 99    _V4_Flags ORA #%1001 1001
              ;               1--- ---- 7:timed input
              ;                0-- ---- 6:unused
              ;                 0- ---- 5:sound
              ;                  1 ---- 4:fixed  font
              ;                    0--- 3:italic font
              ;                     0-- 2:bold   font
              ;                      0- 1:pictures
              ;                       1 0:colors
270a 8d 01 2f _setconf  STA h_config
270d a9 0c            LDA  #%0000 1100
270f 0d 11 2f         ORA  h_flags_lo
2712 8d 11 2f         STA  h_flags_lo
2715 a9 01            LDA  #1
2717 8d 26 2f         STA  h_font_width
271a 8d 27 2f         STA  h_font_height
271d a9 07            LDA  #7                 ; 6:PC 7:C128 8:C64
271f 8d 1e 2f         STA  h_interpreter_number
2722 a9 47            LDA  #'G'
2724 8d 1f 2f         STA  h_interpreter_version

              ; -------- compute story location and size -----

2727 20 2e 26         JSR  Story_Pages
272a a0 60            LDY  #InfoSto-InfoPro
272c 20 12 26         JSR  Info_Size
272f 20 03 29         JSR  Clear_Screen
                      Print(BITSHIFTER)
2732 a9 6b            LDA  #<BITSHIFTER
2734 a0 2d            LDY  #>BITSHIFTER
2736 a2 18            LDX  #?BITSHIFTER
2738 20 e9 2a         JSR  PrintText

273b 20 44 2b         JSR  Select_Text_Window
273e a9 83            LDA  #<InfoClr
2740 a0 2d            LDY  #>InfoClr
2742 a2 82            LDX  #[InfoEnd - InfoClr]
2744 20 e9 2a         JSR  PrintText

2747 20 88 2b _res    JSR Load_Page           ; Load resident area
274a a5 90            LDA  IO_STATUS
274c d0 14            BNE  _story             ; EOF
274e a5 15            LDA  Block_Lo
2750 29 0f            AND  #15
2752 d0 05            BNE  _dot
2754 a9 2e            LDA  #'.'
2756 20 69 29         JSR  CHROUT
2759 a5 15    _dot    LDA  Block_Lo
275b c5 2c            CMP  Resident_Pages
275d 90 e8            BCC  _res

275f 20 05 11         JSR  Set_Attic_RAM
2762 20 a0 2b _story  JSR  Load_Story
2765 20 9f 23         JSR  Wait_for_Return
2768 20 b7 10         JSR  Set_Mode_80
276b 20 25 26         JSR  Screen_Setup
276e ad 06 2f         LDA  h_start_pc_hi      ; Initialize pc
2771 85 05            STA  QI1
2773 ad 07 2f         LDA  h_start_pc_lo
2776 85 04            STA  QI0
2778 20 fb 2a         JSR  Reset_Screen
277b 4c 35 11         JMP  PC_LOOP
277e          EndMod [z_restart] Size = 265 [$109]

              *****************
              Module Next_Datum
              *****************

              ; Input
              ; =====
              ; QD0 = Block pointer
              ; QD1 = Block # lo
              ; QD2 = Block # hi

              ; Output
              ; ======
              ; (A) = Byte from (Block),QD0
              ; 24 bit Pointer QD incremented

277e da               PHX
277f ab 09 00         LDZ  QD0                ; page index
2782 a5 0a            LDA  QD1                ; page low
2784 a6 0b            LDX  QD2                ; page high
2786 d0 0e            BNE  _banked            ; > 64 K
2788 86 0e            STX  RAMD+2             ; bank = 0
278a 86 0f            STX  RAMD+3             ; segment = 0
278c c5 2c            CMP  Resident_Pages
278e b0 06            BCS  _banked            ; -> not resident
2790 69 2f            ADC  #>Z_HEADER
2792 85 0d            STA  RAMD+1
2794 80 15            BRA  _get

              ; load if address is beyond resident part
              ; address = (QD1/2) - Resident + bank

2796 85 0d    _banked STA  RAMD+1             ; page low
2798 a5 61            LDA  Segment
279a 85 0f            STA  RAMD+3             ; segment
279c bd a2 2c         LDA  Bank_Order,X
279f 85 0e            STA  RAMD+2
27a1 c9 01            CMP  #1
27a3 d0 06            BNE  _get
27a5 a5 0d            LDA  RAMD+1
27a7 e9 08            SBC  #8                 ; don't use $1F800 -> $1FFFF
27a9 85 0d            STA  RAMD+1
27ab ea b2 0c _get    LDA  [RAMD],Z
27ae e6 09            INC  QD0
27b0 d0 02            BNE  _exit
27b2 e3 0a            INW  QD1
27b4 fa       _exit   PLX
27b5 c9 00            CMP  #0                 ; set flags
27b7 60               RTS

              ***********************
              Module Next_Instruction
              ***********************

              ; Input
              ; =====
              ; QI0 = pointer inside page
              ; QI1 = page # low
              ; QI2 = page # high

              ; Output
              ; ======
              ; (A) = Byte from 24 bit address (QI)
              ; 24 bit Pointer QI incremented

27b8 da               PHX
27b9 db               PHZ
27ba ab 04 00         LDZ  QI0                ; page index
27bd a5 05            LDA  QI1                ; page low
27bf a6 06            LDX  QI2                ; page high
27c1 d0 0e            BNE  _banked            ; > 64 K
27c3 86 0e            STX  RAMD+2             ; bank    = 0
27c5 86 0f            STX  RAMD+3             ; segment = 0
27c7 c5 2c            CMP  Resident_Pages
27c9 b0 06            BCS  _banked            ; -> not resident
27cb 69 2f            ADC  #>Z_HEADER
27cd 85 0d            STA  RAMD+1
27cf 80 15            BRA  _get

              ; load if address is beyond resident part
              ; address = (QI1/2) - Resident + bank

27d1 85 0d    _banked STA  RAMD+1             ; page low
27d3 a5 61            LDA  Segment
27d5 85 0f            STA  RAMD+3             ; segment
27d7 bd a2 2c         LDA  Bank_Order,X
27da 85 0e            STA  RAMD+2
27dc c9 01            CMP  #1
27de d0 06            BNE  _get
27e0 a5 0d            LDA  RAMD+1
27e2 e9 08            SBC  #8
27e4 85 0d            STA  RAMD+1
27e6 ea b2 0c _get    LDA  [RAMD],Z
27e9 e6 04            INC  QI0
27eb d0 02            BNE  _exit
27ed e3 05            INW  QI1
27ef fb       _exit   PLZ
27f0 fa               PLX
27f1 c9 00            CMP  #0                 ; set flags
27f3 60               RTS

              *************
27f4          z_show_status
              *************

              ; save cursor coordinates, print to statusline

27f4 20 5a 2b         JSR  Save_Cursor

              ; push QD2, QD1, QD0, QDH, QDL

27f7 a2 04            LDX  #4
27f9 b5 07    zss_10  LDA  QDL,X
27fb 48               PHA
27fc ca               DEX
27fd 10 fa            BPL  zss_10

27ff e8               INX                     ; X = 0
2800 86 2f            STX  Status_Col         ; switch decoder to status line
2802 a9 10            LDA  #$10               ; get location
2804 20 fc 12         JSR  Get_Global_Var
2807 a5 45            LDA  X0L
2809 a6 46            LDX  X0H
280b 20 3f 15         JSR  z_print_obj_A
280e a9 20            LDA  #' '               ; fill rest of line with blanks
2810 a6 2f            LDX  Status_Col
2812 9d 3c 03 zss_20  STA  Z_STATUS,X         ; erase rest of line
2815 e8               INX
2816 e0 50            CPX  #COLS
2818 90 f8            BCC  zss_20

281a a2 ff            LDX  #$ff
281c 86 2f            STX  Status_Col         ; reset decoder
281e ad 01 2f         LDA  h_config
2821 29 02            AND  #2                 ; Score_Time_Flag
2823 d0 06            BNE  zss_30
2825 20 02 23         JSR  Print_Score
2828 4c 2e 28         JMP  zss_40
282b 20 ca 22 zss_30  JSR  Print_Time
282e 20 32 23 zss_40  JSR  Print_Status

              ; pull QDL, QDH, QD0, QD1, QD2 after recursive call

2831 a2 00            LDX  #0
2833 68       zss_90  PLA
2834 95 07            STA  QDL,X
2836 e8               INX
2837 e0 05            CPX  #5
2839 90 f8            BCC  zss_90

283b 4c 62 2b         JMP  Restore_Cursor

              ****************
              Module Cursor_On
              ****************
283e 48               PHA
283f db               PHZ
2840 ab 5a 00         LDZ  Cursor_Col
2843 ea b2 64         LDA  [Col_Adr],Z
2846 09 80            ORA  #UNDERLINE
2848 ea 92 64         STA  [Col_Adr],Z
284b fb               PLZ
284c 68               PLA
284d 60               RTS
284e          EndMod [Cursor_On] Size = 16 [$10]

              *****************
              Module Cursor_Off
              *****************
284e 08               PHP
284f 48               PHA
2850 db               PHZ
2851 ab 5a 00         LDZ  Cursor_Col
2854 ea b2 64         LDA  [Col_Adr],Z
2857 29 7f            AND  #$7f
2859 ea 92 64         STA  [Col_Adr],Z
285c fb               PLZ
285d 68               PLA
285e 28               PLP
285f 60               RTS
2860          EndMod [Cursor_Off] Size = 18 [$12]

              ************
2860          Special_Keys
              ************

2860 91               .BYTE CURSOR_UP         ; $81
2861 11               .BYTE CURSOR_DOWN       ; $82
2862 9d               .BYTE CURSOR_LEFT       ; $83
2863 1d               .BYTE CURSOR_RIGHT      ; $84

              *********************
              Module Translate_Keys
              *********************

2864 a0 03            LDY  #3
2866 d9 60 28 CSK_10  CMP  Special_Keys,Y
2869 f0 05            BEQ  CSK_20
286b 88               DEY
286c 10 f8            BPL  CSK_10
286e 18               CLC                     ; unchanged
286f 60               RTS
2870 98       CSK_20  TYA                     ; C=1
2871 69 80            ADC  #$80               ; translate
2873 38               SEC                     ; translated
2874 60               RTS
2875          EndMod [Translate_Keys] Size = 17 [$11]

              ********************
              Module Get_Character
              ********************

              ; get a character from keyboard
              ; allow all ASCII characters $20 - $7e
              ; allow control codes CR, INS,DEL and cursor keys
              ; return 0 for timeout (Timeout != 0)

2875 5a               PHY                     ; save Y
2876 20 e4 ff _loop   JSR  GETIN
2879 d0 14            BNE  _got               ; read a key
287b a5 30            LDA  Timeout
287d 05 31            ORA  Timeout+1
287f f0 f5            BEQ  _loop
2881 a5 30            LDA  Timeout
2883 c5 a0            CMP  Jiffy
2885 a5 31            LDA  Timeout+1
2887 e5 a1            SBC  Jiffy+1
2889 b0 eb            BCS  _loop
288b a9 00            LDA  #0                 ; timeout
288d 80 32            BRA  _exit

288f c9 0d    _got    CMP  #CR
2891 f0 2e            BEQ  _exit              ; allow CR
2893 c9 14            CMP  #DEL
2895 f0 2a            BEQ  _exit              ; allow DEL
2897 c9 94            CMP  #INS
2899 f0 26            BEQ  _exit              ; allow INS
289b 20 64 28         JSR  Translate_Keys
289e b0 21            BCS  _exit
28a0 c9 db            CMP  #'Z'+$81           ; CBM 'Z'+1
28a2 b0 18            BCS  _error             ; -> not ASCII
28a4 c9 c1            CMP  #'A'+$80           ; CBM 'A'
28a6 90 04            BCC  _lower
28a8 29 7f            AND  #$7f               ; to ASCII
28aa 80 15            BRA  _exit

28ac c9 5b    _lower  CMP  #'Z'+1             ; CBM 'z'+1
28ae b0 0c            BCS  _error             ; -> not ASCII
28b0 c9 41            CMP  #'A'               ; CBM 'a'
28b2 90 04            BCC  _ctrl
28b4 69 1f            ADC  #$1f               ; to ASCII
28b6 80 09            BRA  _exit

28b8 c9 20    _ctrl   CMP  #' '
28ba b0 05            BCS  _exit

28bc 20 2c 1b _error  JSR  Error_Beep         ; unacceptable
28bf 80 b5            BRA  _loop

28c1 7a       _exit   PLY                     ; restore Y
28c2 60               RTS
28c3          EndMod [Get_Character] Size = 78 [$4e]

              *************************
              Module Scroll_Main_Window
              *************************

28c3 a9 f8            LDA  #$f8
28c5 85 b0            STA  Col_Row+2          ; colour bank low
28c7 a9 0f            LDA  #$0f
28c9 85 b1            STA  Col_Row+3          ; colour bank high
28cb a6 34            LDX  Upper_Size         ; top row

28cd 20 e5 25 _row_loop JSR Set_Screen_Pointer_X
28d0 e8               INX
28d1 bd a4 25         LDA  Row_Lo,X
28d4 85 ac            STA  Scr_Row
28d6 85 ae            STA  Col_Row
28d8 bd bd 25         LDA  Row_Hi,X
28db 85 ad            STA  Scr_Row+1          ; screen high
28dd 29 07            AND  #7
28df 85 af            STA  Col_Row+1          ; colour high
28e1 a3 4f            LDZ  #COLS-1

28e3 b2 ac    _col_loop LDA (Scr_Row),Z
28e5 92 62            STA  (Scr_Adr),Z
28e7 ea b2 ae         LDA  [Col_Row],Z
28ea ea 92 64         STA  [Col_Adr],Z
28ed 3b               DEZ
28ee 10 f3            BPL  _col_loop

28f0 e0 18            CPX  #ROWS-1
28f2 90 d9            BCC  _row_loop
28f4 4c 69 2b         JMP  Erase_Row
28f7          EndMod [Scroll_Main_Window] Size = 52 [$34]

              ******************
              Module Home_Screen
              ******************

28f7 da               PHX
28f8 a2 00            LDX  #0
28fa 86 5a            STX  Cursor_Col
28fc 86 5b            STX  Cursor_Row
28fe 20 e5 25         JSR  Set_Screen_Pointer_X
2901 fa               PLX
2902 60               RTS
2903          ENDMOD [Home_Screen] Size = 12 [$c]

              *******************
              Module Clear_Screen
              *******************

2903 da               PHX
2904 a2 18            LDX  #ROWS-1
2906 20 69 2b _loop   JSR  Erase_Row
2909 ca               DEX
290a 10 fa            BPL  _loop
290c 20 f7 28         JSR  Home_Screen
290f fa               PLX
2910 60               RTS
2911          ENDMOD [Clear_Screen] Size = 14 [$e]

              *************
2911          Return_Screen
              *************
2911 da               PHX
2912 5a               PHY
2913 a0 00            LDY  #0
2915 84 59            STY  Font_Sel
              ;         STY Attribute
2917 84 5a            STY  Cursor_Col
2919 a6 5b            LDX  Cursor_Row
291b e8               INX
291c e0 19            CPX  #ROWS
291e 90 05            BCC  ReSc_10
2920 20 c3 28         JSR  Scroll_Main_Window
2923 a2 18            LDX  #ROWS-1
2925 86 5b    ReSc_10 STX  Cursor_Row
2927 20 e5 25         JSR  Set_Screen_Pointer_X
292a 7a               PLY
292b fa               PLX
292c 60               RTS

              ****************
              Module Edit_Left
              ****************
292d 88               DEY
292e 20 4e 28         JSR  Cursor_Off
2931 c6 5a            DEC  Cursor_Col
2933 4c 3e 28         JMP  Cursor_On
2936          EndMod [Edit_Left] Size = 9 [$9]

              *****************
              Module Edit_Right
              *****************
2936 c8               INY
2937 20 4e 28         JSR  Cursor_Off
293a e6 5a            INC  Cursor_Col
293c 4c 3e 28         JMP  Cursor_On
293f          EndMod [Edit_Right] Size = 9 [$9]

              ***************
              Module Edit_Del
              ***************
293f ab 5a 00         LDZ  Cursor_Col
2942 20 2d 29         JSR  Edit_Left

2945 b2 62    _loop   LDA  (Scr_Adr),Z
2947 3b               DEZ
2948 92 62            STA  (Scr_Adr),Z
294a 1b               INZ
294b 1b               INZ
294c c2 50            CPZ  #COLS
294e 90 f5            BCC  _loop
2950 3b               DEZ
2951 a9 20            LDA  #' '
2953 92 62            STA  (Scr_Adr),Z
2955 60               RTS
2956          EndMod [Edit_Del] Size = 23 [$17]

              ***************
              Module Edit_Ins
              ***************
2956 ab 2d 00         LDZ  Right_Margin
2959 3b       _loop   DEZ
295a b2 62            LDA  (Scr_Adr),Z
295c 1b               INZ
295d 92 62            STA  (Scr_Adr),Z
295f 3b               DEZ
2960 d4 5a            CPZ  Cursor_Col
2962 d0 f5            BNE  _loop
2964 a9 20            LDA  #' '
2966 92 62            STA  (Scr_Adr),Z
2968 60               RTS
2969          EndMod [Edit_Ins] Size = 19 [$13]

              *************
              Module CHROUT
              *************

2969 c9 0d            CMP  #CR
296b f0 a4            BEQ  Return_Screen

296d da               PHX
296e 5a               PHY
296f db               PHZ
2970 48               PHA
2971 ab 5a 00         LDZ  Cursor_Col
2974 c2 50            CPZ  #COLS
2976 90 04            BCC  CHRO_10
2978 a3 4f            LDZ  #COLS-1
297a 64 5a            STZ  Cursor_Col
297c a5 1b    CHRO_10 LDA  Colour
297e 05 14            ORA  Attribute
2980 ea 92 64         STA  [Col_Adr],Z
2983 68               PLA
2984 05 59            ORA  Font_Sel
2986 92 62            STA  (Scr_Adr),Z
2988 e6 5a            INC  Cursor_Col
298a fb               PLZ
298b 7a               PLY
298c fa               PLX
298d 60               RTS
298e          ENDMOD [CHROUT] Size = 37 [$25]

              *******************
              Module Prompt_Color
              *******************
298e a9 03            LDA  #CYAN
2990 80 02            BRA  Set_Colour
2992          EndMod [Prompt_Color] Size = 4 [$4]

              *****************
              Module Text_Color
              *****************
2992 a9 01            LDA  #WHITE
2994          EndMod [Text_Color] Size = 2 [$2]

              *****************
              Module Set_Colour
              *****************
2994 ff 35 02         BBS7 Version,_return
2997 85 1b            STA  Colour
2999 60       _return RTS
299a          EndMod [Set_Colour] Size = 6 [$6]

              **********************
              Module Timeout_Routine
              **********************
299a 5a               PHY
299b db               PHZ
299c 78               SEI
299d a2 00            LDX  #0
299f 86 a0            STX  Jiffy
29a1 86 a1            STX  Jiffy+1
29a3 86 a2            STX  Jiffy+2
29a5 58               CLI
29a6 b5 47    _save   LDA  X1L,X              ; push X1L,X1H,X2L,X2H
29a8 48               PHA
29a9 e8               INX
29aa e0 04            CPX  #4
29ac 90 f8            BCC  _save
29ae a5 29            LDA  ParNum
29b0 48               PHA                     ; push ParNum
29b1 a9 01            LDA  #1
29b3 85 29            STA  ParNum
29b5 a5 5a            LDA  Cursor_Col
29b7 48               PHA                     ; push Cursor_Col

29b8 20 4e 28         JSR  Cursor_Off
29bb ad ab 2c         LDA  Z_Timeout
29be 85 47            STA  X1L
29c0 ad ac 2c         LDA  Z_Timeout+1
29c3 85 48            STA  X1H
29c5 a9 80            LDA  #$80               ; call type
29c7 20 20 18         JSR  call_00
29ca 20 35 11         JSR  PC_LOOP
29cd a4 47            LDY  X1L                ; return value

29cf 68               PLA                     ; pull Cursor_Col
29d0 85 5a            STA  Cursor_Col
29d2 20 3e 28         JSR  Cursor_On
29d5 68               PLA                     ; pull ParNum
29d6 85 29            STA  ParNum
29d8 a2 03            LDX  #3
29da 68       _rest   PLA                     ; pull X2H,X2L,X1H,X1L
29db 95 47            STA  X1L,X
29dd ca               DEX
29de 10 fa            BPL  _rest
29e0 98               TYA                     ; return value
29e1 fb               PLZ
29e2 7a               PLY
29e3 60               RTS
29e4          EndMod [Timeout_Routine] Size = 74 [$4a]

              ***************
              Module Got_Line
              ***************

              ; Get line from keyboard with preset text

29e4 a9 00            LDA  #0
29e6 85 30            STA  Timeout
29e8 85 31            STA  Timeout+1
29ea 86 47            STX  X1L
29ec 84 48            STY  X1H
29ee a5 35            LDA  Version
29f0 48               PHA
29f1 a4 5a            LDY  Cursor_Col
29f3 a3 01            LDZ  #1
29f5 64 35            STZ  Version
29f7 20 8e 29         JSR  Prompt_Color
29fa b2 47    _loop   LDA  (X1L),Z
29fc c9 20            CMP  #' '
29fe 90 06            BCC  _call
2a00 20 69 29         JSR  CHROUT
2a03 1b               INZ
2a04 10 f4            BPL  _loop
2a06 84 5a    _call   STY  Cursor_Col
2a08 20 0f 2a         JSR  Get_Line_X1
2a0b 68               PLA
2a0c 85 35            STA  Version
2a0e 60               RTS
2a0f          EndMod [Got_Line] Size = 43 [$2b]

              ; Simple line editor, which gets a line and stores it in (X1)
              ; On entry byte 0 is expected to contain the maximum string length
              ; On exit byte 1 holds the actual string length for versions > 3
              ; The string is zero terminated.
              ; Chars_Left is set to the actual string length

              ; RETURN  : editing stops, the string is created from screen row
              ; DEL     : delete character under cursor and scroll remaining row
              ; INS     : insert blank at cursor
              ; LEFT    : move cursor left
              ; RIGHT   : move cursor right
              ; A - Z   : converted to a - z

              ******************
              Module Get_Line_X1
              ******************

2a0f a5 34            LDA  Upper_Size
2a11 85 21            STA  MORE_Counter
2a13 a5 47            LDA  X1L                ; buffer pointer
2a15 85 57            STA  GLL
2a17 a5 48            LDA  X1H
2a19 85 58            STA  GLH
2a1b e3 57            INW  GLL                ; point to content
2a1d 20 8e 29         JSR  Prompt_Color
2a20 7f 35 02         BBR7 Version,_lm
2a23 e3 57            INW  GLL                ; point to content
2a25 a5 5a    _lm     LDA  Cursor_Col
2a27 85 1f            STA  Left_Margin
2a29 a8               TAY                     ; Y = left margin
2a2a a3 00            LDZ  #0
2a2c 64 33            STZ  TO_Flag
2a2e 18               CLC
2a2f 72 47            ADC  (X1L),Z            ; add maximum length
2a31 c5 1f            CMP  Left_Margin        ; added zero ?
2a33 f0 04            BEQ  _max
2a35 c9 4f            CMP  #COLS-1
2a37 90 02            BCC  _rm
2a39 a9 4f    _max    LDA  #COLS-1
2a3b 85 2d    _rm     STA  Right_Margin
2a3d 80 03            BRA  _loop

2a3f 20 2c 1b _error  JSR  Error_Beep

              ; receive character from keyboard

2a42 20 3e 28 _loop   JSR  Cursor_On
2a45 20 75 28         JSR  Get_Character
2a48 20 4e 28         JSR  Cursor_Off
2a4b c9 0d            CMP  #CR
2a4d f0 67            BEQ  _end               ; -> CR = end of input
2a4f c9 00            CMP  #0
2a51 d0 17            BNE  _del

              ; timeout

2a53 20 9a 29         JSR  Timeout_Routine
2a56 c9 00            CMP  #0
2a58 f0 e8            BEQ  _loop              ; carry on
2a5a a9 00            LDA  #0
2a5c 85 1a            STA  Chars_Left
2a5e 20 92 29         JSR  Text_Color
2a61 a9 00            LDA  #0
2a63 a0 01            LDY  #1
2a65 84 33            STY  TO_Flag
2a67 91 47            STA  (X1L),Y            ; length of string
2a69 60               RTS

              ; DEL key

2a6a c9 14    _del    CMP  #DEL
2a6c d0 09            BNE  _ins
2a6e c4 1f            CPY  Left_Margin
2a70 f0 cd            BEQ  _error
2a72 20 3f 29         JSR  Edit_Del
2a75 80 cb            BRA  _loop

              ; INS key

2a77 c9 94    _ins    CMP  #INS
2a79 d0 09            BNE  _left
2a7b c4 2d            CPY  Right_Margin
2a7d b0 c0            BCS  _error
2a7f 20 56 29         JSR  Edit_Ins
2a82 80 be            BRA  _loop

              ; cursor left

2a84 c9 83    _left   CMP  #KEY_LEFT
2a86 d0 09            BNE  _limit
2a88 c4 1f            CPY  Left_Margin
2a8a f0 b3            BEQ  _error
2a8c 20 2d 29         JSR  Edit_Left
2a8f 80 b1            BRA  _loop

              ; check edit limit

2a91 c4 2d    _limit  CPY  Right_Margin
2a93 b0 aa            BCS  _error             ; -> at limit

              ; cursor right

2a95 c9 84            CMP  #KEY_RIGHT
2a97 d0 05            BNE  _valid
2a99 20 36 29         JSR  Edit_Right
2a9c 80 a4            BRA  _loop

              ; unsupported keys

2a9e c9 20    _valid  CMP  #' '
2aa0 90 9d            BCC  _error
2aa2 c9 7f            CMP  #$7f
2aa4 b0 99            BCS  _error

              ; upper case to lower case

2aa6 c9 41            CMP  #'A'
2aa8 90 06            BCC  _store
2aaa c9 5b            CMP  #'Z'+1
2aac b0 02            BCS  _store
2aae 69 20            ADC  #$20               ; to lower case
2ab0 20 69 29 _store  JSR  CHROUT
2ab3 c8               INY
2ab4 10 8c            BPL  _loop

              ; skip trailing blanks

2ab6 a4 2d    _end    LDY  Right_Margin
2ab8 a9 20            LDA  #' '
2aba d1 62    _skip   CMP  (Scr_Adr),Y
2abc d0 05            BNE  _buffer
2abe 88               DEY
2abf c4 1f            CPY  Left_Margin
2ac1 b0 f7            BCS  _skip

              ; copy screen row to buffer

2ac3 98       _buffer TYA                     ; Y = last non blank
2ac4 1a               INC  A
2ac5 38               SEC
2ac6 e5 1f            SBC  Left_Margin        ; A = string length
2ac8 85 1a            STA  Chars_Left
2aca 4b               TAZ                     ; Z = terminator pos
2acb a9 00            LDA  #0
2acd 92 57            STA  (GLL),Z            ; terminator
2acf 3b               DEZ
2ad0 30 08            BMI  _empty
2ad2 b1 62    _copy   LDA  (Scr_Adr),Y
2ad4 92 57            STA  (GLL),Z
2ad6 88               DEY
2ad7 3b               DEZ
2ad8 10 f8            BPL  _copy

2ada 20 92 29 _empty  JSR  Text_Color
2add 7f 35 06         BBR7 Version,_return
2ae0 a5 1a            LDA  Chars_Left
2ae2 a0 01            LDY  #1
2ae4 91 47            STA  (X1L),Y            ; length of string
2ae6 4c 11 29 _return JMP  Return_Screen
2ae9          EndMod [Get_Line_X1] Size = 218 [$da]

              *********
2ae9          PrintText
              *********

2ae9 85 c3            STA  MEMUSS
2aeb 84 c4            STY  MEMUSS+1
2aed a0 00            LDY  #0
2aef b1 c3    PrTe_A  LDA  (MEMUSS),Y
2af1 f0 07            BEQ  PrTe_B
2af3 20 69 29         JSR  CHROUT
2af6 c8               INY
2af7 ca               DEX
2af8 d0 f5            BNE  PrTe_A
2afa 60       PrTe_B  RTS

              ************
2afb          Reset_Screen
              ************

2afb 20 03 29         JSR  Clear_Screen
2afe 20 11 29         JSR  Return_Screen
2b01 a5 34            LDA  Upper_Size
2b03 85 21            STA  MORE_Counter
2b05 60               RTS

              *****************
              Module Open_Story
              *****************

2b06 ad c7 2c         LDA  Game_Unit          ; open "Z*",FA,8
2b09 85 ba            STA  FA
2b0b 20 b1 ff         JSR  LISTEN
2b0e a9 f8            LDA  #$f8
2b10 20 93 ff         JSR  SECOND
2b13 a9 5a            LDA  #'Z'
2b15 20 a8 ff         JSR  CIOUT
2b18 a9 2a            LDA  #'*'
2b1a 20 a8 ff         JSR  CIOUT
2b1d 20 ae ff         JSR  UNLSN
2b20 a5 ba            LDA  FA
2b22 20 b4 ff         JSR  TALK               ; open channel
2b25 a9 68            LDA  #$68               ; SA = 8
2b27 4c 96 ff         JMP  TKSA               ; select channel to disk buffer
2b2a          EndMod [Open_Story] Size = 36 [$24]

              **********
2b2a          ASCII_Hex
              **********

              ; Output: (X) = High nibble (A) = Low nibble
2b2a 48               PHA
2b2b 4a               LSR  A
2b2c 4a               LSR  A
2b2d 4a               LSR  A
2b2e 4a               LSR  A
2b2f 09 30            ORA  #'0'
2b31 c9 3a            CMP  #$3a
2b33 90 02            BCC  Hex_11
2b35 69 06            ADC  #6
2b37 aa       Hex_11  TAX
2b38 68               PLA
2b39 29 0f            AND  #15
2b3b 09 30            ORA  #'0'
2b3d c9 3a            CMP  #$3a
2b3f 90 02            BCC  Hex_12
2b41 69 06            ADC  #6
2b43 60       Hex_12  RTS

              *************************
              Module Select_Text_Window
              *************************

2b44 a9 01            LDA  #1
2b46 85 38            STA  Win_Top
2b48 a9 18            LDA  #ROWS-1
2b4a 85 37            STA  Win_Bot
2b4c a9 00            LDA  #0
2b4e 85 14            STA  Attribute
2b50 4c 92 29         JMP  Text_Color
2b53          EndMod [Select_Text_Window] Size = 15 [$f]

              ********************
2b53          Select_Status_Window
              ********************

2b53 a2 00            LDX  #0
2b55 86 38            STX  Win_Top
2b57 4c e5 25         JMP  Set_Screen_Pointer_X

              ***********
2b5a          Save_Cursor
              ***********

2b5a 20 0d 26         JSR  Get_Row_Col
2b5d 86 1d            STX  C_Save_Row
2b5f 84 1c            STY  C_Save_Col
2b61 60               RTS


              **************
2b62          Restore_Cursor
              **************

2b62 a6 1d            LDX  C_Save_Row
2b64 a4 1c            LDY  C_Save_Col
2b66 4c fa 25         JMP  Set_Row_Col

              ****************
              Module Erase_Row
              ****************

2b69 db               PHZ
2b6a 20 e5 25         JSR  Set_Screen_Pointer_X
2b6d a3 4f            LDZ  #COLS-1
2b6f a9 20    _loop   LDA  #' '
2b71 92 62            STA  (Scr_Adr),Z
2b73 a9 01            LDA  #WHITE
2b75 ea 92 64         STA  [Col_Adr],Z
2b78 3b               DEZ
2b79 10 f4            BPL  _loop
2b7b fb               PLZ
2b7c 60               RTS
2b7d          EndMod [Erase_Row] Size = 20 [$14]

              ********
2b7d          ASCII_TS
              ********

              ; Convert binary number in (A) to
              ; two decimal digits in (X) and (A)

2b7d a2 2f            LDX  #'0'-1
2b7f 38               SEC
2b80 e8       asts_01 INX
2b81 e9 0a            SBC  #10
2b83 b0 fb            BCS  asts_01
2b85 69 3a            ADC  #$3a
2b87 60               RTS

              ****************
              Module Load_Page
              ****************

              ; Read 256 bytes of data from disk and store them in RAM
              ; at the address (RAMD) = 32 bit address.
              ; The I/O routines TALK, TKSA, ACPTR, and UNTLK are used
              ; ACPTR sets the STATUS bit 6 ($40) on error

2b88 da               PHX
              ;  LDA RAMD+3
              ;  JSR Dump_A
              ;  LDA RAMD+2
              ;  JSR Dump_A
              ;  LDA RAMD+1
              ;  JSR Dump_A
              ;  LDA #' '
              ;  JSR CHROUT
              ;  LDA Cursor_Col
              ;  CMP #75
              ;  BCC _weiter
              ;  JSR Return_Screen
              ;_weiter
2b89 a3 00            LDZ  #0
2b8b 64 90            STZ  IO_STATUS
2b8d 20 a5 ff _loop   JSR  ACPTR
2b90 ea 92 0c         STA  [RAMD],Z
2b93 a5 90            LDA  IO_STATUS
2b95 d0 03            BNE  _eof
2b97 1b               INZ
2b98 d0 f3            BNE  _loop
2b9a e3 15    _eof    INW  Block_Lo           ; increment block word Block_Lo/Hi
2b9c e6 0d            INC  RAMD+1             ; advance RAM pointer page
2b9e fa               PLX
2b9f 60               RTS                     ; return OK
2ba0          EndMod [Load_Page] Size = 24 [$18]

              *****************
              Module Load_Story
              *****************

              ; Continue story loading in banks

2ba0 a5 61            LDA  Segment
2ba2 85 0f            STA  RAMD+3
2ba4 a5 15    _next   LDA  Block_Lo
2ba6 85 0d            STA  RAMD+1
2ba8 a6 16            LDX  Block_Hi
2baa bd a2 2c         LDA  Bank_Order,X
2bad 85 0e            STA  RAMD+2
2baf c9 01            CMP  #1
2bb1 d0 06            BNE  _loop
2bb3 a5 0d            LDA  RAMD+1
2bb5 e9 08            SBC  #8
2bb7 85 0d            STA  RAMD+1
2bb9 20 88 2b _loop   JSR  Load_Page
2bbc a5 90            LDA  IO_STATUS
2bbe d0 11            BNE  _eof
2bc0 a5 15            LDA  Block_Lo
2bc2 29 0f            AND  #15
2bc4 d0 05            BNE  _prog
2bc6 a9 2e            LDA  #'.'
2bc8 20 69 29         JSR  CHROUT
2bcb a6 16    _prog   LDX  Block_Hi
2bcd e0 08            CPX  #8
2bcf 90 d3            BCC  _next
2bd1 20 ab ff _eof    JSR  UNTLK
2bd4 ad c7 2c         LDA  Game_Unit          ; close #8
2bd7 85 ba            STA  FA
2bd9 20 b1 ff         JSR  LISTEN
2bdc a9 e8            LDA  #$e8
2bde 20 93 ff         JSR  SECOND
2be1 4c ae ff         JMP  UNLSN
2be4          EndMod [Load_Story] Size = 68 [$44]

              **********
2be4          Close_File
              **********

2be4 a5 ba            LDA  FA
2be6 20 b1 ff         JSR  LISTEN
2be9 a9 e3            LDA  #$e3
2beb 20 93 ff         JSR  SECOND
2bee 4c ae ff         JMP  UNLSN

              *************
2bf1          Delete_Config
              *************

2bf1 ad c7 2c         LDA  Game_Unit
2bf4 85 ba            STA  FA
2bf6 20 b1 ff         JSR  LISTEN
2bf9 a9 6f            LDA  #$6f
2bfb 20 93 ff         JSR  SECOND
2bfe a0 00            LDY  #0
2c00 b9 43 2e DeCo_10 LDA  ConfigDel,Y
2c03 20 a8 ff         JSR  CIOUT
2c06 c8               INY
2c07 c0 09            CPY  #[?ConfigDel + ?Configname]
2c09 90 f5            BCC  DeCo_10
2c0b 4c ae ff         JMP  UNLSN

              ***********
2c0e          Prep_Config
              ***********

2c0e a9 4e            LDA  #<CONFIG_START
2c10 a0 2e            LDY  #>CONFIG_START
2c12 85 41            STA  A0L
2c14 84 42            STY  A0H
2c16 a9 55            LDA  #<CONFIG_END
2c18 a0 2e            LDY  #>CONFIG_END
2c1a 85 43            STA  A1L
2c1c 84 44            STY  A1H
2c1e a9 06            LDA  #?Configname
2c20 a2 46            LDX  #<Configname
2c22 a0 2e            LDY  #>Configname
2c24 4c bd ff         JMP  SETNAM

              ***********
2c27          Save_Config
              ***********

2c27 20 f1 2b         JSR  Delete_Config
2c2a 20 0e 2c         JSR  Prep_Config
2c2d e6 b7            INC  FNLEN              ; add ','
2c2f e6 b7            INC  FNLEN              ; add 'W'
2c31 4c 7c 2c         JMP  Save_File

              ********************
              Module Send_Filename
              ********************

2c34 a5 ba            LDA  FA
2c36 20 b1 ff         JSR  LISTEN
2c39 a9 f3            LDA  #$f3
2c3b 20 93 ff         JSR  SECOND
2c3e a0 00            LDY  #0
2c40 84 90            STY  IO_STATUS
2c42 b1 bb    _fname  LDA  (FNADR),Y
2c44 20 a8 ff         JSR  CIOUT
2c47 c8               INY
2c48 c4 b7            CPY  FNLEN
2c4a 90 f6            BCC  _fname
2c4c 4c ae ff         JMP  UNLSN
2c4f          EndMod [Send_Filename] Size = 27 [$1b]

              ******************
              Module Load_Config
              ******************

2c4f 20 0e 2c         JSR  Prep_Config
2c52          EndMod [Load_Config] Size = 3 [$3]

              ****************
              Module Load_File
              ****************

              ; Input : (A0) = start address
              ;       : (A1) = end   address
              ;       : SETNAM was called

2c52 20 34 2c         JSR  Send_Filename
2c55 a5 ba            LDA  FA
2c57 20 b4 ff         JSR  TALK
2c5a a9 63            LDA  #$63
2c5c 20 96 ff         JSR  TKSA
2c5f a0 00            LDY  #0
2c61 20 a5 ff _loop   JSR  ACPTR
2c64 a6 90            LDX  IO_STATUS
2c66 d0 0e            BNE  _stop
2c68 91 41            STA  (A0L),Y
2c6a e3 41            INW  A0L
2c6c a5 41            LDA  A0L
2c6e c5 43            CMP  A1L
2c70 a5 42            LDA  A0H
2c72 e5 44            SBC  A1H
2c74 90 eb            BCC  _loop

2c76 20 ab ff _stop   JSR  UNTLK
2c79 4c e4 2b         JMP  Close_File
2c7c          EndMod [Load_File] Size = 42 [$2a]

              ****************
              Module Save_File
              ****************

              ; Input : (A0) = start address
              ;       : (A1) = end   address
              ;       : SETNAM was called

2c7c 20 34 2c         JSR  Send_Filename
2c7f a5 ba            LDA  FA
2c81 20 b1 ff         JSR  LISTEN
2c84 a9 63            LDA  #$63
2c86 20 93 ff         JSR  SECOND
2c89 a0 00            LDY  #0
2c8b b1 41    _loop   LDA  (A0L),Y
2c8d 20 a8 ff         JSR  CIOUT
2c90 e3 41            INW  A0L
2c92 a5 41            LDA  A0L
2c94 c5 43            CMP  A1L
2c96 a5 42            LDA  A0H
2c98 e5 44            SBC  A1H
2c9a 90 ef            BCC  _loop

2c9c 20 ae ff         JSR  UNLSN
2c9f 4c e4 2b         JMP  Close_File
2ca2          EndMod [Save_File] Size = 38 [$26]

2ca2 01 04 05 Bank_Order .BYTE 1,4,5,3,6,7,8,9

2caa 00       Z_Mem_Flag      .BYTE 0
2cab 00 00    Z_Timeout       .WORD 0

              ; ------- data for unit dialog --------
2cad 02       Unit_Buf  .BYTE 2               ; input length
2cae 30 38 00 Unit_Text .BYTE "08",0
              ; ------- data for file name dialog----
2cb1 14       File_Buf  .BYTE 20              ; input length
2cb2 73 61 76 File_Text .BYTE "savename",0
2cbb 00 00 00           .FILL 12 (0) ; 12 bytes
2cc7 08       Game_Unit .BYTE 8

2cc8 0d 50 72 PRESSRET  .BYTE "\rPress <RETURN> to continue."
2ce4 53 61 76 SAVEUNIT  .BYTE "Save to unit:"
2cf1 53 61 76 SAVEFILE  .BYTE "Save to file:"
2cfe 52 65 73 LOADUNIT  .BYTE "Restore from unit:"
2d10 52 65 73 LOADFILE  .BYTE "Restore from file:"
2d22 20 4d 4f MORE      .BYTE " MORE "
2d28 45 6e 64 EOS       .BYTE "End of session - power off"
2d42 4e 4f 20 NOSTORY   .BYTE "NO Z STORY"
2d4c 0d 55 73 Msg_Attic .BYTE "\rUsing attic RAM at $0800-0000\r"
2d6b 42 49 54 BITSHIFTER .BYTE "BIT SHIFTER 26-OCT-2020\r"
2d83 0d       InfoClr .BYTE CR
2d84 50 72 6f InfoPro .BYTE 'Program: '
2d8d 31 30 30          .HEX4 START
2d91 20 2d 20         .BYTE ' - '
2d94 32 45 35          .HEX4 EOP
2d98 20               .BYTE ' '
2d99 20 20 33          .DEC4 [Z_HEADER - START + 1] >> 8
2d9d 20 50 61         .BYTE ' Pages\r'

2da4 42 61 6e Bank0   .BYTE 'Bank  0: '
2dad 32 46 30          .HEX4 Z_HEADER
2db1 20 2d 20         .BYTE ' - '
2db4 43 46 46          .HEX4 $CFFF
2db8 20               .BYTE ' '
2db9 20 31 36          .DEC4 [$D000 -Z_HEADER] >> 8
2dbd 20 50 61         .BYTE ' Pages\r'

2dc4 42 61 6e Bank1   .BYTE 'Bank  1: '
2dcd 39 39 30          .HEX4 $C800 - Z_HEADER
2dd1 20 2d 20         .BYTE ' - '
2dd4 46 37 46          .HEX4 $F7FF
2dd8 20               .BYTE ' '
2dd9 20 20 39          .DEC4 [Z_HEADER + $3000] >> 8
2ddd 20 50 61         .BYTE ' Pages\r'

2de4 53 74 6f InfoSto .BYTE 'Story  :        Size    0 Pages\r',0
2e05          InfoEnd

2e05 20 20 20 BLANKS  .BYTE "            "

0034          STAT_SCORE = 52
0016          MOVES_COL  = 22

2e11 53 63 6f SCORE   .BYTE "Score: 0       Moves: 0     "
2e2d 54 69 6d STIME   .BYTE "Time: 00:00 "
0007          SCORE_COL  =  7
0006          STIME_COL  =  6

2e39 20 45 72 INTERR  .BYTE " Error 00 "

2e43 53 30 3a ConfigDel  .BYTE "S0:"          ; prefix for scratch command
2e46 43 4f 4e Configname .BYTE "CONFIG"
2e4c 2c 57            .BYTE ",W"              ; postfix for write command

2e4e          CONFIG_START
2e4e 01       FG_Color   .BYTE WHITE          ; f1 133
2e4f 07       TI_Color   .BYTE YELLOW         ; f3 134
2e50 06       BO_Color   .BYTE BLUE           ; f5 135
2e51 06       BG_Color   .BYTE BLUE           ; f2 137
2e52 02       TB_Color   .BYTE RED            ; f4 138
2e53 00               .BYTE 0                 ; f6 139
2e54 00               .BYTE 0                 ; f8 140
2e55          CONFIG_END

              ***
2e55          EOP
              ***

              *******************
              Module Load_Charset
              *******************

              * Copy charset from program to $0FF7 E000

2e55 a9 81            LDA  #<Charset
2e57 85 10            STA  LV0
2e59 a9 2e            LDA  #>Charset
2e5b 85 11            STA  LV1
2e5d a9 00            LDA  #$00
2e5f 85 53            STA  X7L
2e61 a9 e0            LDA  #$E0
2e63 85 54            STA  X7H
2e65 a9 f7            LDA  #$F7
2e67 85 55            STA  X8L
2e69 a9 0f            LDA  #$0F
2e6b 85 56            STA  X8H
2e6d a2 08            LDX  #8
2e6f a3 00            LDZ  #0
2e71 b2 10    _loop   LDA  (LV0),Z
2e73 ea 92 53         STA  [X7L],Z
2e76 1b               INZ
2e77 d0 f8            BNE  _loop
2e79 e6 11            INC  LV1
2e7b e6 54            INC  X7H
2e7d ca               DEX
2e7e d0 f1            BNE  _loop
2e80 60               RTS
2e81          EndMod [EOP] Size = 44 [$2c]

              *******
2e81          Charset
              *******
                      .INCLUDE "Zchar.asm"
2e81 ff                 .BITS  * * * * * * * * ; $0000
2e82 c3                 .BITS  * * . . . . * *
2e83 c3                 .BITS  * * . . . . * *
2e84 c3                 .BITS  * * . . . . * *
2e85 c3                 .BITS  * * . . . . * *
2e86 c3                 .BITS  * * . . . . * *
2e87 c3                 .BITS  * * . . . . * *
2e88 ff                 .BITS  * * * * * * * *

2e89 ff                 .BITS  * * * * * * * * ; $0001
2e8a c0                 .BITS  * * . . . . . .
2e8b c0                 .BITS  * * . . . . . .
2e8c c0                 .BITS  * * . . . . . .
2e8d c0                 .BITS  * * . . . . . .
2e8e c0                 .BITS  * * . . . . . .
2e8f c0                 .BITS  * * . . . . . .
2e90 c0                 .BITS  * * . . . . . .

2e91 18                 .BITS  . . . * * . . . ; $0002
2e92 18                 .BITS  . . . * * . . .
2e93 18                 .BITS  . . . * * . . .
2e94 18                 .BITS  . . . * * . . .
2e95 18                 .BITS  . . . * * . . .
2e96 18                 .BITS  . . . * * . . .
2e97 18                 .BITS  . . . * * . . .
2e98 ff                 .BITS  * * * * * * * *

2e99 03                 .BITS  . . . . . . * * ; $0003
2e9a 03                 .BITS  . . . . . . * *
2e9b 03                 .BITS  . . . . . . * *
2e9c 03                 .BITS  . . . . . . * *
2e9d 03                 .BITS  . . . . . . * *
2e9e 03                 .BITS  . . . . . . * *
2e9f 03                 .BITS  . . . . . . * *
2ea0 ff                 .BITS  * * * * * * * *

2ea1 0c                 .BITS  . . . . * * . . ; $0004
2ea2 18                 .BITS  . . . * * . . .
2ea3 30                 .BITS  . . * * . . . .
2ea4 7e                 .BITS  . * * * * * * .
2ea5 0c                 .BITS  . . . . * * . .
2ea6 18                 .BITS  . . . * * . . .
2ea7 30                 .BITS  . . * * . . . .
2ea8 00                 .BITS  . . . . . . . .

2ea9 ff                 .BITS  * * * * * * * * ; $0005
2eaa c3                 .BITS  * * . . . . * *
2eab e7                 .BITS  * * * . . * * *
2eac db                 .BITS  * * . * * . * *
2ead db                 .BITS  * * . * * . * *
2eae e7                 .BITS  * * * . . * * *
2eaf c3                 .BITS  * * . . . . * *
2eb0 ff                 .BITS  * * * * * * * *

2eb1 00                 .BITS  . . . . . . . . ; $0006
2eb2 01                 .BITS  . . . . . . . *
2eb3 03                 .BITS  . . . . . . * *
2eb4 06                 .BITS  . . . . . * * .
2eb5 cc                 .BITS  * * . . * * . .
2eb6 78                 .BITS  . * * * * . . .
2eb7 30                 .BITS  . . * * . . . .
2eb8 00                 .BITS  . . . . . . . .

2eb9 3c                 .BITS  . . * * * * . . ; $0007
2eba 66                 .BITS  . * * . . * * .
2ebb c3                 .BITS  * * . . . . * *
2ebc c3                 .BITS  * * . . . . * *
2ebd ff                 .BITS  * * * * * * * *
2ebe 24                 .BITS  . . * . . * . .
2ebf e7                 .BITS  * * * . . * * *
2ec0 00                 .BITS  . . . . . . . .

2ec1 00                 .BITS  . . . . . . . . ; $0008
2ec2 00                 .BITS  . . . . . . . .
2ec3 30                 .BITS  . . * * . . . .
2ec4 60                 .BITS  . * * . . . . .
2ec5 ff                 .BITS  * * * * * * * *
2ec6 60                 .BITS  . * * . . . . .
2ec7 30                 .BITS  . . * * . . . .
2ec8 00                 .BITS  . . . . . . . .

2ec9 00                 .BITS  . . . . . . . . ; $0009
2eca 00                 .BITS  . . . . . . . .
2ecb 0c                 .BITS  . . . . * * . .
2ecc 06                 .BITS  . . . . . * * .
2ecd ff                 .BITS  * * * * * * * *
2ece 06                 .BITS  . . . . . * * .
2ecf 0c                 .BITS  . . . . * * . .
2ed0 00                 .BITS  . . . . . . . .

2ed1 18                 .BITS  . . . * * . . . ; $000A
2ed2 18                 .BITS  . . . * * . . .
2ed3 18                 .BITS  . . . * * . . .
2ed4 18                 .BITS  . . . * * . . .
2ed5 db                 .BITS  * * . * * . * *
2ed6 7e                 .BITS  . * * * * * * .
2ed7 3c                 .BITS  . . * * * * . .
2ed8 18                 .BITS  . . . * * . . .

2ed9 18                 .BITS  . . . * * . . . ; $000B
2eda 3c                 .BITS  . . * * * * . .
2edb 7e                 .BITS  . * * * * * * .
2edc db                 .BITS  * * . * * . * *
2edd 18                 .BITS  . . . * * . . .
2ede 18                 .BITS  . . . * * . . .
2edf 18                 .BITS  . . . * * . . .
2ee0 18                 .BITS  . . . * * . . .

2ee1 18                 .BITS  . . . * * . . . ; $000C
2ee2 5a                 .BITS  . * . * * . * .
2ee3 3c                 .BITS  . . * * * * . .
2ee4 99                 .BITS  * . . * * . . *
2ee5 db                 .BITS  * * . * * . * *
2ee6 7e                 .BITS  . * * * * * * .
2ee7 3c                 .BITS  . . * * * * . .
2ee8 18                 .BITS  . . . * * . . .

2ee9 00                 .BITS  . . . . . . . . ; $000D
2eea 03                 .BITS  . . . . . . * *
2eeb 33                 .BITS  . . * * . . * *
2eec 63                 .BITS  . * * . . . * *
2eed fe                 .BITS  * * * * * * * .
2eee 60                 .BITS  . * * . . . . .
2eef 30                 .BITS  . . * * . . . .
2ef0 00                 .BITS  . . . . . . . .

2ef1 3c                 .BITS  . . * * * * . . ; $000E
2ef2 66                 .BITS  . * * . . * * .
2ef3 ff                 .BITS  * * * * * * * *
2ef4 db                 .BITS  * * . * * . * *
2ef5 db                 .BITS  * * . * * . * *
2ef6 ff                 .BITS  * * * * * * * *
2ef7 66                 .BITS  . * * . . * * .
2ef8 3c                 .BITS  . . * * * * . .

2ef9 3c                 .BITS  . . * * * * . . ; $000F
2efa 66                 .BITS  . * * . . * * .
2efb c3                 .BITS  * * . . . . * *
2efc db                 .BITS  * * . * * . * *
2efd db                 .BITS  * * . * * . * *
2efe c3                 .BITS  * * . . . . * *
2eff 66                 .BITS  . * * . . * * .
2f00 3c                 .BITS  . . * * * * . .

2f01 ff                 .BITS  * * * * * * * * ; $0010
2f02 c3                 .BITS  * * . . . . * *
2f03 c3                 .BITS  * * . . . . * *
2f04 ff                 .BITS  * * * * * * * *
2f05 c3                 .BITS  * * . . . . * *
2f06 c3                 .BITS  * * . . . . * *
2f07 c3                 .BITS  * * . . . . * *
2f08 ff                 .BITS  * * * * * * * *

2f09 3c                 .BITS  . . * * * * . . ; $0011
2f0a 7e                 .BITS  . * * * * * * .
2f0b db                 .BITS  * * . * * . * *
2f0c db                 .BITS  * * . * * . * *
2f0d df                 .BITS  * * . * * * * *
2f0e c3                 .BITS  * * . . . . * *
2f0f 66                 .BITS  . * * . . * * .
2f10 3c                 .BITS  . . * * * * . .

2f11 3c                 .BITS  . . * * * * . . ; $0012
2f12 66                 .BITS  . * * . . * * .
2f13 c3                 .BITS  * * . . . . * *
2f14 df                 .BITS  * * . * * * * *
2f15 db                 .BITS  * * . * * . * *
2f16 db                 .BITS  * * . * * . * *
2f17 7e                 .BITS  . * * * * * * .
2f18 3c                 .BITS  . . * * * * . .

2f19 3c                 .BITS  . . * * * * . . ; $0013
2f1a 66                 .BITS  . * * . . * * .
2f1b c3                 .BITS  * * . . . . * *
2f1c fb                 .BITS  * * * * * . * *
2f1d db                 .BITS  * * . * * . * *
2f1e db                 .BITS  * * . * * . * *
2f1f 7e                 .BITS  . * * * * * * .
2f20 3c                 .BITS  . . * * * * . .

2f21 3c                 .BITS  . . * * * * . . ; $0014
2f22 7e                 .BITS  . * * * * * * .
2f23 db                 .BITS  * * . * * . * *
2f24 db                 .BITS  * * . * * . * *
2f25 fb                 .BITS  * * * * * . * *
2f26 c3                 .BITS  * * . . . . * *
2f27 66                 .BITS  . * * . . * * .
2f28 3c                 .BITS  . . * * * * . .

2f29 00                 .BITS  . . . . . . . . ; $0015
2f2a 01                 .BITS  . . . . . . . *
2f2b 33                 .BITS  . . * * . . * *
2f2c 1e                 .BITS  . . . * * * * .
2f2d ce                 .BITS  * * . . * * * .
2f2e 7b                 .BITS  . * * * * . * *
2f2f 31                 .BITS  . . * * . . . *
2f30 00                 .BITS  . . . . . . . .

2f31 7e                 .BITS  . * * * * * * . ; $0016
2f32 66                 .BITS  . * * . . * * .
2f33 66                 .BITS  . * * . . * * .
2f34 66                 .BITS  . * * . . * * .
2f35 66                 .BITS  . * * . . * * .
2f36 66                 .BITS  . * * . . * * .
2f37 66                 .BITS  . * * . . * * .
2f38 e7                 .BITS  * * * . . * * *

2f39 03                 .BITS  . . . . . . * * ; $0017
2f3a 03                 .BITS  . . . . . . * *
2f3b 03                 .BITS  . . . . . . * *
2f3c ff                 .BITS  * * * * * * * *
2f3d 03                 .BITS  . . . . . . * *
2f3e 03                 .BITS  . . . . . . * *
2f3f 03                 .BITS  . . . . . . * *
2f40 00                 .BITS  . . . . . . . .

2f41 ff                 .BITS  * * * * * * * * ; $0018
2f42 66                 .BITS  . * * . . * * .
2f43 3c                 .BITS  . . * * * * . .
2f44 18                 .BITS  . . . * * . . .
2f45 18                 .BITS  . . . * * . . .
2f46 3c                 .BITS  . . * * * * . .
2f47 66                 .BITS  . * * . . * * .
2f48 ff                 .BITS  * * * * * * * *

2f49 18                 .BITS  . . . * * . . . ; $0019
2f4a 18                 .BITS  . . . * * . . .
2f4b 3c                 .BITS  . . * * * * . .
2f4c 3c                 .BITS  . . * * * * . .
2f4d 3c                 .BITS  . . * * * * . .
2f4e 3c                 .BITS  . . * * * * . .
2f4f 18                 .BITS  . . . * * . . .
2f50 18                 .BITS  . . . * * . . .

2f51 3c                 .BITS  . . * * * * . . ; $001A
2f52 66                 .BITS  . * * . . * * .
2f53 66                 .BITS  . * * . . * * .
2f54 30                 .BITS  . . * * . . . .
2f55 18                 .BITS  . . . * * . . .
2f56 00                 .BITS  . . . . . . . .
2f57 18                 .BITS  . . . * * . . .
2f58 00                 .BITS  . . . . . . . .

2f59 3c                 .BITS  . . * * * * . . ; $001B
2f5a 66                 .BITS  . * * . . * * .
2f5b c3                 .BITS  * * . . . . * *
2f5c ff                 .BITS  * * * * * * * *
2f5d c3                 .BITS  * * . . . . * *
2f5e c3                 .BITS  * * . . . . * *
2f5f 66                 .BITS  . * * . . * * .
2f60 3c                 .BITS  . . * * * * . .

2f61 ff                 .BITS  * * * * * * * * ; $001C
2f62 db                 .BITS  * * . * * . * *
2f63 db                 .BITS  * * . * * . * *
2f64 db                 .BITS  * * . * * . * *
2f65 fb                 .BITS  * * * * * . * *
2f66 c3                 .BITS  * * . . . . * *
2f67 c3                 .BITS  * * . . . . * *
2f68 ff                 .BITS  * * * * * * * *

2f69 ff                 .BITS  * * * * * * * * ; $001D
2f6a c3                 .BITS  * * . . . . * *
2f6b c3                 .BITS  * * . . . . * *
2f6c fb                 .BITS  * * * * * . * *
2f6d db                 .BITS  * * . * * . * *
2f6e db                 .BITS  * * . * * . * *
2f6f db                 .BITS  * * . * * . * *
2f70 ff                 .BITS  * * * * * * * *

2f71 ff                 .BITS  * * * * * * * * ; $001E
2f72 c3                 .BITS  * * . . . . * *
2f73 c3                 .BITS  * * . . . . * *
2f74 df                 .BITS  * * . * * * * *
2f75 db                 .BITS  * * . * * . * *
2f76 db                 .BITS  * * . * * . * *
2f77 db                 .BITS  * * . * * . * *
2f78 ff                 .BITS  * * * * * * * *

2f79 ff                 .BITS  * * * * * * * * ; $001F
2f7a db                 .BITS  * * . * * . * *
2f7b db                 .BITS  * * . * * . * *
2f7c db                 .BITS  * * . * * . * *
2f7d df                 .BITS  * * . * * * * *
2f7e c3                 .BITS  * * . . . . * *
2f7f c3                 .BITS  * * . . . . * *
2f80 ff                 .BITS  * * * * * * * *

2f81 00                 .BITS  . . . . . . . . ; $0020
2f82 00                 .BITS  . . . . . . . .
2f83 00                 .BITS  . . . . . . . .
2f84 00                 .BITS  . . . . . . . .
2f85 00                 .BITS  . . . . . . . .
2f86 00                 .BITS  . . . . . . . .
2f87 00                 .BITS  . . . . . . . .
2f88 00                 .BITS  . . . . . . . .

2f89 18                 .BITS  . . . * * . . . ; $0021
2f8a 18                 .BITS  . . . * * . . .
2f8b 18                 .BITS  . . . * * . . .
2f8c 18                 .BITS  . . . * * . . .
2f8d 18                 .BITS  . . . * * . . .
2f8e 00                 .BITS  . . . . . . . .
2f8f 18                 .BITS  . . . * * . . .
2f90 00                 .BITS  . . . . . . . .

2f91 6c                 .BITS  . * * . * * . . ; $0022
2f92 6c                 .BITS  . * * . * * . .
2f93 6c                 .BITS  . * * . * * . .
2f94 00                 .BITS  . . . . . . . .
2f95 00                 .BITS  . . . . . . . .
2f96 00                 .BITS  . . . . . . . .
2f97 00                 .BITS  . . . . . . . .
2f98 00                 .BITS  . . . . . . . .

2f99 6c                 .BITS  . * * . * * . . ; $0023
2f9a 6c                 .BITS  . * * . * * . .
2f9b fe                 .BITS  * * * * * * * .
2f9c 6c                 .BITS  . * * . * * . .
2f9d fe                 .BITS  * * * * * * * .
2f9e 6c                 .BITS  . * * . * * . .
2f9f 6c                 .BITS  . * * . * * . .
2fa0 00                 .BITS  . . . . . . . .

2fa1 18                 .BITS  . . . * * . . . ; $0024
2fa2 3e                 .BITS  . . * * * * * .
2fa3 58                 .BITS  . * . * * . . .
2fa4 3c                 .BITS  . . * * * * . .
2fa5 1a                 .BITS  . . . * * . * .
2fa6 7c                 .BITS  . * * * * * . .
2fa7 18                 .BITS  . . . * * . . .
2fa8 00                 .BITS  . . . . . . . .

2fa9 00                 .BITS  . . . . . . . . ; $0025
2faa c6                 .BITS  * * . . . * * .
2fab cc                 .BITS  * * . . * * . .
2fac 18                 .BITS  . . . * * . . .
2fad 30                 .BITS  . . * * . . . .
2fae 66                 .BITS  . * * . . * * .
2faf c6                 .BITS  * * . . . * * .
2fb0 00                 .BITS  . . . . . . . .

2fb1 38                 .BITS  . . * * * . . . ; $0026
2fb2 6c                 .BITS  . * * . * * . .
2fb3 38                 .BITS  . . * * * . . .
2fb4 76                 .BITS  . * * * . * * .
2fb5 dc                 .BITS  * * . * * * . .
2fb6 cc                 .BITS  * * . . * * . .
2fb7 76                 .BITS  . * * * . * * .
2fb8 00                 .BITS  . . . . . . . .

2fb9 18                 .BITS  . . . * * . . . ; $0027
2fba 18                 .BITS  . . . * * . . .
2fbb 30                 .BITS  . . * * . . . .
2fbc 00                 .BITS  . . . . . . . .
2fbd 00                 .BITS  . . . . . . . .
2fbe 00                 .BITS  . . . . . . . .
2fbf 00                 .BITS  . . . . . . . .
2fc0 00                 .BITS  . . . . . . . .

2fc1 0c                 .BITS  . . . . * * . . ; $0028
2fc2 18                 .BITS  . . . * * . . .
2fc3 30                 .BITS  . . * * . . . .
2fc4 30                 .BITS  . . * * . . . .
2fc5 30                 .BITS  . . * * . . . .
2fc6 18                 .BITS  . . . * * . . .
2fc7 0c                 .BITS  . . . . * * . .
2fc8 00                 .BITS  . . . . . . . .

2fc9 30                 .BITS  . . * * . . . . ; $0029
2fca 18                 .BITS  . . . * * . . .
2fcb 0c                 .BITS  . . . . * * . .
2fcc 0c                 .BITS  . . . . * * . .
2fcd 0c                 .BITS  . . . . * * . .
2fce 18                 .BITS  . . . * * . . .
2fcf 30                 .BITS  . . * * . . . .
2fd0 00                 .BITS  . . . . . . . .

2fd1 00                 .BITS  . . . . . . . . ; $002A
2fd2 66                 .BITS  . * * . . * * .
2fd3 3c                 .BITS  . . * * * * . .
2fd4 ff                 .BITS  * * * * * * * *
2fd5 3c                 .BITS  . . * * * * . .
2fd6 66                 .BITS  . * * . . * * .
2fd7 00                 .BITS  . . . . . . . .
2fd8 00                 .BITS  . . . . . . . .

2fd9 00                 .BITS  . . . . . . . . ; $002B
2fda 18                 .BITS  . . . * * . . .
2fdb 18                 .BITS  . . . * * . . .
2fdc 7e                 .BITS  . * * * * * * .
2fdd 18                 .BITS  . . . * * . . .
2fde 18                 .BITS  . . . * * . . .
2fdf 00                 .BITS  . . . . . . . .
2fe0 00                 .BITS  . . . . . . . .

2fe1 00                 .BITS  . . . . . . . . ; $002C
2fe2 00                 .BITS  . . . . . . . .
2fe3 00                 .BITS  . . . . . . . .
2fe4 00                 .BITS  . . . . . . . .
2fe5 00                 .BITS  . . . . . . . .
2fe6 18                 .BITS  . . . * * . . .
2fe7 18                 .BITS  . . . * * . . .
2fe8 30                 .BITS  . . * * . . . .

2fe9 00                 .BITS  . . . . . . . . ; $002D
2fea 00                 .BITS  . . . . . . . .
2feb 00                 .BITS  . . . . . . . .
2fec 7e                 .BITS  . * * * * * * .
2fed 00                 .BITS  . . . . . . . .
2fee 00                 .BITS  . . . . . . . .
2fef 00                 .BITS  . . . . . . . .
2ff0 00                 .BITS  . . . . . . . .

2ff1 00                 .BITS  . . . . . . . . ; $002E
2ff2 00                 .BITS  . . . . . . . .
2ff3 00                 .BITS  . . . . . . . .
2ff4 00                 .BITS  . . . . . . . .
2ff5 00                 .BITS  . . . . . . . .
2ff6 18                 .BITS  . . . * * . . .
2ff7 18                 .BITS  . . . * * . . .
2ff8 00                 .BITS  . . . . . . . .

2ff9 06                 .BITS  . . . . . * * . ; $002F
2ffa 0c                 .BITS  . . . . * * . .
2ffb 18                 .BITS  . . . * * . . .
2ffc 30                 .BITS  . . * * . . . .
2ffd 60                 .BITS  . * * . . . . .
2ffe c0                 .BITS  * * . . . . . .
2fff 80                 .BITS  * . . . . . . .
3000 00                 .BITS  . . . . . . . .

3001 7c                 .BITS  . * * * * * . . ; $0030
3002 c6                 .BITS  * * . . . * * .
3003 ce                 .BITS  * * . . * * * .
3004 d6                 .BITS  * * . * . * * .
3005 e6                 .BITS  * * * . . * * .
3006 c6                 .BITS  * * . . . * * .
3007 7c                 .BITS  . * * * * * . .
3008 00                 .BITS  . . . . . . . .

3009 18                 .BITS  . . . * * . . . ; $0031
300a 38                 .BITS  . . * * * . . .
300b 18                 .BITS  . . . * * . . .
300c 18                 .BITS  . . . * * . . .
300d 18                 .BITS  . . . * * . . .
300e 18                 .BITS  . . . * * . . .
300f 7e                 .BITS  . * * * * * * .
3010 00                 .BITS  . . . . . . . .

3011 3c                 .BITS  . . * * * * . . ; $0032
3012 66                 .BITS  . * * . . * * .
3013 06                 .BITS  . . . . . * * .
3014 3c                 .BITS  . . * * * * . .
3015 60                 .BITS  . * * . . . . .
3016 66                 .BITS  . * * . . * * .
3017 7e                 .BITS  . * * * * * * .
3018 00                 .BITS  . . . . . . . .

3019 3c                 .BITS  . . * * * * . . ; $0033
301a 66                 .BITS  . * * . . * * .
301b 06                 .BITS  . . . . . * * .
301c 1c                 .BITS  . . . * * * . .
301d 06                 .BITS  . . . . . * * .
301e 66                 .BITS  . * * . . * * .
301f 3c                 .BITS  . . * * * * . .
3020 00                 .BITS  . . . . . . . .

3021 1c                 .BITS  . . . * * * . . ; $0034
3022 3c                 .BITS  . . * * * * . .
3023 6c                 .BITS  . * * . * * . .
3024 cc                 .BITS  * * . . * * . .
3025 fe                 .BITS  * * * * * * * .
3026 0c                 .BITS  . . . . * * . .
3027 1e                 .BITS  . . . * * * * .
3028 00                 .BITS  . . . . . . . .

3029 7e                 .BITS  . * * * * * * . ; $0035
302a 62                 .BITS  . * * . . . * .
302b 60                 .BITS  . * * . . . . .
302c 7c                 .BITS  . * * * * * . .
302d 06                 .BITS  . . . . . * * .
302e 66                 .BITS  . * * . . * * .
302f 3c                 .BITS  . . * * * * . .
3030 00                 .BITS  . . . . . . . .

3031 3c                 .BITS  . . * * * * . . ; $0036
3032 66                 .BITS  . * * . . * * .
3033 60                 .BITS  . * * . . . . .
3034 7c                 .BITS  . * * * * * . .
3035 66                 .BITS  . * * . . * * .
3036 66                 .BITS  . * * . . * * .
3037 3c                 .BITS  . . * * * * . .
3038 00                 .BITS  . . . . . . . .

3039 7e                 .BITS  . * * * * * * . ; $0037
303a 66                 .BITS  . * * . . * * .
303b 06                 .BITS  . . . . . * * .
303c 0c                 .BITS  . . . . * * . .
303d 18                 .BITS  . . . * * . . .
303e 18                 .BITS  . . . * * . . .
303f 18                 .BITS  . . . * * . . .
3040 00                 .BITS  . . . . . . . .

3041 3c                 .BITS  . . * * * * . . ; $0038
3042 66                 .BITS  . * * . . * * .
3043 66                 .BITS  . * * . . * * .
3044 3c                 .BITS  . . * * * * . .
3045 66                 .BITS  . * * . . * * .
3046 66                 .BITS  . * * . . * * .
3047 3c                 .BITS  . . * * * * . .
3048 00                 .BITS  . . . . . . . .

3049 3c                 .BITS  . . * * * * . . ; $0039
304a 66                 .BITS  . * * . . * * .
304b 66                 .BITS  . * * . . * * .
304c 3e                 .BITS  . . * * * * * .
304d 06                 .BITS  . . . . . * * .
304e 66                 .BITS  . * * . . * * .
304f 3c                 .BITS  . . * * * * . .
3050 00                 .BITS  . . . . . . . .

3051 00                 .BITS  . . . . . . . . ; $003A
3052 00                 .BITS  . . . . . . . .
3053 18                 .BITS  . . . * * . . .
3054 18                 .BITS  . . . * * . . .
3055 00                 .BITS  . . . . . . . .
3056 18                 .BITS  . . . * * . . .
3057 18                 .BITS  . . . * * . . .
3058 00                 .BITS  . . . . . . . .

3059 00                 .BITS  . . . . . . . . ; $003B
305a 00                 .BITS  . . . . . . . .
305b 18                 .BITS  . . . * * . . .
305c 18                 .BITS  . . . * * . . .
305d 00                 .BITS  . . . . . . . .
305e 18                 .BITS  . . . * * . . .
305f 18                 .BITS  . . . * * . . .
3060 30                 .BITS  . . * * . . . .

3061 0c                 .BITS  . . . . * * . . ; $003C
3062 18                 .BITS  . . . * * . . .
3063 30                 .BITS  . . * * . . . .
3064 60                 .BITS  . * * . . . . .
3065 30                 .BITS  . . * * . . . .
3066 18                 .BITS  . . . * * . . .
3067 0c                 .BITS  . . . . * * . .
3068 00                 .BITS  . . . . . . . .

3069 00                 .BITS  . . . . . . . . ; $003D
306a 00                 .BITS  . . . . . . . .
306b 7e                 .BITS  . * * * * * * .
306c 00                 .BITS  . . . . . . . .
306d 00                 .BITS  . . . . . . . .
306e 7e                 .BITS  . * * * * * * .
306f 00                 .BITS  . . . . . . . .
3070 00                 .BITS  . . . . . . . .

3071 60                 .BITS  . * * . . . . . ; $003E
3072 30                 .BITS  . . * * . . . .
3073 18                 .BITS  . . . * * . . .
3074 0c                 .BITS  . . . . * * . .
3075 18                 .BITS  . . . * * . . .
3076 30                 .BITS  . . * * . . . .
3077 60                 .BITS  . * * . . . . .
3078 00                 .BITS  . . . . . . . .

3079 3c                 .BITS  . . * * * * . . ; $003F
307a 66                 .BITS  . * * . . * * .
307b 66                 .BITS  . * * . . * * .
307c 0c                 .BITS  . . . . * * . .
307d 18                 .BITS  . . . * * . . .
307e 00                 .BITS  . . . . . . . .
307f 18                 .BITS  . . . * * . . .
3080 00                 .BITS  . . . . . . . .

3081 7c                 .BITS  . * * * * * . . ; $0040
3082 c6                 .BITS  * * . . . * * .
3083 de                 .BITS  * * . * * * * .
3084 de                 .BITS  * * . * * * * .
3085 de                 .BITS  * * . * * * * .
3086 c0                 .BITS  * * . . . . . .
3087 7c                 .BITS  . * * * * * . .
3088 00                 .BITS  . . . . . . . .

3089 18                 .BITS  . . . * * . . . ; $0041
308a 3c                 .BITS  . . * * * * . .
308b 66                 .BITS  . * * . . * * .
308c 66                 .BITS  . * * . . * * .
308d 7e                 .BITS  . * * * * * * .
308e 66                 .BITS  . * * . . * * .
308f 66                 .BITS  . * * . . * * .
3090 00                 .BITS  . . . . . . . .

3091 fc                 .BITS  * * * * * * . . ; $0042
3092 66                 .BITS  . * * . . * * .
3093 66                 .BITS  . * * . . * * .
3094 7c                 .BITS  . * * * * * . .
3095 66                 .BITS  . * * . . * * .
3096 66                 .BITS  . * * . . * * .
3097 fc                 .BITS  * * * * * * . .
3098 00                 .BITS  . . . . . . . .

3099 3c                 .BITS  . . * * * * . . ; $0043
309a 66                 .BITS  . * * . . * * .
309b c0                 .BITS  * * . . . . . .
309c c0                 .BITS  * * . . . . . .
309d c0                 .BITS  * * . . . . . .
309e 66                 .BITS  . * * . . * * .
309f 3c                 .BITS  . . * * * * . .
30a0 00                 .BITS  . . . . . . . .

30a1 f8                 .BITS  * * * * * . . . ; $0044
30a2 6c                 .BITS  . * * . * * . .
30a3 66                 .BITS  . * * . . * * .
30a4 66                 .BITS  . * * . . * * .
30a5 66                 .BITS  . * * . . * * .
30a6 6c                 .BITS  . * * . * * . .
30a7 f8                 .BITS  * * * * * . . .
30a8 00                 .BITS  . . . . . . . .

30a9 fe                 .BITS  * * * * * * * . ; $0045
30aa 62                 .BITS  . * * . . . * .
30ab 68                 .BITS  . * * . * . . .
30ac 78                 .BITS  . * * * * . . .
30ad 68                 .BITS  . * * . * . . .
30ae 62                 .BITS  . * * . . . * .
30af fe                 .BITS  * * * * * * * .
30b0 00                 .BITS  . . . . . . . .

30b1 fe                 .BITS  * * * * * * * . ; $0046
30b2 62                 .BITS  . * * . . . * .
30b3 68                 .BITS  . * * . * . . .
30b4 78                 .BITS  . * * * * . . .
30b5 68                 .BITS  . * * . * . . .
30b6 60                 .BITS  . * * . . . . .
30b7 f0                 .BITS  * * * * . . . .
30b8 00                 .BITS  . . . . . . . .

30b9 3c                 .BITS  . . * * * * . . ; $0047
30ba 66                 .BITS  . * * . . * * .
30bb c0                 .BITS  * * . . . . . .
30bc c0                 .BITS  * * . . . . . .
30bd ce                 .BITS  * * . . * * * .
30be 66                 .BITS  . * * . . * * .
30bf 3e                 .BITS  . . * * * * * .
30c0 00                 .BITS  . . . . . . . .

30c1 66                 .BITS  . * * . . * * . ; $0048
30c2 66                 .BITS  . * * . . * * .
30c3 66                 .BITS  . * * . . * * .
30c4 7e                 .BITS  . * * * * * * .
30c5 66                 .BITS  . * * . . * * .
30c6 66                 .BITS  . * * . . * * .
30c7 66                 .BITS  . * * . . * * .
30c8 00                 .BITS  . . . . . . . .

30c9 7e                 .BITS  . * * * * * * . ; $0049
30ca 18                 .BITS  . . . * * . . .
30cb 18                 .BITS  . . . * * . . .
30cc 18                 .BITS  . . . * * . . .
30cd 18                 .BITS  . . . * * . . .
30ce 18                 .BITS  . . . * * . . .
30cf 7e                 .BITS  . * * * * * * .
30d0 00                 .BITS  . . . . . . . .

30d1 1e                 .BITS  . . . * * * * . ; $004A
30d2 0c                 .BITS  . . . . * * . .
30d3 0c                 .BITS  . . . . * * . .
30d4 0c                 .BITS  . . . . * * . .
30d5 cc                 .BITS  * * . . * * . .
30d6 cc                 .BITS  * * . . * * . .
30d7 78                 .BITS  . * * * * . . .
30d8 00                 .BITS  . . . . . . . .

30d9 e6                 .BITS  * * * . . * * . ; $004B
30da 66                 .BITS  . * * . . * * .
30db 6c                 .BITS  . * * . * * . .
30dc 78                 .BITS  . * * * * . . .
30dd 6c                 .BITS  . * * . * * . .
30de 66                 .BITS  . * * . . * * .
30df e6                 .BITS  * * * . . * * .
30e0 00                 .BITS  . . . . . . . .

30e1 f0                 .BITS  * * * * . . . . ; $004C
30e2 60                 .BITS  . * * . . . . .
30e3 60                 .BITS  . * * . . . . .
30e4 60                 .BITS  . * * . . . . .
30e5 62                 .BITS  . * * . . . * .
30e6 66                 .BITS  . * * . . * * .
30e7 fe                 .BITS  * * * * * * * .
30e8 00                 .BITS  . . . . . . . .

30e9 c6                 .BITS  * * . . . * * . ; $004D
30ea ee                 .BITS  * * * . * * * .
30eb fe                 .BITS  * * * * * * * .
30ec fe                 .BITS  * * * * * * * .
30ed d6                 .BITS  * * . * . * * .
30ee c6                 .BITS  * * . . . * * .
30ef c6                 .BITS  * * . . . * * .
30f0 00                 .BITS  . . . . . . . .

30f1 c6                 .BITS  * * . . . * * . ; $004E
30f2 e6                 .BITS  * * * . . * * .
30f3 f6                 .BITS  * * * * . * * .
30f4 de                 .BITS  * * . * * * * .
30f5 ce                 .BITS  * * . . * * * .
30f6 c6                 .BITS  * * . . . * * .
30f7 c6                 .BITS  * * . . . * * .
30f8 00                 .BITS  . . . . . . . .

30f9 38                 .BITS  . . * * * . . . ; $004F
30fa 6c                 .BITS  . * * . * * . .
30fb c6                 .BITS  * * . . . * * .
30fc c6                 .BITS  * * . . . * * .
30fd c6                 .BITS  * * . . . * * .
30fe 6c                 .BITS  . * * . * * . .
30ff 38                 .BITS  . . * * * . . .
3100 00                 .BITS  . . . . . . . .

3101 fc                 .BITS  * * * * * * . . ; $0050
3102 66                 .BITS  . * * . . * * .
3103 66                 .BITS  . * * . . * * .
3104 7c                 .BITS  . * * * * * . .
3105 60                 .BITS  . * * . . . . .
3106 60                 .BITS  . * * . . . . .
3107 f0                 .BITS  * * * * . . . .
3108 00                 .BITS  . . . . . . . .

3109 38                 .BITS  . . * * * . . . ; $0051
310a 6c                 .BITS  . * * . * * . .
310b c6                 .BITS  * * . . . * * .
310c c6                 .BITS  * * . . . * * .
310d da                 .BITS  * * . * * . * .
310e cc                 .BITS  * * . . * * . .
310f 76                 .BITS  . * * * . * * .
3110 00                 .BITS  . . . . . . . .

3111 fc                 .BITS  * * * * * * . . ; $0052
3112 66                 .BITS  . * * . . * * .
3113 66                 .BITS  . * * . . * * .
3114 7c                 .BITS  . * * * * * . .
3115 6c                 .BITS  . * * . * * . .
3116 66                 .BITS  . * * . . * * .
3117 e6                 .BITS  * * * . . * * .
3118 00                 .BITS  . . . . . . . .

3119 3c                 .BITS  . . * * * * . . ; $0053
311a 66                 .BITS  . * * . . * * .
311b 60                 .BITS  . * * . . . . .
311c 3c                 .BITS  . . * * * * . .
311d 06                 .BITS  . . . . . * * .
311e 66                 .BITS  . * * . . * * .
311f 3c                 .BITS  . . * * * * . .
3120 00                 .BITS  . . . . . . . .

3121 7e                 .BITS  . * * * * * * . ; $0054
3122 5a                 .BITS  . * . * * . * .
3123 18                 .BITS  . . . * * . . .
3124 18                 .BITS  . . . * * . . .
3125 18                 .BITS  . . . * * . . .
3126 18                 .BITS  . . . * * . . .
3127 3c                 .BITS  . . * * * * . .
3128 00                 .BITS  . . . . . . . .

3129 66                 .BITS  . * * . . * * . ; $0055
312a 66                 .BITS  . * * . . * * .
312b 66                 .BITS  . * * . . * * .
312c 66                 .BITS  . * * . . * * .
312d 66                 .BITS  . * * . . * * .
312e 66                 .BITS  . * * . . * * .
312f 3c                 .BITS  . . * * * * . .
3130 00                 .BITS  . . . . . . . .

3131 66                 .BITS  . * * . . * * . ; $0056
3132 66                 .BITS  . * * . . * * .
3133 66                 .BITS  . * * . . * * .
3134 66                 .BITS  . * * . . * * .
3135 66                 .BITS  . * * . . * * .
3136 3c                 .BITS  . . * * * * . .
3137 18                 .BITS  . . . * * . . .
3138 00                 .BITS  . . . . . . . .

3139 c6                 .BITS  * * . . . * * . ; $0057
313a c6                 .BITS  * * . . . * * .
313b c6                 .BITS  * * . . . * * .
313c d6                 .BITS  * * . * . * * .
313d fe                 .BITS  * * * * * * * .
313e ee                 .BITS  * * * . * * * .
313f c6                 .BITS  * * . . . * * .
3140 00                 .BITS  . . . . . . . .

3141 c6                 .BITS  * * . . . * * . ; $0058
3142 6c                 .BITS  . * * . * * . .
3143 38                 .BITS  . . * * * . . .
3144 38                 .BITS  . . * * * . . .
3145 6c                 .BITS  . * * . * * . .
3146 c6                 .BITS  * * . . . * * .
3147 c6                 .BITS  * * . . . * * .
3148 00                 .BITS  . . . . . . . .

3149 66                 .BITS  . * * . . * * . ; $0059
314a 66                 .BITS  . * * . . * * .
314b 66                 .BITS  . * * . . * * .
314c 3c                 .BITS  . . * * * * . .
314d 18                 .BITS  . . . * * . . .
314e 18                 .BITS  . . . * * . . .
314f 3c                 .BITS  . . * * * * . .
3150 00                 .BITS  . . . . . . . .

3151 fe                 .BITS  * * * * * * * . ; $005A
3152 c6                 .BITS  * * . . . * * .
3153 8c                 .BITS  * . . . * * . .
3154 18                 .BITS  . . . * * . . .
3155 32                 .BITS  . . * * . . * .
3156 66                 .BITS  . * * . . * * .
3157 fe                 .BITS  * * * * * * * .
3158 00                 .BITS  . . . . . . . .

3159 3c                 .BITS  . . * * * * . . ; $005B
315a 30                 .BITS  . . * * . . . .
315b 30                 .BITS  . . * * . . . .
315c 30                 .BITS  . . * * . . . .
315d 30                 .BITS  . . * * . . . .
315e 30                 .BITS  . . * * . . . .
315f 3c                 .BITS  . . * * * * . .
3160 00                 .BITS  . . . . . . . .

3161 c0                 .BITS  * * . . . . . . ; $005C
3162 60                 .BITS  . * * . . . . .
3163 30                 .BITS  . . * * . . . .
3164 18                 .BITS  . . . * * . . .
3165 0c                 .BITS  . . . . * * . .
3166 06                 .BITS  . . . . . * * .
3167 02                 .BITS  . . . . . . * .
3168 00                 .BITS  . . . . . . . .

3169 3c                 .BITS  . . * * * * . . ; $005D
316a 0c                 .BITS  . . . . * * . .
316b 0c                 .BITS  . . . . * * . .
316c 0c                 .BITS  . . . . * * . .
316d 0c                 .BITS  . . . . * * . .
316e 0c                 .BITS  . . . . * * . .
316f 3c                 .BITS  . . * * * * . .
3170 00                 .BITS  . . . . . . . .

3171 18                 .BITS  . . . * * . . . ; $005E
3172 3c                 .BITS  . . * * * * . .
3173 66                 .BITS  . * * . . * * .
3174 00                 .BITS  . . . . . . . .
3175 00                 .BITS  . . . . . . . .
3176 00                 .BITS  . . . . . . . .
3177 00                 .BITS  . . . . . . . .
3178 00                 .BITS  . . . . . . . .

3179 00                 .BITS  . . . . . . . . ; $005F
317a 00                 .BITS  . . . . . . . .
317b 00                 .BITS  . . . . . . . .
317c 00                 .BITS  . . . . . . . .
317d 00                 .BITS  . . . . . . . .
317e 00                 .BITS  . . . . . . . .
317f 00                 .BITS  . . . . . . . .
3180 ff                 .BITS  * * * * * * * *

3181 30                 .BITS  . . * * . . . . ; $0060
3182 18                 .BITS  . . . * * . . .
3183 0c                 .BITS  . . . . * * . .
3184 00                 .BITS  . . . . . . . .
3185 00                 .BITS  . . . . . . . .
3186 00                 .BITS  . . . . . . . .
3187 00                 .BITS  . . . . . . . .
3188 00                 .BITS  . . . . . . . .

3189 00                 .BITS  . . . . . . . . ; $0061
318a 00                 .BITS  . . . . . . . .
318b 78                 .BITS  . * * * * . . .
318c 0c                 .BITS  . . . . * * . .
318d 7c                 .BITS  . * * * * * . .
318e cc                 .BITS  * * . . * * . .
318f 76                 .BITS  . * * * . * * .
3190 00                 .BITS  . . . . . . . .

3191 e0                 .BITS  * * * . . . . . ; $0062
3192 60                 .BITS  . * * . . . . .
3193 7c                 .BITS  . * * * * * . .
3194 66                 .BITS  . * * . . * * .
3195 66                 .BITS  . * * . . * * .
3196 66                 .BITS  . * * . . * * .
3197 dc                 .BITS  * * . * * * . .
3198 00                 .BITS  . . . . . . . .

3199 00                 .BITS  . . . . . . . . ; $0063
319a 00                 .BITS  . . . . . . . .
319b 3c                 .BITS  . . * * * * . .
319c 66                 .BITS  . * * . . * * .
319d 60                 .BITS  . * * . . . . .
319e 66                 .BITS  . * * . . * * .
319f 3c                 .BITS  . . * * * * . .
31a0 00                 .BITS  . . . . . . . .

31a1 1c                 .BITS  . . . * * * . . ; $0064
31a2 0c                 .BITS  . . . . * * . .
31a3 7c                 .BITS  . * * * * * . .
31a4 cc                 .BITS  * * . . * * . .
31a5 cc                 .BITS  * * . . * * . .
31a6 cc                 .BITS  * * . . * * . .
31a7 76                 .BITS  . * * * . * * .
31a8 00                 .BITS  . . . . . . . .

31a9 00                 .BITS  . . . . . . . . ; $0065
31aa 00                 .BITS  . . . . . . . .
31ab 3c                 .BITS  . . * * * * . .
31ac 66                 .BITS  . * * . . * * .
31ad 7e                 .BITS  . * * * * * * .
31ae 60                 .BITS  . * * . . . . .
31af 3c                 .BITS  . . * * * * . .
31b0 00                 .BITS  . . . . . . . .

31b1 1c                 .BITS  . . . * * * . . ; $0066
31b2 36                 .BITS  . . * * . * * .
31b3 30                 .BITS  . . * * . . . .
31b4 78                 .BITS  . * * * * . . .
31b5 30                 .BITS  . . * * . . . .
31b6 30                 .BITS  . . * * . . . .
31b7 78                 .BITS  . * * * * . . .
31b8 00                 .BITS  . . . . . . . .

31b9 00                 .BITS  . . . . . . . . ; $0067
31ba 00                 .BITS  . . . . . . . .
31bb 3e                 .BITS  . . * * * * * .
31bc 66                 .BITS  . * * . . * * .
31bd 66                 .BITS  . * * . . * * .
31be 3e                 .BITS  . . * * * * * .
31bf 06                 .BITS  . . . . . * * .
31c0 7c                 .BITS  . * * * * * . .

31c1 e0                 .BITS  * * * . . . . . ; $0068
31c2 60                 .BITS  . * * . . . . .
31c3 6c                 .BITS  . * * . * * . .
31c4 76                 .BITS  . * * * . * * .
31c5 66                 .BITS  . * * . . * * .
31c6 66                 .BITS  . * * . . * * .
31c7 e6                 .BITS  * * * . . * * .
31c8 00                 .BITS  . . . . . . . .

31c9 18                 .BITS  . . . * * . . . ; $0069
31ca 00                 .BITS  . . . . . . . .
31cb 38                 .BITS  . . * * * . . .
31cc 18                 .BITS  . . . * * . . .
31cd 18                 .BITS  . . . * * . . .
31ce 18                 .BITS  . . . * * . . .
31cf 3c                 .BITS  . . * * * * . .
31d0 00                 .BITS  . . . . . . . .

31d1 06                 .BITS  . . . . . * * . ; $006A
31d2 00                 .BITS  . . . . . . . .
31d3 0e                 .BITS  . . . . * * * .
31d4 06                 .BITS  . . . . . * * .
31d5 06                 .BITS  . . . . . * * .
31d6 66                 .BITS  . * * . . * * .
31d7 66                 .BITS  . * * . . * * .
31d8 3c                 .BITS  . . * * * * . .

31d9 e0                 .BITS  * * * . . . . . ; $006B
31da 60                 .BITS  . * * . . . . .
31db 66                 .BITS  . * * . . * * .
31dc 6c                 .BITS  . * * . * * . .
31dd 78                 .BITS  . * * * * . . .
31de 6c                 .BITS  . * * . * * . .
31df e6                 .BITS  * * * . . * * .
31e0 00                 .BITS  . . . . . . . .

31e1 38                 .BITS  . . * * * . . . ; $006C
31e2 18                 .BITS  . . . * * . . .
31e3 18                 .BITS  . . . * * . . .
31e4 18                 .BITS  . . . * * . . .
31e5 18                 .BITS  . . . * * . . .
31e6 18                 .BITS  . . . * * . . .
31e7 3c                 .BITS  . . * * * * . .
31e8 00                 .BITS  . . . . . . . .

31e9 00                 .BITS  . . . . . . . . ; $006D
31ea 00                 .BITS  . . . . . . . .
31eb 6c                 .BITS  . * * . * * . .
31ec fe                 .BITS  * * * * * * * .
31ed d6                 .BITS  * * . * . * * .
31ee d6                 .BITS  * * . * . * * .
31ef c6                 .BITS  * * . . . * * .
31f0 00                 .BITS  . . . . . . . .

31f1 00                 .BITS  . . . . . . . . ; $006E
31f2 00                 .BITS  . . . . . . . .
31f3 dc                 .BITS  * * . * * * . .
31f4 66                 .BITS  . * * . . * * .
31f5 66                 .BITS  . * * . . * * .
31f6 66                 .BITS  . * * . . * * .
31f7 66                 .BITS  . * * . . * * .
31f8 00                 .BITS  . . . . . . . .

31f9 00                 .BITS  . . . . . . . . ; $006F
31fa 00                 .BITS  . . . . . . . .
31fb 3c                 .BITS  . . * * * * . .
31fc 66                 .BITS  . * * . . * * .
31fd 66                 .BITS  . * * . . * * .
31fe 66                 .BITS  . * * . . * * .
31ff 3c                 .BITS  . . * * * * . .
3200 00                 .BITS  . . . . . . . .

3201 00                 .BITS  . . . . . . . . ; $0070
3202 00                 .BITS  . . . . . . . .
3203 dc                 .BITS  * * . * * * . .
3204 66                 .BITS  . * * . . * * .
3205 66                 .BITS  . * * . . * * .
3206 7c                 .BITS  . * * * * * . .
3207 60                 .BITS  . * * . . . . .
3208 f0                 .BITS  * * * * . . . .

3209 00                 .BITS  . . . . . . . . ; $0071
320a 00                 .BITS  . . . . . . . .
320b 76                 .BITS  . * * * . * * .
320c cc                 .BITS  * * . . * * . .
320d cc                 .BITS  * * . . * * . .
320e 7c                 .BITS  . * * * * * . .
320f 0c                 .BITS  . . . . * * . .
3210 1e                 .BITS  . . . * * * * .

3211 00                 .BITS  . . . . . . . . ; $0072
3212 00                 .BITS  . . . . . . . .
3213 dc                 .BITS  * * . * * * . .
3214 76                 .BITS  . * * * . * * .
3215 60                 .BITS  . * * . . . . .
3216 60                 .BITS  . * * . . . . .
3217 f0                 .BITS  * * * * . . . .
3218 00                 .BITS  . . . . . . . .

3219 00                 .BITS  . . . . . . . . ; $0073
321a 00                 .BITS  . . . . . . . .
321b 3c                 .BITS  . . * * * * . .
321c 60                 .BITS  . * * . . . . .
321d 3c                 .BITS  . . * * * * . .
321e 06                 .BITS  . . . . . * * .
321f 7c                 .BITS  . * * * * * . .
3220 00                 .BITS  . . . . . . . .

3221 30                 .BITS  . . * * . . . . ; $0074
3222 30                 .BITS  . . * * . . . .
3223 7c                 .BITS  . * * * * * . .
3224 30                 .BITS  . . * * . . . .
3225 30                 .BITS  . . * * . . . .
3226 36                 .BITS  . . * * . * * .
3227 1c                 .BITS  . . . * * * . .
3228 00                 .BITS  . . . . . . . .

3229 00                 .BITS  . . . . . . . . ; $0075
322a 00                 .BITS  . . . . . . . .
322b 66                 .BITS  . * * . . * * .
322c 66                 .BITS  . * * . . * * .
322d 66                 .BITS  . * * . . * * .
322e 66                 .BITS  . * * . . * * .
322f 3e                 .BITS  . . * * * * * .
3230 00                 .BITS  . . . . . . . .

3231 00                 .BITS  . . . . . . . . ; $0076
3232 00                 .BITS  . . . . . . . .
3233 66                 .BITS  . * * . . * * .
3234 66                 .BITS  . * * . . * * .
3235 66                 .BITS  . * * . . * * .
3236 3c                 .BITS  . . * * * * . .
3237 18                 .BITS  . . . * * . . .
3238 00                 .BITS  . . . . . . . .

3239 00                 .BITS  . . . . . . . . ; $0077
323a 00                 .BITS  . . . . . . . .
323b c6                 .BITS  * * . . . * * .
323c d6                 .BITS  * * . * . * * .
323d d6                 .BITS  * * . * . * * .
323e fe                 .BITS  * * * * * * * .
323f 6c                 .BITS  . * * . * * . .
3240 00                 .BITS  . . . . . . . .

3241 00                 .BITS  . . . . . . . . ; $0078
3242 00                 .BITS  . . . . . . . .
3243 c6                 .BITS  * * . . . * * .
3244 6c                 .BITS  . * * . * * . .
3245 38                 .BITS  . . * * * . . .
3246 6c                 .BITS  . * * . * * . .
3247 c6                 .BITS  * * . . . * * .
3248 00                 .BITS  . . . . . . . .

3249 00                 .BITS  . . . . . . . . ; $0079
324a 00                 .BITS  . . . . . . . .
324b 66                 .BITS  . * * . . * * .
324c 66                 .BITS  . * * . . * * .
324d 66                 .BITS  . * * . . * * .
324e 3e                 .BITS  . . * * * * * .
324f 06                 .BITS  . . . . . * * .
3250 7c                 .BITS  . * * * * * . .

3251 00                 .BITS  . . . . . . . . ; $007A
3252 00                 .BITS  . . . . . . . .
3253 7e                 .BITS  . * * * * * * .
3254 4c                 .BITS  . * . . * * . .
3255 18                 .BITS  . . . * * . . .
3256 32                 .BITS  . . * * . . * .
3257 7e                 .BITS  . * * * * * * .
3258 00                 .BITS  . . . . . . . .

3259 0e                 .BITS  . . . . * * * . ; $007B
325a 18                 .BITS  . . . * * . . .
325b 18                 .BITS  . . . * * . . .
325c 70                 .BITS  . * * * . . . .
325d 18                 .BITS  . . . * * . . .
325e 18                 .BITS  . . . * * . . .
325f 0e                 .BITS  . . . . * * * .
3260 00                 .BITS  . . . . . . . .

3261 18                 .BITS  . . . * * . . . ; $007C
3262 18                 .BITS  . . . * * . . .
3263 18                 .BITS  . . . * * . . .
3264 18                 .BITS  . . . * * . . .
3265 18                 .BITS  . . . * * . . .
3266 18                 .BITS  . . . * * . . .
3267 18                 .BITS  . . . * * . . .
3268 00                 .BITS  . . . . . . . .

3269 70                 .BITS  . * * * . . . . ; $007D
326a 18                 .BITS  . . . * * . . .
326b 18                 .BITS  . . . * * . . .
326c 0e                 .BITS  . . . . * * * .
326d 18                 .BITS  . . . * * . . .
326e 18                 .BITS  . . . * * . . .
326f 70                 .BITS  . * * * . . . .
3270 00                 .BITS  . . . . . . . .

3271 76                 .BITS  . * * * . * * . ; $007E
3272 dc                 .BITS  * * . * * * . .
3273 00                 .BITS  . . . . . . . .
3274 00                 .BITS  . . . . . . . .
3275 00                 .BITS  . . . . . . . .
3276 00                 .BITS  . . . . . . . .
3277 00                 .BITS  . . . . . . . .
3278 00                 .BITS  . . . . . . . .

3279 cc                 .BITS  * * . . * * . . ; $007F
327a 33                 .BITS  . . * * . . * *
327b cc                 .BITS  * * . . * * . .
327c 33                 .BITS  . . * * . . * *
327d cc                 .BITS  * * . . * * . .
327e 33                 .BITS  . . * * . . * *
327f cc                 .BITS  * * . . * * . .
3280 33                 .BITS  . . * * . . * *

3281 00                 .BITS  . . . . . . . . ; $0080
3282 00                 .BITS  . . . . . . . .
3283 00                 .BITS  . . . . . . . .
3284 00                 .BITS  . . . . . . . .
3285 00                 .BITS  . . . . . . . .
3286 00                 .BITS  . . . . . . . .
3287 00                 .BITS  . . . . . . . .
3288 00                 .BITS  . . . . . . . .

3289 f0                 .BITS  * * * * . . . . ; $0081
328a f0                 .BITS  * * * * . . . .
328b f0                 .BITS  * * * * . . . .
328c f0                 .BITS  * * * * . . . .
328d 00                 .BITS  . . . . . . . .
328e 00                 .BITS  . . . . . . . .
328f 00                 .BITS  . . . . . . . .
3290 00                 .BITS  . . . . . . . .

3291 0f                 .BITS  . . . . * * * * ; $0082
3292 0f                 .BITS  . . . . * * * *
3293 0f                 .BITS  . . . . * * * *
3294 0f                 .BITS  . . . . * * * *
3295 00                 .BITS  . . . . . . . .
3296 00                 .BITS  . . . . . . . .
3297 00                 .BITS  . . . . . . . .
3298 00                 .BITS  . . . . . . . .

3299 ff                 .BITS  * * * * * * * * ; $0083
329a ff                 .BITS  * * * * * * * *
329b ff                 .BITS  * * * * * * * *
329c ff                 .BITS  * * * * * * * *
329d 00                 .BITS  . . . . . . . .
329e 00                 .BITS  . . . . . . . .
329f 00                 .BITS  . . . . . . . .
32a0 00                 .BITS  . . . . . . . .

32a1 00                 .BITS  . . . . . . . . ; $0084
32a2 00                 .BITS  . . . . . . . .
32a3 00                 .BITS  . . . . . . . .
32a4 00                 .BITS  . . . . . . . .
32a5 f0                 .BITS  * * * * . . . .
32a6 f0                 .BITS  * * * * . . . .
32a7 f0                 .BITS  * * * * . . . .
32a8 f0                 .BITS  * * * * . . . .

32a9 f0                 .BITS  * * * * . . . . ; $0085
32aa f0                 .BITS  * * * * . . . .
32ab f0                 .BITS  * * * * . . . .
32ac f0                 .BITS  * * * * . . . .
32ad f0                 .BITS  * * * * . . . .
32ae f0                 .BITS  * * * * . . . .
32af f0                 .BITS  * * * * . . . .
32b0 f0                 .BITS  * * * * . . . .

32b1 0f                 .BITS  . . . . * * * * ; $0086
32b2 0f                 .BITS  . . . . * * * *
32b3 0f                 .BITS  . . . . * * * *
32b4 0f                 .BITS  . . . . * * * *
32b5 f0                 .BITS  * * * * . . . .
32b6 f0                 .BITS  * * * * . . . .
32b7 f0                 .BITS  * * * * . . . .
32b8 f0                 .BITS  * * * * . . . .

32b9 ff                 .BITS  * * * * * * * * ; $0087
32ba ff                 .BITS  * * * * * * * *
32bb ff                 .BITS  * * * * * * * *
32bc ff                 .BITS  * * * * * * * *
32bd f0                 .BITS  * * * * . . . .
32be f0                 .BITS  * * * * . . . .
32bf f0                 .BITS  * * * * . . . .
32c0 f0                 .BITS  * * * * . . . .

32c1 00                 .BITS  . . . . . . . . ; $0088
32c2 00                 .BITS  . . . . . . . .
32c3 00                 .BITS  . . . . . . . .
32c4 00                 .BITS  . . . . . . . .
32c5 0f                 .BITS  . . . . * * * *
32c6 0f                 .BITS  . . . . * * * *
32c7 0f                 .BITS  . . . . * * * *
32c8 0f                 .BITS  . . . . * * * *

32c9 f0                 .BITS  * * * * . . . . ; $0089
32ca f0                 .BITS  * * * * . . . .
32cb f0                 .BITS  * * * * . . . .
32cc f0                 .BITS  * * * * . . . .
32cd 0f                 .BITS  . . . . * * * *
32ce 0f                 .BITS  . . . . * * * *
32cf 0f                 .BITS  . . . . * * * *
32d0 0f                 .BITS  . . . . * * * *

32d1 0f                 .BITS  . . . . * * * * ; $008A
32d2 0f                 .BITS  . . . . * * * *
32d3 0f                 .BITS  . . . . * * * *
32d4 0f                 .BITS  . . . . * * * *
32d5 0f                 .BITS  . . . . * * * *
32d6 0f                 .BITS  . . . . * * * *
32d7 0f                 .BITS  . . . . * * * *
32d8 0f                 .BITS  . . . . * * * *

32d9 ff                 .BITS  * * * * * * * * ; $008B
32da ff                 .BITS  * * * * * * * *
32db ff                 .BITS  * * * * * * * *
32dc ff                 .BITS  * * * * * * * *
32dd 0f                 .BITS  . . . . * * * *
32de 0f                 .BITS  . . . . * * * *
32df 0f                 .BITS  . . . . * * * *
32e0 0f                 .BITS  . . . . * * * *

32e1 00                 .BITS  . . . . . . . . ; $008C
32e2 00                 .BITS  . . . . . . . .
32e3 00                 .BITS  . . . . . . . .
32e4 00                 .BITS  . . . . . . . .
32e5 ff                 .BITS  * * * * * * * *
32e6 ff                 .BITS  * * * * * * * *
32e7 ff                 .BITS  * * * * * * * *
32e8 ff                 .BITS  * * * * * * * *

32e9 f0                 .BITS  * * * * . . . . ; $008D
32ea f0                 .BITS  * * * * . . . .
32eb f0                 .BITS  * * * * . . . .
32ec f0                 .BITS  * * * * . . . .
32ed ff                 .BITS  * * * * * * * *
32ee ff                 .BITS  * * * * * * * *
32ef ff                 .BITS  * * * * * * * *
32f0 ff                 .BITS  * * * * * * * *

32f1 0f                 .BITS  . . . . * * * * ; $008E
32f2 0f                 .BITS  . . . . * * * *
32f3 0f                 .BITS  . . . . * * * *
32f4 0f                 .BITS  . . . . * * * *
32f5 ff                 .BITS  * * * * * * * *
32f6 ff                 .BITS  * * * * * * * *
32f7 ff                 .BITS  * * * * * * * *
32f8 ff                 .BITS  * * * * * * * *

32f9 ff                 .BITS  * * * * * * * * ; $008F
32fa ff                 .BITS  * * * * * * * *
32fb ff                 .BITS  * * * * * * * *
32fc ff                 .BITS  * * * * * * * *
32fd ff                 .BITS  * * * * * * * *
32fe ff                 .BITS  * * * * * * * *
32ff ff                 .BITS  * * * * * * * *
3300 ff                 .BITS  * * * * * * * *

3301 00                 .BITS  . . . . . . . . ; $0090
3302 00                 .BITS  . . . . . . . .
3303 00                 .BITS  . . . . . . . .
3304 18                 .BITS  . . . * * . . .
3305 18                 .BITS  . . . * * . . .
3306 00                 .BITS  . . . . . . . .
3307 00                 .BITS  . . . . . . . .
3308 00                 .BITS  . . . . . . . .

3309 18                 .BITS  . . . * * . . . ; $0091
330a 18                 .BITS  . . . * * . . .
330b 18                 .BITS  . . . * * . . .
330c 18                 .BITS  . . . * * . . .
330d 18                 .BITS  . . . * * . . .
330e 00                 .BITS  . . . . . . . .
330f 00                 .BITS  . . . . . . . .
3310 00                 .BITS  . . . . . . . .

3311 00                 .BITS  . . . . . . . . ; $0092
3312 00                 .BITS  . . . . . . . .
3313 00                 .BITS  . . . . . . . .
3314 1f                 .BITS  . . . * * * * *
3315 1f                 .BITS  . . . * * * * *
3316 00                 .BITS  . . . . . . . .
3317 00                 .BITS  . . . . . . . .
3318 00                 .BITS  . . . . . . . .

3319 18                 .BITS  . . . * * . . . ; $0093
331a 18                 .BITS  . . . * * . . .
331b 18                 .BITS  . . . * * . . .
331c 1f                 .BITS  . . . * * * * *
331d 0f                 .BITS  . . . . * * * *
331e 00                 .BITS  . . . . . . . .
331f 00                 .BITS  . . . . . . . .
3320 00                 .BITS  . . . . . . . .

3321 00                 .BITS  . . . . . . . . ; $0094
3322 00                 .BITS  . . . . . . . .
3323 00                 .BITS  . . . . . . . .
3324 18                 .BITS  . . . * * . . .
3325 18                 .BITS  . . . * * . . .
3326 18                 .BITS  . . . * * . . .
3327 18                 .BITS  . . . * * . . .
3328 18                 .BITS  . . . * * . . .

3329 18                 .BITS  . . . * * . . . ; $0095
332a 18                 .BITS  . . . * * . . .
332b 18                 .BITS  . . . * * . . .
332c 18                 .BITS  . . . * * . . .
332d 18                 .BITS  . . . * * . . .
332e 18                 .BITS  . . . * * . . .
332f 18                 .BITS  . . . * * . . .
3330 18                 .BITS  . . . * * . . .

3331 00                 .BITS  . . . . . . . . ; $0096
3332 00                 .BITS  . . . . . . . .
3333 00                 .BITS  . . . . . . . .
3334 0f                 .BITS  . . . . * * * *
3335 1f                 .BITS  . . . * * * * *
3336 18                 .BITS  . . . * * . . .
3337 18                 .BITS  . . . * * . . .
3338 18                 .BITS  . . . * * . . .

3339 18                 .BITS  . . . * * . . . ; $0097
333a 18                 .BITS  . . . * * . . .
333b 18                 .BITS  . . . * * . . .
333c 1f                 .BITS  . . . * * * * *
333d 1f                 .BITS  . . . * * * * *
333e 18                 .BITS  . . . * * . . .
333f 18                 .BITS  . . . * * . . .
3340 18                 .BITS  . . . * * . . .

3341 00                 .BITS  . . . . . . . . ; $0098
3342 00                 .BITS  . . . . . . . .
3343 00                 .BITS  . . . . . . . .
3344 f8                 .BITS  * * * * * . . .
3345 f8                 .BITS  * * * * * . . .
3346 00                 .BITS  . . . . . . . .
3347 00                 .BITS  . . . . . . . .
3348 00                 .BITS  . . . . . . . .

3349 18                 .BITS  . . . * * . . . ; $0099
334a 18                 .BITS  . . . * * . . .
334b 18                 .BITS  . . . * * . . .
334c f8                 .BITS  * * * * * . . .
334d f0                 .BITS  * * * * . . . .
334e 00                 .BITS  . . . . . . . .
334f 00                 .BITS  . . . . . . . .
3350 00                 .BITS  . . . . . . . .

3351 00                 .BITS  . . . . . . . . ; $009A
3352 00                 .BITS  . . . . . . . .
3353 00                 .BITS  . . . . . . . .
3354 ff                 .BITS  * * * * * * * *
3355 ff                 .BITS  * * * * * * * *
3356 00                 .BITS  . . . . . . . .
3357 00                 .BITS  . . . . . . . .
3358 00                 .BITS  . . . . . . . .

3359 18                 .BITS  . . . * * . . . ; $009B
335a 18                 .BITS  . . . * * . . .
335b 18                 .BITS  . . . * * . . .
335c ff                 .BITS  * * * * * * * *
335d ff                 .BITS  * * * * * * * *
335e 00                 .BITS  . . . . . . . .
335f 00                 .BITS  . . . . . . . .
3360 00                 .BITS  . . . . . . . .

3361 00                 .BITS  . . . . . . . . ; $009C
3362 00                 .BITS  . . . . . . . .
3363 00                 .BITS  . . . . . . . .
3364 f0                 .BITS  * * * * . . . .
3365 f8                 .BITS  * * * * * . . .
3366 18                 .BITS  . . . * * . . .
3367 18                 .BITS  . . . * * . . .
3368 18                 .BITS  . . . * * . . .

3369 18                 .BITS  . . . * * . . . ; $009D
336a 18                 .BITS  . . . * * . . .
336b 18                 .BITS  . . . * * . . .
336c f8                 .BITS  * * * * * . . .
336d f8                 .BITS  * * * * * . . .
336e 18                 .BITS  . . . * * . . .
336f 18                 .BITS  . . . * * . . .
3370 18                 .BITS  . . . * * . . .

3371 00                 .BITS  . . . . . . . . ; $009E
3372 00                 .BITS  . . . . . . . .
3373 00                 .BITS  . . . . . . . .
3374 ff                 .BITS  * * * * * * * *
3375 ff                 .BITS  * * * * * * * *
3376 18                 .BITS  . . . * * . . .
3377 18                 .BITS  . . . * * . . .
3378 18                 .BITS  . . . * * . . .

3379 18                 .BITS  . . . * * . . . ; $009F
337a 18                 .BITS  . . . * * . . .
337b 18                 .BITS  . . . * * . . .
337c ff                 .BITS  * * * * * * * *
337d ff                 .BITS  * * * * * * * *
337e 18                 .BITS  . . . * * . . .
337f 18                 .BITS  . . . * * . . .
3380 18                 .BITS  . . . * * . . .
              ;         ======================
3381 00                 .BITS  . . . . . . . . ; $20
3382 00                 .BITS  . . . . . . . .
3383 00                 .BITS  . . . . . . . .
3384 00                 .BITS  . . . . . . . .
3385 00                 .BITS  . . . . . . . .
3386 00                 .BITS  . . . . . . . .
3387 00                 .BITS  . . . . . . . .
3388 00                 .BITS  . . . . . . . .
              ;         ----------------------
3389 00                 .BITS  . . . . . . . . ; $21 !
338a 20                 .BITS  . . * . . . . .
338b 60                 .BITS  . * * . . . . .
338c fe                 .BITS  * * * * * * * .
338d 60                 .BITS  . * * . . . . .
338e 20                 .BITS  . . * . . . . .
338f 00                 .BITS  . . . . . . . .
3390 00                 .BITS  . . . . . . . .
              ;         ----------------------
3391 00                 .BITS  . . . . . . . . ; $22
3392 08                 .BITS  . . . . * . . .
3393 0c                 .BITS  . . . . * * . .
3394 fe                 .BITS  * * * * * * * .
3395 0c                 .BITS  . . . . * * . .
3396 08                 .BITS  . . . . * . . .
3397 00                 .BITS  . . . . . . . .
3398 00                 .BITS  . . . . . . . .
              ;         ----------------------
3399 01                 .BITS  . . . . . . . * ; $23 #
339a 02                 .BITS  . . . . . . * .
339b 04                 .BITS  . . . . . * . .
339c 08                 .BITS  . . . . * . . .
339d 10                 .BITS  . . . * . . . .
339e 20                 .BITS  . . * . . . . .
339f 40                 .BITS  . * . . . . . .
33a0 80                 .BITS  * . . . . . . .
              ;         ----------------------
33a1 80                 .BITS  * . . . . . . . ; $24 $
33a2 40                 .BITS  . * . . . . . .
33a3 20                 .BITS  . . * . . . . .
33a4 10                 .BITS  . . . * . . . .
33a5 08                 .BITS  . . . . * . . .
33a6 04                 .BITS  . . . . . * . .
33a7 02                 .BITS  . . . . . . * .
33a8 01                 .BITS  . . . . . . . *
              ;         ----------------------
33a9 00                 .BITS  . . . . . . . . ; $25 %
33aa 00                 .BITS  . . . . . . . .
33ab 00                 .BITS  . . . . . . . .
33ac 00                 .BITS  . . . . . . . .
33ad 00                 .BITS  . . . . . . . .
33ae 00                 .BITS  . . . . . . . .
33af 00                 .BITS  . . . . . . . .
33b0 00                 .BITS  . . . . . . . .
              ;         ----------------------
33b1 00                 .BITS  . . . . . . . . ; $26 &
33b2 00                 .BITS  . . . . . . . .
33b3 00                 .BITS  . . . . . . . .
33b4 00                 .BITS  . . . . . . . .
33b5 ff                 .BITS  * * * * * * * *
33b6 00                 .BITS  . . . . . . . .
33b7 00                 .BITS  . . . . . . . .
33b8 00                 .BITS  . . . . . . . .
              ;         ----------------------
33b9 00                 .BITS  . . . . . . . . ; $27
33ba 00                 .BITS  . . . . . . . .
33bb 00                 .BITS  . . . . . . . .
33bc ff                 .BITS  * * * * * * * *
33bd 00                 .BITS  . . . . . . . .
33be 00                 .BITS  . . . . . . . .
33bf 00                 .BITS  . . . . . . . .
33c0 00                 .BITS  . . . . . . . .
              ;         ----------------------
33c1 08                 .BITS  . . . . * . . . ; $28 (
33c2 08                 .BITS  . . . . * . . .
33c3 08                 .BITS  . . . . * . . .
33c4 08                 .BITS  . . . . * . . .
33c5 08                 .BITS  . . . . * . . .
33c6 08                 .BITS  . . . . * . . .
33c7 08                 .BITS  . . . . * . . .
33c8 08                 .BITS  . . . . * . . .
              ;         ---------------*------
33c9 10                 .BITS  . . . * . . . . ; $29 )
33ca 10                 .BITS  . . . * . . . .
33cb 10                 .BITS  . . . * . . . .
33cc 10                 .BITS  . . . * . . . .
33cd 10                 .BITS  . . . * . . . .
33ce 10                 .BITS  . . . * . . . .
33cf 10                 .BITS  . . . * . . . .
33d0 10                 .BITS  . . . * . . . .
              ;         ----------------------
33d1 08                 .BITS  . . . . * . . . ; $2A *
33d2 08                 .BITS  . . . . * . . .
33d3 08                 .BITS  . . . . * . . .
33d4 ff                 .BITS  * * * * * * * *
33d5 00                 .BITS  . . . . . . . .
33d6 00                 .BITS  . . . . . . . .
33d7 00                 .BITS  . . . . . . . .
33d8 00                 .BITS  . . . . . . . .
              ;         ----------------------
33d9 00                 .BITS  . . . . . . . . ; $2B +
33da 00                 .BITS  . . . . . . . .
33db 00                 .BITS  . . . . . . . .
33dc 00                 .BITS  . . . . . . . .
33dd ff                 .BITS  * * * * * * * *
33de 08                 .BITS  . . . . * . . .
33df 08                 .BITS  . . . . * . . .
33e0 08                 .BITS  . . . . * . . .
              ;         ----------------------
33e1 08                 .BITS  . . . . * . . . ; $2C ,
33e2 08                 .BITS  . . . . * . . .
33e3 08                 .BITS  . . . . * . . .
33e4 08                 .BITS  . . . . * . . .
33e5 0f                 .BITS  . . . . * * * *
33e6 08                 .BITS  . . . . * . . .
33e7 08                 .BITS  . . . . * . . .
33e8 08                 .BITS  . . . . * . . .
              ;         ----------------------
33e9 10                 .BITS  . . . * . . . . ; $2D -
33ea 10                 .BITS  . . . * . . . .
33eb 10                 .BITS  . . . * . . . .
33ec 10                 .BITS  . . . * . . . .
33ed f0                 .BITS  * * * * . . . .
33ee 10                 .BITS  . . . * . . . .
33ef 10                 .BITS  . . . * . . . .
33f0 10                 .BITS  . . . * . . . .
              ;         ----------------------
33f1 10                 .BITS  . . . * . . . . ; $2E .
33f2 10                 .BITS  . . . * . . . .
33f3 10                 .BITS  . . . * . . . .
33f4 10                 .BITS  . . . * . . . .
33f5 1f                 .BITS  . . . * * * * *
33f6 00                 .BITS  . . . . . . . .
33f7 00                 .BITS  . . . . . . . .
33f8 00                 .BITS  . . . . . . . .
              ;         ----------------------
33f9 00                 .BITS  . . . . . . . . ; $2F /
33fa 00                 .BITS  . . . . . . . .
33fb 00                 .BITS  . . . . . . . .
33fc 1f                 .BITS  . . . * * * * *
33fd 10                 .BITS  . . . * . . . .
33fe 10                 .BITS  . . . * . . . .
33ff 10                 .BITS  . . . * . . . .
3400 10                 .BITS  . . . * . . . .
              ;         ----------------------
3401 00                 .BITS  . . . . . . . . ; $30 0
3402 00                 .BITS  . . . . . . . .
3403 00                 .BITS  . . . . . . . .
3404 f8                 .BITS  * * * * * . . .
3405 08                 .BITS  . . . . * . . .
3406 08                 .BITS  . . . . * . . .
3407 08                 .BITS  . . . . * . . .
3408 08                 .BITS  . . . . * . . .
              ;         ----------------------
3409 08                 .BITS  . . . . * . . . ; $31 1
340a 08                 .BITS  . . . . * . . .
340b 08                 .BITS  . . . . * . . .
340c 08                 .BITS  . . . . * . . .
340d f8                 .BITS  * * * * * . . .
340e 00                 .BITS  . . . . . . . .
340f 00                 .BITS  . . . . . . . .
3410 00                 .BITS  . . . . . . . .
              ;         ----------------------
3411 10                 .BITS  . . . * . . . . ; $32 2
3412 10                 .BITS  . . . * . . . .
3413 10                 .BITS  . . . * . . . .
3414 10                 .BITS  . . . * . . . .
3415 1f                 .BITS  . . . * * * * *
3416 20                 .BITS  . . * . . . . .
3417 40                 .BITS  . * . . . . . .
3418 80                 .BITS  * . . . . . . .
              ;         ----------------------
3419 80                 .BITS  * . . . . . . . ; $33 3
341a 40                 .BITS  . * . . . . . .
341b 20                 .BITS  . . * . . . . .
341c 1f                 .BITS  . . . * * * * *
341d 10                 .BITS  . . . * . . . .
341e 10                 .BITS  . . . * . . . .
341f 10                 .BITS  . . . * . . . .
3420 10                 .BITS  . . . * . . . .
              ;         ----------------------
3421 01                 .BITS  . . . . . . . * ; $34 4
3422 02                 .BITS  . . . . . . * .
3423 04                 .BITS  . . . . . * . .
3424 f8                 .BITS  * * * * * . . .
3425 08                 .BITS  . . . . * . . .
3426 08                 .BITS  . . . . * . . .
3427 08                 .BITS  . . . . * . . .
3428 08                 .BITS  . . . . * . . .
              ;         ----------------------
3429 08                 .BITS  . . . . * . . . ; $35 5
342a 08                 .BITS  . . . . * . . .
342b 08                 .BITS  . . . . * . . .
342c 08                 .BITS  . . . . * . . .
342d f8                 .BITS  * * * * * . . .
342e 04                 .BITS  . . . . . * . .
342f 02                 .BITS  . . . . . . * .
3430 01                 .BITS  . . . . . . . *
              ;         ----------------------
3431 ff                 .BITS  * * * * * * * * ; $36 6
3432 ff                 .BITS  * * * * * * * *
3433 ff                 .BITS  * * * * * * * *
3434 ff                 .BITS  * * * * * * * *
3435 ff                 .BITS  * * * * * * * *
3436 ff                 .BITS  * * * * * * * *
3437 ff                 .BITS  * * * * * * * *
3438 ff                 .BITS  * * * * * * * *
              ;         ----------------------
3439 ff                 .BITS  * * * * * * * * ; $37 7
343a ff                 .BITS  * * * * * * * *
343b ff                 .BITS  * * * * * * * *
343c ff                 .BITS  * * * * * * * *
343d ff                 .BITS  * * * * * * * *
343e 00                 .BITS  . . . . . . . .
343f 00                 .BITS  . . . . . . . .
3440 00                 .BITS  . . . . . . . .
              ;         ----------------------
3441 00                 .BITS  . . . . . . . . ; $38 8
3442 00                 .BITS  . . . . . . . .
3443 00                 .BITS  . . . . . . . .
3444 ff                 .BITS  * * * * * * * *
3445 ff                 .BITS  * * * * * * * *
3446 ff                 .BITS  * * * * * * * *
3447 ff                 .BITS  * * * * * * * *
3448 ff                 .BITS  * * * * * * * *
              ;         ----------------------
3449 f8                 .BITS  * * * * * . . . ; $39 9
344a f8                 .BITS  * * * * * . . .
344b f8                 .BITS  * * * * * . . .
344c f8                 .BITS  * * * * * . . .
344d f8                 .BITS  * * * * * . . .
344e f8                 .BITS  * * * * * . . .
344f f8                 .BITS  * * * * * . . .
3450 f8                 .BITS  * * * * * . . .
              ;         ----------------------
3451 1f                 .BITS  . . . * * * * * ; $3A :
3452 1f                 .BITS  . . . * * * * *
3453 1f                 .BITS  . . . * * * * *
3454 1f                 .BITS  . . . * * * * *
3455 1f                 .BITS  . . . * * * * *
3456 1f                 .BITS  . . . * * * * *
3457 1f                 .BITS  . . . * * * * *
3458 1f                 .BITS  . . . * * * * *
              ;         ----------------------
3459 08                 .BITS  . . . . * . . . ; $3B ;
345a 08                 .BITS  . . . . * . . .
345b 08                 .BITS  . . . . * . . .
345c ff                 .BITS  * * * * * * * *
345d ff                 .BITS  * * * * * * * *
345e ff                 .BITS  * * * * * * * *
345f ff                 .BITS  * * * * * * * *
3460 ff                 .BITS  * * * * * * * *
              ;         ----------------------
3461 ff                 .BITS  * * * * * * * * ; $3C <
3462 ff                 .BITS  * * * * * * * *
3463 ff                 .BITS  * * * * * * * *
3464 ff                 .BITS  * * * * * * * *
3465 ff                 .BITS  * * * * * * * *
3466 08                 .BITS  . . . . * . . .
3467 08                 .BITS  . . . . * . . .
3468 08                 .BITS  . . . . * . . .
              ;         ----------------------
3469 f8                 .BITS  * * * * * . . . ; $3D =
346a f8                 .BITS  * * * * * . . .
346b f8                 .BITS  * * * * * . . .
346c f8                 .BITS  * * * * * . . .
346d ff                 .BITS  * * * * * * * *
346e f8                 .BITS  * * * * * . . .
346f f8                 .BITS  * * * * * . . .
3470 f8                 .BITS  * * * * * . . .
              ;         ----------------------
3471 1f                 .BITS  . . . * * * * * ; $3E >
3472 1f                 .BITS  . . . * * * * *
3473 1f                 .BITS  . . . * * * * *
3474 1f                 .BITS  . . . * * * * *
3475 ff                 .BITS  * * * * * * * *
3476 1f                 .BITS  . . . * * * * *
3477 1f                 .BITS  . . . * * * * *
3478 1f                 .BITS  . . . * * * * *
              ;         ----------------------
3479 1f                 .BITS  . . . * * * * * ; $3F ?
347a 1f                 .BITS  . . . * * * * *
347b 1f                 .BITS  . . . * * * * *
347c 1f                 .BITS  . . . * * * * *
347d 1f                 .BITS  . . . * * * * *
347e 00                 .BITS  . . . . . . . .
347f 00                 .BITS  . . . . . . . .
3480 00                 .BITS  . . . . . . . .
              ;         ======================
3481 00                 .BITS  . . . . . . . . ; $40 @
3482 00                 .BITS  . . . . . . . .
3483 00                 .BITS  . . . . . . . .
3484 1f                 .BITS  . . . * * * * *
3485 1f                 .BITS  . . . * * * * *
3486 1f                 .BITS  . . . * * * * *
3487 1f                 .BITS  . . . * * * * *
3488 1f                 .BITS  . . . * * * * *
              ;         ----------------------
3489 00                 .BITS  . . . . . . . . ; $41 A
348a 00                 .BITS  . . . . . . . .
348b 00                 .BITS  . . . . . . . .
348c f8                 .BITS  * * * * * . . .
348d f8                 .BITS  * * * * * . . .
348e f8                 .BITS  * * * * * . . .
348f f8                 .BITS  * * * * * . . .
3490 f8                 .BITS  * * * * * . . .
              ;         ----------------------
3491 f8                 .BITS  * * * * * . . . ; $42 B
3492 f8                 .BITS  * * * * * . . .
3493 f8                 .BITS  * * * * * . . .
3494 f8                 .BITS  * * * * * . . .
3495 f8                 .BITS  * * * * * . . .
3496 00                 .BITS  . . . . . . . .
3497 00                 .BITS  . . . . . . . .
3498 00                 .BITS  . . . . . . . .
              ;         ----------------------
3499 1f                 .BITS  . . . * * * * * ; $43 C
349a 1f                 .BITS  . . . * * * * *
349b 1f                 .BITS  . . . * * * * *
349c 1f                 .BITS  . . . * * * * *
349d 1f                 .BITS  . . . * * * * *
349e 20                 .BITS  . . * . . . . .
349f 40                 .BITS  . * . . . . . .
34a0 80                 .BITS  * . . . . . . .
              ;         ----------------------
34a1 80                 .BITS  * . . . . . . . ; $44 D
34a2 40                 .BITS  . * . . . . . .
34a3 20                 .BITS  . . * . . . . .
34a4 1f                 .BITS  . . . * * * * *
34a5 1f                 .BITS  . . . * * * * *
34a6 1f                 .BITS  . . . * * * * *
34a7 1f                 .BITS  . . . * * * * *
34a8 1f                 .BITS  . . . * * * * *
              ;         ----------------------
34a9 01                 .BITS  . . . . . . . * ; $45 E
34aa 02                 .BITS  . . . . . . * .
34ab 04                 .BITS  . . . . . * . .
34ac f8                 .BITS  * * * * * . . .
34ad f8                 .BITS  * * * * * . . .
34ae f8                 .BITS  * * * * * . . .
34af f8                 .BITS  * * * * * . . .
34b0 f8                 .BITS  * * * * * . . .
              ;         ----------------------
34b1 f8                 .BITS  * * * * * . . . ; $46 F
34b2 f8                 .BITS  * * * * * . . .
34b3 f8                 .BITS  * * * * * . . .
34b4 f8                 .BITS  * * * * * . . .
34b5 f8                 .BITS  * * * * * . . .
34b6 04                 .BITS  . . . . . * . .
34b7 02                 .BITS  . . . . . . * .
34b8 01                 .BITS  . . . . . . . *
              ;         ----------------------
34b9 01                 .BITS  . . . . . . . * ; $47 G
34ba 00                 .BITS  . . . . . . . .
34bb 00                 .BITS  . . . . . . . .
34bc 00                 .BITS  . . . . . . . .
34bd 00                 .BITS  . . . . . . . .
34be 00                 .BITS  . . . . . . . .
34bf 00                 .BITS  . . . . . . . .
34c0 00                 .BITS  . . . . . . . .
              ;         ----------------------
34c1 00                 .BITS  . . . . . . . . ; $48 H
34c2 00                 .BITS  . . . . . . . .
34c3 00                 .BITS  . . . . . . . .
34c4 00                 .BITS  . . . . . . . .
34c5 00                 .BITS  . . . . . . . .
34c6 00                 .BITS  . . . . . . . .
34c7 00                 .BITS  . . . . . . . .
34c8 01                 .BITS  . . . . . . . *
              ;         ----------------------
34c9 00                 .BITS  . . . . . . . . ; $49 I
34ca 00                 .BITS  . . . . . . . .
34cb 00                 .BITS  . . . . . . . .
34cc 00                 .BITS  . . . . . . . .
34cd 00                 .BITS  . . . . . . . .
34ce 00                 .BITS  . . . . . . . .
34cf 00                 .BITS  . . . . . . . .
34d0 80                 .BITS  * . . . . . . .
              ;         ----------------------
34d1 80                 .BITS  * . . . . . . . ; $4A J
34d2 00                 .BITS  . . . . . . . .
34d3 00                 .BITS  . . . . . . . .
34d4 00                 .BITS  . . . . . . . .
34d5 00                 .BITS  . . . . . . . .
34d6 00                 .BITS  . . . . . . . .
34d7 00                 .BITS  . . . . . . . .
34d8 00                 .BITS  . . . . . . . .
              ;         ----------------------
34d9 ff                 .BITS  * * * * * * * * ; $4B K
34da 00                 .BITS  . . . . . . . .
34db 00                 .BITS  . . . . . . . .
34dc 00                 .BITS  . . . . . . . .
34dd 00                 .BITS  . . . . . . . .
34de 00                 .BITS  . . . . . . . .
34df 00                 .BITS  . . . . . . . .
34e0 00                 .BITS  . . . . . . . .
              ;         ----------------------
34e1 00                 .BITS  . . . . . . . . ; $4C L
34e2 00                 .BITS  . . . . . . . .
34e3 00                 .BITS  . . . . . . . .
34e4 00                 .BITS  . . . . . . . .
34e5 00                 .BITS  . . . . . . . .
34e6 00                 .BITS  . . . . . . . .
34e7 00                 .BITS  . . . . . . . .
34e8 ff                 .BITS  * * * * * * * *
              ;         ----------------------
34e9 80                 .BITS  * . . . . . . . ; $4D M
34ea 80                 .BITS  * . . . . . . .
34eb 80                 .BITS  * . . . . . . .
34ec 80                 .BITS  * . . . . . . .
34ed 80                 .BITS  * . . . . . . .
34ee 80                 .BITS  * . . . . . . .
34ef 80                 .BITS  * . . . . . . .
34f0 80                 .BITS  * . . . . . . .
              ;         ----------------------
34f1 01                 .BITS  . . . . . . . * ; $4E N
34f2 01                 .BITS  . . . . . . . *
34f3 01                 .BITS  . . . . . . . *
34f4 01                 .BITS  . . . . . . . *
34f5 01                 .BITS  . . . . . . . *
34f6 01                 .BITS  . . . . . . . *
34f7 01                 .BITS  . . . . . . . *
34f8 01                 .BITS  . . . . . . . *
              ;         ----------------------
34f9 00                 .BITS  . . . . . . . . ; $4F O
34fa ff                 .BITS  * * * * * * * *
34fb 00                 .BITS  . . . . . . . .
34fc 00                 .BITS  . . . . . . . .
34fd 00                 .BITS  . . . . . . . .
34fe 00                 .BITS  . . . . . . . .
34ff ff                 .BITS  * * * * * * * *
3500 00                 .BITS  . . . . . . . .
              ;         ----------------------
3501 00                 .BITS  . . . . . . . . ; $50 P
3502 ff                 .BITS  * * * * * * * *
3503 80                 .BITS  * . . . . . . .
3504 80                 .BITS  * . . . . . . .
3505 80                 .BITS  * . . . . . . .
3506 80                 .BITS  * . . . . . . .
3507 ff                 .BITS  * * * * * * * *
3508 00                 .BITS  . . . . . . . .
              ;         ----------------------
3509 00                 .BITS  . . . . . . . . ; $51 Q
350a ff                 .BITS  * * * * * * * *
350b c0                 .BITS  * * . . . . . .
350c c0                 .BITS  * * . . . . . .
350d c0                 .BITS  * * . . . . . .
350e c0                 .BITS  * * . . . . . .
350f ff                 .BITS  * * * * * * * *
3510 00                 .BITS  . . . . . . . .
              ;         ----------------------
3511 00                 .BITS  . . . . . . . . ; $52 R
3512 ff                 .BITS  * * * * * * * *
3513 e0                 .BITS  * * * . . . . .
3514 e0                 .BITS  * * * . . . . .
3515 e0                 .BITS  * * * . . . . .
3516 e0                 .BITS  * * * . . . . .
3517 ff                 .BITS  * * * * * * * *
3518 00                 .BITS  . . . . . . . .
              ;         ----------------------
3519 00                 .BITS  . . . . . . . . ; $53 S
351a ff                 .BITS  * * * * * * * *
351b f0                 .BITS  * * * * . . . .
351c f0                 .BITS  * * * * . . . .
351d f0                 .BITS  * * * * . . . .
351e f0                 .BITS  * * * * . . . .
351f ff                 .BITS  * * * * * * * *
3520 00                 .BITS  . . . . . . . .
              ;         ----------------------
3521 00                 .BITS  . . . . . . . . ; $54 T
3522 ff                 .BITS  * * * * * * * *
3523 f8                 .BITS  * * * * * . . .
3524 f8                 .BITS  * * * * * . . .
3525 f8                 .BITS  * * * * * . . .
3526 f8                 .BITS  * * * * * . . .
3527 ff                 .BITS  * * * * * * * *
3528 00                 .BITS  . . . . . . . .
              ;         ----------------------
3529 00                 .BITS  . . . . . . . . ; $55 U
352a ff                 .BITS  * * * * * * * *
352b fc                 .BITS  * * * * * * . .
352c fc                 .BITS  * * * * * * . .
352d fc                 .BITS  * * * * * * . .
352e fc                 .BITS  * * * * * * . .
352f ff                 .BITS  * * * * * * * *
3530 00                 .BITS  . . . . . . . .
              ;         ----------------------
3531 00                 .BITS  . . . . . . . . ; $56 V
3532 ff                 .BITS  * * * * * * * *
3533 fe                 .BITS  * * * * * * * .
3534 fe                 .BITS  * * * * * * * .
3535 fe                 .BITS  * * * * * * * .
3536 fe                 .BITS  * * * * * * * .
3537 ff                 .BITS  * * * * * * * *
3538 00                 .BITS  . . . . . . . .
              ;         ----------------------
3539 00                 .BITS  . . . . . . . . ; $57 W
353a ff                 .BITS  * * * * * * * *
353b ff                 .BITS  * * * * * * * *
353c ff                 .BITS  * * * * * * * *
353d ff                 .BITS  * * * * * * * *
353e ff                 .BITS  * * * * * * * *
353f ff                 .BITS  * * * * * * * *
3540 00                 .BITS  . . . . . . . .
              ;         ----------------------
3541 00                 .BITS  . . . . . . . . ; $58 X
3542 01                 .BITS  . . . . . . . *
3543 01                 .BITS  . . . . . . . *
3544 01                 .BITS  . . . . . . . *
3545 01                 .BITS  . . . . . . . *
3546 01                 .BITS  . . . . . . . *
3547 01                 .BITS  . . . . . . . *
3548 00                 .BITS  . . . . . . . .
              ;         ----------------------
3549 00                 .BITS  . . . . . . . . ; $59 Y
354a 80                 .BITS  * . . . . . . .
354b 80                 .BITS  * . . . . . . .
354c 80                 .BITS  * . . . . . . .
354d 80                 .BITS  * . . . . . . .
354e 80                 .BITS  * . . . . . . .
354f 80                 .BITS  * . . . . . . .
3550 00                 .BITS  . . . . . . . .
              ;         ----------------------
3551 81                 .BITS  * . . . . . . * ; $5A Z
3552 42                 .BITS  . * . . . . * .
3553 24                 .BITS  . . * . . * . .
3554 18                 .BITS  . . . * * . . .
3555 18                 .BITS  . . . * * . . .
3556 24                 .BITS  . . * . . * . .
3557 42                 .BITS  . * . . . . * .
3558 81                 .BITS  * . . . . . . *
              ;         ----------------------
3559 08                 .BITS  . . . . * . . . ; $5B [
355a 08                 .BITS  . . . . * . . .
355b 08                 .BITS  . . . . * . . .
355c 08                 .BITS  . . . . * . . .
355d ff                 .BITS  * * * * * * * *
355e 08                 .BITS  . . . . * . . .
355f 08                 .BITS  . . . . * . . .
3560 08                 .BITS  . . . . * . . .
              ;         ----------------------
3561 18                 .BITS  . . . * * . . . ; $5C \
3562 3c                 .BITS  . . * * * * . .
3563 db                 .BITS  * * . * * . * *
3564 18                 .BITS  . . . * * . . .
3565 18                 .BITS  . . . * * . . .
3566 18                 .BITS  . . . * * . . .
3567 18                 .BITS  . . . * * . . .
3568 00                 .BITS  . . . . . . . .
              ;         ----------------------
3569 18                 .BITS  . . . * * . . . ; $5D ]
356a 18                 .BITS  . . . * * . . .
356b 18                 .BITS  . . . * * . . .
356c 18                 .BITS  . . . * * . . .
356d db                 .BITS  * * . * * . * *
356e 3c                 .BITS  . . * * * * . .
356f 18                 .BITS  . . . * * . . .
3570 00                 .BITS  . . . . . . . .
              ;         ----------------------
3571 18                 .BITS  . . . * * . . . ; $5E ^
3572 3c                 .BITS  . . * * * * . .
3573 db                 .BITS  * * . * * . * *
3574 18                 .BITS  . . . * * . . .
3575 db                 .BITS  * * . * * . * *
3576 3c                 .BITS  . . * * * * . .
3577 18                 .BITS  . . . * * . . .
3578 00                 .BITS  . . . . . . . .
              ;         ----------------------
3579 ff                 .BITS  * * * * * * * * ; $5F _
357a 81                 .BITS  * . . . . . . *
357b 81                 .BITS  * . . . . . . *
357c 81                 .BITS  * . . . . . . *
357d 81                 .BITS  * . . . . . . *
357e 81                 .BITS  * . . . . . . *
357f 81                 .BITS  * . . . . . . *
3580 ff                 .BITS  * * * * * * * *
              ;         ----------------------
3581 3c                 .BITS  . . * * * * . . ; $60 `
3582 66                 .BITS  . * * . . * * .
3583 06                 .BITS  . . . . . * * .
3584 0c                 .BITS  . . . . * * . .
3585 18                 .BITS  . . . * * . . .
3586 00                 .BITS  . . . . . . . .
3587 18                 .BITS  . . . * * . . .
3588 00                 .BITS  . . . . . . . .
              ;         ----------------------
3589 c4                 .BITS  * * . . . * . . ; $61 a
358a a8                 .BITS  * . * . * . . .
358b 90                 .BITS  * . . * . . . .
358c c0                 .BITS  * * . . . . . .
358d a0                 .BITS  * . * . . . . .
358e 90                 .BITS  * . . * . . . .
358f 80                 .BITS  * . . . . .. .
3590 00                 .BITS  . . . . . . . .
              ;         ----------------------
3591 c0                 .BITS  * * . . . . . . ; $62 a
3592 a0                 .BITS  * . * . . . . .
3593 90                 .BITS  * . . * . . . .
3594 e0                 .BITS  * * * . . . . .
3595 90                 .BITS  * . . * . . . .
3596 a0                 .BITS  * . * . . . . .
3597 c0                 .BITS  * * . . . .. .
3598 00                 .BITS  . . . . . . . .
              ;         ----------------------
3599 10                 .BITS  . . . * . . . . ; $63 c
359a 18                 .BITS  . . . * * . . .
359b 14                 .BITS  . . . * . * . .
359c 92                 .BITS  * . . * . . * .
359d 50                 .BITS  . * . * . . . .
359e 30                 .BITS  . . * * . . . .
359f 10                 .BITS  . . . * . . . .
35a0 00                 .BITS  . . . . . . . .
              ;         ----------------------
35a1 82                 .BITS  * . . . . . * . ; $64 d
35a2 c6                 .BITS  * * . . . * * .
35a3 aa                 .BITS  * . * . * . * .
35a4 92                 .BITS  * . . * . . * .
35a5 aa                 .BITS  * . * . * . * .
35a6 c6                 .BITS  * * . . . * * .
35a7 82                 .BITS  * . . . . . * .
35a8 00                 .BITS  . . . . . . . .
              ;         ----------------------
35a9 82                 .BITS  * . . . . . * . ; $65 e
35aa c6                 .BITS  * * . . . * * .
35ab aa                 .BITS  * . * . * . * .
35ac 92                 .BITS  * . . * . . * .
35ad 82                 .BITS  * . . . . . * .
35ae 82                 .BITS  * . . . . . * .
35af 82                 .BITS  * . . . . . * .
35b0 00                 .BITS  . . . . . . . .
              ;         ----------------------
35b1 94                 .BITS  * . . * . * . . ; $66 f
35b2 a8                 .BITS  * . * . * . . .
35b3 d0                 .BITS  * * . * . . . .
35b4 a0                 .BITS  * . * . . . . .
35b5 c0                 .BITS  * * . . . . . .
35b6 80                 .BITS  * . . . . . . .
35b7 80                 .BITS  * . . . . . . .
35b8 00                 .BITS  . . . . . . . .
              ;         ----------------------
35b9 82                 .BITS  * . . . . . * . ; $67 g
35ba 44                 .BITS  . * . . . * . .
35bb 28                 .BITS  . . * . * . . .
35bc 10                 .BITS  . . . * . . . .
35bd 28                 .BITS  . . * . * . . .
35be 44                 .BITS  . * . . . * . .
35bf 82                 .BITS  * . . . . . * .
35c0 00                 .BITS  . . . . . . . .
              ;         ----------------------
35c1 c2                 .BITS  * * . . . . * . ; $68 h
35c2 a2                 .BITS  * . * . . . * .
35c3 d2                 .BITS  * * . * . . * .
35c4 aa                 .BITS  * . * . * . * .
35c5 96                 .BITS  * . . * . * * .
35c6 8a                 .BITS  * . . . * . * .
35c7 86                 .BITS  * . . . . * * .
35c8 00                 .BITS  . . . . . . . .
              ;         ----------------------
35c9 10                 .BITS  . . . * . . . . ; $69 i
35ca 10                 .BITS  . . . * . . . .
35cb 10                 .BITS  . . . * . . . .
35cc 10                 .BITS  . . . * . . . .
35cd 10                 .BITS  . . . * . . . .
35ce 10                 .BITS  . . . * . . . .
35cf 10                 .BITS  . . . * . . . .
35d0 00                 .BITS  . . . . . . . .
              ;         ----------------------
35d1 10                 .BITS  . . . * . . . . ; $6a j
35d2 38                 .BITS  . . * * * . . .
35d3 54                 .BITS  . * . * . * . .
35d4 92                 .BITS  * . . * . . * .
35d5 54                 .BITS  . * . * . * . .
35d6 38                 .BITS  . . * * * . . .
35d7 10                 .BITS  . . . * . . . .
35d8 00                 .BITS  . . . . . . . .
              ;         ----------------------
35d9 10                 .BITS  . . . * . . . . ; $6b k
35da 10                 .BITS  . . . * . . . .
35db 10                 .BITS  . . . * . . . .
35dc 38                 .BITS  . . * * * . . .
35dd 54                 .BITS  . * . * . * . .
35de 92                 .BITS  * . . * . . * .
35df 92                 .BITS  * . . * . . * .
35e0 00                 .BITS  . . . . . . . .
              ;         ----------------------
35e1 10                 .BITS  . . . * . . . . ; $6c l
35e2 18                 .BITS  . . . * * . . .
35e3 14                 .BITS  . . . * . * . .
35e4 12                 .BITS  . . . * . . * .
35e5 10                 .BITS  . . . * . . . .
35e6 10                 .BITS  . . . * . . . .
35e7 10                 .BITS  . . . * . . . .
35e8 00                 .BITS  . . . . . . . .
              ;         ----------------------
35e9 c6                 .BITS  * * . . . * * . ; $6d m
35ea aa                 .BITS  * . * . * . * .
35eb 92                 .BITS  * . . * . . * .
35ec aa                 .BITS  * . * . * . * .
35ed c6                 .BITS  * * . . . * * .
35ee 82                 .BITS  * . . . . . * .
35ef 82                 .BITS  * . . . . . * .
35f0 00                 .BITS  . . . . . . . .
              ;         ----------------------
35f1 90                 .BITS  * . . * . . . . ; $69 i
35f2 50                 .BITS  . * . * . . . .
35f3 38                 .BITS  . . * * * . . .
35f4 14                 .BITS  . . . * . * . .
35f5 12                 .BITS  . . . * . . * .
35f6 10                 .BITS  . . . * . . . .
35f7 10                 .BITS  . . . * . . . .
35f8 00                 .BITS  . . . . . . . .
              ;         ----------------------
35f9 c4                 .BITS  * * . . . * . . ; $6F o
35fa ac                 .BITS  * . * . * * . .
35fb d4                 .BITS  * * . * . * . .
35fc a8                 .BITS  * . * . * . . .
35fd 90                 .BITS  * . . * . . . .
35fe 80                 .BITS  * . . . . . . .
35ff 80                 .BITS  * . . . . . . .
3600 00                 .BITS  . . . . . . . .
              ;         ----------------------
3601 80                 .BITS  * . . . . . . . ; $70 p
3602 80                 .BITS  * . . . . . . .
3603 80                 .BITS  * . . . . . . .
3604 90                 .BITS  * . . * . . . .
3605 a8                 .BITS  * . * . * . . .
3606 c4                 .BITS  * * . . . * . .
3607 82                 .BITS  * . . . . . * .
3608 00                 .BITS  . . . . . . . .
              ;         ----------------------
3609 40                 .BITS  . * . . . . . . ; $71 q
360a 40                 .BITS  . * . . . . . .
360b 40                 .BITS  . * . . . . . .
360c 78                 .BITS  . * * * * . . .
360d 44                 .BITS  . * . . . * . .
360e 44                 .BITS  . * . . . * . .
360f 44                 .BITS  . * . . . * . .
3610 00                 .BITS  . . . . . . . .
              ;         ----------------------
3611 60                 .BITS  . * * . . . . . ; $72 r
3612 50                 .BITS  . * . * . . . .
3613 48                 .BITS  . * . . * . . .
3614 50                 .BITS  . * . * . . . .
3615 60                 .BITS  . * * . . . . .
3616 50                 .BITS  . * . * . . . .
3617 48                 .BITS  . * . . * . . .
3618 00                 .BITS  . . . . . . . .
              ;         ----------------------
3619 40                 .BITS  . * . . . . . . ; $73 s
361a 44                 .BITS  . * . . . * . .
361b 4c                 .BITS  . * . . * * . .
361c 54                 .BITS  . * . * . * . .
361d 64                 .BITS  . * * . . * . .
361e 44                 .BITS  . * . . . * . .
361f 04                 .BITS  . . . . . * . .
3620 00                 .BITS  . . . . . . . .
              ;         ----------------------
3621 10                 .BITS  . . . * . . . . ; $74 t
3622 38                 .BITS  . . * * * . . .
3623 54                 .BITS  . * . * . * . .
3624 92                 .BITS  * . . * . . * .
3625 10                 .BITS  . . . * . . . .
3626 10                 .BITS  . . . * . . . .
3627 10                 .BITS  . . . * . . . .
3628 00                 .BITS  . . . . . . . .
              ;         ----------------------
3629 60                 .BITS  . * * . . . . . ; $75 u
362a 50                 .BITS  . * . * . . . .
362b 48                 .BITS  . * . . * . . .
362c 44                 .BITS  . * . . . * . .
362d 44                 .BITS  . * . . . * . .
362e 44                 .BITS  . * . . . * . .
362f 44                 .BITS  . * . . . * . .
3630 00                 .BITS  . . . . . . . .
              ;         ----------------------
3631 10                 .BITS  . . . * . . . . ; $76 v
3632 ba                 .BITS  * . * * * . * .
3633 54                 .BITS  . * . * . * . .
3634 10                 .BITS  . . . * . . . .
3635 10                 .BITS  . . . * . . . .
3636 10                 .BITS  . . . * . . . .
3637 10                 .BITS  . . . * . . . .
3638 00                 .BITS  . . . . . . . .
              ;         ----------------------
3639 60                 .BITS  . * * . . . . . ; $77 w
363a 50                 .BITS  . * . * . . . .
363b 48                 .BITS  . * . . * . . .
363c 50                 .BITS  . * . * . . . .
363d 60                 .BITS  . * * . . . . .
363e 40                 .BITS  . * . . . . . .
363f 40                 .BITS  . * . . . . . .
3640 00                 .BITS  . . . . . . . .
              ;         ----------------------
3641 92                 .BITS  * . . * . . * . ; $78 x
3642 54                 .BITS  . * . * . * . .
3643 38                 .BITS  . . * * * . . .
3644 10                 .BITS  . . . * . . . .
3645 10                 .BITS  . . . * . . . .
3646 10                 .BITS  . . . * . . . .
3647 10                 .BITS  . . . * . . . .
3648 00                 .BITS  . . . . . . . .
              ;         ----------------------
3649 e0                 .BITS  * * * . . . . . ; $79 y
364a d0                 .BITS  * * . * . . . .
364b a8                 .BITS  * . * . * . . .
364c 94                 .BITS  * . . * . * . .
364d 9a                 .BITS  * . . * * . * .
364e 96                 .BITS  * . . * . * * .
364f 92                 .BITS  * . . * . . * .
3650 00                 .BITS  . . . . . . . .
              ;         ----------------------
3651 10                 .BITS  . . . * . . . . ; $7A z
3652 28                 .BITS  . . * . * . . .
3653 44                 .BITS  . * . . . * . .
3654 28                 .BITS  . . * . * . . .
3655 10                 .BITS  . . . * . . . .
3656 28                 .BITS  . . * . * . . .
3657 44                 .BITS  . * . . . * . .
3658 00                 .BITS  . . . . . . . .
              ;         ----------------------
3659 e7                 .BITS  * * * . . * * * ; $7B [
365a c3                 .BITS  * * . . . . * *
365b 24                 .BITS  . . * . . * . .
365c e7                 .BITS  * * * . . * * *
365d e7                 .BITS  * * * . . * * *
365e e7                 .BITS  * * * . . * * *
365f e7                 .BITS  * * * . . * * *
3660 ff                 .BITS  * * * * * * * *
              ;         ----------------------
3661 e7                 .BITS  * * * . . * * * ; $7C \
3662 e7                 .BITS  * * * . . * * *
3663 e7                 .BITS  * * * . . * * *
3664 e7                 .BITS  * * * . . * * *
3665 24                 .BITS  . . * . . * . .
3666 c3                 .BITS  * * . . . . * *
3667 e7                 .BITS  * * * . . * * *
3668 ff                 .BITS  * * * * * * * *
              ;         ----------------------
3669 e7                 .BITS  * * * . . * * * ; $7D ]
366a c3                 .BITS  * * . . . . * *
366b 24                 .BITS  . . * . . * . .
366c e7                 .BITS  * * * . . * * *
366d 24                 .BITS  . . * . . * . .
366e c3                 .BITS  * * . . . . * *
366f e7                 .BITS  * * * . . * * *
3670 ff                 .BITS  * * * * * * * *
              ;         ----------------------
3671 c3                 .BITS  * * . . . . * * ; $7E ^
3672 99                 .BITS  * . . * * . . *
3673 f9                 .BITS  * * * * * . . *
3674 f3                 .BITS  * * * * . . * *
3675 e7                 .BITS  * * * . . * * *
3676 ff                 .BITS  * * * * * * * *
3677 e7                 .BITS  * * * . . * * *
3678 ff                 .BITS  * * * * * * * *
              ;         ----------------------
3679 ff                 .BITS  * * * * * * * * ; $7F _
367a 81                 .BITS  * . . . . . . *
367b 81                 .BITS  * . . . . . . *
367c 81                 .BITS  * . . . . . . *
367d 81                 .BITS  * . . . . . . *
367e 81                 .BITS  * . . . . . . *
367f 81                 .BITS  * . . . . . . *
3680 ff                 .BITS  * * * * * * * *
              ;         ----------------------
;                       closed INCLUDE file Zchar.asm

              **************
              Module Mode_65
              **************

              ; move complete program from $2000 -> $1000

3681 a9 41            LDA  #65                ; 40MHz CPU
3683 85 00            STA  0

3685 a0 00            LDY  #0
3687 84 41            STY  A0L
3689 84 43            STY  A1L
368b a9 20            LDA  #$20               ; loaded at $2001
368d 85 42            STA  A0H
368f a9 10            LDA  #>START
3691 85 44            STA  A1H

3693 b1 41    _loop   LDA  (A0L),Y
3695 91 43            STA  (A1L),Y
3697 c8               INY
3698 d0 f9            BNE  _loop
369a e6 42            INC  A0H
369c e6 44            INC  A1H
369e a5 44            LDA  A1H
36a0 c9 37            CMP  #>EOC+1
36a2 90 ef            BCC  _loop
36a4 4c 67 10         JMP  MEGA_Setup
36a7          EndMod [Mode_65] Size = 38 [$26]

              ***
36a7          EOC
              ***


  871 Symbols
-------------
NORMAL                         $0000    59
BLACK                          $0000    30
WHITE                          $0001    31D  5447   5814   6116
R6510                          $0001   191D   390   4878
Z_Code                         $0002    82D   521    522    524    528
                                       545    553    582    602    607
                                       845    874   3972   4309   4312
                                      4880
RED                            $0002    32D  6120
CYAN                           $0003    33D  5440
PURPLE                         $0004    34
QI0                            $0004    83D  1102   1103   1144   1151
                                      1484   2126   2132   2140   4461
                                      4637   5007   5078   5104
QI1                            $0005    84D  1105   1106   1487   2123
                                      2135   2141   5005   5079   5106
GREEN                          $0005    35
STIME_COL                      $0006  6107D  4232   4241
BLUE                           $0006    36D  6118   6119
QI2                            $0006    85D  1111   1112   1488   2122
                                      2138   5080
YELLOW                         $0007    37D  4107   4292   6117
SCORE_COL                      $0007  6106D  4262   4265
QDL                            $0007    89D  3540   3573   3599   3609
                                      5123   5156
QDH                            $0008    90D  3480   3584   3588   3592
                                      3598   3607   3611   3613   3615
                                      3619   3620
ORANGE                         $0008    38
BROWN                          $0009    39
QD0                            $0009    91D  1145   1150   1521   1524
                                      1827   2806   2840   2857   3381
                                      3382   3420   3459   3556   5028
                                      5054
QD1                            $000a    92D  1522   1525   1830   2807
                                      2842   2860   3384   3422   3460
                                      3560   5029   5056
PINK                           $000a    40
DARKGREY                       $000b    41
QD2                            $000b    93D  1833   2809   3462   3563
                                      5030
RAMD                           $000c    97D   485    486    487    488
                                       489    491    492   4496   4504
                                      4528y  4532   4590   4617   4651y
                                      4654   4896   5032   5033   5037
                                      5043   5045   5047   5050   5052
                                      5053   5082   5083   5087   5093
                                      5095   5097   5100   5102   5103
                                      5863   5869   5881   5883   5886
                                      5889   5891
GREY                           $000c    42
CR                             $000d    51D  2399   4044   4127   4385
                                      4420   5242   5412   5586   6071
LT_GREEN                       $000d    43
ENDMAC                         $000e   317
LT_BLUE                        $000e    44
LT_GREY                        $000f    45
LV0                            $0010   101D  1773   1781   1785   3516
                                      3518   6136   6149
BLINK                          $0010    60
CURSOR_DOWN                    $0011    21D  5198
LV1                            $0011   102D  6138   6153
LV2                            $0012   103D  3530   3534
Alphabet                       $0013   105D  3482   3492   3494
DEL                            $0014    52D  2796   5244   5607
Attribute                      $0014   106D  2627   2636   2645   2678
                                      4104   4111   5425   5775
Block_Lo                       $0015   107D  4990   4995   5868   5882
                                      5895
Block_Hi                       $0016   108D  5884   5900
MOVES_COL                      $0016  6102D  4270   4273
Call_Type                      $0017   109D  1483   1494   2109   2113
                                      2127
Charbuf_Ptr                    $0018   110D  4048   4058   4068   4083
                                      4126   4129   4135   4141   4144
ROWS                           $0019   190D  2479   2515   2544   2552
                                      4093   4099   4765   4767   4865
                                      4934   5302   5325   5345   5348
                                      5772
Charbuf_End                    $0019   111D  4062   4067   4080
Chars_Left                     $001a   112D  3202   3217   3250   3254
                                      3262   3268   3307   3315   5597
                                      5678   5692
Colour                         $001b   113D  2203   2499   4102   4108
                                      4113   4293   4886   5424   5454
C_Save_Col                     $001c   114D  5793   5802
C_Save_Row                     $001d   115D  3053   5792   5801
CURSOR_RIGHT                   $001d    22D  5200
Info_Pages                     $001e   116
Left_Margin                    $001f   117D  5565   5571   5609   5627
                                      5669   5677
Log                            $0020   118D   525
REVERSE                        $0020    61D  2626
MORE_Counter                   $0021   119D  2585   2790   4091   4092
                                      4096   5555   5720
NUMBER                         $0022   120D  2426   4160   4168   4178
                                      4182   4184   4214   4233   4235
                                      4242   4245   4794
OP_Type                        $0027   121D   802    804    839    862
                                       866    867    869
ParNum                         $0029   122D   520    814    815    842
                                       871   1562   2164   2181   2390
                                      2826   2881   3041   3075   5474
                                      5477   5495
Parse_Index                    $002a   123D  3204   3282   3299
Prop_Mask                      $002b   124D  3852   3866   3905   4864
                                      4924
Resident_Pages                 $002c   125D  4930   4996   5034   5084
Right_Margin                   $002d   126D  5395   5576   5618   5634
                                      5664
Save_Unit                      $002e   127D   405   4372   4467   4565
                                      4584
Status_Col                     $002f   128D  4011   4042   4892   5129
                                      5136   5143
Timeout                        $0030   129D  3073   3074   3083   3085
                                      3086   3087   3088   3090   3091
                                      3092   5231   5232   5234   5236
                                      5514   5515
Tok_Flag                       $0032   130D  2385   2886   3283
TO_Flag                        $0033   131D  2388   5568   5601
STAT_SCORE                     $0034  6101D  4280   4282
Upper_Size                     $0034   132D  2481   2484   2510   2514
                                      2537   2541   2549   2584   2789
                                      4095   4755   4888   5282   5554
                                      5719
Version                        $0035   133D  1243   1252   1268   1289
                                      1337   1447   1450   1523   1651
                                      1762   2139   2151   2381   2396
                                      3199   3205   3753   3812   3832
                                      3835   3860   3930   4034   4826
                                      4905   4942   5453   5518   5522
                                      5533   5562   5691
Vocab_Length                   $0036   134D  2929   3429   4862   4922
Win_Bot                        $0037   135D  2518   2553   4866   5773
Win_Top                        $0038   136D  2482   2517   2550   2590
                                      5771   5784
Word_Length                    $0039   137D  2919   3229   3649   3725
                                      4860   4920
z_stack_ptr                    $003a   138D   923    924    944    945
                                       947    948    949   1194   1195
                                      1197   1198   1201   1466   1468
                                      2184   2186   4456   4631   4890
z_frame_ptr                    $003c   139D  1465   1467   1491   1492
                                      2118   2119   2185   2187   4891
DPL                            $003e   140D  3182   3395
DPH                            $003f   141D  3183   3396
BOLD                           $0040    62D  2644
DPI                            $0040   142D  3402   3435
A0L/A0H                        $0041   143D   358    365y   909y   912y
                                      1007y  1010y  1031   1284   1290y
                                      1340   1345y  1350y  1365y  1370y
                                      1386y  1389y  1403   1407y  1416y
                                      1425y  1453y  1712y  1724y  1725y
                                      1737y  1738y  1775y  1778y  1799y
                                      1871   1885y  1888y  1902   2310
                                      2328y  2331y  2343y  2360y  2363y
                                      3549   3554y  3558y  3736   3756
                                      3767   3806   3813y  3816y  3838y
                                      3839   3844y  3847   3848   3851y
                                      3861y  3864y  3876y  3899   3900
                                      3904y  3931y  5945   6008y  6009
                                      6010   6034y  6036   6037   6175
                                      6182y   144D   361    369   1027
                                      1029   1032   1035   1287   1342
                                      1405   1874   1905   2314   3552
                                      3737   3739   3741   3743   3758
                                      3769   3770   3771   3772   3775
                                      3803   3807   3810   3842   3850
                                      3902   5946   6012   6039   6178
                                      6186
A1L/A1H                        $0043   145D   359    366y  1341   1362y
                                      1367y  1385y  1388y  1395y  1404
                                      1414y  1424y  1429y  1431y  1765y
                                      1769y  1786y  1789y  1794y  1803y
                                      5949   6011   6038   6176   6183y
                                       146D   363    370    371   1343
                                      1406   2143   2174   2179   5950
                                      6013   6040   6180   6187   6188
X0L                            $0045   147D   810    818    819    900
                                       913    931    979    995   1009
                                      1200   1257   1309   1318   1551
                                      1617   1635   1749   1966   1970
                                      1976   1977   2000   2005   2007
                                      2014   2045   2452   2841   2856
                                      4151   4526   4822   4825   4828
                                      4831   5132
X0H                            $0046   148D   808    820    821    898
                                       910    932    973    997   1006
                                      1080   1082   1096   1108   1199
                                      1258   1552   1619   1637   1751
                                      1844   1967   1969   1979   1980
                                      2001   2006   2011   2015   2843
                                      2859   4152   4820   5133
X1L/X1H                        $0047   149D   882    921   1121   1132
                                      1180   1232   1282   1326   1353
                                      1378   1411   1421   1439   1497
                                      1509   1518   1540   1569   1570
                                      1584   1601   1668   1686   1700
                                      1774   1798   1825   1935   1950
                                      1975   2003   2018   2035   2042
                                      2071   2110   2130   2170   2199
                                      2234   2259   2271   2274   2293
                                      2309   2408   2416   2422   2442
                                      2448   2460   2478   2496   2528
                                      2562   2587   2607y  2611y  2614y
                                      2618y  2670   2687   2702   2775
                                      2833   2850   2909y  2945y  2975
                                      2983   3003   3005   3019   3021y
                                      3038   3064   3201y  3245y  3257y
                                      3310y  3784   5469   5483   5489
                                      5498   5516   5524   5556   5570
                                      5602y  5694y   150D   506    508
                                      1123   1133   1181   1233   1285
                                      1327   1355   1380   1440   1498
                                      1510   1519   1543   1572   1573
                                      1586   1603   1683   1697   1777
                                      1828   1938   1953   1978   2004
                                      2019   2031   2036   2072   2111
                                      2133   2172   2238   2243   2248
                                      2263   2268   2270   2276   2312
                                      2417   2423   2444   2450   2461
                                      2834   2846   2948   2977   2984
                                      3006   3009   3039   3785   5485
                                      5517   5558
X2L/X2H                        $0049   151D  1585   1600   1618   1634
                                      1656   1669   1670   1687   1701
                                      1748   1768   1792   1814   1826
                                      1875   1917   1936   1951   1972
                                      1983   1995   2009   2038   2204
                                      2235   2260   2308   2325   2392
                                      2443   2592   2714   2836   2921
                                      2962   2976   2994y  2995   3011
                                      3013   3020   3022y  3048   3192y
                                      3197y  3223y  3294y  3924   3952
                                      3957    152D  1587   1602   1620
                                      1636   1654   1684   1698   1750
                                      1764   1829   1939   1954   1971
                                      1984   1996   2012   2033   2039
                                      2311   2393   2445   2710   2837
                                      2963   2978   2988   2990   3014
                                      3017   3185   3187
X3L                            $004b   153D  2330   2342   2362   2823
                                      2861   2887   2908   2949   2965
                                      2969   2996   3004   3012   3023
                                      3045   3054   3082
X3H                            $004c   154D  2327   2359   2821   2888
                                      2966   2970   3007   3015   3084
X4L/X4H                        $004d   155D  2830   2832   2848   2853
                                      2932y  3078   3406   3414   3415
                                      3438    156D  2926   2928   3080
                                      3404   3407   3409   3417   3418
X5L                            $004f   157D  3207   3243   3251   3256
                                      3264   3270   3309   3314
X5H                            $0050   158D  3210   3218   3228   3233
                                      3260   3263   3269   3274   3281
                                      3313
COLS                           $0050   189D  2569   4009   4054   4282
                                      4298   4665   4666   4667   4668
                                      4669   4670   4671   4672   4673
                                      4674   4675   4676   4677   4678
                                      4679   4680   4681   4682   4683
                                      4684   4685   4686   4687   4688
                                      4691   4692   4693   4694   4695
                                      4696   4697   4698   4699   4700
                                      4701   4702   4703   4704   4705
                                      4706   4707   4708   4709   4710
                                      4711   4712   4713   4714   4768
                                      4770   4931   5139   5293   5384
                                      5420   5422   5573   5575   5811
X6L                            $0051   159D  3209   3214   3279
X6H                            $0052   160D  3198   3215
X7L                            $0053   161D   437    441    443    444
                                      3244   3276   3285   3293   3423
                                      3443   6140   6150
X7H                            $0054   162D   438   3286   3421   3442
                                      6142   6154
X8L                            $0055   163D   439   6144
X8H                            $0056   164D   440   6146
GLL                            $0057   165D  5557   5560   5563   5681
                                      5685
GLH                            $0058   166D  5559
Font_Sel                       $0059   168D  2297   2505   5340   5428
Cursor_Col                     $005a   169D  2565   2615   3119   4053
                                      4773   4784   5168   5183   5313
                                      5342   5360   5369   5376   5401
                                      5419   5423   5430   5478   5492
                                      5520   5530   5564
Cursor_Row                     $005b   170D  2483   2608   4735   4772
                                      4783   5314   5343   5349
Z_Mem_Base                     $005c   171D  2712   2715   2725   2726y
                                      2730   2731
Z_Mem_Ptr                      $005e   172D  2713   2716   2724   2729
                                      4019y  4020
ZP_CLEAR                       $0060   173D  4883
Segment                        $0061   177D   494    496   5044   5094
                                      5880
Scr_Adr                        $0062   178D  2567y  4742   4745   5296
                                      5379   5381   5388   5397   5399
                                      5404   5429   5666y  5684y  5813
Col_Adr                        $0064   179D  4743   4747   4807   4809
                                      5169   5171   5184   5186   5298
                                      5426   5815
DICT_WORD                      $0068   180D  2931   3427   3647   3673
                                      3683   3692   3706   3711   3713
                                      3714   3716   3717   3719   3727
                                      3729
TEXT_WORD                      $006e   181D  2904   2916   3237   3261
                                      3267   3653
UNDERLINE                      $0080    63D  2635   5170
KEY_UP                         $0081    69
KEY_DOWN                       $0082    70
KEY_LEFT                       $0083    71D  5625
KEY_RIGHT                      $0084    72D  5639
KEY_F1                         $0085    12
KEY_F3                         $0086    13
KEY_F5                         $0087    14
KEY_F7                         $0088    15
KEY_F2                         $0089    16
KEY_F4                         $008a    17
KEY_F6                         $008b    18
KEY_F8                         $008c    19
IO_STATUS                      $0090   192D  4409   4411   4466   4488
                                      4499   4508   4527   4649   4988
                                      5861   5864   5893   5975   6006
CURSOR_UP                      $0091    23D  5197
INS                            $0094    53D  5246   5616
CURSOR_LEFT                    $009d    24D  5199
Jiffy                          $00a0   193D  2749   2756   3094   3095
                                      3096   5235   5237   5465   5466
                                      5467
Scr_Row                        $00ac   194D  5287   5290   5295
Col_Row                        $00ae   195D  5279   5281   5288   5292
                                      5297
FNLEN                          $00b7   196D  5962   5963   5979
FA                             $00ba   197D   403   4404   4468   4491
                                      4566   4585   5728   5737   5905
                                      5916   5927   5970   6000   6029
FNADR                          $00bb   198D  5976
MEMUSS                         $00c3   199D  5702   5703   5705
BLNSW                          $00cc   200D   400
BLNCT                          $00cd   201
BLNON                          $00cf   202
Charbuf                        $0200   203D  4049   4063   4077   4078
                                      4128   4138   4562   4599
SCNMPG                         $0288   204D   397
CINV                           $0314   205D   474
DSTATUS                        $033c   206D  4413   4421   4423   4426
                                      4517   4517   4517
Z_STATUS                       $033c   247D  4008   4250   4280   4296
                                      4297   4927   5137
Lvar_Lo                        $0400   248D   899    996   1476   2148
                                      2156   2162   2171
Z_VAR                          $0400   244D   248    249   4452   4454
                                      4457   4462   4495   4497   4561
                                      4589   4592   4595   4600   4630
                                      4636
Lvar_Hi                        $0410   249D   897    998   1478   2147
                                      2155   2160   2173
Z_STACK_LO                     $0500   245D  1202   4611   4889
Z_STACK_HI                     $0800   246D   950   4497   4611
SCREEN                         $0800   207D  4664   4665   4666   4667
                                      4668   4669   4670   4671   4672
                                      4673   4674   4675   4676   4677
                                      4678   4679   4680   4681   4682
                                      4683   4684   4685   4686   4687
                                      4688   4690   4691   4692   4693
                                      4694   4695   4696   4697   4698
                                      4699   4700   4701   4702   4703
                                      4704   4705   4706   4707   4708
                                      4709   4710   4711   4712   4713
                                      4714
START                          $1001   317D   319    322    322    372
                                      6073   6077   6179
Link                           $103b   345D   328
Mode_64                        $1041   351
Mode_64_loop                   $1053   365D   368    373
MEGA_Setup                     $1067   378D   374   6191
Set_Mode_80                    $10b7   422D   407   5002
BATE_20                        $10e0   454D   445
Set_Kernal_Vectors             $10f9   469D   395
Set_Kernal_Vectors_loop        $10fb   473D   476
Set_Attic_RAM                  $1105   481D   410   4999
Set_Attic_RAM_attic            $1121   496D   493
Header_X1                      $112d   502D  2386   2880   2901   2942
PC_LOOP                        $1135   513D   619   4319   5009   5488
PC_LOOP_nolog                  $1146   528D   526
PC_LOOP_var_10                 $115f   550D   547
PC_LOOP_var_20                 $1164   552D   549
PC_LOOP_var_30                 $1167   553D   551
z_op_zero                      $1174   562D   533
z_op_one                       $1178   571D   531
z_op_two                       $1186   589D   529
PC_LOOP_twop                   $119a   608D   555
z_execute                      $119c   611D   559    568    586
z_error_4                      $11a3   622D   634    662    663    664
                                       665
z_opcode                       $11a8   625D   558    567    585    618
opcodes_1op                    $11e8   668D   585
ZV8F                           $1206   690D  4839   4841
opcodes_0op                    $1208   693D   567
ZVB9                           $121a   705D  4843   4845
opcodes_var                    $1228   714D   558
z_error_1                      $1268   750D   737
opcodes_ext                    $126d   753D  4318
Get_Operand                    $1283   789D   581    601    606    837
                                       864
Get_Operand_const              $1290   808D   806
Get_Operand_check              $1299   812D   805
Get_Operand_store              $129e   814D   811
Get_Operand_return             $12ad   823D   812
Load_4_Operands                $12ae   827D   552    844   4311
Load_4_Operands_return         $12bd   845D   838
Load_8_Operands                $12c0   850D   550
Load_8_Operands_loop           $12c7   864D   873
Load_8_Operands_return         $12da   874D   865
Get_Var_X1L                    $12dd   879D  1308   1317   1533
Get_Var_A                      $12e6   888D   813
GeVa_10                        $12ec   894D   883
Get_Global_Var                 $12fc   905D   895   4210   4230   4239
                                      5131
Put_Var                        $1309   918D  1310   1319   1752   2470
Push_X0                        $1311   928D   885    986
Push_AY                        $1315   936D  2120   2124   2128   2149
                                      2180   2462
z_error_6                      $1328   953D   951
Store_Zero                     $132d   958D  1901   1925   2389   2864
                                      4337
Store_Byte                     $132f   964D  1297   1301   1856   1920
                                      1924   2116   2300   2400   2799
                                      4435   4549
Store_AX                       $1331   970D  1256   1271   1499   1688
                                      1702   1889   2249   2277   4330
Store_A_X0H                    $1333   976D  1846
Store_X0                       $1335   982D  1534   1553   2081   2453
                                      2867
Store_Var                      $133a   989D   922
Put_Global_Var                 $134a  1002D   993
Get_Global_Var_Addr            $1357  1015D   908   1005
Main_False                     $1370  1050D  1235   1259   1566   1591
                                      1607   1624   1641   1658   1671
                                      1714   2865   3066   4604
Main_False_mft_10              $1375  1055D  1064
Main_True                      $137c  1060D   709    711   1234   1260
                                      1575   1590   1606   1623   1640
                                      1657   1674   1713   2868   3065
                                      4441   4541
Main_False_mft_20              $1381  1065D  1054
Main_False_mft_30              $138d  1072D  1067
Main_False_mft_40              $1397  1078D  1074
Main_False_mft_50              $139a  1080D  1077
Main_False_mft_60              $13a3  1084D  1071
Branch_XA                      $13a9  1090D  1083   1511
Main_False_mft_70              $13b1  1101D  1099
Main_False_mft_80              $13c3  1111D  1109
Main_False_return              $13c7  1113D  1056
z_rtrue                        $13c8  1117D   696   1087   1165
z_rfalse                       $13d2  1128D   697   1085
z_print                        $13db  1138D   698   1163
z_print_id                     $13dd  1144D  1147
z_print_di                     $13e9  1150D  1153
z_print_ret                    $13f1  1158D   699
z_nop                          $13f9  1169D   700
z_ret_popped                   $13fa  1176D   704
z_pop                          $1404  1186D   884    892   1179   1470
                                      1475   1482   1486   1490   2469
                                      4842   4844
z_error_5                      $141b  1205D  1203
z_catch                        $1420  1209D   705
z_quit                         $1425  1215D   706   4002
quit_20                        $1428  1219D  4915
quit_30                        $1431  1220D  1220
z_jz                           $1433  1227D   675
z_get_sibling                  $143d  1239D   676
z_get_child                    $1446  1248D   677
z_get_sibling_get              $144d  1255D  1243   1245   1252
z_get_parent                   $145d  1264D   678
z_get_parent_get               $1464  1270D  1268
z_get_prop_len                 $146a  1275D   679
z_get_prop_len_mask            $1485  1296D  1291
z_get_prop_len_V3              $148a  1299D  1289
z_inc                          $1491  1305D   680   1633
z_dec                          $1499  1314D   681   1616
z_print_addr                   $14a1  1323D   682
z_remove_obj                   $14a8  1332D   684   1761
z_remove_obj_ro_10             $14dd  1376D  1354   1356   1379   1381
z_remove_obj_ro_20             $14f3  1393D  1371
z_remove_obj_ro_30             $14f7  1395D  1398
z_remove_obj_ret40             $14fe  1399D  1346
z_remove_obj_V3                $14ff  1401D  1337
z_remove_obj_ro_50             $1522  1419D  1412   1422
z_remove_obj_ro_60             $1531  1427D  1417
z_remove_obj_ret70             $153a  1432D  1408
z_print_obj                    $153b  1436D   685
z_print_obj_A                  $153f  1443D  5134
z_print_obj_prio_1             $1546  1449D  1447
z_print_obj_V4                 $1550  1454D  1450
z_print_obj_decode             $1555  1458D  1456
z_ret                          $1558  1462D   686   1124   1134   1182
z_ret_loop                     $1569  1475D  1480
z_ret_noloc                    $1576  1482D  1473
z_ret_irqret                   $1598  1500D  1495
z_ret_return                   $159a  1502D  1496
z_jump                         $159b  1506D   687
z_print_paddr                  $15a2  1515D   688
z_print_paddr_label            $15b6  1526D  1523
z_load                         $15b9  1530D   689
z_not                          $15bf  1538D   741   4838   4840
Store_XA                       $15c8  1548D  1907   1940   1955   1985
                                      2073
z_je                           $15cf  1557D   635
z_je_loop                      $15d3  1565D  1571   1574
z_jl                           $15e9  1579D   636
z_jl_sig                       $15f5  1590D  1588
z_jg                           $15fb  1595D   637
z_jg_sig                       $1607  1606D  1604
z_dec_chk                      $160d  1611D   638
z_dec_chk_sig                  $161c  1623D  1621
z_inc_chk                      $1622  1628D   639
z_inc_chk_sig                  $1631  1640D  1638
z_jin                          $1637  1645D   640
z_jin_get                      $163e  1653D  1651
z_jin_false                    $164a  1658D  1655
z_test                         $164d  1662D   641
z_test_loop                    $164f  1668D  1673
z_or                           $165e  1678D   642
z_and                          $166a  1692D   643
z_test_attr                    $1676  1706D   644
z_set_attr                     $1681  1718D   645
z_clear_attr                   $1689  1730D   646
z_store                        $1693  1743D   647
z_insert_obj                   $169e  1756D   648
z_insert_obj_V3                $16cf  1792D  1762
z_insert_obj_return            $16e6  1804D  1782   1801
Word_Array                     $16e7  1808D  1843
Byte_Array                     $16ea  1818D  1855
z_loadw                        $16ff  1838D   649
z_loadb                        $170a  1850D   650
z_get_prop                     $1710  1860D   651
z_get_prop_found               $1729  1881D  1868
z_get_prop_read                $172f  1885D  1879
z_get_prop_low                 $1733  1888D  1883
z_get_prop_addr                $1738  1893D   652
z_get_next_prop                $174a  1911D   653
z_get_next_prop_next           $1754  1921D  1918
z_get_next_prop_zero           $175f  1925D  1922
z_add                          $1762  1929D   654
z_sub                          $176f  1944D   655
z_mul                          $177c  1959D   656
z_mul_loop                     $1785  1969D  1982
z_mul_zero                     $179c  1981D  1973
Divide_Unsigned                $17a6  1989D  2041
Divide_Unsigned_loop           $17b5  2003D  2017
Divide_Unsigned_next           $17cd  2016D  2013
z_error_8                      $17d5  2021D  1997
Divide_Signed                  $17da  2025D  2070   2080   2451
Sign_ZPX                       $17fa  2050D  2037   2040   2044   2419
                                      2972
Sign_ZPX_return                $1809  2063D  2055
z_div                          $180a  2067D   657
z_mod                          $1814  2077D   658
z_call_s                       $181a  2085D   659    683    717    729
z_call_n                       $181e  2093D   660    690    742    743
call_00                        $1820  2109D  2089   5487
call_10                        $182d  2116D  2114
call_20                        $1830  2118D  2112
call_25                        $185c  2142D  2139
call_30                        $1865  2147D  2176
call_32                        $187e  2159D  2153
call_36                        $188a  2164D  2157
call_40                        $189d  2174D  2165
call_50                        $18a2  2178D  2144
z_set_colour                   $18b9  2192D   661
z_set_colour_ret               $18d6  2210D  2201   2206
z_set_colour_coltab            $18d7  2212D  2202   2207
z_log_shift                    $18e4  2228D   758
z_log_shift_left               $18ea  2237D  2240
z_log_shift_right              $18f2  2243D  2236   2246
z_log_shift_store              $18f8  2248D  2241
z_art_shift                    $18fd  2253D   759
z_art_shift_left               $1903  2262D  2265
z_art_shift_right              $190b  2268D  2261   2273
z_art_shift_store              $1917  2276D  2266
z_set_font                     $191c  2281D   760
z_set_font_offset              $192c  2297D  2295
X1_PLUS_X2_TO_A0               $1937  2304D  2326   2341
z_storew                       $1949  2320D   718
z_storeb                       $1959  2336D   719
z_put_prop                     $1961  2348D   720
z_put_prop_byte                $1974  2362D  2356
z_error10                      $1979  2365D  2354
z_error11                      $197e  2366D  2358
z_read                         $1983  2370D   721
z_read_V4                      $198c  2383D  2381
z_read_skip                    $19ab  2396D  2391   2394
z_read_return                  $19b6  2401D  2398
z_print_char                   $19b7  2405D   722
z_print_num                    $19bc  2413D   723
z_print_num_pos                $19ca  2422D  2418
z_print_num_loop               $19d4  2426D  2434
z_print_num_next               $19df  2432D  2428
z_random                       $19e5  2439D   724
z_push                         $1a01  2457D   725
z_pull                         $1a08  2466D   726
z_split_window                 $1a0e  2474D   727
z_split_window_set             $1a24  2487D  2485
z_split_window_return          $1a27  2488D  2480
z_set_window                   $1a28  2492D   728
z_set_window_font              $1a40  2505D  2503
z_set_window_lower             $1a4c  2514D  2507
z_set_window_set               $1a50  2517D  2512
z_erase_window                 $1a59  2524D   730
z_erase_window_uloop           $1a6a  2535D  2538
z_erase_window_lower           $1a73  2541D  2529
z_erase_window_lloop           $1a75  2542D  2545
z_erase_window_unspl           $1a7e  2548D  2531
z_erase_window_clear           $1a8b  2554D  2533
z_erase_line                   $1a8e  2559D   731
z_erase_line_loop              $1a98  2567D  2570
z_erase_line_return            $1a9f  2571D  2564
z_set_cursor                   $1aa0  2575D   732
z_get_cursor                   $1ab4  2598D   733
Reverse_On                     $1acb  2623D  2672   4106   4295
Underline_On                   $1ad0  2632D  2676
Bold_On                        $1ad5  2641D  2674
z_set_text_style               $1ada  2650D   734
z_buffer_mode                  $1aed  2683D   735
z_output_stream                $1af6  2693D   736
z_output_stream_return         $1b17  2717D  2706
z_output_stream_close          $1b18  2722D  2704
Error_Beep                     $1b2c  2736D  2779   4387   5267   5579
Click                          $1b2c  2741D  2777
Click_wait                     $1b49  2756D  2757
z_sound_effect                 $1b56  2765D   738
z_read_char                    $1b5f  2784D   739
z_read_char_loop               $1b6c  2792D  2794
z_read_char_exit               $1b7c  2799D  2797
Set_Data_YA                    $1b7f  2803D  1520   2838   2985   3040
                                      3344   3397
z_scan_table                   $1b88  2813D   740
z_scan_table_all               $1b9a  2832D  2828
z_scan_table_addr              $1ba1  2836D  2832
z_scan_table_loop              $1ba8  2840D  2862
z_scan_table_next              $1bc1  2853D  2847
zst_fa                         $1bd4  2864D  2822   2824
zst_tr                         $1bda  2867D  2848   2851
z_tokenise                     $1be0  2872D   744
z_encode_text                  $1bf4  2893D   745
z_encode_text_clear            $1bfb  2904D  2906
z_encode_text_loop             $1c02  2909D  2922
z_encode_text_next             $1c19  2924D  2915   2920
z_encode_text_copy             $1c26  2931D  2934
Clear_Table                    $1c2f  2939D  2964
ClTa_10                        $1c34  2944D  2950
ClTa_20                        $1c3d  2949D  2947
z_copy_table                   $1c42  2955D   746
z_copy_table_safe              $1c59  2975D  2971
z_copy_table_fwd               $1c63  2983D  2973
z_copy_table_floop             $1c71  2992D  2997
z_copy_table_return            $1c7e  2998D  2967
z_copy_table_bwd               $1c7f  3002D  2979
z_copy_table_bloop             $1c9f  3019D  3024
z_print_table                  $1cac  3029D   747
z_print_table_start            $1cc0  3046D  3043
z_print_table_rloop            $1cc3  3047D  3055
z_print_table_cloop            $1cc8  3049D  3052
z_check_argc                   $1cd8  3060D   748
Set_Timeout                    $1ce3  3070D  2380   2787
Set_Timeout_return             $1d18  3098D  3077
Log_A                          $1d19  3102
Log_A_return                   $1d40  3123D  3106   3121
Dump_A                         $1d42  3128D  3145   3147
Dump_Word                      $1d4e  3139
Parse_Input                    $1d65  3154D  2395   2884
Parse_AY_Dict                  $1d6b  3179D  2889
Parse_10                       $1d80  3196D  3193
Parse_15                       $1d84  3198D  3195
Parse_17                       $1d8e  3203D  3199
Parse_18                       $1d96  3207D  3205
Parse_20                       $1d9e  3214D  3252   3265   3275   3300
Parse_25                       $1daa  3221D  3216
Parse_30                       $1db0  3228D  3219
Parse_35                       $1db9  3233D  3230
Parse_40                       $1dbf  3237D  3239
Parse_45                       $1dda  3254D  3234   3249
Parse_50                       $1df3  3267D  3247
Parse_55                       $1dfb  3274D  3255   3259
Parse_60                       $1e1f  3293D  3284   3287   3298
Parse_70                       $1e29  3299D  3292
Skip_Surplus                   $1e2e  3304D  3231
SkSu_10                        $1e32  3309D  3316
SkSu_Ret                       $1e43  3317D  3308   3312
Sep_All                        $1e44  3320D  2912   3258   3311
Sep_Dict                       $1e49  3332D  3246
SeDi_10                        $1e5a  3347D  3341   3351
SeDi_20                        $1e65  3353D  3349
SeDi_Ret                       $1e66  3354D  3329
Sep_Std                        $1e67  3357D  3248   3328
SeSt_10                        $1e69  3366D  3369
SeSt_Ret                       $1e72  3371D  3367
Skip_Data                      $1e73  3374D  3400
Skip_Data_return               $1e7c  3385D  3383
Dictionary_Search              $1e7d  3389D  3278
DiSe_20                        $1eae  3420D  3410   3439
DiSe_30                        $1eb8  3425D  3430
DiSe_50                        $1ec5  3433D  3428   3436
DiSe_70                        $1ed3  3442D  3408
DiSe_Ret                       $1ed7  3444D  3484
ZSCII_2                        $1ed8  3451D  3498   3677
Decode_YX                      $1ef2  3454D  1328   1458
Decode_Text                    $1efa  3465D  1148   1526   3567
DeTe_10                        $1efe  3481D  3508   3577
DeTe_15                        $1f02  3483D  3493
DeTe_20                        $1f0d  3488D  3485
DeTe_25                        $1f19  3494D  3491
DeTe_30                        $1f27  3502D  3496
DeTe_35                        $1f2f  3506D  3503
DeTe_40                        $1f31  3507D  3487   3499   3505   3519
DeTe_50                        $1f37  3510D  3500
DeTe_55                        $1f49  3523D  3489
DeTe_60                        $1f5d  3540D  3543
DeTe_65                        $1f86  3572D  3576
Get_Packed_Char                $1f91  3581D  3483   3510   3517   3531
GPC_10                         $1fa7  3597D  3589
GPC_20                         $1fb1  3604D  3585
GPC_Ret                        $1fd6  3627D  3587
Encode                         $1fd7  3630D  2924   3277
Enco_10                        $1fdd  3646D  3654
Enco_20                        $1fdf  3647D  3661   3668   3697   3702
Enco_30                        $1fe7  3653D  3644
Enco_35                        $1ff8  3663D  3657   3659
Enco_40                        $2004  3670D  3664   3666
Enco_50                        $2014  3677D  3680
Enco_60                        $2039  3699D  3678
Enco_70                        $2041  3704D  3650
Enco_80                        $2045  3706D  3726
A0_x_8                         $206e  3733D  3755   3765
Object_Offset                  $207c  3748D  3801
Object_Offset_label            $208b  3760D  3757
Object_Offset_V4               $208e  3765D  3753
Get_Object_X1                  $20a4  3781D  1255   1270   1339   1402
                                      1653   3834   3951
Get_Object_Reg                 $20a8  3788D  1352   1377   1410   1420
                                      1449   1772   1796
Get_Object_X1_label            $20b0  3805D  3802
Get_Object_X1_objlow           $20c7  3816D  3812
First_Property                 $20ca  3821D  1919   3923
First_Property_fips_1          $20d1  3834D  3832
First_Property_fips_2          $20db  3839D  3835
FiPr_10                        $20f0  3851D  3849
Property_Size                  $20f5  3857D  1299   1881   2355   3896
Property_Size_one              $2103  3869D  3862
Property_Size_V3               $210a  3876D  3860
Next_Property                  $2113  3887D  1923   3927
NePr_20                        $2121  3903D  3901
Find_Property                  $2128  3909D  1867   1900   1921   2353
Find_Property_loop             $212b  3924D  3928
Find_Property_match            $2136  3929D  3925
Find_Property_ok               $213d  3933D  3930
Find_Property_return           $213f  3934D  3926
Get_Attr_Addr                  $2140  3938D  1711   1723   1735
gaa_01                         $2152  3962D  3964
gaa_02                         $2153  3963D  3961
Dump_Code                      $2157  3968D  3995
Dump_Code_loop                 $2159  3972D  3982
INTERNAL_ERROR                 $2171  3988D   622    750    953   1205
                                      1211   2021   2365   2366   4320
INER_10                        $218b  3998D  4001
Print_To_Status                $2196  4005D  4043
PTS_01                         $219f  4012D  4010
Print_Mem                      $21a0  4015D  4036
Print_Unbuffered               $21a7  4025D  4038   4040
Print_Formatted                $21aa  4031D  2409   2421   2430   3507
PrFo_10                        $21be  4042D  4034
PrFo_20                        $21c2  4044D  4041
PrFo_25                        $21da  4059D  4047
PrFo_30                        $21db  4061D  4055
PrFo_35                        $21df  4063D  4066
PrFo_40                        $21e9  4068D  4064
PrFo_45                        $21f6  4077D  4082
PrFo_50                        $21fd  4080D  4075
z_new_line                     $2205  4088D   707   1164   3994   4045
                                      4071
z_new_line_wait                $223a  4114D  4116
Terminate_Buffer               $224f  4123D  4094
Print_Buffer                   $2258  4132D  2198   2290   2383   2477
                                      2495   2527   2586   2669   2686
                                      2701   2788   3037
PrBu_10                        $225e  4138D  4142
PrBu_Ret                       $226d  4145D  4136
Format_Integer                 $226e  4148D  4211   4231   4240   4791
Format_YZ                      $2273  4155D  2424
Format_Integer_loop            $2275  4159D  4175
Format_Integer_sub             $2279  4161D  4171
Format_Integer_next            $228b  4172D  4167
Format_Integer_blanks          $229c  4182D  4187
Format_Integer_return          $22a7  4188D  4183
FormLo                         $22a8  4190D  4163
FormHi                         $22ac  4194D  4166
Status_Number                  $22b0  4201D  4268   4276
StNu_10                        $22ba  4214D  4221
StNu_20                        $22c4  4219D  4216
Print_Time                     $22ca  4226D  5149
Print_Time_loop                $22f6  4249D  4253
Print_Score                    $2302  4258D  5147
Print_Score_clr_sc             $2306  4263D  4266
Print_Score_clr_mv             $2317  4271D  4274
Print_Score_loop               $2326  4279D  4283
Print_Status                   $2332  4288D  5150
z_extension                    $234b  4304D   710
z_error12                      $2368  4320D   761    762    763    764
                                      4315
z_save_undo                    $236d  4325D   765
z_restore_undo                 $2373  4334D   766
Empty_Keyboard_Queue           $2376  4341D  4097   4345   4383
Decode_Unit                    $237c  4349D  4371
DeUn_10                        $2383  4355D  4352
DeUn_20                        $2389  4358D  4354   4356
Unit_Dialog                    $238c  4363D  4447   4556
Wait_for_Return                $239f  4376D  5001
wfret_10                       $23ab  4384D  4388
wfret_99                       $23b7  4389D  4386
File_Dialog                    $23b8  4392D  4449   4558
Read_Disk_Status               $23bf  4400D  4516
RDS_10                         $23cf  4410D  4418
RDS_20                         $23e2  4419D  4415
RDS_30                         $23e5  4420D  4412
z_ext_save                     $23f7  4431D   756
z_save                         $23ff  4437D   701
Save_Game                      $2405  4444D  4433   4440
WG_05                          $242b  4456D  4459
WG_10                          $2435  4461D  4464
WG_20                          $244e  4473D  4481
WG_25                          $245b  4479D  4477
WG_30                          $2461  4483D  4475
WG_40                          $2482  4498D  4502
WG_50                          $2494  4507D  4511
WG_Err                         $24a4  4515D  4489   4500   4509
Write_Block                    $24b6  4522D  4498   4507
WrBl_10                        $24bc  4528D  4531
z_restore                      $24cb  4537D   702
z_ext_restore                  $24d1  4544D   757
Restore_Game                   $24d9  4552D  4540   4547
Restore_Game_saveloc           $24f3  4561D  4564
Restore_Game_fn_loop           $250a  4571D  4579
Restore_Game_no_conv           $2517  4577D  4575
Restore_Game_fn_done           $251d  4580D  4573
Restore_Game_cancel            $2543  4598D  4594
Restore_Game_resloop           $2545  4599D  4602
Restore_Game_ver_ok            $2554  4606D  4597
Restore_Game_st_loop           $255e  4612D  4614
Restore_Game_hd_loop           $256c  4620D  4622
Restore_Game_stack             $257c  4630D  4633
Restore_Game_PC                $2586  4636D  4639
Read_Block                     $2591  4645D  4591   4612   4620
Read_Block_loop                $2595  4650D  4653
Row_Lo                         $25a4  4664D  4741   5286
Row_Hi                         $25bd  4690D  4744   5289
L_Encode_A                     $25d6  4716D  3671   3675   3685   3694
L_Encode_Y                     $25d7  4717D  3670   3696   3700
Sep_Std_List                   $25d8  4721D  3365   3366
Z_Arg_Count                    $25de  4722D  1471   2178   2183   3063
Z_Buffer_Mode                  $25df  4723D  2688   4037
Z_Active_Window                $25e0  4724D  2291   2497   2551   3105
                                      4039
Z_Active_Font                  $25e1  4725D  2298   2299   2501
Set_Screen_Pointer             $25e3  4732D  2487   4774
Set_Screen_Pointer_X           $25e5  4738D  5284   5315   5350   5785
                                      5810
Window_Home                    $25f6  4752D  2486
Set_Row_Col                    $25fa  4759D  2520   2594   4101   5803
SRC_10                         $2600  4768D  4766
SRC_20                         $2606  4772D  4769
Get_Row_Col                    $260d  4777D  5791
Info_Size                      $2612  4788D  4978
InSi_10                        $2619  4794D  4799
Screen_Setup                   $2625  4803D   409   5003
Story_Pages                    $262e  4814D  4976
Story_Pages_round              $2645  4829D  4826
Story_Pages_return             $264a  4832D  4830
Modify_Op                      $264b  4836D  4852   4925
Version_4_Setup                $2660  4850D  4910
Version_5_Setup                $2664  4857D  4893
z_restart                      $2675  4871D   418    703
z_restart_clear                $2681  4881D  4884
z_restart_V3                   $26af  4905D  4903
z_restart_check3               $26be  4912D  4909
z_restart_set3                 $26ce  4919D  4913
z_restart_config               $26e2  4929D  4907   4911
z_restart_V4_Flags             $2708  4953D  4942
z_restart_setconf              $270a  4962D  4952
z_restart_res                  $2747  4987D  4997
z_restart_dot                  $2759  4995D  4992
z_restart_story                $2762  5000D  4989
Next_Datum                     $277e  5013D  1834   1845   2845   2849
                                      2992   3049   3345   3347   3399
                                      3401   3403   3405   3425   3433
                                      3604   3608
Next_Datum_banked              $2796  5043D  5031   5035
Next_Datum_get                 $27ab  5053D  5038   5049
Next_Datum_exit                $27b4  5057D  5055
Next_Instruction               $27b8  5062D   523    535    807    809
                                       861    891    985   1053   1057
                                      1063   1081   2142   2159   2161
                                      4308   4310
Next_Instruction_banked        $27d1  5093D  5081   5085
Next_Instruction_get           $27e6  5103D  5088   5099
Next_Instruction_exit          $27ef  5107D  5105
z_show_status                  $27f4  5113D   708   2382
zss_10                         $27f9  5123D  5126
zss_20                         $2812  5137D  5140
zss_30                         $282b  5149D  5146
zss_40                         $282e  5150D  5148
zss_90                         $2833  5155D  5159
Cursor_On                      $283e  5164D  2791   5361   5370   5493
                                      5583
Cursor_Off                     $284e  5178D  2795   5359   5368   5481
                                      5585
Special_Keys                   $2860  5194D  5207
Translate_Keys                 $2864  5203D  5248
CSK_10                         $2866  5207D  5210
CSK_20                         $2870  5213D  5208
Get_Character                  $2875  5220D  2792   4384   5584
Get_Character_loop             $2876  5229D  5233   5238   5268
Get_Character_got              $288f  5242D  5230
Get_Character_lower            $28ac  5257D  5253
Get_Character_ctrl             $28b8  5264D  5260
Get_Character_error            $28bc  5267D  5251   5258
Get_Character_exit             $28c1  5270D  5240   5243   5245   5247
                                      5249   5255   5262   5265
Scroll_Main_Window             $28c3  5275D  5347
Scroll_Main_Window_row_loop    $28cd  5284D  5303
Scroll_Main_Window_col_loop    $28e3  5295D  5300
Home_Screen                    $28f7  5308D  4294   5329
Clear_Screen                   $2903  5321D   415   2554   4979   5717
Clear_Screen_loop              $2906  5326D  5328
Return_Screen                  $2911  5335D  3122   5413   5695   5718
ReSc_10                        $2925  5349D  5346
Edit_Left                      $292d  5356D  5377   5629
Edit_Right                     $2936  5365D  5641
Edit_Del                       $293f  5374D  5611
Edit_Del_loop                  $2945  5379D  5385
Edit_Ins                       $2956  5393D  5620
Edit_Ins_loop                  $2959  5396D  5402
CHROUT                         $2969  5409D  3050   3108   3114   3116
                                      3118   3133   3135   3143   3149
                                      3976   3978   3980   4028   4139
                                      4534   4656   4994   5527   5658
                                      5707   5899
CHRO_10                        $297c  5424D  5421
Prompt_Color                   $298e  5438D  5523   5561
Text_Color                     $2992  5445D  5598   5690   5776
Set_Colour                     $2994  5451D  5441
Set_Colour_return              $2999  5455D  5453
Timeout_Routine                $299a  5459D  5593
Timeout_Routine_save           $29a6  5469D  5473
Timeout_Routine_rest           $29da  5497D  5500
Got_Line                       $29e4  5508D  4368   4397
Got_Line_loop                  $29fa  5524D  5529
Got_Line_call                  $2a06  5530D  5526
Get_Line_X1                    $2a0f  5551D  2387   5531
Get_Line_X1_lm                 $2a25  5564D  5562
Get_Line_X1_max                $2a39  5575D  5572
Get_Line_X1_rm                 $2a3b  5576D  5574
Get_Line_X1_error              $2a3f  5579D  5610   5619   5628   5635
                                      5647   5649
Get_Line_X1_loop               $2a42  5583D  5577   5595   5612   5621
                                      5630   5642   5660
Get_Line_X1_del                $2a6a  5607D  5589
Get_Line_X1_ins                $2a77  5616D  5608
Get_Line_X1_left               $2a84  5625D  5617
Get_Line_X1_limit              $2a91  5634D  5626
Get_Line_X1_valid              $2a9e  5646D  5640
Get_Line_X1_store              $2ab0  5658D  5654   5656
Get_Line_X1_end                $2ab6  5664D  5587
Get_Line_X1_skip               $2aba  5666D  5670
Get_Line_X1_buffer             $2ac3  5674D  5667
Get_Line_X1_copy               $2ad2  5684D  5688
Get_Line_X1_empty              $2ada  5690D  5683
Get_Line_X1_return             $2ae6  5695D  5691
PrintText                      $2ae9  5699D   497   1219   3996   4109
                                      4118   4299   4382   4446   4448
                                      4517   4555   4557   4914   4980
                                      4985
PrTe_A                         $2aef  5705D  5710
PrTe_B                         $2afa  5711D  5706
Reset_Screen                   $2afb  5714D  4603   5008
Open_Story                     $2b06  5724D  4894
ASCII_Hex                      $2b2a  5744D  3111   3130   3973
Hex_11                         $2b37  5757D  5755
Hex_12                         $2b43  5764D  5762
Select_Text_Window             $2b44  5767D  4300   4981
Select_Status_Window           $2b53  5780D  4291
Save_Cursor                    $2b5a  5788D  3046   4098   5118
Restore_Cursor                 $2b62  5798D  3047   4117   4119   5161
Erase_Row                      $2b69  5806D  2535   2542   5304   5326
Erase_Row_loop                 $2b6f  5812D  5817
ASCII_TS                       $2b7d  5823D  3991
asts_01                        $2b80  5831D  5833
Load_Page                      $2b88  5838D  4897   4987   5892
Load_Page_loop                 $2b8d  5862D  5867
Load_Page_eof                  $2b9a  5868D  5865
Load_Story                     $2ba0  5875D  5000
Load_Story_next                $2ba4  5882D  5902
Load_Story_loop                $2bb9  5892D  5888
Load_Story_prog                $2bcb  5900D  5897
Load_Story_eof                 $2bd1  5903D  5894
Close_File                     $2be4  5913D  4513   4518   6017   6044
Delete_Config                  $2bf1  5923D  5960
DeCo_10                        $2c00  5932D  5936
Prep_Config                    $2c0e  5940D  5961   5988
Save_Config                    $2c27  5957D  1218
Send_Filename                  $2c34  5967D  5999   6028
Send_Filename_fname            $2c42  5976D  5980
Load_Config                    $2c4f  5985D   416
Load_File                      $2c52  5992
Load_File_loop                 $2c61  6005D  6014
Load_File_stop                 $2c76  6016D  6007
Save_File                      $2c7c  6021D  5964
Save_File_loop                 $2c8b  6034D  6041
Bank_Order                     $2ca2  6047D  5046   5096   5885
Z_Mem_Flag                     $2caa  6049D  2708   2728   4035
Z_Timeout                      $2cab  6050D  3079   3081   5482   5484
Unit_Buf                       $2cad  6053D  4366   4367
Unit_Text                      $2cae  6054D  4369   4370
File_Buf                       $2cb1  6056D  4395   4396
File_Text                      $2cb2  6057D  4473   4571
Game_Unit                      $2cc7  6059D   404   5727   5904   5926
PRESSRET                       $2cc8  6061D  4379   4380   4381
SAVEUNIT                       $2ce4  6062D  4381   4446   4446   4446
SAVEFILE                       $2cf1  6063D  4448   4448   4448
LOADUNIT                       $2cfe  6064D  4555   4555   4555
LOADFILE                       $2d10  6065D  4557   4557   4557
MORE                           $2d22  6066D  4109   4109   4109
EOS                            $2d28  6067D  1219   1219   1219
NOSTORY                        $2d42  6068D  4914   4914   4914
Msg_Attic                      $2d4c  6069D   497    497    497
BITSHIFTER                     $2d6b  6070D  4980   4980   4980
InfoClr                        $2d83  6071D  4982   4983   4984
InfoPro                        $2d84  6072D  4795   4977
Bank0                          $2da4  6080
Bank1                          $2dc4  6088
InfoSto                        $2de4  6096D  4977
InfoEnd                        $2e05  6097D  4984
BLANKS                         $2e05  6099D  4118   4118   4118
SCORE                          $2e11  6104D  4217   4263   4271   4279
STIME                          $2e2d  6105D  4234   4236   4244   4246
                                      4249
INTERR                         $2e39  6109D  3992   3993   3996   3996
                                      3996
ConfigDel                      $2e43  6111D  5932   5935
Configname                     $2e46  6112D  5935   5951   5952   5953
CONFIG_START                   $2e4e  6115D  5943   5944
FG_Color                       $2e4e  6116D  2498   4885
TI_Color                       $2e4f  6117
BO_Color                       $2e50  6118D   413
BG_Color                       $2e51  6119D   411
TB_Color                       $2e52  6120
Load_Charset                   $2e55  6130D   408
EOP                            $2e55  6126D   250   6075
CONFIG_END                     $2e55  6123D  5947   5948
Load_Charset_loop              $2e71  6149D  6152   6156
Charset                        $2e81  6161D  6135   6137
Z_HEADER                       $2f00   250D   256    257    258    259
                                       260    261    262    263    264
                                       265    266    267    268    269
                                       270    271    272    273    274
                                       275    276    277    278    279
                                       280    281    282    283    284
                                       285    286    287    288    289
                                       290    291    292    293    294
                                       296    297    507   1034   1283
                                      1286   1873   1903   1906   2313
                                      2711   2927   2989   3008   3016
                                      3186   3551   3809   3841   4451
                                      4453   4503   4593   4596   4616
                                      4895   4929   5036   5086   6077
                                      6081   6085   6089   6093
h_version                      $2f00   256D  4901
h_config                       $2f01   257D  4941   4962   5144
h_resident_size_hi             $2f04   258
h_resident_size_lo             $2f05   259
h_start_pc_hi                  $2f06   260D  5004
h_start_pc_lo                  $2f07   261D  5006
h_dictionary_hi                $2f08   262D  3176   3343
h_dictionary_lo                $2f09   263D  3175   3342
h_objects_hi                   $2f0a   264D  1872   3808
h_objects_lo                   $2f0b   265D  1870   3805
h_globals_hi                   $2f0c   266D  1033
h_globals_lo                   $2f0d   267D  1030
h_dynamic_size_hi              $2f0e   268D  4505   4618
h_dynamic_size_lo              $2f0f   269
h_flags_hi                     $2f10   270D  4606   4627
h_flags_lo                     $2f11   271D  4608   4625   4964   4965
h_serial                       $2f12   272
h_abbreviations_hi             $2f18   273D  3550
h_abbreviations_lo             $2f19   274D  3548
h_file_size_hi                 $2f1a   275D  4821
h_file_size_lo                 $2f1b   276D  4823
h_checksum_hi                  $2f1c   277
h_checksum_lo                  $2f1d   278
h_interpreter_number           $2f1e   279D  4970
h_interpreter_version          $2f1f   280D  4972
h_screen_rows                  $2f20   281D  4935
h_screen_cols                  $2f21   282D  4932
h_screen_width_hi              $2f22   283D  4938
h_screen_width_lo              $2f23   284D  4933
h_screen_height_hi             $2f24   285D  4939
h_screen_height_lo             $2f25   286D  4936
h_font_width                   $2f26   287D  4967
h_font_height                  $2f27   288D  4968
h_functions_offset_hi          $2f28   289
h_functions_offset_lo          $2f29   290
h_strings_offset_hi            $2f2a   291
h_strings_offset_lo            $2f2b   292
h_default_bg_color             $2f2c   293
h_default_fg_color             $2f2d   294
h_Alphabet_hi                  $2f34   296
h_Alphabet_lo                  $2f35   297
Mode_65                        $3681  6166D   348
Mode_65_loop                   $3693  6182D  6185   6190
EOC                            $36a7  6195D   322    360    362   6189
Raster                         $d012   209D  2447
BorderCol                      $d020   210D   414   2208
BackgCol0                      $d021   211D   412   2209
Voc1FreqLo                     $d400   212D  2745
Voc1FreqHi                     $d401   213D  2747
Voc1Control                    $d404   214D  2755   2758
Voc1SusRel                     $d406   215D  2751
FiltMode                       $d418   216D  2753   2760
Random                         $d41b   217D  2446
COLRAM                         $d800   208
ROM_Vectors                    $fd30   218D   473
Init_IO                        $fda3   219D   394
Init_Editor                    $ff5b   220D   398
SETMSG                         $ff90   226D   417
SECOND                         $ff93   227D  4471   4494   4569   5731
                                      5908   5919   5930   5973   6032
TKSA                           $ff96   228D  4407   4588   5740   6003
ACPTR                          $ffa5   229D  4410   4650   5862   6005
CIOUT                          $ffa8   230D  4479   4484   4486   4529
                                      4577   5733   5735   5933   5977
                                      6035
UNTLK                          $ffab   231D  4419   4640   5903   6016
UNLSN                          $ffae   232D  4487   4512   4515   4580
                                      5736   5909   5920   5937   5981
                                      6043
LISTEN                         $ffb1   233D  4469   4492   4567   5729
                                      5906   5917   5928   5971   6030
TALK                           $ffb4   234D  4405   4586   5738   6001
SETNAM                         $ffbd   235D  5954
GETIN                          $ffe4   236D  4114   4344   5229
PLOT                           $fff0   237
RESET                          $fffc   238
X1L/X1H                        $0047   149D   882    921   1121   1132
                                      1180   1232   1282   1326   1353
                                      1378   1411   1421   1439   1497
                                      1509   1518   1540   1569   1570
                                      1584   1601   1668   1686   1700
                                      1774   1798   1825   1935   1950
                                      1975   2003   2018   2035   2042
                                      2071   2110   2130   2170   2199
                                      2234   2259   2271   2274   2293
                                      2309   2408   2416   2422   2442
                                      2448   2460   2478   2496   2528
                                      2562   2587   2607y  2611y  2614y
                                      2618y  2670   2687   2702   2775
                                      2833   2850   2909y  2945y  2975
                                      2983   3003   3005   3019   3021y
                                      3038   3064   3201y  3245y  3257y
                                      3310y  3784   5469   5483   5489
                                      5498   5516   5524   5556   5570
                                      5602y  5694y   150D   506    508
                                      1123   1133   1181   1233   1285
                                      1327   1355   1380   1440   1498
                                      1510   1519   1543   1572   1573
                                      1586   1603   1683   1697   1777
                                      1828   1938   1953   1978   2004
                                      2019   2031   2036   2072   2111
                                      2133   2172   2238   2243   2248
                                      2263   2268   2270   2276   2312
                                      2417   2423   2444   2450   2461
                                      2834   2846   2948   2977   2984
                                      3006   3009   3039   3785   5485
                                      5517   5558
A0L/A0H                        $0041   143D   358    365y   909y   912y
                                      1007y  1010y  1031   1284   1290y
                                      1340   1345y  1350y  1365y  1370y
                                      1386y  1389y  1403   1407y  1416y
                                      1425y  1453y  1712y  1724y  1725y
                                      1737y  1738y  1775y  1778y  1799y
                                      1871   1885y  1888y  1902   2310
                                      2328y  2331y  2343y  2360y  2363y
                                      3549   3554y  3558y  3736   3756
                                      3767   3806   3813y  3816y  3838y
                                      3839   3844y  3847   3848   3851y
                                      3861y  3864y  3876y  3899   3900
                                      3904y  3931y  5945   6008y  6009
                                      6010   6034y  6036   6037   6175
                                      6182y   144D   361    369   1027
                                      1029   1032   1035   1287   1342
                                      1405   1874   1905   2314   3552
                                      3737   3739   3741   3743   3758
                                      3769   3770   3771   3772   3775
                                      3803   3807   3810   3842   3850
                                      3902   5946   6012   6039   6178
                                      6186
X2L/X2H                        $0049   151D  1585   1600   1618   1634
                                      1656   1669   1670   1687   1701
                                      1748   1768   1792   1814   1826
                                      1875   1917   1936   1951   1972
                                      1983   1995   2009   2038   2204
                                      2235   2260   2308   2325   2392
                                      2443   2592   2714   2836   2921
                                      2962   2976   2994y  2995   3011
                                      3013   3020   3022y  3048   3192y
                                      3197y  3223y  3294y  3924   3952
                                      3957    152D  1587   1602   1620
                                      1636   1654   1684   1698   1750
                                      1764   1829   1939   1954   1971
                                      1984   1996   2012   2033   2039
                                      2311   2393   2445   2710   2837
                                      2963   2978   2988   2990   3014
                                      3017   3185   3187
COLS                           $0050   189D  2569   4009   4054   4282
                                      4298   4665   4666   4667   4668
                                      4669   4670   4671   4672   4673
                                      4674   4675   4676   4677   4678
                                      4679   4680   4681   4682   4683
                                      4684   4685   4686   4687   4688
                                      4691   4692   4693   4694   4695
                                      4696   4697   4698   4699   4700
                                      4701   4702   4703   4704   4705
                                      4706   4707   4708   4709   4710
                                      4711   4712   4713   4714   4768
                                      4770   4931   5139   5293   5384
                                      5420   5422   5573   5575   5811
RAMD                           $000c    97D   485    486    487    488
                                       489    491    492   4496   4504
                                      4528y  4532   4590   4617   4651y
                                      4654   4896   5032   5033   5037
                                      5043   5045   5047   5050   5052
                                      5053   5082   5083   5087   5093
                                      5095   5097   5100   5102   5103
                                      5863   5869   5881   5883   5886
                                      5889   5891
A1L/A1H                        $0043   145D   359    366y  1341   1362y
                                      1367y  1385y  1388y  1395y  1404
                                      1414y  1424y  1429y  1431y  1765y
                                      1769y  1786y  1789y  1794y  1803y
                                      5949   6011   6038   6176   6183y
                                       146D   363    370    371   1343
                                      1406   2143   2174   2179   5950
                                      6013   6040   6180   6187   6188
X0L                            $0045   147D   810    818    819    900
                                       913    931    979    995   1009
                                      1200   1257   1309   1318   1551
                                      1617   1635   1749   1966   1970
                                      1976   1977   2000   2005   2007
                                      2014   2045   2452   2841   2856
                                      4151   4526   4822   4825   4828
                                      4831   5132
X0H                            $0046   148D   808    820    821    898
                                       910    932    973    997   1006
                                      1080   1082   1096   1108   1199
                                      1258   1552   1619   1637   1751
                                      1844   1967   1969   1979   1980
                                      2001   2006   2011   2015   2843
                                      2859   4152   4820   5133
Version                        $0035   133D  1243   1252   1268   1289
                                      1337   1447   1450   1523   1651
                                      1762   2139   2151   2381   2396
                                      3199   3205   3753   3812   3832
                                      3835   3860   3930   4034   4826
                                      4905   4942   5453   5518   5522
                                      5533   5562   5691
Cursor_Col                     $005a   169D  2565   2615   3119   4053
                                      4773   4784   5168   5183   5313
                                      5342   5360   5369   5376   5401
                                      5419   5423   5430   5478   5492
                                      5520   5530   5564
X4L/X4H                        $004d   155D  2830   2832   2848   2853
                                      2932y  3078   3406   3414   3415
                                      3438    156D  2926   2928   3080
                                      3404   3407   3409   3417   3418
z_stack_ptr                    $003a   138D   923    924    944    945
                                       947    948    949   1194   1195
                                      1197   1198   1201   1466   1468
                                      2184   2186   4456   4631   4890
X3L                            $004b   153D  2330   2342   2362   2823
                                      2861   2887   2908   2949   2965
                                      2969   2996   3004   3012   3023
                                      3045   3054   3082
Timeout                        $0030   129D  3073   3074   3083   3085
                                      3086   3087   3088   3090   3091
                                      3092   5231   5232   5234   5236
                                      5514   5515
ParNum                         $0029   122D   520    814    815    842
                                       871   1562   2164   2181   2390
                                      2826   2881   3041   3075   5474
                                      5477   5495
DICT_WORD                      $0068   180D  2931   3427   3647   3673
                                      3683   3692   3706   3711   3713
                                      3714   3716   3717   3719   3727
                                      3729
Upper_Size                     $0034   132D  2481   2484   2510   2514
                                      2537   2541   2549   2584   2789
                                      4095   4755   4888   5282   5554
                                      5719
ROWS                           $0019   190D  2479   2515   2544   2552
                                      4093   4099   4765   4767   4865
                                      4934   5302   5325   5345   5348
                                      5772
QD0                            $0009    91D  1145   1150   1521   1524
                                      1827   2806   2840   2857   3381
                                      3382   3420   3459   3556   5028
                                      5054
Z_Code                         $0002    82D   521    522    524    528
                                       545    553    582    602    607
                                       845    874   3972   4309   4312
                                      4880
FA                             $00ba   197D   403   4404   4468   4491
                                      4566   4585   5728   5737   5905
                                      5916   5927   5970   6000   6029
IO_STATUS                      $0090   192D  4409   4411   4466   4488
                                      4499   4508   4527   4649   4988
                                      5861   5864   5893   5975   6006
Scr_Adr                        $0062   178D  2567y  4742   4745   5296
                                      5379   5381   5388   5397   5399
                                      5404   5429   5666y  5684y  5813
QI0                            $0004    83D  1102   1103   1144   1151
                                      1484   2126   2132   2140   4461
                                      4637   5007   5078   5104
X7L                            $0053   161D   437    441    443    444
                                      3244   3276   3285   3293   3423
                                      3443   6140   6150
NUMBER                         $0022   120D  2426   4160   4168   4178
                                      4182   4184   4214   4233   4235
                                      4242   4245   4794
QD1                            $000a    92D  1522   1525   1830   2807
                                      2842   2860   3384   3422   3460
                                      3560   5029   5056
Col_Adr                        $0064   179D  4743   4747   4807   4809
                                      5169   5171   5184   5186   5298
                                      5426   5815
Chars_Left                     $001a   112D  3202   3217   3250   3254
                                      3262   3268   3307   3315   5597
                                      5678   5692
QDH                            $0008    90D  3480   3584   3588   3592
                                      3598   3607   3611   3613   3615
                                      3619   3620
Jiffy                          $00a0   193D  2749   2756   3094   3095
                                      3096   5235   5237   5465   5466
                                      5467
X5H                            $0050   158D  3210   3218   3228   3233
                                      3260   3263   3269   3274   3281
                                      3313
X3H                            $004c   154D  2327   2359   2821   2888
                                      2966   2970   3007   3015   3084
z_frame_ptr                    $003c   139D  1465   1467   1491   1492
                                      2118   2119   2185   2187   4891
Colour                         $001b   113D  2203   2499   4102   4108
                                      4113   4293   4886   5424   5454
Charbuf_Ptr                    $0018   110D  4048   4058   4068   4083
                                      4126   4129   4135   4141   4144
CR                             $000d    51D  2399   4044   4127   4385
                                      4420   5242   5412   5586   6071
QI1                            $0005    84D  1105   1106   1487   2123
                                      2135   2141   5005   5079   5106
Cursor_Row                     $005b   170D  2483   2608   4735   4772
                                      4783   5314   5343   5349
X5L                            $004f   157D  3207   3243   3251   3256
                                      3264   3270   3309   3314
Attribute                      $0014   106D  2627   2636   2645   2678
                                      4104   4111   5425   5775
OP_Type                        $0027   121D   802    804    839    862
                                       866    867    869
MORE_Counter                   $0021   119D  2585   2790   4091   4092
                                      4096   5555   5720
LV0                            $0010   101D  1773   1781   1785   3516
                                      3518   6136   6149
TEXT_WORD                      $006e   181D  2904   2916   3237   3261
                                      3267   3653
Z_Mem_Ptr                      $005e   172D  2713   2716   2724   2729
                                      4019y  4020
Z_Mem_Base                     $005c   171D  2712   2715   2725   2726y
                                      2730   2731
X7H                            $0054   162D   438   3286   3421   3442
                                      6142   6154
Word_Length                    $0039   137D  2919   3229   3649   3725
                                      4860   4920
Win_Top                        $0038   136D  2482   2517   2550   2590
                                      5771   5784
Status_Col                     $002f   128D  4011   4042   4892   5129
                                      5136   5143
Left_Margin                    $001f   117D  5565   5571   5609   5627
                                      5669   5677
QDL                            $0007    89D  3540   3573   3599   3609
                                      5123   5156
QI2                            $0006    85D  1111   1112   1488   2122
                                      2138   5080
Col_Row                        $00ae   195D  5279   5281   5288   5292
                                      5297
Segment                        $0061   177D   494    496   5044   5094
                                      5880
GLL                            $0057   165D  5557   5560   5563   5681
                                      5685
Save_Unit                      $002e   127D   405   4372   4467   4565
                                      4584
Right_Margin                   $002d   126D  5395   5576   5618   5634
                                      5664
Prop_Mask                      $002b   124D  3852   3866   3905   4864
                                      4924
Call_Type                      $0017   109D  1483   1494   2109   2113
                                      2127
Block_Lo                       $0015   107D  4990   4995   5868   5882
                                      5895
QD2                            $000b    93D  1833   2809   3462   3563
                                      5030
Font_Sel                       $0059   168D  2297   2505   5340   5428
Win_Bot                        $0037   135D  2518   2553   4866   5773
Vocab_Length                   $0036   134D  2929   3429   4862   4922
Resident_Pages                 $002c   125D  4930   4996   5034   5084
MEMUSS                         $00c3   199D  5702   5703   5705
FNLEN                          $00b7   196D  5962   5963   5979
Scr_Row                        $00ac   194D  5287   5290   5295
X6L                            $0051   159D  3209   3214   3279
TO_Flag                        $0033   131D  2388   5568   5601
Tok_Flag                       $0032   130D  2385   2886   3283
Parse_Index                    $002a   123D  3204   3282   3299
C_Save_Row                     $001d   115D  3053   5792   5801
Charbuf_End                    $0019   111D  4062   4067   4080
DEL                            $0014    52D  2796   5244   5607
Alphabet                       $0013   105D  3482   3492   3494
YELLOW                         $0007    37D  4107   4292   6117
WHITE                          $0001    31D  5447   5814   6116
INS                            $0094    53D  5246   5616
UNDERLINE                      $0080    63D  2635   5170
X8H                            $0056   164D   440   6146
X8L                            $0055   163D   439   6144
X6H                            $0052   160D  3198   3215
DPI                            $0040   142D  3402   3435
DPH                            $003f   141D  3183   3396
DPL                            $003e   140D  3182   3395
STAT_SCORE                     $0034  6101D  4280   4282
C_Save_Col                     $001c   114D  5793   5802
MOVES_COL                      $0016  6102D  4270   4273
Block_Hi                       $0016   108D  5884   5900
LV2                            $0012   103D  3530   3534
LV1                            $0011   102D  6138   6153
SCORE_COL                      $0007  6106D  4262   4265
BLUE                           $0006    36D  6118   6119
STIME_COL                      $0006  6107D  4232   4241
R6510                          $0001   191D   390   4878
BLNSW                          $00cc   200D   400
FNADR                          $00bb   198D  5976
CURSOR_LEFT                    $009d    24D  5199
CURSOR_UP                      $0091    23D  5197
KEY_RIGHT                      $0084    72D  5639
KEY_LEFT                       $0083    71D  5625
ZP_CLEAR                       $0060   173D  4883
GLH                            $0058   166D  5559
BOLD                           $0040    62D  2644
REVERSE                        $0020    61D  2626
Log                            $0020   118D   525
CURSOR_RIGHT                   $001d    22D  5200
CURSOR_DOWN                    $0011    21D  5198
CYAN                           $0003    33D  5440
RED                            $0002    32D  6120
BLNON                          $00cf   202
BLNCT                          $00cd   201
KEY_F8                         $008c    19
KEY_F6                         $008b    18
KEY_F4                         $008a    17
KEY_F2                         $0089    16
KEY_F7                         $0088    15
KEY_F5                         $0087    14
KEY_F3                         $0086    13
KEY_F1                         $0085    12
KEY_DOWN                       $0082    70
KEY_UP                         $0081    69
Info_Pages                     $001e   116
BLINK                          $0010    60
LT_GREY                        $000f    45
ENDMAC                         $000e   317
LT_BLUE                        $000e    44
LT_GREEN                       $000d    43
GREY                           $000c    42
DARKGREY                       $000b    41
PINK                           $000a    40
BROWN                          $0009    39
ORANGE                         $0008    38
GREEN                          $0005    35
PURPLE                         $0004    34
BLACK                          $0000    30
NORMAL                         $0000    59
X1L/X1H                        $0047   149D   882    921   1121   1132
                                      1180   1232   1282   1326   1353
                                      1378   1411   1421   1439   1497
                                      1509   1518   1540   1569   1570
                                      1584   1601   1668   1686   1700
                                      1774   1798   1825   1935   1950
                                      1975   2003   2018   2035   2042
                                      2071   2110   2130   2170   2199
                                      2234   2259   2271   2274   2293
                                      2309   2408   2416   2422   2442
                                      2448   2460   2478   2496   2528
                                      2562   2587   2607y  2611y  2614y
                                      2618y  2670   2687   2702   2775
                                      2833   2850   2909y  2945y  2975
                                      2983   3003   3005   3019   3021y
                                      3038   3064   3201y  3245y  3257y
                                      3310y  3784   5469   5483   5489
                                      5498   5516   5524   5556   5570
                                      5602y  5694y   150D   506    508
                                      1123   1133   1181   1233   1285
                                      1327   1355   1380   1440   1498
                                      1510   1519   1543   1572   1573
                                      1586   1603   1683   1697   1777
                                      1828   1938   1953   1978   2004
                                      2019   2031   2036   2072   2111
                                      2133   2172   2238   2243   2248
                                      2263   2268   2270   2276   2312
                                      2417   2423   2444   2450   2461
                                      2834   2846   2948   2977   2984
                                      3006   3009   3039   3785   5485
                                      5517   5558
A0L/A0H                        $0041   143D   358    365y   909y   912y
                                      1007y  1010y  1031   1284   1290y
                                      1340   1345y  1350y  1365y  1370y
                                      1386y  1389y  1403   1407y  1416y
                                      1425y  1453y  1712y  1724y  1725y
                                      1737y  1738y  1775y  1778y  1799y
                                      1871   1885y  1888y  1902   2310
                                      2328y  2331y  2343y  2360y  2363y
                                      3549   3554y  3558y  3736   3756
                                      3767   3806   3813y  3816y  3838y
                                      3839   3844y  3847   3848   3851y
                                      3861y  3864y  3876y  3899   3900
                                      3904y  3931y  5945   6008y  6009
                                      6010   6034y  6036   6037   6175
                                      6182y   144D   361    369   1027
                                      1029   1032   1035   1287   1342
                                      1405   1874   1905   2314   3552
                                      3737   3739   3741   3743   3758
                                      3769   3770   3771   3772   3775
                                      3803   3807   3810   3842   3850
                                      3902   5946   6012   6039   6178
                                      6186
X2L/X2H                        $0049   151D  1585   1600   1618   1634
                                      1656   1669   1670   1687   1701
                                      1748   1768   1792   1814   1826
                                      1875   1917   1936   1951   1972
                                      1983   1995   2009   2038   2204
                                      2235   2260   2308   2325   2392
                                      2443   2592   2714   2836   2921
                                      2962   2976   2994y  2995   3011
                                      3013   3020   3022y  3048   3192y
                                      3197y  3223y  3294y  3924   3952
                                      3957    152D  1587   1602   1620
                                      1636   1654   1684   1698   1750
                                      1764   1829   1939   1954   1971
                                      1984   1996   2012   2033   2039
                                      2311   2393   2445   2710   2837
                                      2963   2978   2988   2990   3014
                                      3017   3185   3187
Z_HEADER                       $2f00   250D   256    257    258    259
                                       260    261    262    263    264
                                       265    266    267    268    269
                                       270    271    272    273    274
                                       275    276    277    278    279
                                       280    281    282    283    284
                                       285    286    287    288    289
                                       290    291    292    293    294
                                       296    297    507   1034   1283
                                      1286   1873   1903   1906   2313
                                      2711   2927   2989   3008   3016
                                      3186   3551   3809   3841   4451
                                      4453   4503   4593   4596   4616
                                      4895   4929   5036   5086   6077
                                      6081   6085   6089   6093
COLS                           $0050   189D  2569   4009   4054   4282
                                      4298   4665   4666   4667   4668
                                      4669   4670   4671   4672   4673
                                      4674   4675   4676   4677   4678
                                      4679   4680   4681   4682   4683
                                      4684   4685   4686   4687   4688
                                      4691   4692   4693   4694   4695
                                      4696   4697   4698   4699   4700
                                      4701   4702   4703   4704   4705
                                      4706   4707   4708   4709   4710
                                      4711   4712   4713   4714   4768
                                      4770   4931   5139   5293   5384
                                      5420   5422   5573   5575   5811
SCREEN                         $0800   207D  4664   4665   4666   4667
                                      4668   4669   4670   4671   4672
                                      4673   4674   4675   4676   4677
                                      4678   4679   4680   4681   4682
                                      4683   4684   4685   4686   4687
                                      4688   4690   4691   4692   4693
                                      4694   4695   4696   4697   4698
                                      4699   4700   4701   4702   4703
                                      4704   4705   4706   4707   4708
                                      4709   4710   4711   4712   4713
                                      4714
RAMD                           $000c    97D   485    486    487    488
                                       489    491    492   4496   4504
                                      4528y  4532   4590   4617   4651y
                                      4654   4896   5032   5033   5037
                                      5043   5045   5047   5050   5052
                                      5053   5082   5083   5087   5093
                                      5095   5097   5100   5102   5103
                                      5863   5869   5881   5883   5886
                                      5889   5891
A1L/A1H                        $0043   145D   359    366y  1341   1362y
                                      1367y  1385y  1388y  1395y  1404
                                      1414y  1424y  1429y  1431y  1765y
                                      1769y  1786y  1789y  1794y  1803y
                                      5949   6011   6038   6176   6183y
                                       146D   363    370    371   1343
                                      1406   2143   2174   2179   5950
                                      6013   6040   6180   6187   6188
X0L                            $0045   147D   810    818    819    900
                                       913    931    979    995   1009
                                      1200   1257   1309   1318   1551
                                      1617   1635   1749   1966   1970
                                      1976   1977   2000   2005   2007
                                      2014   2045   2452   2841   2856
                                      4151   4526   4822   4825   4828
                                      4831   5132
X0H                            $0046   148D   808    820    821    898
                                       910    932    973    997   1006
                                      1080   1082   1096   1108   1199
                                      1258   1552   1619   1637   1751
                                      1844   1967   1969   1979   1980
                                      2001   2006   2011   2015   2843
                                      2859   4152   4820   5133
Version                        $0035   133D  1243   1252   1268   1289
                                      1337   1447   1450   1523   1651
                                      1762   2139   2151   2381   2396
                                      3199   3205   3753   3812   3832
                                      3835   3860   3930   4034   4826
                                      4905   4942   5453   5518   5522
                                      5533   5562   5691
Cursor_Col                     $005a   169D  2565   2615   3119   4053
                                      4773   4784   5168   5183   5313
                                      5342   5360   5369   5376   5401
                                      5419   5423   5430   5478   5492
                                      5520   5530   5564
CHROUT                         $2969  5409D  3050   3108   3114   3116
                                      3118   3133   3135   3143   3149
                                      3976   3978   3980   4028   4139
                                      4534   4656   4994   5527   5658
                                      5707   5899
X4L/X4H                        $004d   155D  2830   2832   2848   2853
                                      2932y  3078   3406   3414   3415
                                      3438    156D  2926   2928   3080
                                      3404   3407   3409   3417   3418
z_stack_ptr                    $003a   138D   923    924    944    945
                                       947    948    949   1194   1195
                                      1197   1198   1201   1466   1468
                                      2184   2186   4456   4631   4890
X3L                            $004b   153D  2330   2342   2362   2823
                                      2861   2887   2908   2949   2965
                                      2969   2996   3004   3012   3023
                                      3045   3054   3082
Next_Instruction               $27b8  5062D   523    535    807    809
                                       861    891    985   1053   1057
                                      1063   1081   2142   2159   2161
                                      4308   4310
Next_Datum                     $277e  5013D  1834   1845   2845   2849
                                      2992   3049   3345   3347   3399
                                      3401   3403   3405   3425   3433
                                      3604   3608
Main_True                      $137c  1060D   709    711   1234   1260
                                      1575   1590   1606   1623   1640
                                      1657   1674   1713   2868   3065
                                      4441   4541
Timeout                        $0030   129D  3073   3074   3083   3085
                                      3086   3087   3088   3090   3091
                                      3092   5231   5232   5234   5236
                                      5514   5515
ParNum                         $0029   122D   520    814    815    842
                                       871   1562   2164   2181   2390
                                      2826   2881   3041   3075   5474
                                      5477   5495
PrintText                      $2ae9  5699D   497   1219   3996   4109
                                      4118   4299   4382   4446   4448
                                      4517   4555   4557   4914   4980
                                      4985
Z_VAR                          $0400   244D   248    249   4452   4454
                                      4457   4462   4495   4497   4561
                                      4589   4592   4595   4600   4630
                                      4636
DICT_WORD                      $0068   180D  2931   3427   3647   3673
                                      3683   3692   3706   3711   3713
                                      3714   3716   3717   3719   3727
                                      3729
Upper_Size                     $0034   132D  2481   2484   2510   2514
                                      2537   2541   2549   2584   2789
                                      4095   4755   4888   5282   5554
                                      5719
ROWS                           $0019   190D  2479   2515   2544   2552
                                      4093   4099   4765   4767   4865
                                      4934   5302   5325   5345   5348
                                      5772
QD0                            $0009    91D  1145   1150   1521   1524
                                      1827   2806   2840   2857   3381
                                      3382   3420   3459   3556   5028
                                      5054
Z_Code                         $0002    82D   521    522    524    528
                                       545    553    582    602    607
                                       845    874   3972   4309   4312
                                      4880
FA                             $00ba   197D   403   4404   4468   4491
                                      4566   4585   5728   5737   5905
                                      5916   5927   5970   6000   6029
IO_STATUS                      $0090   192D  4409   4411   4466   4488
                                      4499   4508   4527   4649   4988
                                      5861   5864   5893   5975   6006
Scr_Adr                        $0062   178D  2567y  4742   4745   5296
                                      5379   5381   5388   5397   5399
                                      5404   5429   5666y  5684y  5813
Main_False                     $1370  1050D  1235   1259   1566   1591
                                      1607   1624   1641   1658   1671
                                      1714   2865   3066   4604
QI0                            $0004    83D  1102   1103   1144   1151
                                      1484   2126   2132   2140   4461
                                      4637   5007   5078   5104
Print_Buffer                   $2258  4132D  2198   2290   2383   2477
                                      2495   2527   2586   2669   2686
                                      2701   2788   3037
X7L                            $0053   161D   437    441    443    444
                                      3244   3276   3285   3293   3423
                                      3443   6140   6150
NUMBER                         $0022   120D  2426   4160   4168   4178
                                      4182   4184   4214   4233   4235
                                      4242   4245   4794
QD1                            $000a    92D  1522   1525   1830   2807
                                      2842   2860   3384   3422   3460
                                      3560   5029   5056
z_pop                          $1404  1186D   884    892   1179   1470
                                      1475   1482   1486   1490   2469
                                      4842   4844
Store_Byte                     $132f   964D  1297   1301   1856   1920
                                      1924   2116   2300   2400   2799
                                      4435   4549
Col_Adr                        $0064   179D  4743   4747   4807   4809
                                      5169   5171   5184   5186   5298
                                      5426   5815
Chars_Left                     $001a   112D  3202   3217   3250   3254
                                      3262   3268   3307   3315   5597
                                      5678   5692
QDH                            $0008    90D  3480   3584   3588   3592
                                      3598   3607   3611   3613   3615
                                      3619   3620
Jiffy                          $00a0   193D  2749   2756   3094   3095
                                      3096   5235   5237   5465   5466
                                      5467
X5H                            $0050   158D  3210   3218   3228   3233
                                      3260   3263   3269   3274   3281
                                      3313
INTERNAL_ERROR                 $2171  3988D   622    750    953   1205
                                      1211   2021   2365   2366   4320
Store_AX                       $1331   970D  1256   1271   1499   1688
                                      1702   1889   2249   2277   4330
X3H                            $004c   154D  2327   2359   2821   2888
                                      2966   2970   3007   3015   3084
z_frame_ptr                    $003c   139D  1465   1467   1491   1492
                                      2118   2119   2185   2187   4891
Colour                         $001b   113D  2203   2499   4102   4108
                                      4113   4293   4886   5424   5454
Charbuf_Ptr                    $0018   110D  4048   4058   4068   4083
                                      4126   4129   4135   4141   4144
CR                             $000d    51D  2399   4044   4127   4385
                                      4420   5242   5412   5586   6071
QI1                            $0005    84D  1105   1106   1487   2123
                                      2135   2141   5005   5079   5106
Get_Character_exit             $28c1  5270D  5240   5243   5245   5247
                                      5249   5255   5262   5265
Charbuf                        $0200   203D  4049   4063   4077   4078
                                      4128   4138   4562   4599
Cursor_Row                     $005b   170D  2483   2608   4735   4772
                                      4783   5314   5343   5349
X5L                            $004f   157D  3207   3243   3251   3256
                                      3264   3270   3309   3314
Attribute                      $0014   106D  2627   2636   2645   2678
                                      4104   4111   5425   5775
Get_Line_X1_loop               $2a42  5583D  5577   5595   5612   5621
                                      5630   5642   5660
Get_Object_Reg                 $20a8  3788D  1352   1377   1410   1420
                                      1449   1772   1796
Get_Object_X1                  $20a4  3781D  1255   1270   1339   1402
                                      1653   3834   3951
START                          $1001   317D   319    322    322    372
                                      6073   6077   6179
Lvar_Hi                        $0410   249D   897    998   1478   2147
                                      2155   2160   2173
Lvar_Lo                        $0400   248D   899    996   1476   2148
                                      2156   2162   2171
DSTATUS                        $033c   206D  4413   4421   4423   4426
                                      4517   4517   4517
Z_STATUS                       $033c   247D  4008   4250   4280   4296
                                      4297   4927   5137
OP_Type                        $0027   121D   802    804    839    862
                                       866    867    869
MORE_Counter                   $0021   119D  2585   2790   4091   4092
                                      4096   5555   5720
LV0                            $0010   101D  1773   1781   1785   3516
                                      3518   6136   6149
Get_Line_X1_error              $2a3f  5579D  5610   5619   5628   5635
                                      5647   5649
Set_Data_YA                    $1b7f  2803D  1520   2838   2985   3040
                                      3344   3397
Push_AY                        $1315   936D  2120   2124   2128   2149
                                      2180   2462
TEXT_WORD                      $006e   181D  2904   2916   3237   3261
                                      3267   3653
Z_Mem_Ptr                      $005e   172D  2713   2716   2724   2729
                                      4019y  4020
Z_Mem_Base                     $005c   171D  2712   2715   2725   2726y
                                      2730   2731
X7H                            $0054   162D   438   3286   3421   3442
                                      6142   6154
Word_Length                    $0039   137D  2919   3229   3649   3725
                                      4860   4920
Win_Top                        $0038   136D  2482   2517   2550   2590
                                      5771   5784
Status_Col                     $002f   128D  4011   4042   4892   5129
                                      5136   5143
Left_Margin                    $001f   117D  5565   5571   5609   5627
                                      5669   5677
QDL                            $0007    89D  3540   3573   3599   3609
                                      5123   5156
QI2                            $0006    85D  1111   1112   1488   2122
                                      2138   5080
INTERR                         $2e39  6109D  3992   3993   3996   3996
                                      3996
STIME                          $2e2d  6105D  4234   4236   4244   4246
                                      4249
Cursor_Off                     $284e  5178D  2795   5359   5368   5481
                                      5585
Cursor_On                      $283e  5164D  2791   5361   5370   5493
                                      5583
Set_Screen_Pointer_X           $25e5  4738D  5284   5315   5350   5785
                                      5810
Z_Active_Window                $25e0  4724D  2291   2497   2551   3105
                                      4039
z_error12                      $2368  4320D   761    762    763    764
                                      4315
z_new_line                     $2205  4088D   707   1164   3994   4045
                                      4071
Sign_ZPX                       $17fa  2050D  2037   2040   2044   2419
                                      2972
Store_XA                       $15c8  1548D  1907   1940   1955   1985
                                      2073
Store_X0                       $1335   982D  1534   1553   2081   2453
                                      2867
Store_Zero                     $132d   958D  1901   1925   2389   2864
                                      4337
Get_Global_Var                 $12fc   905D   895   4210   4230   4239
                                      5131
Get_Operand                    $1283   789D   581    601    606    837
                                       864
z_error_4                      $11a3   622D   634    662    663    664
                                       665
Col_Row                        $00ae   195D  5279   5281   5288   5292
                                      5297
Segment                        $0061   177D   494    496   5044   5094
                                      5880
GLL                            $0057   165D  5557   5560   5563   5681
                                      5685
Save_Unit                      $002e   127D   405   4372   4467   4565
                                      4584
Right_Margin                   $002d   126D  5395   5576   5618   5634
                                      5664
Prop_Mask                      $002b   124D  3852   3866   3905   4864
                                      4924
Call_Type                      $0017   109D  1483   1494   2109   2113
                                      2127
Block_Lo                       $0015   107D  4990   4995   5868   5882
                                      5895
QD2                            $000b    93D  1833   2809   3462   3563
                                      5030
EOC                            $36a7  6195D   322    360    362   6189
h_flags_lo                     $2f11   271D  4608   4625   4964   4965
Configname                     $2e46  6112D  5935   5951   5952   5953
SCORE                          $2e11  6104D  4217   4263   4271   4279
SAVEUNIT                       $2ce4  6062D  4381   4446   4446   4446
Game_Unit                      $2cc7  6059D   404   5727   5904   5926
Z_Timeout                      $2cab  6050D  3079   3081   5482   5484
Close_File                     $2be4  5913D  4513   4518   6017   6044
Erase_Row                      $2b69  5806D  2535   2542   5304   5326
Restore_Cursor                 $2b62  5798D  3047   4117   4119   5161
Return_Screen                  $2911  5335D  3122   5413   5695   5718
Clear_Screen                   $2903  5321D   415   2554   4979   5717
Set_Row_Col                    $25fa  4759D  2520   2594   4101   5803
Z_Arg_Count                    $25de  4722D  1471   2178   2183   3063
L_Encode_A                     $25d6  4716D  3671   3675   3685   3694
Format_Integer                 $226e  4148D  4211   4231   4240   4791
Print_Formatted                $21aa  4031D  2409   2421   2430   3507
Find_Property                  $2128  3909D  1867   1900   1921   2353
Property_Size                  $20f5  3857D  1299   1881   2355   3896
Enco_20                        $1fdf  3647D  3661   3668   3697   3702
Get_Packed_Char                $1f91  3581D  3483   3510   3517   3531
DeTe_40                        $1f31  3507D  3487   3499   3505   3519
Parse_20                       $1d9e  3214D  3252   3265   3275   3300
Error_Beep                     $1b2c  2736D  2779   4387   5267   5579
z_call_n                       $181e  2093D   660    690    742    743
z_call_s                       $181a  2085D   659    683    717    729
z_ret                          $1558  1462D   686   1124   1134   1182
z_remove_obj_ro_10             $14dd  1376D  1354   1356   1379   1381
Put_Var                        $1309   918D  1310   1319   1752   2470
z_opcode                       $11a8   625D   558    567    585    618
PC_LOOP                        $1135   513D   619   4319   5009   5488
Header_X1                      $112d   502D  2386   2880   2901   2942
Font_Sel                       $0059   168D  2297   2505   5340   5428
Win_Bot                        $0037   135D  2518   2553   4866   5773
Vocab_Length                   $0036   134D  2929   3429   4862   4922
Resident_Pages                 $002c   125D  4930   4996   5034   5084
h_config                       $2f01   257D  4941   4962   5144
BLANKS                         $2e05  6099D  4118   4118   4118
InfoClr                        $2d83  6071D  4982   4983   4984
BITSHIFTER                     $2d6b  6070D  4980   4980   4980
Msg_Attic                      $2d4c  6069D   497    497    497
NOSTORY                        $2d42  6068D  4914   4914   4914
EOS                            $2d28  6067D  1219   1219   1219
MORE                           $2d22  6066D  4109   4109   4109
LOADFILE                       $2d10  6065D  4557   4557   4557
LOADUNIT                       $2cfe  6064D  4555   4555   4555
SAVEFILE                       $2cf1  6063D  4448   4448   4448
PRESSRET                       $2cc8  6061D  4379   4380   4381
Z_Mem_Flag                     $2caa  6049D  2708   2728   4035
Bank_Order                     $2ca2  6047D  5046   5096   5885
Load_Page                      $2b88  5838D  4897   4987   5892
Save_Cursor                    $2b5a  5788D  3046   4098   5118
ASCII_Hex                      $2b2a  5744D  3111   3130   3973
Text_Color                     $2992  5445D  5598   5690   5776
Get_Character_loop             $2876  5229D  5233   5238   5268
Get_Character                  $2875  5220D  2792   4384   5584
Z_Active_Font                  $25e1  4725D  2298   2299   2501
L_Encode_Y                     $25d7  4717D  3670   3696   3700
Read_Block                     $2591  4645D  4591   4612   4620
WG_Err                         $24a4  4515D  4489   4500   4509
Empty_Keyboard_Queue           $2376  4341D  4097   4345   4383
Get_Attr_Addr                  $2140  3938D  1711   1723   1735
Decode_Text                    $1efa  3465D  1148   1526   3567
Sep_All                        $1e44  3320D  2912   3258   3311
Parse_60                       $1e1f  3293D  3284   3287   3298
Reverse_On                     $1acb  2623D  2672   4106   4295
Divide_Signed                  $17da  2025D  2070   2080   2451
z_not                          $15bf  1538D   741   4838   4840
z_get_sibling_get              $144d  1255D  1243   1245   1252
z_rtrue                        $13c8  1117D   696   1087   1165
Get_Var_X1L                    $12dd   879D  1308   1317   1533
Load_4_Operands                $12ae   827D   552    844   4311
z_execute                      $119c   611D   559    568    586
Z_STACK_HI                     $0800   246D   950   4497   4611
Z_STACK_LO                     $0500   245D  1202   4611   4889
MEMUSS                         $00c3   199D  5702   5703   5705
FNLEN                          $00b7   196D  5962   5963   5979
Scr_Row                        $00ac   194D  5287   5290   5295
X6L                            $0051   159D  3209   3214   3279
TO_Flag                        $0033   131D  2388   5568   5601
Tok_Flag                       $0032   130D  2385   2886   3283
Parse_Index                    $002a   123D  3204   3282   3299
C_Save_Row                     $001d   115D  3053   5792   5801
Charbuf_End                    $0019   111D  4062   4067   4080
DEL                            $0014    52D  2796   5244   5607
Alphabet                       $0013   105D  3482   3492   3494
YELLOW                         $0007    37D  4107   4292   6117
WHITE                          $0001    31D  5447   5814   6116
Mode_65_loop                   $3693  6182D  6185   6190
h_flags_hi                     $2f10   270D  4606   4627
h_dynamic_size_hi              $2f0e   268D  4505   4618
h_objects_lo                   $2f0b   265D  1870   3805
h_objects_hi                   $2f0a   264D  1872   3808
h_dictionary_lo                $2f09   263D  3175   3342
h_dictionary_hi                $2f08   262D  3176   3343
Charset                        $2e81  6161D  6135   6137
Load_Charset_loop              $2e71  6149D  6152   6156
EOP                            $2e55  6126D   250   6075
CONFIG_END                     $2e55  6123D  5947   5948
FG_Color                       $2e4e  6116D  2498   4885
CONFIG_START                   $2e4e  6115D  5943   5944
ConfigDel                      $2e43  6111D  5932   5935
InfoPro                        $2d84  6072D  4795   4977
File_Text                      $2cb2  6057D  4473   4571
File_Buf                       $2cb1  6056D  4395   4396
Unit_Text                      $2cae  6054D  4369   4370
Unit_Buf                       $2cad  6053D  4366   4367
Send_Filename                  $2c34  5967D  5999   6028
Prep_Config                    $2c0e  5940D  5961   5988
Select_Text_Window             $2b44  5767D  4300   4981
Reset_Screen                   $2afb  5714D  4603   5008
Get_Line_X1_store              $2ab0  5658D  5654   5656
Get_Line_X1                    $2a0f  5551D  2387   5531
Got_Line                       $29e4  5508D  4368   4397
Prompt_Color                   $298e  5438D  5523   5561
Edit_Left                      $292d  5356D  5377   5629
Home_Screen                    $28f7  5308D  4294   5329
Get_Character_error            $28bc  5267D  5251   5258
z_show_status                  $27f4  5113D   708   2382
Next_Instruction_get           $27e6  5103D  5088   5099
Next_Instruction_banked        $27d1  5093D  5081   5085
Next_Datum_get                 $27ab  5053D  5038   5049
Next_Datum_banked              $2796  5043D  5031   5035
z_restart_config               $26e2  4929D  4907   4911
z_restart                      $2675  4871D   418    703
Modify_Op                      $264b  4836D  4852   4925
Screen_Setup                   $2625  4803D   409   5003
Set_Screen_Pointer             $25e3  4732D  2487   4774
Z_Buffer_Mode                  $25df  4723D  2688   4037
Sep_Std_List                   $25d8  4721D  3365   3366
Row_Hi                         $25bd  4690D  4744   5289
Row_Lo                         $25a4  4664D  4741   5286
Restore_Game                   $24d9  4552D  4540   4547
Write_Block                    $24b6  4522D  4498   4507
Save_Game                      $2405  4444D  4433   4440
File_Dialog                    $23b8  4392D  4449   4558
Unit_Dialog                    $238c  4363D  4447   4556
DeUn_20                        $2389  4358D  4354   4356
Status_Number                  $22b0  4201D  4268   4276
Print_Unbuffered               $21a7  4025D  4038   4040
Next_Property                  $2113  3887D  1923   3927
First_Property                 $20ca  3821D  1919   3923
A0_x_8                         $206e  3733D  3755   3765
Enco_40                        $2004  3670D  3664   3666
Enco_35                        $1ff8  3663D  3657   3659
Encode                         $1fd7  3630D  2924   3277
DeTe_10                        $1efe  3481D  3508   3577
Decode_YX                      $1ef2  3454D  1328   1458
ZSCII_2                        $1ed8  3451D  3498   3677
DiSe_50                        $1ec5  3433D  3428   3436
DiSe_20                        $1eae  3420D  3410   3439
Sep_Std                        $1e67  3357D  3248   3328
SeDi_10                        $1e5a  3347D  3341   3351
SkSu_Ret                       $1e43  3317D  3308   3312
Parse_55                       $1dfb  3274D  3255   3259
Parse_45                       $1dda  3254D  3234   3249
Parse_Input                    $1d65  3154D  2395   2884
Dump_A                         $1d42  3128D  3145   3147
Log_A_return                   $1d40  3123D  3106   3121
Set_Timeout                    $1ce3  3070D  2380   2787
z_encode_text_next             $1c19  2924D  2915   2920
zst_tr                         $1bda  2867D  2848   2851
zst_fa                         $1bd4  2864D  2822   2824
z_read_skip                    $19ab  2396D  2391   2394
X1_PLUS_X2_TO_A0               $1937  2304D  2326   2341
z_art_shift_right              $190b  2268D  2261   2273
z_log_shift_right              $18f2  2243D  2236   2246
z_set_colour_coltab            $18d7  2212D  2202   2207
z_set_colour_ret               $18d6  2210D  2201   2206
call_00                        $1820  2109D  2089   5487
z_insert_obj_return            $16e6  1804D  1782   1801
z_je_loop                      $15d3  1565D  1571   1574
z_remove_obj_ro_50             $1522  1419D  1412   1422
z_remove_obj                   $14a8  1332D   684   1761
z_dec                          $1499  1314D   681   1616
z_inc                          $1491  1305D   680   1633
z_quit                         $1425  1215D   706   4002
z_print                        $13db  1138D   698   1163
z_rfalse                       $13d2  1128D   697   1085
Branch_XA                      $13a9  1090D  1083   1511
Get_Global_Var_Addr            $1357  1015D   908   1005
Push_X0                        $1311   928D   885    986
ZVB9                           $121a   705D  4843   4845
ZV8F                           $1206   690D  4839   4841
Set_Attic_RAM                  $1105   481D   410   4999
Set_Mode_80                    $10b7   422D   407   5002
MEGA_Setup                     $1067   378D   374   6191
Mode_64_loop                   $1053   365D   368    373
INS                            $0094    53D  5246   5616
UNDERLINE                      $0080    63D  2635   5170
X8H                            $0056   164D   440   6146
X8L                            $0055   163D   439   6144
X6H                            $0052   160D  3198   3215
DPI                            $0040   142D  3402   3435
DPH                            $003f   141D  3183   3396
DPL                            $003e   140D  3182   3395
STAT_SCORE                     $0034  6101D  4280   4282
C_Save_Col                     $001c   114D  5793   5802
MOVES_COL                      $0016  6102D  4270   4273
Block_Hi                       $0016   108D  5884   5900
LV2                            $0012   103D  3530   3534
LV1                            $0011   102D  6138   6153
SCORE_COL                      $0007  6106D  4262   4265
BLUE                           $0006    36D  6118   6119
STIME_COL                      $0006  6107D  4232   4241
R6510                          $0001   191D   390   4878
Mode_65                        $3681  6166D   348
h_font_height                  $2f27   288D  4968
h_font_width                   $2f26   287D  4967
h_screen_height_lo             $2f25   286D  4936
h_screen_height_hi             $2f24   285D  4939
h_screen_width_lo              $2f23   284D  4933
h_screen_width_hi              $2f22   283D  4938
h_screen_cols                  $2f21   282D  4932
h_screen_rows                  $2f20   281D  4935
h_interpreter_version          $2f1f   280D  4972
h_interpreter_number           $2f1e   279D  4970
h_file_size_lo                 $2f1b   276D  4823
h_file_size_hi                 $2f1a   275D  4821
h_abbreviations_lo             $2f19   274D  3548
h_abbreviations_hi             $2f18   273D  3550
h_globals_lo                   $2f0d   267D  1030
h_globals_hi                   $2f0c   266D  1033
h_start_pc_lo                  $2f07   261D  5006
h_start_pc_hi                  $2f06   260D  5004
h_version                      $2f00   256D  4901
Load_Charset                   $2e55  6130D   408
BG_Color                       $2e51  6119D   411
BO_Color                       $2e50  6118D   413
InfoEnd                        $2e05  6097D  4984
InfoSto                        $2de4  6096D  4977
Save_File_loop                 $2c8b  6034D  6041
Save_File                      $2c7c  6021D  5964
Load_File_stop                 $2c76  6016D  6007
Load_File_loop                 $2c61  6005D  6014
Load_Config                    $2c4f  5985D   416
Send_Filename_fname            $2c42  5976D  5980
Save_Config                    $2c27  5957D  1218
DeCo_10                        $2c00  5932D  5936
Delete_Config                  $2bf1  5923D  5960
Load_Story_eof                 $2bd1  5903D  5894
Load_Story_prog                $2bcb  5900D  5897
Load_Story_loop                $2bb9  5892D  5888
Load_Story_next                $2ba4  5882D  5902
Load_Story                     $2ba0  5875D  5000
Load_Page_eof                  $2b9a  5868D  5865
Load_Page_loop                 $2b8d  5862D  5867
asts_01                        $2b80  5831D  5833
ASCII_TS                       $2b7d  5823D  3991
Erase_Row_loop                 $2b6f  5812D  5817
Select_Status_Window           $2b53  5780D  4291
Hex_12                         $2b43  5764D  5762
Hex_11                         $2b37  5757D  5755
Open_Story                     $2b06  5724D  4894
PrTe_B                         $2afa  5711D  5706
PrTe_A                         $2aef  5705D  5710
Get_Line_X1_return             $2ae6  5695D  5691
Get_Line_X1_empty              $2ada  5690D  5683
Get_Line_X1_copy               $2ad2  5684D  5688
Get_Line_X1_buffer             $2ac3  5674D  5667
Get_Line_X1_skip               $2aba  5666D  5670
Get_Line_X1_end                $2ab6  5664D  5587
Get_Line_X1_valid              $2a9e  5646D  5640
Get_Line_X1_limit              $2a91  5634D  5626
Get_Line_X1_left               $2a84  5625D  5617
Get_Line_X1_ins                $2a77  5616D  5608
Get_Line_X1_del                $2a6a  5607D  5589
Get_Line_X1_rm                 $2a3b  5576D  5574
Get_Line_X1_max                $2a39  5575D  5572
Get_Line_X1_lm                 $2a25  5564D  5562
Got_Line_call                  $2a06  5530D  5526
Got_Line_loop                  $29fa  5524D  5529
Timeout_Routine_rest           $29da  5497D  5500
Timeout_Routine_save           $29a6  5469D  5473
Timeout_Routine                $299a  5459D  5593
Set_Colour_return              $2999  5455D  5453
Set_Colour                     $2994  5451D  5441
CHRO_10                        $297c  5424D  5421
Edit_Ins_loop                  $2959  5396D  5402
Edit_Ins                       $2956  5393D  5620
Edit_Del_loop                  $2945  5379D  5385
Edit_Del                       $293f  5374D  5611
Edit_Right                     $2936  5365D  5641
ReSc_10                        $2925  5349D  5346
Clear_Screen_loop              $2906  5326D  5328
Scroll_Main_Window_col_loop    $28e3  5295D  5300
Scroll_Main_Window_row_loop    $28cd  5284D  5303
Scroll_Main_Window             $28c3  5275D  5347
Get_Character_ctrl             $28b8  5264D  5260
Get_Character_lower            $28ac  5257D  5253
Get_Character_got              $288f  5242D  5230
CSK_20                         $2870  5213D  5208
CSK_10                         $2866  5207D  5210
Translate_Keys                 $2864  5203D  5248
Special_Keys                   $2860  5194D  5207
zss_90                         $2833  5155D  5159
zss_40                         $282e  5150D  5148
zss_30                         $282b  5149D  5146
zss_20                         $2812  5137D  5140
zss_10                         $27f9  5123D  5126
Next_Instruction_exit          $27ef  5107D  5105
Next_Datum_exit                $27b4  5057D  5055
z_restart_story                $2762  5000D  4989
z_restart_dot                  $2759  4995D  4992
z_restart_res                  $2747  4987D  4997
z_restart_setconf              $270a  4962D  4952
z_restart_V4_Flags             $2708  4953D  4942
z_restart_set3                 $26ce  4919D  4913
z_restart_check3               $26be  4912D  4909
z_restart_V3                   $26af  4905D  4903
z_restart_clear                $2681  4881D  4884
Version_5_Setup                $2664  4857D  4893
Version_4_Setup                $2660  4850D  4910
Story_Pages_return             $264a  4832D  4830
Story_Pages_round              $2645  4829D  4826
Story_Pages                    $262e  4814D  4976
InSi_10                        $2619  4794D  4799
Info_Size                      $2612  4788D  4978
Get_Row_Col                    $260d  4777D  5791
SRC_20                         $2606  4772D  4769
SRC_10                         $2600  4768D  4766
Window_Home                    $25f6  4752D  2486
Read_Block_loop                $2595  4650D  4653
Restore_Game_PC                $2586  4636D  4639
Restore_Game_stack             $257c  4630D  4633
Restore_Game_hd_loop           $256c  4620D  4622
Restore_Game_st_loop           $255e  4612D  4614
Restore_Game_ver_ok            $2554  4606D  4597
Restore_Game_resloop           $2545  4599D  4602
Restore_Game_cancel            $2543  4598D  4594
Restore_Game_fn_done           $251d  4580D  4573
Restore_Game_no_conv           $2517  4577D  4575
Restore_Game_fn_loop           $250a  4571D  4579
Restore_Game_saveloc           $24f3  4561D  4564
z_ext_restore                  $24d1  4544D   757
z_restore                      $24cb  4537D   702
WrBl_10                        $24bc  4528D  4531
WG_50                          $2494  4507D  4511
WG_40                          $2482  4498D  4502
WG_30                          $2461  4483D  4475
WG_25                          $245b  4479D  4477
WG_20                          $244e  4473D  4481
WG_10                          $2435  4461D  4464
WG_05                          $242b  4456D  4459
z_save                         $23ff  4437D   701
z_ext_save                     $23f7  4431D   756
RDS_30                         $23e5  4420D  4412
RDS_20                         $23e2  4419D  4415
RDS_10                         $23cf  4410D  4418
Read_Disk_Status               $23bf  4400D  4516
wfret_99                       $23b7  4389D  4386
wfret_10                       $23ab  4384D  4388
Wait_for_Return                $239f  4376D  5001
DeUn_10                        $2383  4355D  4352
Decode_Unit                    $237c  4349D  4371
z_restore_undo                 $2373  4334D   766
z_save_undo                    $236d  4325D   765
z_extension                    $234b  4304D   710
Print_Status                   $2332  4288D  5150
Print_Score_loop               $2326  4279D  4283
Print_Score_clr_mv             $2317  4271D  4274
Print_Score_clr_sc             $2306  4263D  4266
Print_Score                    $2302  4258D  5147
Print_Time_loop                $22f6  4249D  4253
Print_Time                     $22ca  4226D  5149
StNu_20                        $22c4  4219D  4216
StNu_10                        $22ba  4214D  4221
FormHi                         $22ac  4194D  4166
FormLo                         $22a8  4190D  4163
Format_Integer_return          $22a7  4188D  4183
Format_Integer_blanks          $229c  4182D  4187
Format_Integer_next            $228b  4172D  4167
Format_Integer_sub             $2279  4161D  4171
Format_Integer_loop            $2275  4159D  4175
Format_YZ                      $2273  4155D  2424
PrBu_Ret                       $226d  4145D  4136
PrBu_10                        $225e  4138D  4142
Terminate_Buffer               $224f  4123D  4094
z_new_line_wait                $223a  4114D  4116
PrFo_50                        $21fd  4080D  4075
PrFo_45                        $21f6  4077D  4082
PrFo_40                        $21e9  4068D  4064
PrFo_35                        $21df  4063D  4066
PrFo_30                        $21db  4061D  4055
PrFo_25                        $21da  4059D  4047
PrFo_20                        $21c2  4044D  4041
PrFo_10                        $21be  4042D  4034
Print_Mem                      $21a0  4015D  4036
PTS_01                         $219f  4012D  4010
Print_To_Status                $2196  4005D  4043
INER_10                        $218b  3998D  4001
Dump_Code_loop                 $2159  3972D  3982
Dump_Code                      $2157  3968D  3995
gaa_02                         $2153  3963D  3961
gaa_01                         $2152  3962D  3964
Find_Property_return           $213f  3934D  3926
Find_Property_ok               $213d  3933D  3930
Find_Property_match            $2136  3929D  3925
Find_Property_loop             $212b  3924D  3928
NePr_20                        $2121  3903D  3901
Property_Size_V3               $210a  3876D  3860
Property_Size_one              $2103  3869D  3862
FiPr_10                        $20f0  3851D  3849
First_Property_fips_2          $20db  3839D  3835
First_Property_fips_1          $20d1  3834D  3832
Get_Object_X1_objlow           $20c7  3816D  3812
Get_Object_X1_label            $20b0  3805D  3802
Object_Offset_V4               $208e  3765D  3753
Object_Offset_label            $208b  3760D  3757
Object_Offset                  $207c  3748D  3801
Enco_80                        $2045  3706D  3726
Enco_70                        $2041  3704D  3650
Enco_60                        $2039  3699D  3678
Enco_50                        $2014  3677D  3680
Enco_30                        $1fe7  3653D  3644
Enco_10                        $1fdd  3646D  3654
GPC_Ret                        $1fd6  3627D  3587
GPC_20                         $1fb1  3604D  3585
GPC_10                         $1fa7  3597D  3589
DeTe_65                        $1f86  3572D  3576
DeTe_60                        $1f5d  3540D  3543
DeTe_55                        $1f49  3523D  3489
DeTe_50                        $1f37  3510D  3500
DeTe_35                        $1f2f  3506D  3503
DeTe_30                        $1f27  3502D  3496
DeTe_25                        $1f19  3494D  3491
DeTe_20                        $1f0d  3488D  3485
DeTe_15                        $1f02  3483D  3493
DiSe_Ret                       $1ed7  3444D  3484
DiSe_70                        $1ed3  3442D  3408
DiSe_30                        $1eb8  3425D  3430
Dictionary_Search              $1e7d  3389D  3278
Skip_Data_return               $1e7c  3385D  3383
Skip_Data                      $1e73  3374D  3400
SeSt_Ret                       $1e72  3371D  3367
SeSt_10                        $1e69  3366D  3369
SeDi_Ret                       $1e66  3354D  3329
SeDi_20                        $1e65  3353D  3349
Sep_Dict                       $1e49  3332D  3246
SkSu_10                        $1e32  3309D  3316
Skip_Surplus                   $1e2e  3304D  3231
Parse_70                       $1e29  3299D  3292
Parse_50                       $1df3  3267D  3247
Parse_40                       $1dbf  3237D  3239
Parse_35                       $1db9  3233D  3230
Parse_30                       $1db0  3228D  3219
Parse_25                       $1daa  3221D  3216
Parse_18                       $1d96  3207D  3205
Parse_17                       $1d8e  3203D  3199
Parse_15                       $1d84  3198D  3195
Parse_10                       $1d80  3196D  3193
Parse_AY_Dict                  $1d6b  3179D  2889
Set_Timeout_return             $1d18  3098D  3077
z_check_argc                   $1cd8  3060D   748
z_print_table_cloop            $1cc8  3049D  3052
z_print_table_rloop            $1cc3  3047D  3055
z_print_table_start            $1cc0  3046D  3043
z_print_table                  $1cac  3029D   747
z_copy_table_bloop             $1c9f  3019D  3024
z_copy_table_bwd               $1c7f  3002D  2979
z_copy_table_return            $1c7e  2998D  2967
z_copy_table_floop             $1c71  2992D  2997
z_copy_table_fwd               $1c63  2983D  2973
z_copy_table_safe              $1c59  2975D  2971
z_copy_table                   $1c42  2955D   746
ClTa_20                        $1c3d  2949D  2947
ClTa_10                        $1c34  2944D  2950
Clear_Table                    $1c2f  2939D  2964
z_encode_text_copy             $1c26  2931D  2934
z_encode_text_loop             $1c02  2909D  2922
z_encode_text_clear            $1bfb  2904D  2906
z_encode_text                  $1bf4  2893D   745
z_tokenise                     $1be0  2872D   744
z_scan_table_next              $1bc1  2853D  2847
z_scan_table_loop              $1ba8  2840D  2862
z_scan_table_addr              $1ba1  2836D  2832
z_scan_table_all               $1b9a  2832D  2828
z_scan_table                   $1b88  2813D   740
z_read_char_exit               $1b7c  2799D  2797
z_read_char_loop               $1b6c  2792D  2794
z_read_char                    $1b5f  2784D   739
z_sound_effect                 $1b56  2765D   738
Click_wait                     $1b49  2756D  2757
Click                          $1b2c  2741D  2777
z_output_stream_close          $1b18  2722D  2704
z_output_stream_return         $1b17  2717D  2706
z_output_stream                $1af6  2693D   736
z_buffer_mode                  $1aed  2683D   735
z_set_text_style               $1ada  2650D   734
Bold_On                        $1ad5  2641D  2674
Underline_On                   $1ad0  2632D  2676
z_get_cursor                   $1ab4  2598D   733
z_set_cursor                   $1aa0  2575D   732
z_erase_line_return            $1a9f  2571D  2564
z_erase_line_loop              $1a98  2567D  2570
z_erase_line                   $1a8e  2559D   731
z_erase_window_clear           $1a8b  2554D  2533
z_erase_window_unspl           $1a7e  2548D  2531
z_erase_window_lloop           $1a75  2542D  2545
z_erase_window_lower           $1a73  2541D  2529
z_erase_window_uloop           $1a6a  2535D  2538
z_erase_window                 $1a59  2524D   730
z_set_window_set               $1a50  2517D  2512
z_set_window_lower             $1a4c  2514D  2507
z_set_window_font              $1a40  2505D  2503
z_set_window                   $1a28  2492D   728
z_split_window_return          $1a27  2488D  2480
z_split_window_set             $1a24  2487D  2485
z_split_window                 $1a0e  2474D   727
z_pull                         $1a08  2466D   726
z_push                         $1a01  2457D   725
z_random                       $19e5  2439D   724
z_print_num_next               $19df  2432D  2428
z_print_num_loop               $19d4  2426D  2434
z_print_num_pos                $19ca  2422D  2418
z_print_num                    $19bc  2413D   723
z_print_char                   $19b7  2405D   722
z_read_return                  $19b6  2401D  2398
z_read_V4                      $198c  2383D  2381
z_read                         $1983  2370D   721
z_error11                      $197e  2366D  2358
z_error10                      $1979  2365D  2354
z_put_prop_byte                $1974  2362D  2356
z_put_prop                     $1961  2348D   720
z_storeb                       $1959  2336D   719
z_storew                       $1949  2320D   718
z_set_font_offset              $192c  2297D  2295
z_set_font                     $191c  2281D   760
z_art_shift_store              $1917  2276D  2266
z_art_shift_left               $1903  2262D  2265
z_art_shift                    $18fd  2253D   759
z_log_shift_store              $18f8  2248D  2241
z_log_shift_left               $18ea  2237D  2240
z_log_shift                    $18e4  2228D   758
z_set_colour                   $18b9  2192D   661
call_50                        $18a2  2178D  2144
call_40                        $189d  2174D  2165
call_36                        $188a  2164D  2157
call_32                        $187e  2159D  2153
call_30                        $1865  2147D  2176
call_25                        $185c  2142D  2139
call_20                        $1830  2118D  2112
call_10                        $182d  2116D  2114
z_mod                          $1814  2077D   658
z_div                          $180a  2067D   657
Sign_ZPX_return                $1809  2063D  2055
z_error_8                      $17d5  2021D  1997
Divide_Unsigned_next           $17cd  2016D  2013
Divide_Unsigned_loop           $17b5  2003D  2017
Divide_Unsigned                $17a6  1989D  2041
z_mul_zero                     $179c  1981D  1973
z_mul_loop                     $1785  1969D  1982
z_mul                          $177c  1959D   656
z_sub                          $176f  1944D   655
z_add                          $1762  1929D   654
z_get_next_prop_zero           $175f  1925D  1922
z_get_next_prop_next           $1754  1921D  1918
z_get_next_prop                $174a  1911D   653
z_get_prop_addr                $1738  1893D   652
z_get_prop_low                 $1733  1888D  1883
z_get_prop_read                $172f  1885D  1879
z_get_prop_found               $1729  1881D  1868
z_get_prop                     $1710  1860D   651
z_loadb                        $170a  1850D   650
z_loadw                        $16ff  1838D   649
Byte_Array                     $16ea  1818D  1855
Word_Array                     $16e7  1808D  1843
z_insert_obj_V3                $16cf  1792D  1762
z_insert_obj                   $169e  1756D   648
z_store                        $1693  1743D   647
z_clear_attr                   $1689  1730D   646
z_set_attr                     $1681  1718D   645
z_test_attr                    $1676  1706D   644
z_and                          $166a  1692D   643
z_or                           $165e  1678D   642
z_test_loop                    $164f  1668D  1673
z_test                         $164d  1662D   641
z_jin_false                    $164a  1658D  1655
z_jin_get                      $163e  1653D  1651
z_jin                          $1637  1645D   640
z_inc_chk_sig                  $1631  1640D  1638
z_inc_chk                      $1622  1628D   639
z_dec_chk_sig                  $161c  1623D  1621
z_dec_chk                      $160d  1611D   638
z_jg_sig                       $1607  1606D  1604
z_jg                           $15fb  1595D   637
z_jl_sig                       $15f5  1590D  1588
z_jl                           $15e9  1579D   636
z_je                           $15cf  1557D   635
z_load                         $15b9  1530D   689
z_print_paddr_label            $15b6  1526D  1523
z_print_paddr                  $15a2  1515D   688
z_jump                         $159b  1506D   687
z_ret_return                   $159a  1502D  1496
z_ret_irqret                   $1598  1500D  1495
z_ret_noloc                    $1576  1482D  1473
z_ret_loop                     $1569  1475D  1480
z_print_obj_decode             $1555  1458D  1456
z_print_obj_V4                 $1550  1454D  1450
z_print_obj_prio_1             $1546  1449D  1447
z_print_obj_A                  $153f  1443D  5134
z_print_obj                    $153b  1436D   685
z_remove_obj_ret70             $153a  1432D  1408
z_remove_obj_ro_60             $1531  1427D  1417
z_remove_obj_V3                $14ff  1401D  1337
z_remove_obj_ret40             $14fe  1399D  1346
z_remove_obj_ro_30             $14f7  1395D  1398
z_remove_obj_ro_20             $14f3  1393D  1371
z_print_addr                   $14a1  1323D   682
z_get_prop_len_V3              $148a  1299D  1289
z_get_prop_len_mask            $1485  1296D  1291
z_get_prop_len                 $146a  1275D   679
z_get_parent_get               $1464  1270D  1268
z_get_parent                   $145d  1264D   678
z_get_child                    $1446  1248D   677
z_get_sibling                  $143d  1239D   676
z_jz                           $1433  1227D   675
quit_30                        $1431  1220D  1220
quit_20                        $1428  1219D  4915
z_catch                        $1420  1209D   705
z_error_5                      $141b  1205D  1203
z_ret_popped                   $13fa  1176D   704
z_nop                          $13f9  1169D   700
z_print_ret                    $13f1  1158D   699
z_print_di                     $13e9  1150D  1153
z_print_id                     $13dd  1144D  1147
Main_False_return              $13c7  1113D  1056
Main_False_mft_80              $13c3  1111D  1109
Main_False_mft_70              $13b1  1101D  1099
Main_False_mft_60              $13a3  1084D  1071
Main_False_mft_50              $139a  1080D  1077
Main_False_mft_40              $1397  1078D  1074
Main_False_mft_30              $138d  1072D  1067
Main_False_mft_20              $1381  1065D  1054
Main_False_mft_10              $1375  1055D  1064
Put_Global_Var                 $134a  1002D   993
Store_Var                      $133a   989D   922
Store_A_X0H                    $1333   976D  1846
z_error_6                      $1328   953D   951
GeVa_10                        $12ec   894D   883
Get_Var_A                      $12e6   888D   813
Load_8_Operands_return         $12da   874D   865
Load_8_Operands_loop           $12c7   864D   873
Load_8_Operands                $12c0   850D   550
Load_4_Operands_return         $12bd   845D   838
Get_Operand_return             $12ad   823D   812
Get_Operand_store              $129e   814D   811
Get_Operand_check              $1299   812D   805
Get_Operand_const              $1290   808D   806
opcodes_ext                    $126d   753D  4318
z_error_1                      $1268   750D   737
opcodes_var                    $1228   714D   558
opcodes_0op                    $1208   693D   567
opcodes_1op                    $11e8   668D   585
PC_LOOP_twop                   $119a   608D   555
z_op_two                       $1186   589D   529
z_op_one                       $1178   571D   531
z_op_zero                      $1174   562D   533
PC_LOOP_var_30                 $1167   553D   551
PC_LOOP_var_20                 $1164   552D   549
PC_LOOP_var_10                 $115f   550D   547
PC_LOOP_nolog                  $1146   528D   526
Set_Attic_RAM_attic            $1121   496D   493
Set_Kernal_Vectors_loop        $10fb   473D   476
Set_Kernal_Vectors             $10f9   469D   395
BATE_20                        $10e0   454D   445
Link                           $103b   345D   328
CINV                           $0314   205D   474
SCNMPG                         $0288   204D   397
BLNSW                          $00cc   200D   400
FNADR                          $00bb   198D  5976
CURSOR_LEFT                    $009d    24D  5199
CURSOR_UP                      $0091    23D  5197
KEY_RIGHT                      $0084    72D  5639
KEY_LEFT                       $0083    71D  5625
ZP_CLEAR                       $0060   173D  4883
GLH                            $0058   166D  5559
BOLD                           $0040    62D  2644
REVERSE                        $0020    61D  2626
Log                            $0020   118D   525
CURSOR_RIGHT                   $001d    22D  5200
CURSOR_DOWN                    $0011    21D  5198
CYAN                           $0003    33D  5440
RED                            $0002    32D  6120
h_Alphabet_lo                  $2f35   297
h_Alphabet_hi                  $2f34   296
h_default_fg_color             $2f2d   294
h_default_bg_color             $2f2c   293
h_strings_offset_lo            $2f2b   292
h_strings_offset_hi            $2f2a   291
h_functions_offset_lo          $2f29   290
h_functions_offset_hi          $2f28   289
h_checksum_lo                  $2f1d   278
h_checksum_hi                  $2f1c   277
h_serial                       $2f12   272
h_dynamic_size_lo              $2f0f   269
h_resident_size_lo             $2f05   259
h_resident_size_hi             $2f04   258
TB_Color                       $2e52  6120
TI_Color                       $2e4f  6117
Bank1                          $2dc4  6088
Bank0                          $2da4  6080
Load_File                      $2c52  5992
Dump_Word                      $1d4e  3139
Log_A                          $1d19  3102
Mode_64                        $1041   351
BLNON                          $00cf   202
BLNCT                          $00cd   201
KEY_F8                         $008c    19
KEY_F6                         $008b    18
KEY_F4                         $008a    17
KEY_F2                         $0089    16
KEY_F7                         $0088    15
KEY_F5                         $0087    14
KEY_F3                         $0086    13
KEY_F1                         $0085    12
KEY_DOWN                       $0082    70
KEY_UP                         $0081    69
Info_Pages                     $001e   116
BLINK                          $0010    60
LT_GREY                        $000f    45
ENDMAC                         $000e   317
LT_BLUE                        $000e    44
LT_GREEN                       $000d    43
GREY                           $000c    42
DARKGREY                       $000b    41
PINK                           $000a    40
BROWN                          $0009    39
ORANGE                         $0008    38
GREEN                          $0005    35
PURPLE                         $0004    34
BLACK                          $0000    30
NORMAL                         $0000    59
