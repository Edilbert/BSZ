              ; *************************************
              ; * BSZ = Bit Shifter's Z interpreter *
              ; *       for MEGA65      30-Jul-2020 *
              ; *************************************

              .CPU 45GS02

0003          ZV     = 3   ; Z machine version

              ; *********************
              ; * Commodore KEY codes
              ; *********************

0085          KEY_F1   = 133
0086          KEY_F3   = 134
0087          KEY_F5   = 135
0088          KEY_F7   = 136
0089          KEY_F2   = 137
008a          KEY_F4   = 138
008b          KEY_F6   = 139
008c          KEY_F8   = 140

              ; *************************
              ; * Commodore Color Codes *
              ; *************************

0000          BLACK    =  0
0001          WHITE    =  1
0002          RED      =  2
0003          CYAN     =  3
0004          PURPLE   =  4
0005          GREEN    =  5
0006          BLUE     =  6
0007          YELLOW   =  7
0008          ORANGE   =  8
0009          BROWN    =  9
000a          PINK     = 10
000b          DARKGREY = 11
000c          GREY     = 12
000d          LT_GREEN = 13
000e          LT_BLUE  = 14
000f          LT_GREY  = 15

              ; *************************
              ; * display control codes *
              ; *************************

0008          BACKSPACE     = $08
0009          TAB           = $09
000d          CR            = $0d
0011          CURSOR_DOWN   = $11
0012          REVERSE_ON    = $12
0013          HOME          = $13
0014          DEL           = $14
001b          ESC           = $1b
001d          CURSOR_RIGHT  = $1d
0093          CLEAR         = $93
0091          CURSOR_UP     = $91
0092          REVERSE_OFF   = $92
009d          CURSOR_LEFT   = $9d

              ; ********************************************************
              ; * Interpreter Zero page variables (occupy BASIC space) *
              ; ********************************************************

0002          & = $02

              ; Instruction pointer     LDZ QI0  ->  LDA (RAM_LO),Z

0002          Z_Code           .BSS 1 ; current code byte
0003          QI0              .BSS 1 ; Byte 0  pc = (QI0/QI1/QI2)
0004          QI1              .BSS 1 ; Byte 1  Floppy block low
0005          QI2              .BSS 1 ; Byte 2  Floppy block high

              ; Data pointer            LDZ QD0  ->  LDA (RAM_LO),Z

0006          QDL              .BSS 1 ; current packed data low
0007          QDH              .BSS 1 ; current packed data high
0008          QD0              .BSS 1 ; Byte 0  pc = (QD0/QD1/QD2)
0009          QD1              .BSS 1 ; Byte 1  Floppy block low
000a          QD2              .BSS 1 ; Byte 2  Floppy block high

              ; keep above variables together (block push/pull)

000b          RAM_LO           .BSS 1 ; RAM address for disk access
000c          RAM_HI           .BSS 1
000d          RAM_BA           .BSS 2 ; RAM BANK

              ; Multi purpose local variables

000f          LV0              .BSS 1
0010          LV1              .BSS 1
0011          LV2              .BSS 1
0012          LV3              .BSS 1

0013          alphabet         .BSS 1
0014          Block_Lo         .BSS 1
0015          Block_Hi         .BSS 1
0016          Charbuf_Ptr      .BSS 1
0017          Charbuf_End      .BSS 1
0018          Chars_Left       .BSS 1
0019          Info_Pages       .BSS 1
001a          OP_Type          .BSS 2
001c          ParNum           .BSS 1
001d          Parse_Index      .BSS 1
001e          QuotL            .BSS 1
001f          QuotH            .BSS 1
0020          RemL             .BSS 1
0021          RemH             .BSS 1
0022          Resident_Pages   .BSS 1
0023          Cols             .BSS 1 ; # of columns
0024          C_Save_Col       .BSS 1
0025          C_Save_Row       .BSS 1
0026          C_Save_Adr       .BSS 2 ; cursor position
0028          Last_Row         .BSS 1
0029          Last_Col         .BSS 1
002a          Status_Col       .BSS 1
002b          MORE_Counter     .BSS 1
002c          z_stack_ptr      .BSS 1
002d          z_frame_ptr      .BSS 1
002e          NUMBER           .BSS 5
0033          P0L              .BSS 1 ; Multi purpose pointer
0034          P0H              .BSS 1
0035          P1L              .BSS 1 ; Multi purpose pointer
0036          P1H              .BSS 1
0037          P2L              .BSS 1 ; Multi purpose pointer
0038          P2H              .BSS 1
0039          P3L              .BSS 1 ; Multi purpose pointer
003a          P3H              .BSS 1
003b          DPL              .BSS 1 ; dictionary pointer
003c          DPH              .BSS 1
003d          DPI              .BSS 1
003e          A0L              .BSS 1 ; primary   address register
003f          A0H              .BSS 1
0040          A1L              .BSS 1 ; secondary address register
0041          A1H              .BSS 1
0042          X0L              .BSS 1 ; primary value   register
0043          X0H              .BSS 1
0044          X1L              .BSS 1 ; parameter register
0045          X1H              .BSS 1 ; X1L - X4H must be contiguous
0046          X2L              .BSS 1
0047          X2H              .BSS 1
0048          X3L              .BSS 1
0049          X3H              .BSS 1
004a          X4L              .BSS 1
004b          X4H              .BSS 1
004c          X5L              .BSS 1
004d          X5H              .BSS 1
004e          X6L              .BSS 1
004f          X6H              .BSS 1
0050          X7L              .BSS 1
0051          X7H              .BSS 1
0052          X8L              .BSS 1
0053          X8H              .BSS 1

0054          Cursor_Col       .BSS 1
0055          Cursor_Row       .BSS 1
0056          Cursor_Vis       .BSS 1
0057          Scr_Adr          .BSS 2 ; screen RAM 16 bit address
0059          Col_Adr          .BSS 4 ; colour RAM 32 bit address

005d          ZP_END           .BSS 1

              ; Kernal variables

0200          Charbuf = $0200

              ; ********************
              ; * system variables *
              ; ********************

0050          COLS       =  80
0019          ROWS       =  25
0001          R6510      = $01              ; C64 bank switching CPU port
0090          IO_STATUS  = $90              ; used by I/O routines
00ac          SAP        = $ac              ; source address pointer
00ae          TAP        = $ae              ; target address pointer
00b7          FNLEN      = $b7
00ba          FA         = $ba
00bb          FNADR      = $bb
00c3          MEMUSS     = $c3              ; string address
00c7          RVS        = $c7              ; reverse flag
00cc          BLNSW      = $cc              ; cursor blink flag
00cd          BLNCT      = $cd
00cf          BLNON      = $cf
0286          COLOR      = $286
028a          KEYRPT     = $28a             ; $80 = all, $40 = none, $00 sursor, space
0291          MODE       = $291
033c          DSTATUS    = $33c             ; 40 bytes disk status
0800          SCREEN     = $0800            ; character RAM
d800          COLRAM     = $d800            ; color     RAM
d012          Raster     = $d012
d020          BorderCol  = $d020
d021          BackgCol0  = $d021
d41b          Random     = $d41b

              ; ******
              ; Kernal
              ; ******

ff90          SETMSG = $ff90
ff93          SECOND = $ff93
ff96          TKSA   = $ff96
ffa5          ACPTR  = $ffa5
ffa8          CIOUT  = $ffa8
ffab          UNTLK  = $ffab
ffae          UNLSN  = $ffae
ffb1          LISTEN = $ffb1
ffb4          TALK   = $ffb4
ffbd          SETNAM = $ffbd
ffe4          GETIN  = $ffe4
fff0          PLOT   = $fff0
fffc          RESET  = $fffc

              ; **********
              ; C64 arrays
              ; **********

3a00          Z_VAR       = [EOP + $ff] & $ff00 ;
3b00          Z_STACK_LO  = Z_VAR      + $100 ; keep this area together
3c00          Z_STACK_HI  = Z_STACK_LO + $100
3d00          Z_HEADER    = Z_STACK_HI + $100
3b00          Filename    = Z_STACK_LO
3a00          Lvar_Lo     = Z_VAR
3a10          Lvar_Hi     = Z_VAR + $10

              ; ************
              ; STORY HEADER
              ; ************

3d00          h_version             = Z_HEADER
3d01          h_config              = Z_HEADER +   1
3d04          h_resident_size_hi    = Z_HEADER +   4
3d05          h_resident_size_lo    = Z_HEADER +   5
3d06          h_start_pc_hi         = Z_HEADER +   6
3d07          h_start_pc_lo         = Z_HEADER +   7
3d08          h_dictionary_hi       = Z_HEADER +   8
3d09          h_dictionary_lo       = Z_HEADER +   9
3d0a          h_objects_hi          = Z_HEADER +  10
3d0b          h_objects_lo          = Z_HEADER +  11
3d0c          h_globals_hi          = Z_HEADER +  12
3d0d          h_globals_lo          = Z_HEADER +  13
3d0e          h_dynamic_size_hi     = Z_HEADER +  14
3d0f          h_dynamic_size_lo     = Z_HEADER +  15
3d10          h_flags_hi            = Z_HEADER +  16
3d11          h_flags_lo            = Z_HEADER +  17
3d12          h_serial              = Z_HEADER +  18
3d18          h_abbreviations_hi    = Z_HEADER +  24
3d19          h_abbreviations_lo    = Z_HEADER +  25
3d1a          h_file_size_hi        = Z_HEADER +  26 ; in words for version 1-3
3d1b          h_file_size_lo        = Z_HEADER +  27 ; in words for version 1-3
3d1c          h_checksum_hi         = Z_HEADER +  28
3d1d          h_checksum_lo         = Z_HEADER +  29
3d1e          h_interpreter_number  = Z_HEADER +  30
3d1f          h_interpreter_version = Z_HEADER +  31
3d20          h_screen_rows         = Z_HEADER +  32
3d21          h_screen_cols         = Z_HEADER +  33
3d22          h_screen_width_hi     = Z_HEADER +  34
3d23          h_screen_width_lo     = Z_HEADER +  35
3d24          h_screen_height_hi    = Z_HEADER +  36
3d25          h_screen_height_lo    = Z_HEADER +  37
3d26          h_font_width          = Z_HEADER +  38
3d27          h_font_height         = Z_HEADER +  39
3d28          h_functions_offset_hi = Z_HEADER +  40
3d29          h_functions_offset_lo = Z_HEADER +  41
3d2a          h_strings_offset_hi   = Z_HEADER +  42
3d2b          h_strings_offset_lo   = Z_HEADER +  43
3d2c          h_default_bg_color    = Z_HEADER +  44
3d2d          h_default_fg_color    = Z_HEADER +  45

3d34          h_alphabet_hi         = Z_HEADER +  52
3d35          h_alphabet_lo         = Z_HEADER +  53

              ; *******************
              ; Z machine constants
              ; *******************


0004             O_PARENT     =   4
0005             O_SIBLING    =   5
0006             O_CHILD      =   6
0007             O_PROP       =   7
0009             O_SIZE       =   9
001f             P_MASK       = $1f
0004             V_SIZE       =   4
0006             WORD_LENGTH  =   6
24ab             Store_Object = Store_Byte

              ; ***********
              ; Print Macro
              ; ***********

            MACRO Print(lab)
                      LDA #<lab
                      LDY #>lab
                      LDX #?lab
                      JSR PrintText
            ENDMAC

            MACRO ERROR(num)
                      LDA #num
                      JMP INTERNAL_ERROR
            ENDMAC

            MACRO MAC_Color(color)
                       LDA #color
                       STA COLOR
            ENDMAC

2001          START = $2001   ; *** BASIC ***  C65

2001          * = START

                        .STORE START,EOP-START,"z3-mega65"

              ; ************
              ; basic_header
              ; ************

2001 3b 20              .WORD Link
2003 e4 07              .WORD 2020      ; line number
2005 8b                 .BYTE $8b       ; IF   token
2006 c2                 .BYTE $c2       ; PEEK token
2007 28 34 34           .BYTE "(44)"
200b b2                 .BYTE $b2       ; =    token
200c 38                 .BYTE "8"
200d a7                 .BYTE $a7       ; THEN token
200e 9e                 .BYTE $9e       ; SYS  token
200f 28 32 31           .BYTE "(2112):" ; C64  start
2016 d5                 .BYTE $d5       ; ELSE token
2017 fe 02              .BYTE $fe,$02   ; BANK token
2019 30 3a              .BYTE "0:"      ; BANK argument
201b 9e                 .BYTE $9e       ; SYS  token
201c 28 38 32           .BYTE "(8253):" ; C65  start
2023 8f                 .BYTE $8f       ; REM  token
2024 20 42 49           .BYTE " BIT SHIFTER 30-JUL-20",0
203b 00 00    Link      .WORD 0         ; BASIC end marker

              ; SYS entry for MEGA65 mode

203d 4c 66 20           JMP MEGA_Setup

              ; SYS entry for C64 mode

2040 a9 41              lda #65   ; 40MHz CPU
2042 85 00              sta 0

2044 a0 00              LDY #0
2046 84 3e              STY A0L
2048 84 40              STY A1L
204a a9 21              LDA #>[EOP - $1800]
204c 85 3f              STA A0H
204e a9 39              LDA #>EOP
2050 85 41              STA A1H

2052 b1 3e    ReLoop    LDA (A0L),Y
2054 91 40              STA (A1L),Y
2056 c8                 INY
2057 d0 f9              BNE ReLoop
2059 c6 3f              DEC A0H
205b c6 41              DEC A1H
205d a5 41              LDA A1H
205f c9 20              CMP #$20
2061 b0 ef              BCS ReLoop
2063 4c 66 20           JMP MEGA_Setup


              ; **********
2066            MEGA_Setup
              ; **********
2066 78                 sei
2067 a9 36              lda #$36            ; I/O & kernal
2069 85 01              sta R6510
206b a9 00              lda #0              ; Configure MEGA65 memory
206d aa                 tax
206e a8                 tay
206f 4b                 taz
2070 5c                 map
2071 ea                 eom

2072 a9 41              lda #65   ; 40 MHz
2074 85 00              sta 0

2076 20 a3 fd           jsr $fda3 ; init I/O
2079 20 15 fd           jsr $fd15 ; set I/O vectors
207c 20 5b ff           jsr $ff5b ; more init

207f a9 ff              LDA #-1             ; cursor off
2081 85 cc              STA BLNSW
2083 58                 CLI
2084 a2 08              LDX #8
2086 86 ba              STX FA
2088 8e 23 38           STX Game_Unit
208b 8e 24 38           STX Save_Unit       ; default SAVE unit = GAME unit

208e 20 3f 37           JSR Load_Config
2091 20 b2 20           JSR Set_Mode_80
2094 20 d2 21           JSR Screen_Setup
2097 ad 92 39           LDA FG_Color
209a 8d 86 02           STA COLOR
209d ad 95 39           LDA BG_Color
20a0 8d 21 d0           STA BackgCol0
20a3 ad 94 39           LDA BO_Color
20a6 8d 20 d0           STA BorderCol
20a9 20 3d 32           JSR Clear_Screen
20ac 20 90 ff           JSR SETMSG          ; disable kernal messages
20af 4c 03 22           JMP z_restart


              ; ***********
20b2            Set_Mode_80
              ; ***********

              ;         make VIC IV registers visible

20b2 a9 47              lda #$47
20b4 8d 2f d0           sta $d02f
20b7 a9 53              lda #$53
20b9 8d 2f d0           sta $d02f

20bc a9 c0              LDA #$c0           ; 80 columns, fast
20be 8d 31 d0           STA $d031
20c1 a9 26              LDA #$26           ; SCR = $0800,  CB = $0C00
20c3 8d 18 d0           STA $d018
20c6 60                 RTS ;Size   21 [Set_Mode_80]


              ; ====
              ; DATA
              ; ====

20c7 00       Row_Lo    .BYTE <[SCREEN]
20c8 50                 .BYTE <[SCREEN +  1 * COLS]
20c9 a0                 .BYTE <[SCREEN +  2 * COLS]
20ca f0                 .BYTE <[SCREEN +  3 * COLS]
20cb 40                 .BYTE <[SCREEN +  4 * COLS]
20cc 90                 .BYTE <[SCREEN +  5 * COLS]
20cd e0                 .BYTE <[SCREEN +  6 * COLS]
20ce 30                 .BYTE <[SCREEN +  7 * COLS]
20cf 80                 .BYTE <[SCREEN +  8 * COLS]
20d0 d0                 .BYTE <[SCREEN +  9 * COLS]
20d1 20                 .BYTE <[SCREEN + 10 * COLS]
20d2 70                 .BYTE <[SCREEN + 11 * COLS]
20d3 c0                 .BYTE <[SCREEN + 12 * COLS]
20d4 10                 .BYTE <[SCREEN + 13 * COLS]
20d5 60                 .BYTE <[SCREEN + 14 * COLS]
20d6 b0                 .BYTE <[SCREEN + 15 * COLS]
20d7 00                 .BYTE <[SCREEN + 16 * COLS]
20d8 50                 .BYTE <[SCREEN + 17 * COLS]
20d9 a0                 .BYTE <[SCREEN + 18 * COLS]
20da f0                 .BYTE <[SCREEN + 19 * COLS]
20db 40                 .BYTE <[SCREEN + 20 * COLS]
20dc 90                 .BYTE <[SCREEN + 21 * COLS]
20dd e0                 .BYTE <[SCREEN + 22 * COLS]
20de 30                 .BYTE <[SCREEN + 23 * COLS]
20df 80                 .BYTE <[SCREEN + 24 * COLS]

20e0 08       Row_Hi    .BYTE >[SCREEN]
20e1 08                 .BYTE >[SCREEN +  1 * COLS]
20e2 08                 .BYTE >[SCREEN +  2 * COLS]
20e3 08                 .BYTE >[SCREEN +  3 * COLS]
20e4 09                 .BYTE >[SCREEN +  4 * COLS]
20e5 09                 .BYTE >[SCREEN +  5 * COLS]
20e6 09                 .BYTE >[SCREEN +  6 * COLS]
20e7 0a                 .BYTE >[SCREEN +  7 * COLS]
20e8 0a                 .BYTE >[SCREEN +  8 * COLS]
20e9 0a                 .BYTE >[SCREEN +  9 * COLS]
20ea 0b                 .BYTE >[SCREEN + 10 * COLS]
20eb 0b                 .BYTE >[SCREEN + 11 * COLS]
20ec 0b                 .BYTE >[SCREEN + 12 * COLS]
20ed 0c                 .BYTE >[SCREEN + 13 * COLS]
20ee 0c                 .BYTE >[SCREEN + 14 * COLS]
20ef 0c                 .BYTE >[SCREEN + 15 * COLS]
20f0 0d                 .BYTE >[SCREEN + 16 * COLS]
20f1 0d                 .BYTE >[SCREEN + 17 * COLS]
20f2 0d                 .BYTE >[SCREEN + 18 * COLS]
20f3 0d                 .BYTE >[SCREEN + 19 * COLS]
20f4 0e                 .BYTE >[SCREEN + 20 * COLS]
20f5 0e                 .BYTE >[SCREEN + 21 * COLS]
20f6 0e                 .BYTE >[SCREEN + 22 * COLS]
20f7 0f                 .BYTE >[SCREEN + 23 * COLS]
20f8 0f                 .BYTE >[SCREEN + 24 * COLS]

20f9 00 00 00 Z_STATUS    .FILL 90 (0) ; 90 bytes
2153 00       L_Encode_A  .BYTE 0 ;
2154 00       L_Encode_Y  .BYTE 0 ;

              ; data for separators / delimiters in parsing

2155 21 3f 2c Sep_Std_List    .BYTE "!?,.\r " ; built in standard
215b 00       Z_Arg_Count     .BYTE 0 ; argument count
215c 01       Z_Buffer_Mode   .BYTE 1 ; output buffering on or off
215d 00       Z_Call_Type     .BYTE 0 ; type of subroutine call
215e 00       Z_Monospace     .BYTE 0
215f 00       Z_Underline     .BYTE 0
2160 00       Z_Active_Window .BYTE 0

2161 01       Z_Upper_Size    .BYTE 1 ; upper window size


2162 00 00 00 Z_Copy          .FILL RAM_HI - Z_Code + 1 (0) ; 11 bytes
216d 01       Breakpoint      .BYTE 1


              ; ==========================
              ; Cursor, Windows and Screen
              ; ==========================

              ; ******************
216e            Set_Screen_Pointer
              ; ******************

216e a6 55              LDX Cursor_Row

              ; ********************
2170            Set_Screen_Pointer_X
              ; ********************

2170 bd c7 20           LDA Row_Lo,X
2173 85 57              STA Scr_Adr
2175 85 59              STA Col_Adr
2177 bd e0 20           LDA Row_Hi,X
217a 85 58              STA Scr_Adr+1
217c 29 07              AND #7
217e 85 5a              STA Col_Adr+1
2180 60                 RTS ;Size   17 [Set_Screen_Pointer_X]


              ; ***********
2181            Window_Home
              ; ***********

              ; set cursor to top left position of window

2181 ae 61 21           LDX Z_Upper_Size
2184 a0 00              LDY #0

              ; ***********
2186            Set_Row_Col
              ; ***********

              ; Input : X = screen row    (0 .. 24)
              ;         Y = screen column (0 .. 79)

2186 e0 19              CPX #ROWS
2188 90 02              BCC SRC_10
218a a2 18              LDX #ROWS-1
218c c4 23    SRC_10    CPY Cols
218e 90 02              BCC SRC_20
2190 a4 29              LDY Last_Col

2192 86 55    SRC_20    STX Cursor_Row
2194 84 54              STY Cursor_Col
2196 20 6e 21           JSR Set_Screen_Pointer

              ; ***********
2199            Get_Row_Col
              ; ***********

              ; Output: X = screen row    (0 .. 24)
              ;         Y = screen column (0 .. 79)

2199 a6 55              LDX Cursor_Row
219b a4 54              LDY Cursor_Col
219d 60                 RTS ;Size    5 [Get_Row_Col]

              ; **********
219e            Info_Print
              ; **********

              ; Input: (X) = First page, (A) = Last page, (Y) = print pos
              ;----------------------------------------------------------

219e 48                 PHA
219f 8a                 TXA
21a0 20 46 36           JSR ASCII_Hex
21a3 99 d4 38           STA InfoPro + 10,Y
21a6 8a                 TXA
21a7 99 d3 38           STA InfoPro +  9,Y
21aa 68                 PLA
21ab 20 46 36           JSR ASCII_Hex
21ae 99 db 38           STA InfoPro + 17,Y
21b1 8a                 TXA
21b2 99 da 38           STA InfoPro + 16,Y
21b5 a9 00              LDA #0
21b7 85 43              STA X0H
21b9 a5 19              LDA Info_Pages
21bb 85 42              STA X0L

              ; *********
21bd            Info_Size
              ; *********
21bd 98                 TYA
21be 48                 PHA
21bf 20 1b 30           JSR Format_Integer
21c2 68                 PLA
21c3 a8                 TAY
21c4 a2 01              LDX #1
21c6 b5 2e    InSi_10   LDA NUMBER,X
21c8 99 df 38           STA InfoPro+21,Y
21cb c8                 INY
21cc e8                 INX
21cd e0 05              CPX #5
21cf 90 f5              BCC InSi_10
21d1 60                 RTS ;Size   21 [Info_Size]

              ; ************
21d2            Screen_Setup
              ; ************

21d2 a9 0f              LDA #$0F       ; colour RAM: $FF80000
21d4 85 5c              STA Col_Adr+3
21d6 a9 f8              LDA #$F8
21d8 85 5b              STA Col_Adr+2
21da a0 50              LDY #COLS
21dc 84 23              STY Cols
21de 88                 DEY
21df 84 29              STY Last_Col   ; Cols - 1 for comparisons

              ; ***************
21e1            Set_Screen_Rows
              ; ***************

21e1 38                 SEC
21e2 a9 18              LDA #ROWS-1    ; Last line
21e4 85 28              STA Last_Row
21e6 60                 RTS ;Size    6 [Set_Screen_Rows]

              ; ***********
21e7            Story_Pages
              ; ***********

              ; Leave story size in X0L/X0H for printing

21e7 a9 00              LDA #0
21e9 85 43              STA X0H
21eb ad 1a 3d           LDA h_file_size_hi    ; size in words high
21ee 85 42              STA X0L
21f0 ad 1b 3d           LDA h_file_size_lo    ; size in words low
21f3 0a                 ASL A
21f4 26 42              ROL X0L
21f6 26 43              ROL X0H               ; size * 2
21f8 c9 00              CMP #0
21fa f0 06              BEQ STTS_10           ; at page boundary
21fc e6 42              INC X0L               ; add 1 to round up
21fe d0 02              BNE STTS_10
2200 e6 43              INC X0H
2202 60       STTS_10   RTS ;Size   28 [Story_Pages]


              ; *********
2203            z_restart
              ; *********

2203 d8                 CLD
2204 a2 fb              LDX #$fb       ; Commodore default stack initialisation
2206 9a                 TXS
2207 a9 00              LDA #0         ; clear ZP variables
2209 a2 02              LDX #Z_Code    ; start of interpreter variables
220b 95 00    Start_10  STA 0,X
220d e8                 INX
220e e0 5d              CPX #ZP_END
2210 90 f9              BCC Start_10
2212 a9 00              LDA #0
2214 aa                 TAX
2215 20 d2 21           JSR Screen_Setup
2218 e6 2c              INC z_stack_ptr      ;  1
221a e6 2d              INC z_frame_ptr      ;  1
221c c6 2a              DEC Status_Col       ; -1
221e 20 0a 34           JSR Open_Story       ; open  8,8,8,"z3*"
2221 a9 3d              LDA #>Z_HEADER
2223 85 0c              STA RAM_HI
2225 20 ac 36           JSR Load_Page       ; load first block to Z_HEADER
2228 ad 00 3d           LDA h_version
222b c9 03              CMP #ZV
222d f0 0c              BEQ Start_20
                        Print(NOSTORY)
222f a9 a5              LDA #<NOSTORY
2231 a0 38              LDY #>NOSTORY
2233 a2 0b              LDX #?NOSTORY
2235 20 65 33           JSR PrintText

2238 4c dc 25           JMP quit_20
223b          Start_20

              ; =================
              ; Set Memory Layout
              ; =================

223b a2 93              LDX #>[$D000 - Z_HEADER]
223d 86 22              STX Resident_Pages  ; reserved
223f a2 50              LDX #COLS
2241 8e 21 3d           STX h_screen_cols

2244 ad 01 3d           LDA h_config
2247 09 31              ORA #%0011 0001     ; fixed font / colours
              ;               0--- ---- 7:timed input
              ;                 1- ---- 5:split screen
              ;                  1 ---- 4:fixed  font
              ;                    0--- 3:italic font
              ;                     0-- 2:bold   font
              ;                      0- 1:pictures
              ;                       1 0:colors
2249 8d 01 3d           STA h_config
224c a9 0c              LDA #%0000 1100
224e 0d 11 3d           ORA h_flags_lo
2251 8d 11 3d           STA h_flags_lo
2254 a9 00              LDA #0
2256 8d 22 3d           STA h_screen_width_hi
2259 8d 24 3d           STA h_screen_height_hi
225c a9 50              LDA #COLS
225e 8d 23 3d           STA h_screen_width_lo
2261 a9 18              LDA #ROWS-1
2263 8d 25 3d           STA h_screen_height_lo
2266 a9 01              LDA #1
2268 8d 26 3d           STA h_font_width
226b 8d 27 3d           STA h_font_height
226e a9 08              LDA #8              ; 6:PC 7:C128 8:C64
2270 8d 1e 3d           STA h_interpreter_number
2273 a9 47              LDA #'G'
2275 8d 1f 3d           STA h_interpreter_version

2278 a0 50              LDY #COLS
227a 84 23              STY Cols
227c 88                 DEY
227d 84 29              STY Last_Col

              ; -------- compute story location and size -----

227f a9 1a              LDA #>EOP - >START+1 ; program
2281 85 19              STA Info_Pages
2283 a2 20              LDX #>START
2285 a9 39              LDA #>EOP
2287 a0 00              LDY #0
2289 20 9e 21           JSR Info_Print
228c a5 22              LDA Resident_Pages ; static
228e 85 19              STA Info_Pages
2290 18                 CLC
2291 69 3c              ADC #>Z_HEADER-1
2293 a2 3d              LDX #>Z_HEADER
2295 a0 20              LDY #InfoSta-InfoPro
2297 20 9e 21           JSR Info_Print
229a 20 e7 21           JSR Story_Pages
229d a0 40              LDY #InfoSto-InfoPro
229f 20 bd 21           JSR Info_Size
                        Print(BITSHIFTER)
22a2 a9 b0              LDA #<BITSHIFTER
22a4 a0 38              LDY #>BITSHIFTER
22a6 a2 19              LDX #?BITSHIFTER
22a8 20 65 33           JSR PrintText

22ab 20 60 36           JSR Select_Text_Window
22ae a9 c9              LDA #<InfoClr
22b0 a0 38              LDY #>InfoClr
22b2 a2 62              LDX #[InfoEnd - InfoClr]
22b4 20 65 33           JSR PrintText

22b7 20 ac 36 Start_30  JSR Load_Page       ; Load resident area
22ba a5 90              LDA IO_STATUS
22bc d0 11              BNE Start_50        ; EOF
22be a5 14              LDA Block_Lo
22c0 29 07              AND #7
22c2 d0 05              BNE Start_40
22c4 a9 2e              LDA #'.'
22c6 20 9d 32           JSR CHROUT
22c9 a5 14    Start_40  LDA Block_Lo
22cb c5 22              CMP Resident_Pages
22cd 90 e8              BCC Start_30

22cf 20 d3 36 Start_50  JSR Load_Story
22d2 20 f2 33           JSR Wait_for_Return
22d5 20 b2 20           JSR Set_Mode_80
22d8 ad 06 3d           LDA h_start_pc_hi   ; Initialize pc
22db 85 04              STA QI1
22dd ad 07 3d           LDA h_start_pc_lo
22e0 85 03              STA QI0
22e2 20 bc 33           JSR Reset_Screen

              ; *******
22e5            PC_LOOP
              ; *******

              ; read next instruction byte from Z-program counter
              ; read optional operand bytes and call operator subroutine


              ; ----------
              ; Debug Code
              ; ----------

              ;          LDX #0
              ;PC_10     LDA Z_Code,X
              ;          STA Z_Copy,X
              ;          INX
              ;          CPX #RAM_HI - Z_Code + 1
              ;          BCC PC_10

              ; ------------------
              ; Breakpoint Handler
              ; ------------------

              ;          LDA QI0
              ;          CMP #$ce
              ;          BNE PC_30
              ;          LDA QI1
              ;          CMP #$b2
              ;          BNE PC_30
              ;          LDA QI2
              ;          CMP #$02
              ;          BNE PC_30
              ;          DEC Breakpoint
              ;          BNE PC_30
              ;          BRK
22e5           PC_30

22e5 a9 00              LDA #0
22e7 85 1c              STA ParNum           ; reset # of operands
22e9 20 df 2c           JSR Next_Instruction
22ec 85 02              STA Z_Code           ; remember op code
              ; ------
              ; Tracer
              ; ------
              ;          LDA #14
              ;          JSR CHROUT
              ;          LDX DumpQI
              ;          BEQ BZ_10
              ;          CMP #$0d
              ;          BEQ BZ_10
              ;          LDA #'+'
              ;          JSR CHROUT
              ;          LDA Z_Code
              ;          JSR ASCII_Hex
              ;          PHA
              ;          TXA
              ;          JSR CHROUT
              ;          PLA
              ;          JSR CHROUT
              ;BZ_10     LDA Z_Code

22ee 10 2e              BPL z_op_two         ; [$00 - $7f] -> codes with  2 operands
22f0 c9 b0              CMP #$b0
22f2 90 1c              BCC z_op_one         ; [$80 - $af] -> codes with  1 operand
22f4 c9 c0              CMP #$c0
22f6 90 13              BCC z_op_zero        ; [$b0 - $bf] -> codes with no operand

22f8 20 df 2c           JSR Next_Instruction ; [$c0 - $ff] -> codes with 0-4 operands

              ; ********
22fb            z_op_var
              ; ********

              ; max 4 operands (11223344)
              ; ----------------------------
              ; 00 = 16 bit constant
              ; 01 =  8 bit constant
              ; 10 = 16 bit variable
              ; 11 = no operand (end marker)

22fb 20 49 24 opvar_10  JSR Load_4_Operands
22fe a5 02    opvar_20  LDA Z_Code
2300 c9 e0              CMP #$e0
2302 90 2e              BCC z_exe_1f        ; [$c0 - $df] -> use 2 operand table
2304 29 1f              AND #$1f            ; [$e0 - $ff] -> use variable operands
2306 18                 CLC
2307 69 40              ADC #[opcodes_var - z_opcode] >> 1
2309 d0 29              BNE z_execute       ; always

              ; *********
230b            z_op_zero
              ; *********

              ; opcodes with no operand, opcode = $b0 - $bf

230b 38                 SEC
230c e9 80              SBC #$b0 - [[opcodes_0op - z_opcode] >> 1]
230e d0 24              BNE z_execute       ; always

              ; ********
2310            z_op_one
              ; ********

              ; opcode = 10tt cccc  opcodes with 1 operand
              ;     tt = 00 : 16 bit constant $8x
              ;     tt = 01 :  8 bit constant $9x
              ;     tt = 10 :    variable     $ax

2310 0a                 ASL A
2311 0a                 ASL A
2312 20 1d 24           JSR Get_Operand
2315 a5 02              LDA Z_Code
2317 29 0f              AND #15
2319 18                 CLC
231a 69 20              ADC #[opcodes_1op - z_opcode] >> 1
231c d0 16              BNE z_execute

              ; ********
231e            z_op_two
              ; ********

              ; opcode = 0fsc cccc  opcodes with 2 operands
              ;      f = 0 : 1st. op = short constant
              ;      f = 1 : 1st. op = variable
              ;      s = 0 : 2nd. op = short constant
              ;      s = 1 : 2nd. op = variable

231e 18                 CLC
231f 29 40              AND #$40            ; $40 if 1st. op variable
2321 69 40              ADC #$40            ; $80 if 1st. op variable
2323 20 1d 24           JSR Get_Operand     ; $80 variable, $40 8 bit constant
2326 a5 02              LDA Z_Code
2328 0a                 ASL A               ; C=0
2329 29 40              AND #$40
232b 69 40              ADC #$40
232d 20 1d 24           JSR Get_Operand
2330 a5 02              LDA Z_Code
2332 29 1f    z_exe_1f  AND #$1f            ; fall through

              ; *********
2334            z_execute
              ; *********

              ; Input : A = index to opcode table

2334 0a                 ASL A               ; convert to word index
2335 a8                 TAY
2336 b9 58 23           LDA z_opcode,Y
2339 8d 43 23           STA JSRMOD+1
233c b9 59 23           LDA z_opcode+1,Y
233f 8d 44 23           STA JSRMOD+2
2342 20 ff ff JSRMOD    JSR $ffff
2345 4c e5 22           JMP PC_LOOP

2348 00       DumpQI    .BYTE 0

              z_error_2 ERROR(2)
2349 a9 02              LDA #2
234b 4c 5b 2f           JMP INTERNAL_ERROR

              z_error_3 ERROR(3)
234e a9 03              LDA #3
2350 4c 5b 2f           JMP INTERNAL_ERROR

              z_error_4 ERROR(4)
2353 a9 04              LDA #4
2355 4c 5b 2f           JMP INTERNAL_ERROR


              ; ********
2358            z_opcode
              ; ********

              ; $00-$1f : byte const + short const
              ; $20-$3f : byte const + variable
              ; $40-$5f : variable   + byte const
              ; $60-$7f : variable   + variable
              ; $c0-$df : 0-4 arguments defined in follow up byte

2358 53 23              .WORD z_error_4       ; 00 20 40 60   c0
235a f0 26              .WORD z_je            ; 01 21 41 61   c1
235c 23 27              .WORD z_jl            ; 02 22 42 62   c2
235e 34 27              .WORD z_jg            ; 03 23 43 63   c3
2360 45 27              .WORD z_dec_chk       ; 04 24 44 64   c4
2362 56 27              .WORD z_inc_chk       ; 05 25 45 65   c5
2364 80 27              .WORD z_jin           ; 06 26 46 66   c6
2366 8f 27              .WORD z_test          ; 07 27 47 67   c7
2368 a5 27              .WORD z_or            ; 08 28 48 68   c8
236a b1 27              .WORD z_and           ; 09 29 49 69   c9
236c bd 27              .WORD z_test_attr     ; 0a 2a 4a 6a   ca
236e ca 27              .WORD z_set_attr      ; 0b 2b 4b 6b   cb
2370 d2 27              .WORD z_clear_attr    ; 0c 2c 4c 6c   cc
2372 dc 27              .WORD z_store         ; 0d 2d 4d 6d   cd
2374 e2 27              .WORD z_insert_obj    ; 0e 2e 4e 6e   ce
2376 fd 27              .WORD z_loadw         ; 0f 2f 4f 6f   cf
2378 08 28              .WORD z_loadb         ; 10 30 50 70   d0
237a 3b 28              .WORD z_get_prop      ; 11 31 51 71   d1
237c 27 28              .WORD z_get_prop_addr ; 12 32 52 72   d2
237e 63 28              .WORD z_get_next_prop ; 13 33 53 73   d3
2380 c0 28              .WORD z_add           ; 14 34 54 74   d4
2382 cd 28              .WORD z_sub           ; 15 35 55 75   d5
2384 da 28              .WORD z_mul           ; 16 36 56 76   d6
2386 fe 28              .WORD z_div           ; 17 37 57 77   d7
2388 08 29              .WORD z_mod           ; 18 38 58 78   d8
238a a9 29              .WORD z_call_s        ; 19 39 59 79   d9
238c a5 29              .WORD z_call_n        ; 1a 3a 5a 7a   da
238e a1 29              .WORD z_set_color     ; 1b 3b 5b 7b   db
2390 53 23              .WORD z_error_4       ; 1c 3c 5c 7c   dc
2392 53 23              .WORD z_error_4       ; 1d 3d 5d 7d   dd
2394 53 23              .WORD z_error_4       ; 1e 3e 5e 7e   de
2396 53 23              .WORD z_error_4       ; 1f 3f 5f 7f   df

              ; ***********
2398            opcodes_1op
              ; ***********

              ; $80-$8f : word constant
              ; $90-$9f : byte constant
              ; $a0-$af : variable

2398 ea 25              .WORD z_jz            ; 80 90 a0
239a f6 25              .WORD z_get_sibling   ; 81 91 a1
239c fa 25              .WORD z_get_child     ; 82 92 a2
239e 0c 26              .WORD z_get_parent    ; 83 93 a3
23a0 7b 28              .WORD z_get_prop_len  ; 84 94 a4
23a2 14 26              .WORD z_inc           ; 85 95 a5
23a4 20 26              .WORD z_dec           ; 86 96 a6
23a6 2e 26              .WORD z_print_addr    ; 87 97 a7
23a8 a9 29              .WORD z_call_s        ; 88 98 a8
23aa 35 26              .WORD z_remove_obj    ; 89 99 a9
23ac 71 26              .WORD z_print_obj     ; 8a 9a aa
23ae 86 26              .WORD z_ret           ; 8b 9b ab
23b0 c1 26              .WORD z_jump          ; 8c 9c ac
23b2 c8 26              .WORD z_print_paddr   ; 8d 9d ad
23b4 da 26              .WORD z_load          ; 8e 9e ae
23b6 e0 26              .WORD z_not           ; 8f 9f af

              ; ***********
23b8            opcodes_0op
              ; ***********

23b8 44 25              .WORD z_rtrue         ; b0
23ba 4e 25              .WORD z_rfalse        ; b1
23bc 84 25              .WORD z_print         ; b2
23be 9a 25              .WORD z_print_ret     ; b3
23c0 99 25              .WORD z_nop           ; b4
23c2 8f 34              .WORD z_save          ; b5
23c4 56 35              .WORD z_restore       ; b6
23c6 03 22              .WORD z_restart       ; b7
23c8 a3 25              .WORD z_ret_popped    ; b8
23ca ad 25              .WORD z_pop           ; b9
23cc c6 25              .WORD z_quit          ; ba
23ce c7 2f              .WORD z_new_line      ; bb
23d0 22 31              .WORD z_show_status   ; bc
23d2 f8 24              .WORD Main_True       ; bd z_verify
23d4 a7 33              .WORD z_extension     ; be
23d6 49 23              .WORD z_error_2       ; bf

              ; ***********
23d8            opcodes_var
              ; ***********

23d8 a9 29              .WORD z_call_s         ; e0 V3 call with 0-3 args
23da 29 2a              .WORD z_storew         ; e1
23dc 3a 2a              .WORD z_storeb         ; e2
23de 54 2a              .WORD z_put_prop       ; e3
23e0 f5 2a              .WORD z_read           ; e4
23e2 76 2a              .WORD z_print_char     ; e5
23e4 7b 2a              .WORD z_print_num      ; e6
23e6 a8 2a              .WORD z_random         ; e7
23e8 cf 2a              .WORD z_push           ; e8
23ea d6 2a              .WORD z_pull           ; e9
23ec 77 33              .WORD z_split_window   ; ea
23ee 99 33              .WORD z_set_window     ; eb
23f0 18 24              .WORD z_error_1        ; ec z_call_s 0-8 args
23f2 a6 33              .WORD z_erase_window   ; ed
23f4 18 24              .WORD z_error_1        ; ee z_erase_line
23f6 a4 33              .WORD z_set_cursor     ; ef
23f8 18 24              .WORD z_error_1        ; f0 z_get_cursor
23fa a2 33              .WORD z_set_text_style ; f1
23fc a3 33              .WORD z_buffer_mode    ; f2
23fe a5 33              .WORD z_output_stream  ; f3
2400 18 24              .WORD z_error_1        ; f4 z_input_stream
2402 ad 33              .WORD z_sound_effect   ; f5
2404 dc 2a              .WORD z_read_char      ; f6
2406 9a 29              .WORD z_scan_table     ; f7
2408 e0 26              .WORD z_not            ; f8
240a a5 29              .WORD z_call_n         ; f9 z_call_n 0-3 args
240c a5 29              .WORD z_call_n         ; fa z_call_n 0-8 args
240e 9b 29              .WORD z_tokenize       ; fb
2410 dc 2a              .WORD z_encode_text    ; fc
2412 9a 29              .WORD z_copy_table     ; fd
2414 9a 29              .WORD z_print_table    ; fe
2416 9c 29              .WORD z_check_argc     ; ff

              z_error_1 ERROR(1)
2418 a9 01              LDA #1
241a 4c 5b 2f           JMP INTERNAL_ERROR


              ; ***********
241d            opcodes_ext
              ; ***********



              ; ***********
241d            Get_Operand
              ; ***********

              ; Input: (A) = tt00 0000
              ; ----------------------
              ; tt = 00 : 16 bit constant
              ; tt = 01 :  8 bit constant
              ; tt = 10 :    variable
              ; tt = 11 :    none

              ; Output: Store 1st. in X1, 2nd. in X2, etc. until X8
              ;         Overflow set if none

241d 85 1a              STA OP_Type
241f a9 00              LDA #0
2421 24 1a              BIT OP_Type
2423 30 0f              BMI geop_02
2425 70 03              BVS geop_01
2427 20 df 2c           JSR Next_Instruction ; 00 -> word
242a 85 43    geop_01   STA X0H
242c 20 df 2c           JSR Next_Instruction ; 01 -> byte
242f 85 42              STA X0L
2431 4c 39 24           JMP geop_03
2434 70 12    geop_02   BVS geop_04          ; 11 -> end
2436 20 65 24           JSR Get_Var_A        ; 10 -> variable
2439 e6 1c    geop_03   INC ParNum
243b a5 1c              LDA ParNum
243d 0a                 ASL A
243e aa                 TAX
243f a5 42              LDA X0L
2441 95 42              STA X0L,X
2443 a5 43              LDA X0H
2445 95 43              STA X0H,X
2447 b8                 CLV
2448 60       geop_04   RTS ;Size   44 [Get_Operand]

              ; ***************
2449            Load_4_Operands
              ; ***************

              ; max 4 operands (2 type bits)
              ; ----------------------------
              ; 00 = 16 bit constant
              ; 01 =  8 bit constant
              ; 10 = 16 bit variable
              ; 11 = no operand (end marker)

2449 20 1d 24           JSR Get_Operand
244c 70 0a              BVS L4OP_20         ; V=1 -> end of args
244e a5 1a              LDA OP_Type
2450 0a                 ASL A
2451 0a                 ASL A               ; shift next 2 type bits to 7 and 6
2452 a6 1c              LDX ParNum
2454 e0 04              CPX #4
2456 90 f1              BCC Load_4_Operands
2458 a5 02    L4OP_20   LDA Z_Code
245a 60                 RTS ;Size   18 [Load_4_Operands]


              ; ***********
245b            Get_Var_X1L
              ; ***********

245b a5 44              LDA X1L
245d d0 0e              BNE GeVa_10
245f 20 ad 25           JSR z_pop
2462 4c 90 24           JMP Push_X0

              ; *********
2465            Get_Var_A
              ; *********

2465 20 df 2c           JSR Next_Instruction
2468 d0 03              BNE GeVa_10
246a 4c ad 25           JMP z_pop

246d c9 10    GeVa_10   CMP #16
246f b0 0c              BCS Get_Global_Var
2471 aa                 TAX
2472 bd 10 3a           LDA Lvar_Hi,X
2475 85 43              STA X0H
2477 bd 00 3a           LDA Lvar_Lo,X
247a 85 42              STA X0L
247c 60                 RTS ;Size   24 [Get_Var_A]

              ; **************
247d            Get_Global_Var
              ; **************

247d 20 d3 24           JSR Get_Global_Var_Addr
2480 b1 3e              LDA (A0L),Y
2482 85 43              STA X0H
2484 c8                 INY
2485 b1 3e              LDA (A0L),Y
2487 85 42              STA X0L
2489 60                 RTS ;Size   13 [Get_Global_Var]

              ; *******
248a            Put_Var
              ; *******

248a a5 44              LDA X1L             ; X1L == 0 : push  X0
248c d0 28              BNE stx0_01         ; X1L != 0 : store X0
248e c6 2c              DEC z_stack_ptr      ; X0 replaces top of stack

              ; *******
2490            Push_X0
              ; *******

2490 a5 42              LDA X0L
2492 a4 43              LDY X0H

              ; *******
2494            Push_AY
              ; *******

              ; Input : A = low  byte
              ;         Y = high byte
              ; X register is preserved

2494 48                 PHA
2495 98                 TYA
2496 a4 2c              LDY z_stack_ptr
2498 99 00 3c           STA Z_STACK_HI,Y
249b 68                 PLA
249c 99 00 3b           STA Z_STACK_LO,Y
249f e6 2c              INC z_stack_ptr
24a1 f0 01              BEQ z_error_6
24a3 60                 RTS ;Size   16 [Push_AY]
              z_error_6 ERROR(6)
24a4 a9 06              LDA #6
24a6 4c 5b 2f           JMP INTERNAL_ERROR


              ; **********
24a9            Store_Zero
              ; **********

24a9 a9 00              LDA #0

              ; **********
24ab            Store_Byte
              ; **********

24ab a2 00              LDX #0

              ; ********
24ad            Store_AX
              ; ********

24ad 86 43              STX X0H

              ; ***********
24af            Store_A_X0H
              ; ***********

24af 85 42              STA X0L

              ; ********
24b1            Store_X0
              ; ********

24b1 20 df 2c           JSR Next_Instruction
24b4 f0 da              BEQ Push_X0         ;    0: push   value

24b6 c9 10    stx0_01   CMP #16             ; 1-15: local  variable
24b8 b0 0c              BCS Put_Global_Var  ; > 15: global variable
24ba aa                 TAX
24bb a5 42              LDA X0L
24bd 9d 00 3a           STA Lvar_Lo,X
24c0 a5 43              LDA X0H
24c2 9d 10 3a           STA Lvar_Hi,X
24c5 60                 RTS ;Size   21 [Store_X0]

              ; **************
24c6            Put_Global_Var
              ; **************

24c6 20 d3 24           JSR Get_Global_Var_Addr
24c9 a5 43              LDA X0H             ; store in big endian order
24cb 91 3e              STA (A0L),Y
24cd c8                 INY
24ce a5 42              LDA X0L
24d0 91 3e              STA (A0L),Y
24d2 60                 RTS ;Size   13 [Put_Global_Var]

              ; *******************
24d3            Get_Global_Var_Addr
              ; *******************

              ;  Input: (A)  = Variable # ( 16 - 255)
              ; Output: (A0) = Address of Variable
              ;         (Y)  = 0  IMPORTANT: used by callers

              ; A0 = Z_HEADER + h_globals + 2 * (A)

24d3 38                 SEC
24d4 e9 10              SBC #16             ; variable index = number - 16
24d6 a0 00              LDY #0
24d8 84 3f              STY A0H
24da 0a                 ASL A
24db 26 3f              ROL A0H             ; (A/A0H) = index * 2 (C=0)
24dd 6d 0d 3d           ADC h_globals_lo
24e0 85 3e              STA A0L
24e2 a5 3f              LDA A0H             ; 0 or 1
24e4 6d 0c 3d           ADC h_globals_hi
24e7 69 3d              ADC #>Z_HEADER
24e9 85 3f              STA A0H
24eb 60       GGVA_Ret  RTS ;Size   25 [Get_Global_Var_Addr]

              ; Take a jump after an instruction based on the flag, either true or
              ; false. The branch can be short or long; it is encoded in one or two
              ; bytes respectively. When bit 7 of the first byte is set, the jump
              ; takes place if the flag is true; otherwise it is taken if the flag
              ; is false. When bit 6 of the first byte is set, the branch is short;
              ; otherwise it is long. The offset occupies the bottom 6 bits of the
              ; first byte plus all the bits in the second byte for long branches.
              ; Uniquely, an offset of 0 means return false, and an offset of 1 is
              ; return true. The branch distance is offset - 2.

              ; **********
24ec            Main_False
              ; **********

24ec 20 df 2c           JSR Next_Instruction
24ef 10 0c              BPL Bran_10
24f1 29 40    Bran_01   AND #$40
24f3 d0 f6              BNE GGVA_Ret
24f5 4c df 2c           JMP Next_Instruction

              ; *********
24f8            Main_True
              ; *********

24f8 20 df 2c           JSR Next_Instruction  ; A = specifier
24fb 10 f4              BPL Bran_01
24fd aa       Bran_10   TAX                   ; X = specifier
24fe 29 40              AND #$40              ; bit 6: 1=short 0=long
2500 f0 07              BEQ Bran_11           ; ---------------------
2502 8a                 TXA                   ; short forward branch
2503 29 3f              AND #$3f              ; A = offset (6 bits)
2505 a2 00              LDX #0                ; X = 0 (high offset)
2507 f0 16              BEQ Bran_14           ; ---------------------
2509 8a       Bran_11   TXA                   ; long branch
250a 29 20              AND #$20              ; sign bit of offset
250c f0 05              BEQ Bran_12           ; -> positive offset
250e 8a                 TXA
250f 09 c0              ORA #$c0              ; negative offset
2511 d0 03              BNE Bran_13           ; -> always
2513 8a       Bran_12   TXA
2514 29 3f              AND #$3f              ; positive offset
2516 85 43    Bran_13   STA X0H               ; high byte offset (6 bits)
2518 20 df 2c           JSR Next_Instruction  ; A = low  byte of long offset
251b a6 43              LDX X0H               ; X = high byte of long offset
251d d0 06              BNE Branch_XA         ; -> long branch
251f a8       Bran_14   TAY                   ; Y = offset
2520 f0 2c              BEQ z_rfalse          ; Offset 0: return false
2522 88                 DEY                   ; Y = offset - 1
2523 f0 1f              BEQ z_rtrue           ; Offset 1: return true

              ; *********
2525            Branch_XA
              ; *********

              ; branch to IP + (A/X) - 2
              ; Input : (A/X) = signed word with 14 significant bits

2525 86 43              STX X0H             ; offset high
2527 38                 SEC
2528 e9 02              SBC #2
252a b0 01              BCS Bran_20
252c ca                 DEX
252d 18       Bran_20   CLC                 ; (A/X) = offset - 2
252e 65 03              ADC QI0
2530 85 03              STA QI0
2532 8a                 TXA
2533 65 04              ADC QI1
2535 85 04              STA QI1
2537 a9 00              LDA #0              ; A = 0
2539 24 43              BIT X0H             ; check sign of offset
253b 10 02              BPL Bran_21         ; -> positive
253d a9 ff              LDA #-1             ; A = -1
253f 65 05    Bran_21   ADC QI2             ; add carry and sign
2541 85 05              STA QI2
2543 60                 RTS ;Size   31 [Branch_XA]

              ; ***************************
2544            z_rtrue  ; op0 opcode # $00
              ; ***************************

2544 a2 01              LDX #1
2546 86 44              STX X1L
2548 ca                 DEX
2549 86 45              STX X1H
254b 4c 86 26           JMP z_ret

              ; ****************************
254e            z_rfalse ; op0 opcode # $01
              ; ****************************

254e a2 00              LDX #0
2550 86 44              STX X1L
2552 86 45              STX X1H
2554 4c 86 26           JMP z_ret

              ; ********
2557            X1_TO_X0
              ; ********

2557 a5 44              LDA X1L
2559 85 42              STA X0L
255b a5 45              LDA X1H
255d 85 43              STA X0H
255f 60                 RTS ;Size    9 [X1_TO_X0]

              ; ********
2560            X2_TO_X0
              ; ********

2560 a5 46              LDA X2L
2562 85 42              STA X0L
2564 a5 47              LDA X2H
2566 85 43              STA X0H
2568 60                 RTS ;Size    9 [X2_TO_X0]

              ; ********
2569            X1_TO_A0
              ; ********

2569 a5 44              LDA X1L
256b 85 3e              STA A0L
256d a5 45              LDA X1H
256f 85 3f              STA A0H
2571 60                 RTS ;Size    9 [X1_TO_A0]

              ; ********
2572            X2_TO_A0
              ; ********

2572 a5 46              LDA X2L
2574 85 3e              STA A0L
2576 a5 47              LDA X2H
2578 85 3f              STA A0H
257a 60                 RTS ;Size    9 [X2_TO_A0]

              ; ********
257b            X0_TO_A0
              ; ********

257b a5 42              LDA X0L
257d 85 3e              STA A0L
257f a5 43              LDA X0H
2581 85 3f              STA A0H
2583 60                 RTS ;Size    9 [X0_TO_A0]

              ; ***************************
2584            z_print  ; op0 opcode # $02
              ; ***************************

              ; print text from instruction pointer (QI).

2584 a2 02              LDX #2
2586 b5 03    z_prin_1  LDA QI0,X           ; copy QI -> QD
2588 95 08              STA QD0,X
258a ca                 DEX
258b 10 f9              BPL z_prin_1
258d 20 38 2d           JSR Decode_Text     ; print text from (QD)
2590 a2 02              LDX #2
2592 b5 08    zprin_2   LDA QD0,X           ; copy QD -> QI
2594 95 03              STA QI0,X
2596 ca                 DEX
2597 10 f9              BPL zprin_2

              ; *******************************
2599            z_nop        ; op0 opcode # $04
              ; *******************************

2599 60                 RTS ;Size    1 [z_nop]

              ; *******************************
259a            z_print_ret  ; op0 opcode # $03
              ; *******************************

              ; print text from instruction pointer (QI) add a new line and return true.

259a 20 84 25           JSR z_print
259d 20 c7 2f           JSR z_new_line
25a0 4c 44 25           JMP z_rtrue

              ; *******************************
25a3            z_ret_popped ; op0 opcode # $08
              ; *******************************

25a3 20 ad 25           JSR z_pop
25a6 85 44              STA X1L
25a8 84 45              STY X1H
25aa 4c 86 26           JMP z_ret

              ; *************************
25ad            z_pop      ; opcode # $b9
              ; *************************

              ; pop 16 bit word from Z stack
              ; Output: (X0) = (A/Y)  = value
              ; X register preserved

25ad c6 2c              DEC z_stack_ptr
25af f0 10              BEQ z_error_5
25b1 a4 2c              LDY z_stack_ptr
25b3 b9 00 3b           LDA Z_STACK_LO,Y
25b6 48                 PHA
25b7 b9 00 3c           LDA Z_STACK_HI,Y
25ba a8                 TAY
25bb 68                 PLA
25bc 84 43              STY X0H
25be 85 42              STA X0L
25c0 60                 RTS ;Size   20 [z_pop]

              z_error_5 ERROR(5)
25c1 a9 05              LDA #5
25c3 4c 5b 2f           JMP INTERNAL_ERROR


              ; ********************************
25c6            z_quit        ; op0 opcode # $0a
              ; ********************************

25c6 20 32 37           JSR Save_Config

              ; leave a copy of ZP in page $E000

25c9 a2 02              LDX #2
25cb b5 00    quit_10   LDA 0,X
25cd 9d 00 e0           STA $E000,X
25d0 e8                 INX
25d1 d0 f8              BNE quit_10

                        Print(EOS)
25d3 a9 87              LDA #<EOS
25d5 a0 38              LDY #>EOS
25d7 a2 1e              LDX #?EOS
25d9 20 65 33           JSR PrintText


25dc 20 e4 ff quit_20   JSR GETIN           ; entry for early quit
25df f0 fb              BEQ quit_20
25e1 c9 4d              CMP #'M'            ; M -> BRK into monitor
25e3 d0 01              BNE quit_30
25e5 00                 BRK
25e6 6c fc ff quit_30   JMP (RESET)

              ; *******
25e9            z_catch
              ; *******
25e9 00                 BRK                 ; not implemented

              ; ********************************
25ea            z_jz          ; op1 opcode # $00
              ; ********************************

25ea a5 44              LDA X1L
25ec 05 45              ORA X1H
25ee f0 03              BEQ z_jz_t
25f0 4c ec 24           JMP Main_False
25f3 4c f8 24 z_jz_t    JMP Main_True

              ; ********************************
25f6            z_get_sibling ; op1 opcode # $01
              ; ********************************

25f6 a0 05              LDY #O_SIBLING      ; Y =  8
25f8 d0 02              BNE zg_chi_1

              ; ********************************
25fa            z_get_child   ; op1 opcode # $02
              ; ********************************

25fa a0 06              LDY #O_CHILD        ; Y = 10
25fc 20 b5 2e zg_chi_1  JSR Get_Object_X1   ; X1 object's address -> A0
25ff 20 ab 24           JSR Store_Object    ; (A/X) -> (X0) -> Store
2602 a5 42              LDA X0L
2604 f0 03              BEQ zg_chi_f
2606 4c f8 24           JMP Main_True       ; there is an object
2609 4c ec 24 zg_chi_f  JMP Main_False      ; there is no object

              ; *********************************
260c            z_get_parent   ; op1 opcode # $03
              ; *********************************

260c a0 04              LDY #O_PARENT
260e 20 b5 2e           JSR Get_Object_X1   ; (A/X) = parent object
2611 4c ab 24           JMP Store_Object

              ; *********************************
2614            z_inc          ; op1 opcode # $05
              ; *********************************

2614 20 5b 24           JSR Get_Var_X1L
2617 e6 42              INC X0L
2619 d0 02              BNE z_inc_1
261b e6 43              INC X0H
261d 4c 8a 24 z_inc_1   JMP Put_Var

              ; *********************************
2620            z_dec          ; op1 opcode # $06
              ; *********************************

2620 20 5b 24           JSR Get_Var_X1L
2623 a5 42              LDA X0L
2625 d0 02              BNE z_dec_1
2627 c6 43              DEC X0H
2629 c6 42    z_dec_1   DEC X0L
262b 4c 8a 24           JMP Put_Var

              ; *********************************
262e            z_print_addr   ; op1 opcode # $07
              ; *********************************

262e a4 44              LDY X1L
2630 a6 45              LDX X1H
2632 4c 30 2d           JMP Decode_YX

              ; *********************************
2635            z_remove_obj   ; op1 opcode # $09
              ; *********************************

              ; Remove (unlink) object (X1)


2635 a0 04              LDY #O_PARENT
2637 20 b5 2e           JSR Get_Object_X1
263a a5 3e              LDA A0L
263c 85 40              STA A1L
263e a5 3f              LDA A0H
2640 85 41              STA A1H
2642 b1 3e              LDA (A0L),Y         ; A = parent object
2644 f0 2a              BEQ zro_30          ; -> has no parent
2646 a0 06              LDY #O_CHILD
2648 20 b7 2e           JSR Get_Object_Reg  ; A = child of parent
264b c5 44              CMP X1L             ; is it me ?
264d d0 09              BNE zro_10          ; -> no
264f a0 05              LDY #O_SIBLING
2651 b1 40              LDA (A1L),Y         ; my sibling
2653 c8                 INY                 ; Y = O_CHILD
2654 91 3e              STA (A0L),Y         ; is parent's cild
2656 d0 0f              BNE zro_20          ; always

2658 a0 05    zro_10    LDY #O_SIBLING      ; A = sibling of parnent's
265a 20 b7 2e           JSR Get_Object_Reg  ; child
265d c5 44              CMP X1L             ; me ?
265f d0 f7              BNE zro_10          ; -> no
2661 a0 05              LDY #O_SIBLING
2663 b1 40              LDA (A1L),Y         ; my sibling is
2665 91 3e              STA (A0L),Y         ; parent's child sibling

2667 a9 00    zro_20    LDA #0
2669 a0 04              LDY #O_PARENT
266b 91 40              STA (A1L),Y         ; I have no parnet
266d c8                 INY                 ; Y = O_SIBLING
266e 91 40              STA (A1L),Y         ; I have no sibling
2670 60       zro_30    RTS ;Size   60 [z_remove_obj]

              ; *********************************
2671            z_print_obj    ; op1 opcode # $0a
              ; *********************************

2671 a5 44              LDA X1L
2673 a6 45              LDX X1H

              ; *************
2675            z_print_obj_A
              ; *************

2675 a0 07              LDY #O_PROP
2677 20 b7 2e           JSR Get_Object_Reg
267a aa                 TAX                 ; object prop high
267b c8                 INY
267c b1 3e              LDA (A0L),Y
267e a8                 TAY                 ; object prop low
267f c8                 INY
2680 d0 01              BNE zpo_10
2682 e8                 INX
2683 4c 30 2d zpo_10    JMP Decode_YX
2686                    .SIZE ;   17 [z_print_obj_A]

              ; *****************************
2686            z_ret          ; opcode # $ab
              ; *****************************

2686 a5 2d              LDA z_frame_ptr      ; stack ptr = frame ptr
2688 85 2c              STA z_stack_ptr

268a 20 ad 25           JSR z_pop
268d 8c 5b 21           STY Z_Arg_Count     ; # of args
2690 aa                 TAX                 ; # of local vars
2691 f0 0d              BEQ zret_20         ; -> no locals vars

2693 20 ad 25 zret_10   JSR z_pop           ; pop next local var
2696 9d 00 3a           STA Lvar_Lo,X       ; and restore it
2699 98                 TYA
269a 9d 10 3a           STA Lvar_Hi,X
269d ca                 DEX
269e d0 f3              BNE zret_10         ; -> loop

26a0 20 ad 25 zret_20   JSR z_pop
26a3 8d 5d 21           STA Z_Call_Type
26a6 84 03              STY QI0             ; restore instruction pointer L

26a8 20 ad 25           JSR z_pop
26ab 85 04              STA QI1             ; restore instruction pointer M
26ad 84 05              STY QI2             ; restore instruction pointer H

26af 20 ad 25           JSR z_pop
26b2 85 2d              STA z_frame_ptr

26b4 ad 5d 21           LDA Z_Call_Type
26b7 d0 07              BNE zret_30         ; -> no return value
26b9 a5 44              LDA X1L
26bb a6 45              LDX X1H
26bd 4c ad 24           JMP Store_AX
26c0 60       zret_30   RTS ;Size   59 [z_ret]

              ; *********************************
26c1            z_jump         ; op1 opcode # $0c
              ; *********************************

26c1 a5 44              LDA X1L
26c3 a6 45              LDX X1H
26c5 4c 25 25           JMP Branch_XA

              ; *********************************
26c8            z_print_paddr  ; op1 opcode # $0d
              ; *********************************

26c8 a5 44              LDA X1L
26ca 0a                 ASL A
26cb 85 08              STA QD0
26cd a5 45              LDA X1H
26cf 2a                 ROL A
26d0 85 09              STA QD1
26d2 a9 00              LDA #0
26d4 2a                 ROL A
26d5 85 0a              STA QD2
26d7 4c 38 2d           JMP Decode_Text

              ; *********************************
26da            z_load         ; op1 opcode # $0e
              ; *********************************

26da 20 5b 24           JSR Get_Var_X1L
26dd 4c b1 24           JMP Store_X0

              ; *********************************
26e0            z_not          ; op1 opcode # $0f
              ; *********************************
26e0 a5 44              LDA X1L
26e2 49 ff              EOR #$ff
26e4 aa                 TAX
26e5 a5 45              LDA X1H
26e7 49 ff              EOR #$ff

              ; ********
26e9            Store_XA
              ; ********

26e9 86 42              STX X0L
26eb 85 43              STA X0H
26ed 4c b1 24           JMP Store_X0

              ; *********************************
26f0            z_je           ; var opcode # $01
              ; *********************************

26f0 c6 1c              DEC ParNum
26f2 f0 2a              BEQ z_error_9
26f4 a5 44              LDA X1L      ; (X1 == X2)
26f6 a6 45              LDX X1H
26f8 c5 46              CMP X2L
26fa d0 04              BNE z_je_1
26fc e4 47              CPX X2H
26fe f0 18              BEQ z_je_t
2700 c6 1c    z_je_1    DEC ParNum
2702 f0 17              BEQ z_je_f
2704 c5 48              CMP X3L
2706 d0 04              BNE z_je_2
2708 e4 49              CPX X3H
270a f0 0c              BEQ z_je_t
270c c6 1c    z_je_2    DEC ParNum
270e f0 0b              BEQ z_je_f
2710 c5 4a              CMP X4L
2712 d0 07              BNE z_je_f
2714 e4 4b              CPX X4H
2716 d0 03              BNE z_je_f
2718 4c f8 24 z_je_t    JMP Main_True
271b 4c ec 24 z_je_f    JMP Main_False
              z_error_9 ERROR(9)
271e a9 09              LDA #9
2720 4c 5b 2f           JMP INTERNAL_ERROR


              ; *********************************
2723            z_jl           ; var opcode # $02
              ; *********************************

              ; jump true if (X2 < X1)

2723 20 57 25           JSR X1_TO_X0
2726 20 72 25           JSR X2_TO_A0
2729 20 6a 27           JSR CMP_A0_X0
272c b0 03              BCS z_jl_f
272e 4c f8 24           JMP Main_True
2731 4c ec 24 z_jl_f    JMP Main_False

              ; *********************************
2734            z_jg           ; var opcode # $03
              ; *********************************

              ; jump true if (X2 > X1)

2734 20 69 25           JSR X1_TO_A0
2737 20 60 25           JSR X2_TO_X0
273a 20 6a 27           JSR CMP_A0_X0
273d b0 03              BCS z_jg_f
273f 4c f8 24           JMP Main_True
2742 4c ec 24 z_jg_f    JMP Main_False

              ; *********************************
2745            z_dec_chk      ; var opcode # $04
              ; *********************************

              ; jump true if (--X0 < X2)

2745 20 20 26           JSR z_dec
2748 20 72 25           JSR X2_TO_A0
274b 20 6a 27           JSR CMP_A0_X0
274e b0 03              BCS z_dec_cf
2750 4c f8 24           JMP Main_True
2753 4c ec 24 z_dec_cf  JMP Main_False

              ; *********************************
2756            z_inc_chk      ; var opcode # $05
              ; *********************************

              ; jump true if (++X0 < X2)

2756 20 14 26           JSR z_inc
2759 20 7b 25           JSR X0_TO_A0
275c 20 60 25           JSR X2_TO_X0
275f 20 6a 27           JSR CMP_A0_X0
2762 b0 03              BCS z_inc_cf
2764 4c f8 24           JMP Main_True
2767 4c ec 24 z_inc_cf  JMP Main_False

              ; *********
276a            CMP_A0_X0
              ; *********

              ; Compare A0 with X0
              ; A0 >= X0 : Carry set
              ; A0 <  X0 : Carry clear

276a a5 3f              LDA A0H
276c 45 43              EOR X0H
276e 10 05              BPL cmpax_1 ; equal signs
2770 a5 3f              LDA A0H
2772 c5 43              CMP X0H
2774 60                 RTS ;Size   11 [CMP_A0_X0]
2775 a5 43    cmpax_1   LDA X0H
2777 c5 3f              CMP A0H
2779 d0 04              BNE cmpax_2
277b a5 42              LDA X0L
277d c5 3e              CMP A0L
277f 60       cmpax_2   RTS ;Size   22 [CMP_A0_X0]

              ; *********************************
2780            z_jin          ; var opcode # $06
              ; *********************************

2780 a0 04              LDY #O_PARENT
2782 20 b5 2e           JSR Get_Object_X1
2785 c5 46              CMP X2L
2787 d0 03              BNE z_jin_f
2789 4c f8 24           JMP Main_True
278c 4c ec 24 z_jin_f   JMP Main_False

              ; *********************************
278f            z_test         ; var opcode # $07
              ; *********************************

278f a5 46              LDA X2L
2791 25 44              AND X1L
2793 c5 46              CMP X2L
2795 d0 0b              BNE z_test_f
2797 a5 47              LDA X2H
2799 25 45              AND X1H
279b c5 47              CMP X2H
279d d0 03              BNE z_test_f
279f 4c f8 24           JMP Main_True
27a2 4c ec 24 z_test_f  JMP Main_False

              ; *********************************
27a5            z_or           ; var opcode # $08
              ; *********************************

27a5 a5 45              LDA X1H
27a7 05 47              ORA X2H
27a9 aa                 TAX
27aa a5 44              LDA X1L
27ac 05 46              ORA X2L
27ae 4c ad 24           JMP Store_AX

              ; *********************************
27b1            z_and          ; var opcode # $09
              ; *********************************

27b1 a5 45              LDA X1H
27b3 25 47              AND X2H
27b5 aa                 TAX
27b6 a5 44              LDA X1L
27b8 25 46              AND X2L
27ba 4c ad 24           JMP Store_AX

              ; *********************************
27bd            z_test_attr    ; var opcode # $0a
              ; *********************************

27bd 20 36 2f           JSR Get_Attr_Addr
27c0 31 3e              AND (A0L),Y
27c2 d0 03              BNE z_teat_t
27c4 4c ec 24           JMP Main_False
27c7 4c f8 24 z_teat_t  JMP Main_True

              ; *********************************
27ca            z_set_attr     ; var opcode # $0b
              ; *********************************

27ca 20 36 2f           JSR Get_Attr_Addr
27cd 11 3e              ORA (A0L),Y
27cf 91 3e              STA (A0L),Y
27d1 60                 RTS ;Size    8 [z_set_attr]

              ; *********************************
27d2            z_clear_attr   ; var opcode # $0c
              ; *********************************

27d2 20 36 2f           JSR Get_Attr_Addr
27d5 49 ff              EOR #$ff
27d7 31 3e              AND (A0L),Y
27d9 91 3e              STA (A0L),Y
27db 60                 RTS ;Size   10 [z_clear_attr]

              ; *******
27dc            z_store
              ; *******

27dc 20 60 25           JSR X2_TO_X0
27df 4c 8a 24           JMP Put_Var

              ; *********************************
27e2            z_insert_obj   ; var opcode # $0e
              ; *********************************

              ; insert object (X1) as 1st. child of object (X2)


27e2 20 35 26           JSR z_remove_obj    ; (A1) = object address
27e5 a5 46              LDA X2L
27e7 a0 04              LDY #O_PARENT
27e9 91 40              STA (A1L),Y         ; object's new parent
27eb a0 06              LDY #O_CHILD
27ed 20 b7 2e           JSR Get_Object_Reg  ; get new parent's child
27f0 aa                 TAX                 ; X = parent's first child
27f1 a5 44              LDA X1L
27f3 91 3e              STA (A0L),Y         ; object becomes parent's first child
27f5 8a                 TXA
27f6 f0 04              BEQ zinob_1         ; parent had no child before
27f8 a0 05              LDY #O_SIBLING
27fa 91 40              STA (A1L),Y         ; old child becommes sibling
27fc 60       zinob_1   RTS ;Size   27 [z_insert_obj]

              ; *********************************
27fd            z_loadw        ; var opcode # $0f
              ; *********************************

27fd 20 0e 28           JSR Word_Array      ; set &X1[X2]
2800 85 43              STA X0H             ; put value
2802 20 a9 2c           JSR Next_Datum      ; get low  byte
2805 4c af 24           JMP Store_A_X0H     ; return word

              ; *********************************
2808            z_loadb        ; var opcode # $10
              ; *********************************

2808 20 12 28           JSR Byte_Array      ; set &X1[X2]
280b 4c ab 24           JMP Store_Byte      ; return byte

              ; **********
280e            Word_Array
              ; **********

              ; address QD = base (X1) + index (X2 * 2)

280e 06 46              ASL X2L
2810 26 47              ROL X2H

              ; **********
2812            Byte_Array
              ; **********

              ; address QD = base (X1) + index (X2)

2812 18                 CLC
2813 a5 44              LDA X1L
2815 65 46              ADC X2L
2817 85 08              STA QD0
2819 a5 45              LDA X1H
281b 65 47              ADC X2H
281d 85 09              STA QD1
281f a9 00              LDA #0
2821 2a                 ROL A               ; add carry for address > 64K
2822 85 0a              STA QD2
2824 4c a9 2c           JMP Next_Datum      ; get next byte

              ; ****************************************
2827            z_get_prop_addr ; opcodes 12 32 52 72 d2
              ; ****************************************

              ; get property address of property X2 of object X1
              ; store address of property if found
              ; else store zero

2827 20 25 2f           JSR Find_Property
282a d0 0c              BNE gepa_10
282c a5 3e              LDA A0L
282e e9 fe              SBC #<[Z_HEADER-2]  ; carry from Find_Property
2830 aa                 TAX                 ; set address after ID/size info
2831 a5 3f              LDA A0H
2833 e9 3c              SBC #>[Z_HEADER-2]
2835 4c e9 26           JMP Store_XA
2838 4c a9 24 gepa_10   JMP Store_Zero
283b                    .SIZE ;   20 [z_get_prop_addr]

              ; ***********************************
283b            z_get_prop ; opcodes 11 31 51 71 d1
              ; ***********************************

              ; get property X2 of object X1
              ; if X1 has no property X2 use default value
              ; the routine must access properties of size byte or word only

283b 20 25 2f           JSR Find_Property
283e f0 14              BEQ zgp_10          ; -> found property

2840 ad 0b 3d           LDA h_objects_lo    ; use default
2843 85 3e              STA A0L
2845 ad 0a 3d           LDA h_objects_hi
2848 69 3d              ADC #>Z_HEADER      ; carry is clear
284a 85 3f              STA A0H             ; A0 = address of default properties
284c a5 46              LDA X2L             ; property #
284e e9 00              SBC #0              ; (C=0) : minus 1
2850 0a                 ASL A               ; default properties have word size
2851 a8                 TAY
2852 10 06              BPL zgp_20          ; branch always

2854 20 07 2f zgp_10    JSR Property_Size   ; get size
2857 aa                 TAX                 ; 1: word
2858 f0 04              BEQ zgp_30          ; 0: byte (X=0)

285a b1 3e    zgp_20    LDA (A0L),Y         ; property value high
285c aa                 TAX
285d c8                 INY
285e b1 3e    zgp_30    LDA (A0L),Y         ; property value low
2860 4c ad 24           JMP Store_AX
2863                    .SIZE ;   40 [z_get_prop]

              ; ****************************************
2863            z_get_next_prop ; opcodes 13 33 53 73 d3
              ; ****************************************

              ; for X2L == 0 find first property of object X1
              ; otherwise find next property after property X2L

2863 a5 46              LDA X2L
2865 d0 06              BNE zgnp_10         ; -> next prop after X2
2867 20 e5 2e           JSR First_Property
286a 4c ab 24           JMP Store_Byte
286d 20 25 2f zgnp_10   JSR Find_Property
2870 d0 06              BNE zgnp_20         ; -> prop X2 was not found
2872 20 10 2f           JSR Next_Property
2875 4c ab 24           JMP Store_Byte
2878 4c a9 24 zgnp_20   JMP Store_Zero
287b                    .SIZE ;   24 [z_get_next_prop]

              ; *********************************
287b            z_get_prop_len ; opcodes 84 94 a4
              ; *********************************

              ; get length of property, which address is in X1
              ; The length info is stored one byte before (X1)

287b 18                 CLC
287c a5 44              LDA X1L
287e 69 ff              ADC #<[Z_HEADER-1]
2880 85 3e              STA A0L
2882 a5 45              LDA X1H
2884 69 3c              ADC #>[Z_HEADER-1]
2886 85 3f              STA A0H             ; (A0) = (X1) - 1 + Header
2888 a0 00              LDY #0

288a 20 07 2f           JSR Property_Size
288d 18                 CLC
288e 69 01              ADC #1
2890 4c ab 24           JMP Store_Byte

              ; *******
2893            Dump_QI
              ; *******
2893 a9 5b              LDA #'['
2895 20 9d 32           JSR CHROUT
2898 a5 02              LDA Z_Code
289a 20 4f 2f           JSR Dump_Byte
289d a9 3a              LDA #':'
289f 20 9d 32           JSR CHROUT
28a2 a5 03              LDA QI0
28a4 20 4f 2f           JSR Dump_Byte
28a7 a5 04              LDA QI1
28a9 20 4f 2f           JSR Dump_Byte
28ac a9 3a              LDA #':'
28ae 20 9d 32           JSR CHROUT
28b1 a5 05              LDA QI2
28b3 20 4f 2f           JSR Dump_Byte
28b6 a9 5d              LDA #']'
28b8 20 9d 32           JSR CHROUT
28bb a9 20              LDA #' '
28bd 4c 9d 32           JMP CHROUT

              ; *********************************
28c0            z_add          ; var opcode # $14
              ; *********************************

28c0 18                 CLC
28c1 a5 44              LDA X1L
28c3 65 46              ADC X2L
28c5 aa                 TAX
28c6 a5 45              LDA X1H
28c8 65 47              ADC X2H
28ca 4c e9 26           JMP Store_XA

              ; *********************************
28cd            z_sub          ; var opcode # $15
              ; *********************************

28cd 38                 SEC
28ce a5 44              LDA X1L
28d0 e5 46              SBC X2L
28d2 aa                 TAX
28d3 a5 45              LDA X1H
28d5 e5 47              SBC X2H
28d7 4c e9 26           JMP Store_XA

              ; *********************************
28da            z_mul          ; var opcode # $16
              ; *********************************

              ; 16 bit multiplication
              ;
              ; (X2) = (X1) * (X2)
              ;

28da 20 90 29           JSR Prep_Mult_Div
28dd 66 10    z_mul_1   ROR LV1
28df 66 0f              ROR LV0
28e1 66 47              ROR X2H
28e3 66 46              ROR X2L
28e5 90 0d              BCC z_mul_2
28e7 18                 CLC
28e8 a5 44              LDA X1L
28ea 65 0f              ADC LV0
28ec 85 0f              STA LV0
28ee a5 45              LDA X1H
28f0 65 10              ADC LV1
28f2 85 10              STA LV1
28f4 ca       z_mul_2   DEX
28f5 10 e6              BPL z_mul_1
28f7 a6 46              LDX X2L
28f9 a5 47              LDA X2H
28fb 4c e9 26           JMP Store_XA

              ; *********************************
28fe            z_div          ; var opcode # $17
              ; *********************************

28fe 20 12 29           JSR Divide_Signed
2901 a6 1e              LDX QuotL
2903 a5 1f              LDA QuotH
2905 4c e9 26           JMP Store_XA

              ; *********************************
2908            z_mod          ; var opcode # $18
              ; *********************************

2908 20 12 29           JSR Divide_Signed
290b a6 20              LDX RemL
290d a5 21              LDA RemH
290f 4c e9 26           JMP Store_XA

              ; *************
2912            Divide_Signed
              ; *************

              ; (Quot) = (X1) / (X2)
              ; (Rem ) = (X1) % (X2)

2912 a5 45              LDA X1H
2914 85 11              STA LV2          ; Rem_Sign
2916 45 47              EOR X2H
2918 85 12              STA LV3          ; Quot_Sign
291a a5 44              LDA X1L
291c 85 1e              STA QuotL
291e a5 45              LDA X1H
2920 85 1f              STA QuotH
2922 10 03              BPL Divi_01
2924 20 50 29           JSR Negate_Quot ; Make Quot positive
2927 a5 46    Divi_01   LDA X2L
2929 85 20              STA RemL
292b a5 47              LDA X2H
292d 85 21              STA RemH
292f 10 03              BPL Divi_02
2931 20 42 29           JSR Divi_04     ; Make Rem positive
2934 20 5e 29 Divi_02   JSR Divide_Unsigned
2937 a5 12              LDA LV3         ; Quot_Sign
2939 10 03              BPL Divi_03
293b 20 50 29           JSR Negate_Quot ; (+/-) or (-/+)
293e a5 11    Divi_03   LDA LV2         ; Rem_Sign
2940 10 0d              BPL Divi_05
2942 a9 00    Divi_04   LDA #0
2944 38                 SEC
2945 e5 20              SBC RemL
2947 85 20              STA RemL
2949 a9 00              LDA #0
294b e5 21              SBC RemH
294d 85 21              STA RemH
294f 60       Divi_05   RTS ;Size   62 [Divide_Signed]

              ; ***********
2950            Negate_Quot
              ; ***********

2950 a9 00              LDA #0
2952 38                 SEC
2953 e5 1e              SBC QuotL
2955 85 1e              STA QuotL
2957 a9 00              LDA #0
2959 e5 1f              SBC QuotH
295b 85 1f              STA QuotH
295d 60                 RTS ;Size   14 [Negate_Quot]

              ; ***************
295e            Divide_Unsigned
              ; ***************

295e a5 20              LDA RemL
2960 05 21              ORA RemH
2962 f0 2b              BEQ z_error_8
2964 20 90 29           JSR Prep_Mult_Div
2967 26 1e    DiUn_01   ROL QuotL
2969 26 1f              ROL QuotH
296b 26 0f              ROL LV0
296d 26 10              ROL LV1
296f a5 0f              LDA LV0
2971 38                 SEC
2972 e5 20              SBC RemL
2974 a8                 TAY
2975 a5 10              LDA LV1
2977 e5 21              SBC RemH
2979 90 04              BCC DiUn_02
297b 84 0f              STY LV0
297d 85 10              STA LV1
297f ca       DiUn_02   DEX
2980 d0 e5              BNE DiUn_01
2982 26 1e              ROL QuotL
2984 26 1f              ROL QuotH
2986 a5 0f              LDA LV0
2988 85 20              STA RemL
298a a5 10              LDA LV1
298c 85 21              STA RemH
298e 60                 RTS ;Size   49 [Divide_Unsigned]
298f 00       z_error_8 BRK   ; ERROR(8)  ; Divide by zero

              ; *************
2990            Prep_Mult_Div
              ; *************

2990 a2 10              LDX #16
2992 a9 00              LDA #0
2994 85 0f              STA LV0
2996 85 10              STA LV1
2998 18                 CLC
2999 60                 RTS ;Size   10 [Prep_Mult_Div]

              ; ************
299a            z_scan_table
              ; ************

              ; ************
299a            z_copy_table
              ; ************

              ; Input : X1 = source
              ;         X2 = target
              ;         X3 = size


              ; *************
299a            z_print_table
              ; *************

              ; Input : X1 = zscii text
              ;         X2 = width
              ;         X3 = height
              ;         X4 = skip

299a 60       zpt_40    RTS ;Size    1 [z_scan_table]

              ; **********
299b            z_tokenize
              ; **********

              ;         X1 = text input buffer
              ;         X2 = parse buffer
              ;         X3 = dictionary
              ;         X4 = flag

299b 00                 BRK

              ; *********************************
299c            z_check_argc   ;     opcode # $ff
              ; *********************************
299c 60                 RTS ;Size    1 [z_check_argc]

              ; ***********
299d            z_log_shift
              ; ***********

              ; **********
299d            z_set_font
              ; **********

              ; 0 : previous font
              ; 1 : normal   font
              ; 2 : picture  font
              ; 3 : character graphics
              ; 4 : fixed pitch

299d 4c a9 24           JMP Store_Zero
29a0 01       Z_Active_Font .BYTE 1

              ; ************************************
29a1            z_set_color ; opcodes 1b 3b 5b 7b db
              ; ************************************

              ; Input : X1 = foreground color
              ;         X2 = background color

29a1 20 05 30           JSR Print_Buffer


29a4 60                 RTS ;Size    4 [z_set_color]

              ; *********************************
29a5            z_call_n       ; op2 opcode # $f9
              ; *********************************

29a5 a9 01              LDA #1
29a7 d0 02              BNE call_00         ; always

              ; *********************************
29a9            z_call_s       ; op2 opcode # $00
              ; *********************************

              ; call subroutine (X1) with 0 - 3 arguments
              ; X1 = subroutine address / 2 (word count)
              ; X2 - X4 arguments
              ; If (X1 == 0) push zero and return
              ; Push saved stack pointer & QI0
              ; Push QI1 & QI2
              ; For # of args do:
              ;     Push local variable
              ;     Set default from instruction stream
              ;     Replace from argument if set
              ; Push argument count & count eor'd with $ff

29a9 a9 00              LDA #0
29ab 8d 5d 21 call_00   STA Z_Call_Type
29ae a5 44              LDA X1L
29b0 05 45              ORA X1H
29b2 d0 09              BNE call_20
29b4 ad 5d 21           LDA Z_Call_Type
29b7 f0 01              BEQ call_10
29b9 60                 RTS ;Size   17 [z_call_s]
29ba 4c ab 24 call_10   JMP Store_Byte

29bd a5 2d    call_20   LDA z_frame_ptr      ; push frame pointer
29bf 20 94 24           JSR Push_AY

29c2 a4 05              LDY QI2             ; push instruction pointer H
29c4 a5 04              LDA QI1             ; push instruction pointer M
29c6 20 94 24           JSR Push_AY

29c9 a4 03              LDY QI0             ; push instruction pointer L
29cb ad 5d 21           LDA Z_Call_Type     ; push call type
29ce 20 94 24           JSR Push_AY

29d1 a5 44              LDA X1L             ; compute call address
29d3 0a                 ASL A
29d4 85 03              STA QI0
29d6 a5 45              LDA X1H
29d8 2a                 ROL A
29d9 85 04              STA QI1
29db a9 00              LDA #0
29dd 2a                 ROL A
29de 85 05              STA QI2             ; IP = (X1) * 2
29e0 20 df 2c           JSR Next_Instruction
29e3 85 41              STA A1H             ; number of local variables
29e5 f0 2f              BEQ call_50         ; no local variables
29e7 a2 01              LDX #1

29e9 bc 10 3a call_30   LDY Lvar_Hi,X
29ec bd 00 3a           LDA Lvar_Lo,X
29ef 20 94 24           JSR Push_AY         ; push local var of caller
              ;-----------------------------
              ;-----------------------------
29f2 20 df 2c           JSR Next_Instruction; initialize with default value
29f5 9d 10 3a           STA Lvar_Hi,X
29f8 20 df 2c           JSR Next_Instruction; from instruction stream
29fb 9d 00 3a           STA Lvar_Lo,X
              ;-----------------------------
29fe e4 1c              CPX ParNum          ; index > # of args ?
2a00 b0 0f              BCS call_40         ; -> stay with default value

2a02 8a                 TXA
2a03 0a                 ASL A               ; or replace with arg value
2a04 a8                 TAY
2a05 b9 44 00           LDA X1L,Y
2a08 9d 00 3a           STA Lvar_Lo,X
2a0b b9 45 00           LDA X1H,Y
2a0e 9d 10 3a           STA Lvar_Hi,X
2a11 e4 41    call_40   CPX A1H             ; # of vars to process
2a13 e8                 INX
2a14 90 d3              BCC call_30

2a16 ac 5b 21 call_50   LDY Z_Arg_Count
2a19 a5 41              LDA A1H             ; push # of local vars
2a1b 20 94 24           JSR Push_AY
2a1e a4 1c              LDY ParNum
2a20 88                 DEY
2a21 8c 5b 21           STY Z_Arg_Count
2a24 a5 2c              LDA z_stack_ptr
2a26 85 2d              STA z_frame_ptr      ; set new frame pointer
2a28 60                 RTS ;Size  128 [z_call_s]

              ; ****************************
2a29            z_storew       ; X1[X2] = X3
              ; ****************************

2a29 06 46              ASL X2L
2a2b 26 47              ROL X2H
2a2d 20 42 2a           JSR X1_PLUS_X2_TO_A0
2a30 a5 49              LDA X3H
2a32 91 3e              STA (A0L),Y
2a34 c8                 INY
2a35 a5 48              LDA X3L
2a37 91 3e              STA (A0L),Y
2a39 60                 RTS ;Size   17 [z_storew]

              ; ****************************
2a3a            z_storeb       ; X1[X2] = X3
              ; ****************************

2a3a 20 42 2a           JSR X1_PLUS_X2_TO_A0
2a3d a5 48              LDA X3L
2a3f 91 3e              STA (A0L),Y
2a41 60                 RTS ;Size    8 [z_storeb]

              ; ****************
2a42            X1_PLUS_X2_TO_A0
              ; ****************

2a42 18                 CLC
2a43 a5 46              LDA X2L
2a45 65 44              ADC X1L
2a47 85 3e              STA A0L
2a49 a5 47              LDA X2H
2a4b 65 45              ADC X1H
2a4d 69 3d              ADC #>Z_HEADER
2a4f 85 3f              STA A0H
2a51 a0 00              LDY #0
2a53 60                 RTS ;Size   18 [X1_PLUS_X2_TO_A0]

              ; *********************************
2a54            z_put_prop     ; op2 opcode # $03
              ; *********************************

              ; object (X1) property (X2) = X3

2a54 20 25 2f           JSR Find_Property
2a57 d0 13              BNE z_error10
2a59 20 07 2f           JSR Property_Size
2a5c f0 09              BEQ zpupr_3         ; 0: byte
2a5e c9 01              CMP #1              ; 1: word
2a60 d0 0f              BNE z_error11
2a62 a5 49              LDA X3H
2a64 91 3e              STA (A0L),Y
2a66 c8                 INY
2a67 a5 48    zpupr_3   LDA X3L
2a69 91 3e              STA (A0L),Y
2a6b 60                 RTS ;Size   24 [z_put_prop]

              z_error10 ERROR(10)
2a6c a9 0a              LDA #10
2a6e 4c 5b 2f           JMP INTERNAL_ERROR

              z_error11 ERROR(11)
2a71 a9 0b              LDA #11
2a73 4c 5b 2f           JMP INTERNAL_ERROR


              ; ************
2a76            z_print_char
              ; ************

2a76 a5 44              LDA X1L
2a78 4c 80 2f           JMP Print_Formatted

              ; ***********
2a7b            z_print_num
              ; ***********

2a7b a6 44              LDX X1L
2a7d a5 45              LDA X1H
2a7f 10 0f              BPL zprnu_1
2a81 a9 2d              LDA #'-'
2a83 20 80 2f           JSR Print_Formatted
2a86 38                 SEC
2a87 a9 00              LDA #0
2a89 e5 44              SBC X1L
2a8b aa                 TAX
2a8c a9 00              LDA #0
2a8e e5 45              SBC X1H
2a90 20 1f 30 zprnu_1   JSR Format_XA
2a93 a2 00              LDX #0
2a95 b5 2e    zprnu_2   LDA NUMBER,X
2a97 c9 20              CMP #' '
2a99 f0 07              BEQ zprnu_3
2a9b 86 11              STX LV2
2a9d 20 80 2f           JSR Print_Formatted
2aa0 a6 11              LDX LV2
2aa2 e8       zprnu_3   INX
2aa3 e0 05              CPX #5
2aa5 90 ee              BCC zprnu_2
2aa7 60                 RTS ;Size   45 [z_print_num]

              ; ********
2aa8            z_random
              ; ********

2aa8 a5 44              LDA X1L
2aaa 85 46              STA X2L
2aac a5 45              LDA X1H
2aae 85 47              STA X2H

2ab0 ad 1b d4           LDA Random
2ab3 ae 12 d0           LDX Raster
2ab6 86 44              STX X1L
2ab8 29 7f              AND #$7f
2aba 85 45              STA X1H
2abc 20 12 29           JSR Divide_Signed
2abf a5 21              LDA RemH
2ac1 85 43              STA X0H
2ac3 a6 20              LDX RemL
2ac5 e8                 INX
2ac6 86 42              STX X0L
2ac8 d0 02              BNE zrand_1
2aca e6 43              INC X0H
2acc 4c b1 24 zrand_1   JMP Store_X0

              ; ******
2acf            z_push
              ; ******

2acf a5 44              LDA X1L
2ad1 a4 45              LDY X1H
2ad3 4c 94 24           JMP Push_AY

              ; ******
2ad6            z_pull
              ; ******
2ad6 20 ad 25           JSR z_pop
2ad9 4c 8a 24           JMP Put_Var


              ; *************
2adc            z_encode_text
              ; *************
              ; Input : X1 = text buffer
              ;         X2 = length of word
              ;         X3 = start index
              ;         X4 = encoded text


              ; ***********
2adc            z_read_char
              ; ***********
2adc 60                 RTS ;Size    1 [z_read_char]



              ; *************
2add            Lower_Case_X1
              ; *************
2add a0 01             LDY #1
2adf b1 44    LCX1_10  LDA (X1L),Y
2ae1 c9 20             CMP #' '
2ae3 90 0f             BCC LCX1_Ret
2ae5 c9 5b             CMP #'Z'+1
2ae7 b0 08             BCS LCX1_20
2ae9 c9 41             CMP #'A'
2aeb 90 04             BCC LCX1_20
2aed 69 1f             ADC #$1f
2aef 91 44             STA (X1L),Y
2af1 c8       LCX1_20  INY
2af2 10 eb             BPL LCX1_10
2af4 60       LCX1_Ret RTS ;Size   24 [Lower_Case_X1]

              ; ******
2af5            z_read
              ; ******

2af5 20 22 31           JSR z_show_status
2af8 20 05 30           JSR Print_Buffer    ; print prompt
2afb a2 00              LDX #0
2afd 8e 04 38           STX Tokenizer_Flag
2b00 38                 SEC                 ; c=1 : no parsing
2b01 a6 1c              LDX ParNum
2b03 ca                 DEX
2b04 f0 07              BEQ zread_10        ; -> no parsing
2b06 a5 46              LDA X2L
2b08 05 47              ORA X2H
2b0a f0 01              BEQ zread_10        ; -> no parsing
2b0c 18                 CLC                 ; parse!
2b0d 08       zread_10  PHP                 ; push parse flag
2b0e 18                 CLC
2b0f a5 45              LDA X1H
2b11 69 3d              ADC #>Z_HEADER
2b13 85 45              STA X1H

2b15 20 0e 33           JSR Get_Line_X1     ; read input from user
2b18 20 dd 2a           JSR Lower_Case_X1   ; convert
2b1b 28                 PLP                 ; pull parse flag
2b1c b0 03              BCS zread_20
2b1e 20 22 2b           JSR Parse_Input     ; use standard dictionary
2b21          zread_20

2b21 60                 RTS ;Size   45 [z_read]

              ; ***********
2b22            Parse_Input
              ; ***********

              ; Input   Carry =   set: use X3 as    dictionary address
              ;                 clear: use standard dictionary
              ;         X1    = text input buffer
              ;         X1[0] = buffer size
              ;         X1[1] = string length (ZV > 3)

              ;         X2    = parse buffer  (item size = 4)
              ;         X2[0] = buffer size   (max. 59 items)
              ;         X2[1] = buffer length (items)

              ;         X7L   = item[0] dictionary address high
              ;         X7H   = item[1] dictionary address low
              ;         X8L   = item[2] # of characters
              ;         X8H   = item[3] start of word in text buffer

              ;         X5L   = index to text buffer
              ;         X5H   = size of word (characters)
              ;         X6L   = X2[1] = items parsed
              ;         X6H   = X2[0] = parse buffer limit

2b22 90 06              BCC Parse_05
2b24 a5 48              LDA X3L
2b26 a4 49              LDY X3H
2b28 b0 06              BCS Parse_07
2b2a ad 09 3d Parse_05  LDA h_dictionary_lo
2b2d ac 08 3d           LDY h_dictionary_hi
2b30 85 3b    Parse_07  STA DPL
2b32 84 3c              STY DPH
2b34 18                 CLC
2b35 a5 47              LDA X2H             ; X2 += Header
2b37 69 3d              ADC #>Z_HEADER      ; parse buffer
2b39 85 47              STA X2H

              ; limit buffer capacity to 59 items

2b3b a0 00              LDY #0
2b3d b1 46              LDA (X2L),Y
2b3f f0 04              BEQ Parse_10        ; -> use default
2b41 c9 3c              CMP #60
2b43 90 04              BCC Parse_15        ; -> OK (1..59)
2b45 a9 3b    Parse_10  LDA #59
2b47 91 46              STA (X2L),Y         ; use default
2b49 85 4f    Parse_15  STA X6H             ; copy of parse buffer limit
2b4b a0 02              LDY #2              ; Y = 2
2b4d 84 1d              STY Parse_Index     ; start in parse buffer
2b4f 88                 DEY                 ; start at 1 for ZV == 3
2b50 84 4c              STY X5L             ; buffer index
2b52 a0 00              LDY #0
2b54 84 4e              STY X6L             ; items parsed
2b56 84 4d              STY X5H             ; word size = 0

              ; parse loop for items (words or delimiters)

2b58 a6 4e    Parse_20  LDX X6L             ; items parsed
2b5a e4 4f              CPX X6H             ; items max.
2b5c b0 06              BCS Parse_25        ; -> exceeded # of words
2b5e a5 18              LDA Chars_Left
2b60 05 4d              ORA X5H             ; word size
2b62 d0 06              BNE Parse_30

2b64 a0 01    Parse_25  LDY #1              ; finish
2b66 8a                 TXA
2b67 91 46              STA (X2L),Y         ; items parsed
2b69 60                 RTS                 ; exit ;Size   72 [Parse_Input]

              ; continue parsing word

2b6a a5 4d    Parse_30  LDA X5H             ; word size
2b6c c9 06              CMP #WORD_LENGTH
2b6e 90 03              BCC Parse_35        ; -> word length < max
2b70 20 ed 2b           JSR Skip_Surplus    ; skip to next delimiter

2b73 a5 4d    Parse_35  LDA X5H             ; word size
2b75 d0 1e              BNE Parse_45        ; -> search word in dictionary

2b77 a2 05              LDX #WORD_LENGTH-1  ; clear Word buffer
2b79 9d ef 37 Parse_40  STA TEXT_WORD,X
2b7c ca                 DEX
2b7d 10 fa              BPL Parse_40

              ; not a word, is this character a delimiter ?

2b7f a4 4c              LDY X5L             ; buffer index
2b81 84 53              STY X7L+3           ; X8H = word position
2b83 b1 44              LDA (X1L),Y
2b85 20 08 2c           JSR Sep_Dict        ; dot, comma, quote
2b88 b0 26              BCS Parse_50        ; -> in dictionary
2b8a 20 26 2c           JSR Sep_Std         ; standard separators
2b8d 90 06              BCC Parse_45
2b8f c6 18              DEC Chars_Left      ; ignore ! or ?
2b91 e6 4c              INC X5L             ; ++buffer index
2b93 d0 c3              BNE Parse_20        ; always

2b95 a5 18    Parse_45  LDA Chars_Left
2b97 f0 20              BEQ Parse_55
2b99 a4 4c              LDY X5L             ; buffer index
2b9b b1 44              LDA (X1L),Y
2b9d 20 03 2c           JSR Sep_All         ; check all separators
2ba0 b0 17              BCS Parse_55
2ba2 a6 4d              LDX X5H             ; word size
2ba4 9d ef 37           STA TEXT_WORD,X
2ba7 c6 18              DEC Chars_Left
2ba9 e6 4d              INC X5H             ; ++word size
2bab e6 4c              INC X5L             ; ++buffer index
2bad 4c 58 2b           JMP Parse_20

2bb0 8d ef 37 Parse_50  STA TEXT_WORD       ; word is a separator
2bb3 c6 18              DEC Chars_Left
2bb5 e6 4d              INC X5H             ; ++word size
2bb7 e6 4c              INC X5L             ; ++buffer index

              ; start parsing

2bb9 a5 4d    Parse_55  LDA X5H             ; word size
2bbb f0 9b              BEQ Parse_20        ; -> nothing to parse
2bbd 85 52              STA X7L+2           ; X8L = # of letters
2bbf 20 15 2e           JSR Encode          ; convert to packed format
2bc2 20 49 2c           JSR Dictionary_Search ; result -> X7
2bc5 e6 4e              INC X6L             ; Inc # of items
2bc7 a2 00              LDX #0
2bc9 86 4d              STX X5H             ; word size
2bcb a4 1d              LDY Parse_Index
2bcd ad 04 38           LDA Tokenizer_Flag  ; 1 : store matches only
2bd0 f0 0c              BEQ Parse_60        ; -> store anyhow
2bd2 a5 50              LDA X7L
2bd4 05 51              ORA X7H
2bd6 d0 06              BNE Parse_60
2bd8 c8                 INY                 ; skip this entry
2bd9 c8                 INY                 ; no synonym replacement
2bda c8                 INY
2bdb c8                 INY
2bdc d0 0a              BNE Parse_70        ; 0 : Dict address hi
2bde b5 50    Parse_60  LDA X7L,X           ; 1 : Dict address lo
2be0 91 46              STA (X2L),Y         ; 2 : # of letters
2be2 c8                 INY                 ; 3 : text buffer position
2be3 e8                 INX
2be4 e0 04              CPX #4
2be6 90 f6              BCC Parse_60
2be8 84 1d    Parse_70  STY Parse_Index     ; Parse_Index += 4
2bea 4c 58 2b           JMP Parse_20

              ; ************
2bed            Skip_Surplus
              ; ************

2bed a5 18              LDA Chars_Left
2bef f0 11              BEQ SkSu_Ret
2bf1 a4 4c    SkSu_10   LDY X5L             ; buffer index
2bf3 b1 44              LDA (X1L),Y
2bf5 20 03 2c           JSR Sep_All
2bf8 b0 08              BCS SkSu_Ret
2bfa e6 4d              INC X5H             ; word size
2bfc e6 4c              INC X5L             ; buffer index
2bfe c6 18              DEC Chars_Left
2c00 d0 ef              BNE SkSu_10
2c02 60       SkSu_Ret  RTS ;Size   22 [Skip_Surplus]

              ; *******
2c03            Sep_All
              ; *******

              ; Input : (A) = character
              ; Output: C=1 is separator, C=0 is not

              ; check standard list and dictionary list

2c03 20 26 2c           JSR Sep_Std
2c06 b0 1d              BCS SeDi_Ret         ; -> is separator

              ; ********
2c08            Sep_Dict
              ; ********

              ; Input : (A) = character
              ; Output: C=1 is separator, C=0 is not

              ; typical list: , . "

2c08 48                 PHA
2c09 8d 1d 2c           STA SeDi_10+4       ; search character
2c0c ad 09 3d           LDA h_dictionary_lo
2c0f ac 08 3d           LDY h_dictionary_hi
2c12 20 40 2c           JSR Set_Data_AY
2c15 20 a9 2c           JSR Next_Datum
2c18 aa                 TAX                 ; X = # of separators
2c19 20 a9 2c SeDi_10   JSR Next_Datum
2c1c c9 20              CMP #' '            ; modified !
2c1e f0 04              BEQ SeDi_20         ; yes: return with C=1
2c20 ca                 DEX
2c21 d0 f6              BNE SeDi_10
2c23 18                 CLC                 ; no : return with C=0
2c24 68       SeDi_20   PLA
2c25 60       SeDi_Ret  RTS ;Size   30 [Sep_Dict]

              ; *******
2c26            Sep_Std
              ; *******

              ; Input : (A) = character
              ; Output: C=1 is separator, C=0 is not

              ; standard list: ! ? , . CR SPACE

2c26 a2 05              LDX #?Sep_Std_List-1 ; size of separator list
2c28 dd 55 21 SeSt_10   CMP Sep_Std_List,X
2c2b f0 04              BEQ SeSt_Ret          ; yes: return with C=1
2c2d ca                 DEX
2c2e 10 f8              BPL SeSt_10
2c30 18                 CLC                  ; no : return with C=0
2c31 60       SeSt_Ret  RTS ;Size   12 [Sep_Std]

              ; *********
2c32            Skip_Data
              ; *********

              ; Input : A = # of bytes to skip
              ; Output: QD pointer updated

2c32 18                 CLC
2c33 65 08              ADC QD0
2c35 85 08              STA QD0
2c37 90 06              BCC SkDa_Ret
2c39 e6 09              INC QD1
2c3b d0 02              BNE SkDa_Ret
2c3d e6 0a              INC QD2
2c3f 60       SkDa_Ret  RTS ;Size   14 [Skip_Data]

              ; ***********
2c40            Set_Data_AY
              ; ***********

2c40 85 08              STA QD0
2c42 84 09              STY QD1
2c44 a0 00              LDY #0
2c46 84 0a              STY QD2
2c48 60                 RTS ;Size    9 [Set_Data_AY]

              ; *****************
2c49            Dictionary_Search
              ; *****************

              ; Input : DP = dictionary
              ;         RA = search token

2c49 a5 3b              LDA DPL             ; start of dictionary
2c4b a4 3c              LDY DPH
2c4d 20 40 2c           JSR Set_Data_AY

2c50 20 a9 2c           JSR Next_Datum      ; size of separator list
2c53 20 32 2c           JSR Skip_Data       ; skip list
2c56 20 a9 2c           JSR Next_Datum      ; item size
2c59 85 3d              STA DPI
2c5b 20 a9 2c           JSR Next_Datum      ; item count hi
2c5e 85 4b              STA X4H
2c60 20 a9 2c           JSR Next_Datum      ; item count lo
2c63 85 4a              STA X4L
2c65 05 4b              ORA X4H
2c67 f0 3b              BEQ DiSe_70         ; -> empty dictionary
2c69 a5 4b              LDA X4H
2c6b 30 0d              BMI DiSe_20         ; -> entries are unsorted

2c6d 38                 SEC
2c6e a9 00              LDA #0              ; positive countdown is sorted
2c70 e5 4a              SBC X4L             ; make count down negative
2c72 85 4a              STA X4L
2c74 a9 00              LDA #0
2c76 e5 4b              SBC X4H
2c78 85 4b              STA X4H

2c7a a5 08    DiSe_20   LDA QD0             ; X7 = address of next item
2c7c 85 51              STA X7H
2c7e a5 09              LDA QD1
2c80 85 50              STA X7L
2c82 a2 00              LDX #0              ; X = token byte index
2c84 20 a9 2c DiSe_30   JSR Next_Datum
2c87 e8                 INX
2c88 dd f7 37           CMP DICT_WORD-1,X
2c8b d0 05              BNE DiSe_50
2c8d e0 04              CPX #V_SIZE
2c8f 90 f3              BCC DiSe_30
2c91 60                 RTS                 ; -> match ;Size   73 [Dictionary_Search]

2c92 20 a9 2c DiSe_50   JSR Next_Datum      ; skip to next item
2c95 e8                 INX
2c96 e4 3d              CPX DPI             ; item_Size
2c98 90 f8              BCC DiSe_50

2c9a e6 4a              INC X4L             ; count up to zero
2c9c d0 dc              BNE DiSe_20
2c9e e6 4b              INC X4H
2ca0 d0 d8              BNE DiSe_20

2ca2 a9 00              LDA #0
2ca4 85 51    DiSe_70   STA X7H             ; not found: return (X7) = 0
2ca6 85 50              STA X7L
2ca8 60                 RTS ;Size   96 [Dictionary_Search]

              ; ***********
2ca9            Next_Datum
              ; ***********

              ; Input
              ; =====
              ; QD0 = Block pointer
              ; QD1 = Block # lo
              ; QD2 = Block # hi

              ; Output
              ; ======
              ; (A) = Byte from (Block),QD0
              ; Pointer QD incremented

2ca9 a9 00              LDA #0
2cab 85 0d              STA RAM_BA
2cad ab 08 00           LDZ QD0
2cb0 a5 0a              LDA QD2             ; page high
2cb2 d0 0c              BNE NEDA_10         ; > 64 K
2cb4 a5 09              LDA QD1
2cb6 c5 22              CMP Resident_Pages
2cb8 b0 06              BCS NEDA_10         ; -> not resident
2cba 69 3d              ADC #>Z_HEADER
2cbc 85 0c              STA RAM_HI
2cbe d0 0f              BNE NEDA_50         ; -> always

              ; load if address is beyond resident part
              ; address = (QD1/2) - Resident + $040000

2cc0 38       NEDA_10   SEC
2cc1 a5 09              LDA QD1             ; page low
2cc3 e5 22              SBC Resident_Pages
2cc5 85 0c              STA RAM_HI          ; page low
2cc7 a5 0a              LDA QD2
2cc9 e9 00              SBC #0              ; page high
2ccb 69 03              ADC #3              ; bank 4 = carry  + 3
2ccd 85 0d              STA RAM_BA
2ccf ea b2 0b NEDA_50   LDA [RAM_LO],Z
2cd2 e6 08              INC QD0
2cd4 d0 06              BNE NEDA_80
2cd6 e6 09              INC QD1
2cd8 d0 02              BNE NEDA_80
2cda e6 0a              INC QD2
2cdc c9 00    NEDA_80   CMP #0              ; set flags
2cde 60                 RTS ;Size   54 [Next_Datum]

              ; ****************
2cdf            Next_Instruction
              ; ****************

              ; Input
              ; =====
              ; QI0 = pointer inside page
              ; QI1 = page # low
              ; QI2 = page # high

              ; Output
              ; ======
              ; (A) = Byte from 24 bit address (QI)
              ; Pointer QI incremented
              ; test if address is inside resident part

2cdf a9 00              LDA #0
2ce1 85 0d              STA RAM_BA
2ce3 ab 03 00           LDZ QI0
2ce6 a5 05              LDA QI2             ; page high
2ce8 d0 0c              BNE NEIN_10         ; > 64 K
2cea a5 04              LDA QI1
2cec c5 22              CMP Resident_Pages
2cee b0 06              BCS NEIN_10         ; -> not resident
2cf0 69 3d              ADC #>Z_HEADER
2cf2 85 0c              STA RAM_HI
2cf4 d0 0f              BNE NEIN_50         ; -> always

              ; load if address is beyond resident part
              ; address = (QI1/2) - Resident + $040000

2cf6 38       NEIN_10   SEC
2cf7 a5 04              LDA QI1             ; page low
2cf9 e5 22              SBC Resident_Pages
2cfb 85 0c              STA RAM_HI          ; page low
2cfd a5 05              LDA QI2
2cff e9 00              SBC #0              ; page high
2d01 69 03              ADC #3              ; bank 4 = carry  + 3
2d03 85 0d              STA RAM_BA
2d05 ea b2 0b NEIN_50   LDA [RAM_LO],Z
2d08 e6 03              INC QI0
2d0a d0 06              BNE NEIN_80
2d0c e6 04              INC QI1
2d0e d0 02              BNE NEIN_80
2d10 e6 05              INC QI2
2d12 c9 00    NEIN_80   CMP #0              ; set flags
2d14 60                 RTS ;Size   54 [Next_Instruction]

              ;                6789abcdef0123456789abcdef
              ;                --------------------------
              ;         .BYTE "abcdefghijklmnopqrstuvwxyz"
              ;         .BYTE "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
2d15 00 0d 30 ZSCII_2   .BYTE "\0\r0123456789.,!?_#'\"/\\-:()"

2d2f 60       Swap_Ret   RTS ;Size   81 [Next_Instruction]

              ; *********
2d30            Decode_YX
              ; *********

              ; print 5bit encoded text from address (Y/X)

2d30 84 08              STY QD0
2d32 86 09              STX QD1
2d34 a9 00              LDA #0
2d36 85 0a              STA QD2

              ; ***********
2d38            Decode_Text
              ; ***********

2d38 a2 00              LDX #0
2d3a 86 07              STX QDH
2d3c a2 00    DeTe_10   LDX #0
2d3e 86 13              STX alphabet
2d40 20 cf 2d DeTe_15   JSR Get_Packed_Char
2d43 b0 ea              BCS Swap_Ret        ; return
2d45 d0 04              BNE DeTe_20
2d47 a9 20              LDA #' '            ; 0 : space
2d49 d0 24              BNE DeTe_40
2d4b c9 04    DeTe_20   CMP #4              ; 1,2,3 : abbreviations
2d4d 90 38              BCC DeTe_55
2d4f c9 06              CMP #6              ; shift 4:capital, 5:numeric
2d51 b0 04              BCS DeTe_25
2d53 85 13              STA alphabet
2d55 90 e9              BCC DeTe_15
2d57 a6 13    DeTe_25   LDX alphabet
2d59 e0 05              CPX #5              ; numeric
2d5b d0 08              BNE DeTe_30
2d5d aa                 TAX
2d5e bd 0f 2d           LDA ZSCII_2-6,X
2d61 d0 0c              BNE DeTe_40
2d63 f0 10              BEQ DeTe_50

2d65 e0 04    DeTe_30   CPX #4              ; upper case
2d67 d0 04              BNE DeTe_35
2d69 69 3a              ADC #$3a            ; carry is set   from CPX
2d6b d0 02              BNE DeTe_40
2d6d 69 5b    DeTe_35   ADC #$5b            ; carry is clear from CPX
2d6f 20 80 2f DeTe_40   JSR Print_Formatted
2d72 4c 3c 2d           JMP DeTe_10

2d75 20 cf 2d DeTe_50   JSR Get_Packed_Char ; 10 bit ZSCII
2d78 0a                 ASL A
2d79 0a                 ASL A
2d7a 0a                 ASL A
2d7b 0a                 ASL A
2d7c 0a                 ASL A
2d7d 85 0f              STA LV0
2d7f 20 cf 2d           JSR Get_Packed_Char
2d82 05 0f              ORA LV0
2d84 4c 6f 2d           JMP DeTe_40

              ; process code for abbreviations (1,2,3) plus abbr. index

2d87 e9 00    DeTe_55   SBC #0        ; subtract 1 (C=0)
2d89 0a                 ASL A         ; 0, 1, 2
2d8a 0a                 ASL A
2d8b 0a                 ASL A
2d8c 0a                 ASL A
2d8d 0a                 ASL A
2d8e 0a                 ASL A
2d8f 85 11              STA LV2             ; -> $00, $40, $80
2d91 20 cf 2d           JSR Get_Packed_Char
2d94 0a                 ASL A
2d95 18                 CLC
2d96 65 11              ADC LV2             ; add offset
2d98 a8                 TAY                 ; index to abbr. table

              ; push QD2, QD1, QD0, QDH, QDL for recursive call

2d99 a2 04              LDX #4
2d9b b5 06    DeTe_60   LDA QDL,X
2d9d 48                 PHA
2d9e ca                 DEX
2d9f 10 fa              BPL DeTe_60

              ; recursive call of Decode_Text for abbreviation

2da1 18                 CLC
2da2 ad 19 3d           LDA h_abbreviations_lo
2da5 85 3e              STA A0L
2da7 ad 18 3d           LDA h_abbreviations_hi
2daa 69 3d              ADC #>Z_HEADER
2dac 85 3f              STA A0H             ; (A0) = start of abbr. pointer
2dae c8                 INY
2daf b1 3e              LDA (A0L),Y         ; address low
2db1 0a                 ASL A               ; x 2
2db2 85 08              STA QD0
2db4 88                 DEY
2db5 b1 3e              LDA (A0L),Y         ; address high
2db7 2a                 ROL A               ; x 2
2db8 85 09              STA QD1
2dba a9 00              LDA #0
2dbc 2a                 ROL A               ; high mem
2dbd 85 0a              STA QD2

              ; recursive call

2dbf 20 38 2d           JSR Decode_Text

              ; pull QDL, QDH, QD0, QD1, QD2 after recursive call

2dc2 a2 00              LDX #0
2dc4 68       DeTe_65   PLA
2dc5 95 06              STA QDL,X
2dc7 e8                 INX
2dc8 e0 05              CPX #5
2dca 90 f8              BCC DeTe_65
2dcc 4c 3c 2d           JMP DeTe_10
2dcf                    .SIZE ;  151 [Decode_Text]

              ; ***************
2dcf            Get_Packed_Char
              ; ***************

2dcf a5 07              LDA QDH
2dd1 f0 1c              BEQ GPC_20          ; load next word
2dd3 c9 80              CMP #%100 00000     ; EOS flag
2dd5 f0 3d              BEQ GPC_Ret         ; return with C=1 : End-Of-String
2dd7 24 07              BIT QDH             ; valid 2nd. char ?
2dd9 50 0a              BVC GPC_10          ; goto  3rd. cahr
2ddb 29 9f              AND #%100 11111     ; save EOS clear bit 6
2ddd 09 20              ORA #%001 00000     ; make non zero
2ddf 85 07              STA QDH
2de1 29 1f              AND #%000 11111     ; extract data
2de3 18                 CLC
2de4 60                 RTS                 ; return with 2nd. char ;Size   22 [Get_Packed_Char]

2de5 29 80    GPC_10    AND #%100 00000     ; save EOS only
2de7 85 07              STA QDH
2de9 a5 06              LDA QDL
2deb 29 1f              AND #%000 11111     ; extract 5 bit
2ded 18                 CLC
2dee 60                 RTS                 ; return with 3rd. char ;Size   32 [Get_Packed_Char]

2def 20 a9 2c GPC_20    JSR Next_Datum
2df2 aa                 TAX                 ; x = first half
2df3 29 03              AND #%0000 0011     ; extract part of 2nd. char
2df5 85 07              STA QDH
2df7 20 a9 2c           JSR Next_Datum
2dfa 85 06              STA QDL
2dfc 0a                 ASL A
2dfd 26 07              ROL QDH
2dff 0a                 ASL A
2e00 26 07              ROL QDH
2e02 0a                 ASL A
2e03 26 07              ROL QDH
2e05 8a                 TXA
2e06 29 80              AND #%1000 0000     ; save EOS flag
2e08 09 40              ORA #%0100 0000     ; set valid 2nd. char flag
2e0a 05 07              ORA QDH             ; add value
2e0c 85 07              STA QDH             ; save 2nd. char

2e0e 8a                 TXA
2e0f 4a                 LSR A
2e10 4a                 LSR A
2e11 29 1f              AND #%000 11111
2e13 18                 CLC
2e14 60       GPC_Ret   RTS                 ; return with 1st. char ;Size   70 [Get_Packed_Char]

              ; ******
2e15            Encode
              ; ******

              ; The encode takes 9 ASCII characters (6 in version 3) and
              ; converts them to packed ZSCII. This routine is called from the parser
              ; only, which already converts uppercase to lowercase letters.
              ; Also the output length is restricted to 6 characters (4 in bersion 3)
              ; because this is the size of a dictionary entry.

              ; Input:  6-9 ASCII charcaters in RB0-RB8
              ; Output: 4-6 Z     characters in RA0-RA5

2e15 a0 00              LDY #0              ; RB[Y]
2e17 a2 00              LDX #0              ; RA[X]
2e19 f0 0b              BEQ Enco_30

2e1b a9 05    Enco_10   LDA #5              ; void (numeric shift)
2e1d 9d f8 37 Enco_20   STA DICT_WORD,X     ; store next ZSCII
2e20 e8                 INX
2e21 e0 06              CPX #WORD_LENGTH
2e23 b0 5e              BCS Enco_70

2e25 c8                 INY
2e26 b9 ef 37 Enco_30   LDA TEXT_WORD,Y     ; get next ASCII char
2e29 f0 f0              BEQ Enco_10         ; insert void char

2e2b c9 5b              CMP #'Z'+1          ; (A-Z) upper range
2e2d b0 08              BCS Enco_35
2e2f c9 41              CMP #'A'            ; (A-Z) lower range
2e31 90 04              BCC Enco_35
2e33 e9 3b              SBC #$3b            ; (A-Z) -> $06-$1f
2e35 d0 e6              BNE Enco_20         ; -> loop always

2e37 c9 7b    Enco_35   CMP #'z'+1          ; (a-z) upper range
2e39 b0 08              BCS Enco_40
2e3b c9 61              CMP #'a'            ; (a-z) lower range
2e3d 90 04              BCC Enco_40
2e3f e9 5b              SBC #$5b            ; (a-z) -> $06-$1f
2e41 d0 da              BNE Enco_20         ; -> loop always

2e43 8c 54 21 Enco_40   STY L_Encode_Y
2e46 8d 53 21           STA L_Encode_A
2e49 a9 05              LDA #5
2e4b 9d f8 37           STA DICT_WORD,X
2e4e e8                 INX
2e4f ad 53 21           LDA L_Encode_A
2e52 a0 19              LDY #25
2e54 d9 15 2d Enco_50   CMP ZSCII_2,Y
2e57 f0 22              BEQ Enco_60         ; found ZSCII in table 3
2e59 88                 DEY
2e5a d0 f8              BNE Enco_50

2e5c a9 06              LDA #6              ; shift to 10 bit char
2e5e 9d f8 37           STA DICT_WORD,X
2e61 e8                 INX
2e62 ad 53 21           LDA L_Encode_A
2e65 4a                 LSR A
2e66 4a                 LSR A
2e67 4a                 LSR A
2e68 4a                 LSR A
2e69 4a                 LSR A
2e6a 29 03              AND #3
2e6c 9d f8 37           STA DICT_WORD,X
2e6f e8                 INX
2e70 ad 53 21           LDA L_Encode_A
2e73 29 1f              AND #$1f
2e75 ac 54 21           LDY L_Encode_Y
2e78 4c 1d 2e           JMP Enco_20

2e7b 98       Enco_60   TYA                 ; use index to table 3 as value
2e7c ac 54 21           LDY L_Encode_Y      ; restore read index
2e7f 69 05              ADC #5              ; add offset 6 (5 + carry)
2e81 d0 9a              BNE Enco_20         ; loop always

2e83 a2 00    Enco_70   LDX #0
2e85 a0 00              LDY #0
2e87 bd f9 37 Enco_80   LDA DICT_WORD+1,X
2e8a 0a                 ASL A
2e8b 0a                 ASL A
2e8c 0a                 ASL A
2e8d 0a                 ASL A
2e8e 3e f8 37           ROL DICT_WORD,X
2e91 0a                 ASL A
2e92 3e f8 37           ROL DICT_WORD,X
2e95 1d fa 37           ORA DICT_WORD+2,X
2e98 48                 PHA
2e99 bd f8 37           LDA DICT_WORD,X
2e9c 99 f8 37           STA DICT_WORD,Y
2e9f 68                 PLA
2ea0 99 f9 37           STA DICT_WORD+1,Y
2ea3 e8                 INX
2ea4 e8                 INX
2ea5 e8                 INX
2ea6 c8                 INY
2ea7 c8                 INY
2ea8 e0 06              CPX #WORD_LENGTH
2eaa 90 db              BCC Enco_80
2eac b9 f6 37           LDA DICT_WORD-2,Y
2eaf 09 80              ORA #$80            ; end of string flag
2eb1 99 f6 37           STA DICT_WORD-2,Y
2eb4 60                 RTS ;Size  160 [Encode]


              ; *************
2eb5            Get_Object_X1
              ; *************

2eb5 a5 44              LDA X1L

              ; **************
2eb7            Get_Object_Reg
              ; **************

              ; Compute address of object

              ; Version 3:
              ; -----------------------------------------
              ; Address = (h_objects) +  53 +  9 * object

              ; Input:  (A)  = object #
              ; Input:  (A)  = object #
              ; Output: (A0) = address, (A) = (A0L),Y
              ; Modifies A and X

2eb7 85 3e              STA A0L
2eb9 a2 00              LDX #0
2ebb 86 3f              STX A0H
2ebd 0a                 ASL A
2ebe 26 3f              ROL A0H ; * 2
2ec0 0a                 ASL A
2ec1 26 3f              ROL A0H ; * 4
2ec3 0a                 ASL A
2ec4 26 3f              ROL A0H ; * 8
2ec6 65 3e              ADC A0L ; * 9       ; carry is clear
2ec8 90 02              BCC GOA_01
2eca e6 3f              INC A0H
2ecc 18       GOA_01    CLC
2ecd 69 35              ADC #$35            ; * 9 + 53
2ecf 90 02              BCC GOA_02
2ed1 e6 3f              INC A0H
2ed3 18       GOA_02    CLC
2ed4 6d 0b 3d           ADC h_objects_lo    ; *9 + 53 + h_objects
2ed7 85 3e              STA A0L
2ed9 a5 3f              LDA A0H
2edb 6d 0a 3d           ADC h_objects_hi
2ede 69 3d              ADC #>Z_HEADER
2ee0 85 3f              STA A0H
2ee2 b1 3e              LDA (A0L),Y
2ee4 60                 RTS ;Size   46 [Get_Object_Reg]

              ; **************
2ee5            First_Property
              ; **************

              ; Find address of property table of object (X1)
              ; This routine is V3 and V5 compatible

              ; Input : (X1) = object ID
              ; Output: (A0) = pointer to property table after NAME
              ;          A   = ID of first property
              ;          Y   = 0

2ee5 a0 07              LDY #O_PROP         ; offset to property pointer
2ee7 20 b5 2e           JSR Get_Object_X1
2eea 69 3d              ADC #>Z_HEADER      ; C=0 from Get_Object
2eec aa                 TAX                 ; property pointer high
2eed c8                 INY
2eee b1 3e              LDA (A0L),Y         ; property pointer low
2ef0 85 3e              STA A0L
2ef2 86 3f              STX A0H             ; (A0) = property table
2ef4 a0 00              LDY #0              ; offset to NAME property
2ef6 b1 3e              LDA (A0L),Y         ; size of name (words)
2ef8 0a                 ASL A               ; size of name (bytes)
2ef9 38                 SEC                 ; add size + 1
2efa 65 3e              ADC A0L
2efc 85 3e              STA A0L
2efe 90 02              BCC FiPr_10
2f00 e6 3f              INC A0H
2f02 b1 3e    FiPr_10   LDA (A0L),Y
2f04 29 1f              AND #P_MASK         ; A = property ID
2f06 60                 RTS ;Size   34 [First_Property]


              ; *************
2f07            Property_Size
              ; *************

2f07 b1 3e              LDA (A0L),Y
2f09 c8                 INY
2f0a 4a                 LSR A
2f0b 4a                 LSR A
2f0c 4a                 LSR A
2f0d 4a                 LSR A
2f0e 4a                 LSR A
2f0f 60                 RTS ;Size    9 [Property_Size]

              ; *************
2f10            Next_Property
              ; *************

              ; use size info and point to next property (V3-V5)

              ; Input : (A0) = pointer to current property
              ; Output: (A0) = pointer to next property
              ;            Y = 0

2f10 20 07 2f           JSR Property_Size
2f13 18                 CLC
2f14 69 02              ADC #2
2f16 65 3e              ADC A0L
2f18 85 3e              STA A0L
2f1a 90 02              BCC NePr_20
2f1c e6 3f              INC A0H
2f1e a0 00    NePr_20   LDY #0
2f20 b1 3e              LDA (A0L),Y
2f22 29 1f              AND #P_MASK
2f24 60                 RTS ;Size   21 [Next_Property]

              ; *************
2f25            Find_Property
              ; *************

              ; search for property X2L of object X1

              ; Input : (X1)  = object   ID
              ;         (X2L) = property ID

              ; Output: Z=0 if property was not found
              ;         Z=1 if property was found
              ;             A = 0
              ;             Y = 0
              ;             C = 1 if separate length byte

2f25 20 e5 2e           JSR First_Property  ; -> (A0) and Y = 0
2f28 c5 46    FIPR_10   CMP X2L
2f2a f0 08              BEQ FIPR_20         ; -> match
2f2c 90 07              BCC FIPR_30         ; -> not in table (Z=0)
2f2e 20 10 2f           JSR Next_Property
2f31 4c 28 2f           JMP FIPR_10
2f34 18       FIPR_20   CLC
2f35 60       FIPR_30   RTS                 ; Z=1 succes, Z=0 not found ;Size   17 [Find_Property]

              ; *************
2f36            Get_Attr_Addr
              ; *************

              ; Input
              ; -----
              ; X1L = object #
              ; X2L = flag   #
              ;
              ; Output
              ; ------
              ; (A0L),Y = Address of attribute
              ; (A)     = Attribute mask

2f36 20 b5 2e           JSR Get_Object_X1
2f39 a5 46              LDA X2L      ; flag #
2f3b 4a                 LSR A
2f3c 4a                 LSR A
2f3d 4a                 LSR A
2f3e a8                 TAY          ; offset = flag / 8
2f3f a5 46              LDA X2L
2f41 29 07              AND #7       ; flag mod 8
2f43 aa                 TAX
2f44 a9 80              LDA #$80     ; flag 0
2f46 d0 01              BNE gaa_02
2f48 4a       gaa_01    LSR A
2f49 ca       gaa_02    DEX
2f4a 10 fc              BPL gaa_01
2f4c 60                 RTS ;Size   23 [Get_Attr_Addr]

              ; *********
2f4d            Dump_Code
              ; *********

2f4d a5 02              LDA Z_Code

              ; *********
2f4f            Dump_Byte
              ; *********
2f4f 20 46 36           JSR ASCII_Hex
2f52 48                 PHA
2f53 8a                 TXA
2f54 20 9d 32           JSR CHROUT
2f57 68                 PLA
2f58 4c 9d 32           JMP CHROUT

              ; **************
2f5b            INTERNAL_ERROR
              ; **************

2f5b 20 a1 36           JSR ASCII_TS
2f5e 8e 85 39           STX INTERR+6
2f61 8d 86 39           STA INTERR+7
2f64 20 c7 2f           JSR z_new_line
2f67 20 4d 2f           JSR Dump_Code
                        Print(INTERR)
2f6a a9 7f              LDA #<INTERR
2f6c a0 39              LDY #>INTERR
2f6e a2 08              LDX #?INTERR
2f70 20 65 33           JSR PrintText

2f73 4c c6 25           JMP z_quit

              ; ***************
2f76            Print_To_Status
              ; ***************

2f76 99 f9 20           STA Z_STATUS,Y
2f79 c4 29              CPY Last_Col
2f7b b0 02              BCS PTS_01
2f7d e6 2a              INC Status_Col
2f7f 60       PTS_01    RTS ;Size   10 [Print_To_Status]


              ; ***************
2f80            Print_Formatted
              ; ***************

2f80 a4 2a              LDY Status_Col
2f82 10 f2              BPL Print_To_Status
2f84 c9 0d              CMP #CR
2f86 f0 3f              BEQ z_new_line
2f88 c9 20              CMP #' '            ; not printable ?
2f8a 90 10              BCC PrFo_25
2f8c a4 16              LDY Charbuf_Ptr
2f8e 99 00 02           STA Charbuf,Y
2f91 aa                 TAX                 ; X = char
2f92 18                 CLC
2f93 98                 TYA
2f94 65 54              ADC Cursor_Col
2f96 c5 29              CMP Last_Col
2f98 b0 03              BCS PrFo_30         ; -> buffer full: print row


2f9a e6 16              INC Charbuf_Ptr
2f9c 60       PrFo_25   RTS ;Size   29 [Print_Formatted]

2f9d a9 20    PrFo_30   LDA #' '        ; scan backwards for blank
2f9f 84 17              STY Charbuf_End
2fa1 d9 00 02 PrFo_35   CMP Charbuf,Y
2fa4 f0 05              BEQ PrFo_40
2fa6 88                 DEY
2fa7 d0 f8              BNE PrFo_35
2fa9 a4 17              LDY Charbuf_End ; no blanks found
2fab 84 16    PrFo_40   STY Charbuf_Ptr ; print line before Charbuf_Ptr
2fad 98                 TYA
2fae 48                 PHA             ; save line break col
2faf 20 c7 2f           JSR z_new_line  ; print line
2fb2 68                 PLA
2fb3 aa                 TAX             ; line break col
2fb4 a0 00              LDY #0
2fb6 f0 07              BEQ PrFo_50

2fb8 bd 00 02 PrFo_45   LDA Charbuf,X   ; scroll rest of buffer
2fbb 99 00 02           STA Charbuf,Y
2fbe c8                 INY
2fbf e4 17    PrFo_50   CPX Charbuf_End
2fc1 e8                 INX
2fc2 90 f4              BCC PrFo_45
2fc4 84 16              STY Charbuf_Ptr
2fc6 60                 RTS ;Size   71 [Print_Formatted]

              ; ************
2fc7            z_new_line
              ; ************

2fc7 e6 2b              INC MORE_Counter
2fc9 a6 2b              LDX MORE_Counter
2fcb e8                 INX
2fcc e4 28              CPX Last_Row
2fce 90 2c              BCC Terminate_Buffer
2fd0 20 22 31           JSR z_show_status
2fd3 ad 61 21           LDA Z_Upper_Size
2fd6 85 2b              STA MORE_Counter
2fd8 20 c8 33           JSR Empty_Keyboard_Queue
2fdb 20 73 36           JSR Save_Cursor
                        Print(MORE)
2fde a9 7f              LDA #<MORE
2fe0 a0 38              LDY #>MORE
2fe2 a2 08              LDX #?MORE
2fe4 20 65 33           JSR PrintText

2fe7 20 e4 ff znl_10    JSR GETIN
2fea aa                 TAX
2feb f0 fa              BEQ znl_10
2fed 20 7b 36           JSR Restore_Cursor
                        Print(BLANKS)
2ff0 a9 2b              LDA #<BLANKS
2ff2 a0 39              LDY #>BLANKS
2ff4 a2 0c              LDX #?BLANKS
2ff6 20 65 33           JSR PrintText

2ff9 20 7b 36           JSR Restore_Cursor

              ; ****************
2ffc            Terminate_Buffer
              ; ****************

2ffc a6 16              LDX Charbuf_Ptr
2ffe a9 0d              LDA #CR
3000 9d 00 02           STA Charbuf,X
3003 e6 16              INC Charbuf_Ptr

              ; ************
3005            Print_Buffer
              ; ************

3005 a5 16              LDA Charbuf_Ptr
3007 f0 11              BEQ PrBu_Ret        ; -> nothing to print
3009 a2 00              LDX #0
300b bd 00 02 PrBu_10   LDA Charbuf,X       ; flush buffer
300e 20 9d 32           JSR CHROUT
3011 e8                 INX
3012 e4 16              CPX Charbuf_Ptr
3014 90 f5              BCC PrBu_10
3016 a2 00              LDX #0
3018 86 16              STX Charbuf_Ptr
301a 60       PrBu_Ret  RTS ;Size   22 [Print_Buffer]

              ; **************
301b            Format_Integer
              ; **************

301b a6 42              LDX X0L
301d a5 43              LDA X0H
301f a0 2f    Format_XA LDY #$2f
3021 38                 SEC
3022 c8       FORINT_01 INY
3023 86 0f              STX LV0
3025 85 10              STA LV1
3027 8a                 TXA
3028 e9 10              SBC #<10000
302a aa                 TAX
302b a5 10              LDA LV1
302d e9 27              SBC #>10000
302f b0 f1              BCS FORINT_01
3031 84 2e              STY NUMBER
3033 a6 0f              LDX LV0
3035 a5 10              LDA LV1
3037 a0 2f              LDY #$2f
3039 38                 SEC
303a c8       FORINT_02 INY
303b 86 0f              STX LV0
303d 85 10              STA LV1
303f 8a                 TXA
3040 e9 e8              SBC #<1000
3042 aa                 TAX
3043 a5 10              LDA LV1
3045 e9 03              SBC #>1000
3047 b0 f1              BCS FORINT_02
3049 84 2f              STY NUMBER+1
304b a6 0f              LDX LV0
304d a5 10              LDA LV1
304f a0 2f              LDY #$2f
3051 38                 SEC
3052 c8       FORINT_03 INY
3053 86 0f              STX LV0
3055 85 10              STA LV1
3057 8a                 TXA
3058 e9 64              SBC #100
305a aa                 TAX
305b a5 10              LDA LV1
305d e9 00              SBC #0
305f b0 f1              BCS FORINT_03
3061 84 30              STY NUMBER+2
3063 a5 0f              LDA LV0
3065 a0 2f              LDY #$2f
3067 38                 SEC
3068 c8       FORINT_04 INY
3069 e9 0a              SBC #10
306b b0 fb              BCS FORINT_04
306d 84 31              STY NUMBER+3
306f 69 3a              ADC #$3a
3071 85 32              STA NUMBER+4
3073 a2 00              LDX #0
3075 a9 20              LDA #' '
3077 b4 2e    FORINT_05 LDY NUMBER,X
3079 c0 30              CPY #'0'
307b d0 07              BNE FORINT_06
307d 95 2e              STA NUMBER,X
307f e8                 INX
3080 e0 04              CPX #4
3082 90 f3              BCC FORINT_05
3084 60       FORINT_06 RTS ;Size  106 [Format_Integer]

              ; *************
3085            Status_Number
              ; *************

              ; Insert number (score, moves, time) into status line
              ; Imput : (Y) = global variable
              ;         (A) = status line column
              ; Output: (Y) = column after last written char

3085 48                 PHA                 ; save column
3086 98                 TYA
3087 20 7d 24           JSR Get_Global_Var
308a 20 1b 30           JSR Format_Integer
308d 68                 PLA
308e a8                 TAY
308f a2 00              LDX #0
3091 b5 2e    StNu_10   LDA NUMBER,X
3093 c9 20              CMP #' '
3095 f0 04              BEQ StNu_20
3097 99 3a 39           STA SCORE,Y
309a c8                 INY
309b e8       StNu_20   INX
309c e0 05              CPX #5
309e 90 f1              BCC StNu_10
30a0 60                 RTS ;Size   28 [Status_Number]

              ; **********
30a1            Print_Time
              ; **********

30a1 a9 11              LDA #$11            ; hours
30a3 20 7d 24           JSR Get_Global_Var
30a6 20 1b 30           JSR Format_Integer
30a9 a0 06              LDY #STIME_COL
30ab a5 31              LDA NUMBER+3
30ad 99 57 39           STA STIME,Y
30b0 a5 32              LDA NUMBER+4
30b2 99 58 39           STA STIME+1,Y

30b5 a9 12              LDA #$12            ; minutes
30b7 20 7d 24           JSR Get_Global_Var
30ba 20 1b 30           JSR Format_Integer
30bd a0 06              LDY #STIME_COL
30bf a5 31              LDA NUMBER+3
30c1 09 30              ORA #'0'            ; blank -> '0'
30c3 99 5a 39           STA STIME+3,Y
30c6 a5 32              LDA NUMBER+4
30c8 99 5b 39           STA STIME+4,Y

30cb 38                 SEC
30cc a5 29              LDA Last_Col
30ce e9 0c              SBC #12
30d0 a8                 TAY
30d1 a2 1d              LDX #[STIME - SCORE]
30d3 d0 18              BNE PrSc_20

              ; ***********
30d5            Print_Score
              ; ***********

30d5 a0 11              LDY #$11            ; score
30d7 a9 07              LDA #SCORE_COL
30d9 20 85 30           JSR Status_Number
30dc a0 12              LDY #$12            ; moves
30de a9 16              LDA #MOVES_COL
30e0 20 85 30           JSR Status_Number

30e3 a0 34              LDY #STAT_SCORE
30e5 24 23              BIT Cols
30e7 70 02              BVS PrSc_10
30e9 a0 1c              LDY #28
30eb a2 00    PrSc_10   LDX #0
30ed bd 3a 39 PrSc_20   LDA SCORE,X
30f0 99 f9 20           STA Z_STATUS,Y
30f3 e8                 INX
30f4 c8                 INY
30f5 c4 29              CPY Last_Col
30f7 90 f4              BCC PrSc_20
30f9 60                 RTS ;Size   37 [Print_Score]

              ; ************
30fa            Print_Status
              ; ************

30fa 20 6b 36           JSR Select_Status_Window
30fd a9 07              LDA #YELLOW
30ff 8d 86 02           STA COLOR
                        Print(PRE_STATUS)
3102 a9 37              LDA #<PRE_STATUS
3104 a0 39              LDY #>PRE_STATUS
3106 a2 03              LDX #?PRE_STATUS
3108 20 65 33           JSR PrintText

310b a9 f9              LDA #<Z_STATUS
310d a0 20              LDY #>Z_STATUS
310f a6 29              LDX Last_Col
3111 ca                 DEX                 ; status starts at HOME + 1
3112 20 65 33           JSR PrintText
3115 a9 92              LDA #REVERSE_OFF
3117 20 9d 32           JSR CHROUT
311a a9 01              LDA #WHITE
311c 8d 86 02           STA COLOR
311f 4c 60 36           JMP Select_Text_Window

              ; *************
3122            z_show_status
              ; *************

              ; save cursor coordinates, print to statusline

3122 20 73 36           JSR Save_Cursor

              ; push QD2, QD1, QD0, QDH, QDL

3125 a2 04              LDX #4
3127 b5 06    zss_10    LDA QDL,X
3129 48                 PHA
312a ca                 DEX
312b 10 fa              BPL zss_10

312d e8                 INX                 ; X = 0
312e 86 2a              STX Status_Col      ; switch decoder to status line
3130 a9 10              LDA #$10            ; get location
3132 20 7d 24           JSR Get_Global_Var
3135 a5 42              LDA X0L
3137 a6 43              LDX X0H
3139 20 75 26           JSR z_print_obj_A
313c a9 20              LDA #' '            ; fill rest of line with blanks
313e a6 2a              LDX Status_Col
3140 8e 03 38           STX Location_Length
3143 9d f9 20 zss_20    STA Z_STATUS,X    ; erase rest of line
3146 e8                 INX
3147 e4 29              CPX Last_Col
3149 90 f8              BCC zss_20

314b a2 ff              LDX #$ff
314d 86 2a              STX Status_Col      ; reset decoder
314f ad 01 3d           LDA h_config
3152 29 02              AND #2              ; Score_Time_Flag
3154 d0 06              BNE zss_30
3156 20 d5 30           JSR Print_Score
3159 4c 5f 31           JMP zss_40
315c 20 a1 30 zss_30    JSR Print_Time
315f 20 fa 30 zss_40    JSR Print_Status

              ; pull QDL, QDH, QD0, QD1, QD2 after recursive call

3162 a2 00              LDX #0
3164 68       zss_90    PLA
3165 95 06              STA QDL,X
3167 e8                 INX
3168 e0 05              CPX #5
316a 90 f8              BCC zss_90

316c 4c 7b 36           JMP Restore_Cursor


              ; **********
316f            Fix_Colors
              ; **********

316f a2 07              LDX #7
3171 bd 92 39 FiCo_10   LDA FG_Color,X
3174 29 0f              AND #15
3176 9d 92 39           STA FG_Color,X
3179 ca                 DEX
317a 10 f5              BPL FiCo_10
317c 60                 RTS ;Size   14 [Fix_Colors]

              ; *********
317d            Cursor_On
              ; *********
317d a4 54              LDY Cursor_Col
317f a9 a0              LDA #$A0
3181 91 57              STA (Scr_Adr),Y
3183 85 56              STA Cursor_Vis
3185 60                 RTS ;Size    9 [Cursor_On]

              ; **********
3186            Cursor_Off
              ; **********
3186 a4 54              LDY Cursor_Col
3188 a9 20              LDA #' '
318a 91 57              STA (Scr_Adr),Y
318c a9 00              LDA #0
318e 85 56              STA Cursor_Vis
3190 60                 RTS ;Size   11 [Cursor_Off]

              ; *************
3191            Get_Character
              ; *************

              ; get a character from keyboard
              ; allow all ASCII characters $20 - $7e
              ; allow control codes CR and DEL
              ; compare char with CR before return

3191 58                 CLI
3192 5a                 PHY                 ; save Y
3193 20 7d 31           JSR Cursor_On
3196 20 e4 ff GeCh_10   JSR GETIN
3199 f0 fb              BEQ GeCh_10
319b c9 0d              CMP #CR
319d f0 26              BEQ GeCh_40         ; allow CR
319f c9 14              CMP #DEL
31a1 f0 22              BEQ GeCh_40
31a3 c9 db              CMP #'Z'+$81        ; CBM 'Z'+1
31a5 b0 18              BCS GeCh_30         ; -> not ASCII
31a7 c9 c1              CMP #'A'+$80        ; CBM 'A'
31a9 90 04              BCC GeCh_22
31ab 29 7f              AND #$7f            ; to ASCII
31ad d0 16              BNE GeCh_40         ; always

31af c9 5b    GeCh_22   CMP #'Z'+1          ; CBM 'z'+1
31b1 b0 0c              BCS GeCh_30         ; -> not ASCII
31b3 c9 41              CMP #'A'            ; CBM 'a'
31b5 90 04              BCC GeCh_24
31b7 69 1f              ADC #$1f            ; to ASCII
31b9 d0 0a              BNE GeCh_40         ; always

31bb c9 20    GeCh_24   CMP #' '
31bd b0 06              BCS GeCh_40

31bf 20 b6 33 GeCh_30   JSR Error_Beep      ; unacceptable
31c2 4c 96 31           JMP GeCh_10

31c5 48       GeCh_40   PHA                 ; push char
31c6 20 86 31           JSR Cursor_Off
31c9 68                 PLA
31ca 7a                 PLY                 ; restore Y
31cb c9 0d              CMP #CR
31cd 60                 RTS ;Size   61 [Get_Character]

              ; ******************
31ce            Scroll_Main_Window
              ; ******************

31ce ae 61 21           LDX Z_Upper_Size
31d1 20 70 21           JSR Set_Screen_Pointer_X
31d4 18                 CLC
31d5 a5 57              LDA Scr_Adr
31d7 65 23              ADC Cols
31d9 85 ac              STA SAP         ; screen low
31db 85 ae              STA TAP         ; colour low
31dd a5 58              LDA Scr_Adr+1
31df 69 00              ADC #0
31e1 85 ad              STA SAP+1       ; screen high
31e3 29 07              AND #7
31e5 85 af              STA TAP+1       ; colour high
31e7 a9 f8              LDA #$f8
31e9 85 b0              STA TAP+2       ; colour bank low
31eb a9 0f              LDA #$0f
31ed 85 b1              STA TAP+3       ; colour bank high
31ef ab 29 00 SMW_10    LDZ Last_Col
31f2 b2 ac    SMW_20    LDA (SAP),Z
31f4 92 57              STA (Scr_Adr),Z
31f6 ea b2 ae           LDA [TAP],Z
31f9 ea 92 59           STA [Col_Adr],Z
31fc 3b                 DEZ
31fd 10 f3              BPL SMW_20
31ff 18                 CLC
3200 a5 ac              LDA SAP
3202 85 57              STA Scr_Adr
3204 85 59              STA Col_Adr
3206 65 23              ADC Cols            ; C=0
3208 85 ac              STA SAP
320a 85 ae              STA TAP
320c a5 ad              LDA SAP+1
320e 85 58              STA Scr_Adr+1
3210 29 07              AND #7
3212 85 5a              STA Col_Adr+1
3214 a5 ad              LDA SAP+1
3216 69 00              ADC #0
3218 85 ad              STA SAP+1
321a 29 07              AND #7
321c 85 af              STA TAP+1
321e e8                 INX
321f e4 28              CPX Last_Row
3221 90 cc              BCC SMW_10
3223 ab 29 00           LDZ Last_Col
3226 a9 20    SMW_30    LDA #' '
3228 92 57              STA (Scr_Adr),Z
322a a9 01              LDA #1
322c ea 92 59           STA [Col_Adr],Z
322f 3b                 DEZ
3230 10 f4              BPL SMW_30
3232 60                 RTS ;Size  101 [Scroll_Main_Window]

              ; ***********
3233            Home_Screen
              ; ***********

3233 da                 .BYTE $da ; PHX
3234 a2 00              LDX #0
3236 86 54              STX Cursor_Col
3238 20 70 21           JSR Set_Screen_Pointer_X
323b fa                 .BYTE $fa ; PLX
323c 60                 RTS ;Size   10 [Home_Screen]

              ; ************
323d            Clear_Screen
              ; ************

323d da                 PHX
323e 5a                 PHY
323f a2 00              LDX #0
3241 20 70 21           JSR Set_Screen_Pointer_X
3244 a2 08              LDX #8
3246 a0 00              LDY #0
3248 a9 20              LDA #' '
324a 91 57    ClSc_10   STA (Scr_Adr),Y
324c c8                 INY
324d d0 fb              BNE ClSc_10
324f e6 58              INC Scr_Adr+1
3251 ca                 DEX
3252 d0 f6              BNE ClSc_10
3254 a2 08              LDX #8
3256 a9 01              LDA #1
3258 a3 00              LDZ #0
325a ea 92 59 ClSc_20   STA [Col_Adr],Z
325d 1b                 INZ
325e d0 fa              BNE ClSc_20
3260 e6 5a              INC Col_Adr+1
3262 ca                 DEX
3263 d0 f5              BNE ClSc_20
3265 86 54              STX Cursor_Col
3267 20 70 21           JSR Set_Screen_Pointer_X
326a 7a                 PLY
326b fa                 PLX
326c 60                 RTS ;Size   48 [Clear_Screen]

              ; *************
326d            Return_Screen
              ; *************
326d da                 PHX
326e 5a                 PHY
326f a0 00              LDY #0
3271 84 54              STY Cursor_Col
3273 a6 55              LDX Cursor_Row
3275 e8                 INX
3276 e0 19              CPX #ROWS
3278 90 05              BCC ReSc_10
327a 20 ce 31           JSR Scroll_Main_Window
327d a2 18              LDX #ROWS-1
327f 86 55    ReSc_10   STX Cursor_Row
3281 20 70 21           JSR Set_Screen_Pointer_X
3284 7a                 PLY
3285 fa                 PLX

              ; ******************
3286            Screen_Reverse_Off
              ; ******************

3286 a9 00              LDA #0
3288 85 c7              STA RVS
328a 60                 RTS ;Size    5 [Screen_Reverse_Off]


              ; *****************
328b            Screen_Reverse_On
              ; *****************

328b a9 80              LDA #$80
328d 85 c7              STA RVS
328f 60                 RTS ;Size    5 [Screen_Reverse_On]

              ; **********
3290            Screen_Del
              ; **********
3290 5a                 .BYTE $5a ; PHY
3291 a4 54              LDY Cursor_Col
3293 f0 06              BEQ ScDe_Ret
3295 a9 20              LDA #' '
3297 91 57              STA (Scr_Adr),Y
3299 c6 54              DEC Cursor_Col
329b 7a       ScDe_Ret  .BYTE $7a ; PLY
329c 60                 RTS ;Size   13 [Screen_Del]

              ; ******
329d            CHROUT
              ; ******

329d c9 13              CMP #HOME
329f f0 92              BEQ Home_Screen
32a1 c9 93              CMP #CLEAR
32a3 f0 98              BEQ Clear_Screen
32a5 c9 0d              CMP #CR
32a7 f0 c4              BEQ Return_Screen
32a9 c9 12              CMP #REVERSE_ON
32ab f0 de              BEQ Screen_Reverse_On
32ad c9 92              CMP #REVERSE_OFF
32af f0 d5              BEQ Screen_Reverse_Off
32b1 c9 14              CMP #DEL
32b3 f0 db              BEQ Screen_Del

32b5 da                 PHX
32b6 5a                 PHY
32b7 48                 PHA
32b8 ab 54 00           LDZ Cursor_Col
32bb ad 86 02           LDA COLOR
32be ea 92 59           STA [Col_Adr],Z
32c1 68                 PLA
32c2 29 7f              AND #$7f
32c4 c9 20              CMP #' '
32c6 b0 04              BCS CHRO_20
32c8 a9 2e              LDA #'.'            ; 00-1f -> replace with dot
32ca d0 06              BNE CHRO_80
32cc c9 5b    CHRO_20   CMP #'['
32ce 90 02              BCC CHRO_80
32d0 29 1f              AND #$1f            ; 5b-7f -> 01-1f

32d2 a4 54    CHRO_80   LDY Cursor_Col
32d4 05 c7              ORA RVS
32d6 91 57              STA (Scr_Adr),Y
32d8 e6 54              INC Cursor_Col
32da c4 29              CPY Last_Col
32dc 90 03              BCC CHRO_90
32de 20 6d 32           JSR Return_Screen
32e1 7a       CHRO_90   PLY
32e2 fa                 PLX
32e3 60                 RTS ;Size   71 [CHROUT]

              ; ********
32e4            Got_Line
              ; ********

              ; Get line from keyboard with preset text

32e4 86 44              STX X1L
32e6 84 45              STY X1H
32e8 a0 00              LDY #0
32ea b1 44              LDA (X1L),Y
32ec 85 18              STA Chars_Left      ; maximum edit length
                        MAC_Color(CYAN)
32ee a9 03               LDA #CYAN
32f0 8d 86 02            STA COLOR

32f3 a0 00              LDY #0
32f5 c8       goli_01   INY
32f6 b1 44              LDA (X1L),Y
32f8 88                 DEY
32f9 c9 20              CMP #' '
32fb 90 25              BCC GLX_20
32fd c8                 INY
32fe c9 41              CMP #'A'
3300 90 06              BCC goli_10
3302 c9 5b              CMP #'Z'+1
3304 b0 02              BCS goli_10
3306 69 20              ADC #$20
3308 20 9d 32 goli_10   JSR CHROUT
330b 4c f5 32           JMP goli_01

              ; ***********
330e            Get_Line_X1
              ; ***********

330e ad 61 21           LDA Z_Upper_Size
3311 85 2b              STA MORE_Counter
                        MAC_Color(CYAN)
3313 a9 03               LDA #CYAN
3315 8d 86 02            STA COLOR

3318 a0 00              LDY #0
331a b1 44              LDA (X1L),Y
331c 85 18              STA Chars_Left      ; maximum edit length
331e d0 02              BNE GLX_10
3320 c6 18              DEC Chars_Left
3322          GLX_10

              ; receive character from keyboard loop

3322 20 91 31 GLX_20    JSR Get_Character  ; Y = previous position
3325 f0 2f              BEQ GLX_90         ; -> CR = end of input
3327 c9 14              CMP #DEL
3329 d0 10              BNE GLX_40
332b 88                 DEY                ; Y = prev - 1
332c 10 07              BPL GLX_30
332e 20 b6 33           JSR Error_Beep      ; No DEL at 1st. char
3331 c8                 INY                 ; restore Y
3332 4c 22 33           JMP GLX_20

              ; handle DEL character

3335          GLX_30
3335 20 9d 32           JSR CHROUT           ; print DEL
3338 4c 22 33           JMP GLX_20

              ; check edit limit

333b c4 18    GLX_40    CPY Chars_Left      ; edit limit
333d f0 02              BEQ GLX_45
333f b0 07              BCS GLX_50          ; -> at limit
3341 a6 54    GLX_45    LDX Cursor_Col
3343 e8                 INX
3344 e4 29              CPX Last_Col        ; -> end of line
3346 90 06              BCC GLX_70

3348 20 b6 33 GLX_50    JSR Error_Beep      ; reached max buffer length
334b 4c 22 33           JMP GLX_20

334e c8       GLX_70    INY
334f 91 44              STA (X1L),Y
3351 20 9d 32           JSR CHROUT          ; ASCII print
3354 d0 cc              BNE GLX_20

              ; receivced CR: terminate buffer and return

3356 c8       GLX_90    INY
3357 91 44              STA (X1L),Y         ; store CR
3359 20 9d 32           JSR CHROUT
335c 88                 DEY                 ; don't count CR
335d 84 18              STY Chars_Left      ; edit length
                        MAC_Color(WHITE)
335f a9 01               LDA #WHITE
3361 8d 86 02            STA COLOR

3364 60                 RTS ;Size   87 [Get_Line_X1]

              ; *********
3365            PrintText
              ; *********

3365 85 c3              STA MEMUSS
3367 84 c4              STY MEMUSS+1
3369 a0 00              LDY #0
336b b1 c3    PrTe_A    LDA (MEMUSS),Y
336d f0 07              BEQ PrTe_B
336f 20 9d 32           JSR CHROUT
3372 c8                 INY
3373 ca                 DEX
3374 d0 f5              BNE PrTe_A
3376 60       PrTe_B    RTS ;Size   18 [PrintText]

              ; **************
3377            z_split_window
              ; **************
3377 20 05 30           JSR Print_Buffer
337a a6 44              LDX X1L             ; new size
337c 10 02              BPL split_10
337e a2 00              LDX #0              ; C64 workaround
3380 e0 19    split_10  CPX #ROWS
3382 b0 14              BCS split_err
3384 8e 61 21           STX Z_Upper_Size    ; update size
3387 8e 63 39           STX Win_Top
338a a6 55              LDX Cursor_Row
338c ec 61 21           CPX Z_Upper_Size
338f b0 03              BCS split_20
3391 20 81 21           JSR Window_Home
3394 20 6e 21 split_20  JSR Set_Screen_Pointer
3397 60                 RTS ;Size   33 [z_split_window]
3398 00       split_err BRK

              ; ************
3399            z_set_window
              ; ************
3399 60       zsw_ret   RTS ;Size    1 [z_set_window]


              ; *************
339a            Set_Underline
              ; *************

              ; Input : Z-Flag

339a f0 02              BEQ Sund_10
339c a9 fc              LDA #%1111 1100
339e 8d 5f 21 Sund_10   STA Z_Underline
33a1 60                 RTS ;Size    8 [Set_Underline]

              ; ****************
33a2            z_set_text_style
              ; ****************

              ; % 76543210 Z                C128
              ;       ^--- 8: fixed pitch   ignore (font is fixed anyway)
              ;        ^-- 4: Italic        Att Bit 5 = underline
              ;         ^- 2: Bold
              ;          ^ 1: Reverse       RVS = $ff
              ;            0: Normal        RVS = 0    Underline = 0

33a2 60                 RTS ;Size    1 [z_set_text_style]

              ; *************
33a3            z_buffer_mode
              ; *************
33a3 60                 RTS ;Size    1 [z_buffer_mode]

              ; ************
33a4            z_set_cursor
              ; ************

              ; Input : X1 = new row position relative to window top
              ;         X2 = new column position

33a4 60                 RTS ;Size    1 [z_set_cursor]

              ; ***************
33a5            z_output_stream
              ; ***************

              ; Input:  (X1L) = stream number  3:  select memory
              ;                               -3:deselect memory
              ;         (X2)  = table address

33a5 60                 RTS ;Size    1 [z_output_stream]

              ; **************
33a6            z_erase_window
              ; **************
33a6 00       zew_20    BRK

              ; ***********
33a7            z_extension
              ; ***********
33a7 00                 BRK

              z_error12 ERROR(12)
33a8 a9 0c              LDA #12
33aa 4c 5b 2f           JMP INTERNAL_ERROR



              ; ***********
33ad            z_save_undo
              ; ***********

              ; **************
33ad            z_sound_effect
              ; **************

33ad a6 44              LDX X1L
33af ca                 DEX
33b0 f0 09              BEQ Click
33b2 ca                 DEX
33b3 f0 01              BEQ Error_Beep
33b5 60                 RTS ;Size    9 [z_sound_effect]

              ; **********
33b6            Error_Beep
              ; **********

33b6 a9 07              LDA #7
33b8 4c 9d 32           JMP CHROUT

              ; *****
33bb            Click
              ; *****
33bb 60                 RTS ;Size    1 [Click]


              ; ************
33bc            Reset_Screen
              ; ************

33bc 20 3d 32           JSR Clear_Screen
33bf 20 6d 32           JSR Return_Screen
33c2 ad 61 21           LDA Z_Upper_Size
33c5 85 2b              STA MORE_Counter
33c7 60                 RTS ;Size   12 [Reset_Screen]

              ; ********************
33c8            Empty_Keyboard_Queue
              ; ********************

33c8 20 e4 ff           JSR GETIN
33cb d0 fb              BNE Empty_Keyboard_Queue
33cd 60                 RTS ;Size    6 [Empty_Keyboard_Queue]

              ; ***********
33ce            Decode_Unit
              ; ***********
33ce c9 30              CMP #'0'
33d0 b0 03              BCS DeUn_10
33d2 8a                 TXA                 ; one digit
33d3 d0 06              BNE DeUn_20
33d5 e0 31    DeUn_10   CPX #'1'
33d7 d0 02              BNE DeUn_20
33d9 69 09              ADC #9              ; two digits 10 - 15
33db 29 0f    DeUn_20   AND #15
33dd 60                 RTS ;Size   16 [Decode_Unit]


              ; ***********
33de            Unit_Dialog
              ; ***********

33de a2 05              LDX #<Unit_Buf
33e0 a0 38              LDY #>Unit_Buf
33e2 20 e4 32           JSR Got_Line
33e5 ae 06 38           LDX Unit_Text       ; 10
33e8 ad 07 38           LDA Unit_Text+1     ;  1
33eb 20 ce 33           JSR Decode_Unit
33ee 8d 24 38           STA Save_Unit
33f1 60                 RTS ;Size   20 [Unit_Dialog]

              ; ***************
33f2            Wait_for_Return
              ; ***************

33f2 a9 25              LDA #<PRESSRET
33f4 a0 38              LDY #>PRESSRET
33f6 a2 1c              LDX #[SAVEUNIT-PRESSRET]
33f8 20 65 33           JSR PrintText
33fb 20 c8 33           JSR Empty_Keyboard_Queue
33fe 20 91 31 wfret_10  JSR Get_Character
3401 f0 06              BEQ wfret_99        ; -> CR
3403 20 b6 33           JSR Error_Beep
3406 4c fe 33           JMP wfret_10
3409 60       wfret_99  RTS ;Size   24 [Wait_for_Return]

              ; **********
340a            Open_Story
              ; **********

340a ad 23 38           LDA Game_Unit       ; open "Z3 *",FA,8
340d 85 ba              STA FA
340f 20 b1 ff           JSR LISTEN
3412 a9 f8              LDA #$f8
3414 20 93 ff           JSR SECOND
3417 a9 5a              LDA #'Z'
3419 20 a8 ff           JSR CIOUT
341c a9 33              LDA #'3'
341e 20 a8 ff           JSR CIOUT
3421 a9 20              LDA #' '
3423 20 a8 ff           JSR CIOUT
3426 a9 2a              LDA #'*'
3428 20 a8 ff           JSR CIOUT
342b 4c ae ff           JMP UNLSN

              ; ************
342e            Close_Story
              ; ************

342e ad 23 38           LDA Game_Unit       ; close #8
3431 85 ba              STA FA
3433 20 b1 ff           JSR LISTEN
3436 a9 e8              LDA #$e8
3438 20 93 ff           JSR SECOND
343b 4c ae ff           JMP UNLSN

              ; ***********
343e            File_Dialog
              ; ***********

343e a2 09              LDX #<File_Buf
3440 a0 38              LDY #>File_Buf
3442 20 e4 32           JSR Got_Line
3445 a2 14              LDX #20
3447 bd 0a 38 FiDi_10   LDA File_Text,X
344a c9 61              CMP #'a'
344c 90 05              BCC FiDi_20
344e e9 20              SBC #$20
3450 9d 0a 38           STA File_Text,X
3453 ca       FiDi_20   DEX
3454 10 f1              BPL FiDi_10
3456 60                 RTS ;Size   25 [File_Dialog]

              ; ****************
3457            Read_Disk_Status
              ; ****************
3457 8a                 TXA
3458 48                 PHA
3459 a5 ba              LDA FA
345b 20 b4 ff           JSR TALK
345e a9 6f              LDA #$6f
3460 20 96 ff           JSR TKSA
3463 a0 00              LDY #0
3465 84 90              STY IO_STATUS
3467 20 a5 ff RDS_10    JSR ACPTR           ; read status
346a a6 90              LDX IO_STATUS
346c d0 0f              BNE RDS_30
346e 99 3c 03           STA DSTATUS,Y
3471 c9 20              CMP #' '
3473 90 05              BCC RDS_20
3475 c8                 INY
3476 c0 28              CPY #40
3478 90 ed              BCC RDS_10
347a 20 ab ff RDS_20    JSR UNTLK           ; close channel
347d a9 0d    RDS_30    LDA #CR
347f 99 3c 03           STA DSTATUS,Y
3482 a9 00              LDA #0
3484 99 3d 03           STA DSTATUS+1,Y
3487 68                 PLA
3488 aa                 TAX
3489 ad 3c 03           LDA DSTATUS
348c 29 0f              AND #15             ; return with 1st. value
348e 60                 RTS ;Size   56 [Read_Disk_Status]

              ; **********
348f            z_ext_save
              ; **********
              ; ******
348f            z_save
              ; ******

348f 20 95 34           JSR Save_Game
3492 4c f8 24           JMP Main_True

              ; *********
3495            Save_Game
              ; *********
                        Print(SAVEUNIT)
3495 a9 41              LDA #<SAVEUNIT
3497 a0 38              LDY #>SAVEUNIT
3499 a2 0d              LDX #?SAVEUNIT
349b 20 65 33           JSR PrintText

349e 20 de 33           JSR Unit_Dialog
                        Print(SAVEFILE)
34a1 a9 4e              LDA #<SAVEFILE
34a3 a0 38              LDY #>SAVEFILE
34a5 a2 0d              LDX #?SAVEFILE
34a7 20 65 33           JSR PrintText

34aa 20 3e 34           JSR File_Dialog

34ad ad 02 3d           LDA Z_HEADER+2        ; save config
34b0 8d 20 3a           STA Z_VAR+$20
34b3 ad 03 3d           LDA Z_HEADER+3
34b6 8d 21 3a           STA Z_VAR+$21
34b9 a5 2c              LDA z_stack_ptr      ; save Z stack pointer
34bb 8d 22 3a           STA Z_VAR+$22
34be a5 2d              LDA z_frame_ptr
34c0 8d 24 3a           STA Z_VAR+$24
34c3 a2 02              LDX #2
34c5 b5 03    WG_10     LDA QI0,X           ; save IP
34c7 9d 26 3a           STA Z_VAR+$26,X
34ca ca                 DEX
34cb 10 f8              BPL WG_10
34cd e8                 INX
34ce 86 90              STX IO_STATUS       ; clear status
34d0 ad 24 38           LDA Save_Unit
34d3 85 ba              STA FA
34d5 20 b1 ff           JSR LISTEN          ; open Pos,Device,3
34d8 a9 f3              LDA #$f3
34da 20 93 ff           JSR SECOND
34dd a0 00              LDY #0
34df b9 0a 38 WG_20     LDA File_Text,Y
34e2 c9 20              CMP #' '
34e4 90 06              BCC WG_30
34e6 20 a8 ff           JSR CIOUT
34e9 c8                 INY
34ea d0 f3              BNE WG_20

34ec a9 2c    WG_30     LDA #','
34ee 20 a8 ff           JSR CIOUT
34f1 a9 57              LDA #'W'
34f3 20 a8 ff           JSR CIOUT
34f6 20 ae ff           JSR UNLSN
34f9 a5 90              LDA IO_STATUS
34fb d0 32              BNE WG_Err

34fd a5 ba              LDA FA
34ff 20 b1 ff           JSR LISTEN
3502 a9 63              LDA #$63
3504 20 93 ff           JSR SECOND
3507 a9 3a              LDA #>Z_VAR        ; Save variables & stack
3509 85 0c              STA RAM_HI
350b a2 03              LDX #3
350d 20 41 35 WG_40     JSR Write_Block
3510 a5 90              LDA IO_STATUS
3512 d0 1b              BNE WG_Err
3514 ca                 DEX
3515 d0 f6              BNE WG_40
3517 a9 3d              LDA #>Z_HEADER
3519 85 0c              STA RAM_HI
351b ae 0e 3d           LDX h_dynamic_size_hi
351e e8                 INX                 ; # of blocks
351f 20 41 35 WG_50     JSR Write_Block
3522 a5 90              LDA IO_STATUS
3524 d0 09              BNE WG_Err
3526 ca                 DEX
3527 d0 f6              BNE WG_50
3529 20 ae ff           JSR UNLSN
352c 4c 21 36           JMP Close_Save_File

352f 20 ae ff WG_Err    JSR UNLSN
3532 20 57 34           JSR Read_Disk_Status
                        Print(DSTATUS)
3535 a9 3c              LDA #<DSTATUS
3537 a0 03              LDY #>DSTATUS
3539 a2 00              LDX #?DSTATUS
353b 20 65 33           JSR PrintText

353e 4c 21 36           JMP Close_Save_File

              ; ***********
3541            Write_Block
              ; ***********

3541 a0 00              LDY #0
3543 84 42              STY X0L
3545 84 90              STY IO_STATUS
3547 b1 0b    WrBl_10   LDA (RAM_LO),Y
3549 20 a8 ff           JSR CIOUT
354c c8                 INY
354d d0 f8              BNE WrBl_10
354f e6 0c              INC RAM_HI
3551 a9 2e              LDA #'.'
3553 4c 9d 32           JMP CHROUT

              ; *********
3556            z_restore
              ; *********

3556 20 64 35           JSR Restore_Game
3559 4c f8 24           JMP Main_True

              ; *************
355c            z_ext_restore
              ; *************

355c 20 64 35           JSR Restore_Game
355f a9 02              LDA #2
3561 4c ab 24           JMP Store_Byte

              ; ************
3564            Restore_Game
              ; ************

                        Print(LOADUNIT)
3564 a9 5b              LDA #<LOADUNIT
3566 a0 38              LDY #>LOADUNIT
3568 a2 12              LDX #?LOADUNIT
356a 20 65 33           JSR PrintText

356d 20 de 33           JSR Unit_Dialog
                        Print(LOADFILE)
3570 a9 6d              LDA #<LOADFILE
3572 a0 38              LDY #>LOADFILE
3574 a2 12              LDX #?LOADFILE
3576 20 65 33           JSR PrintText

3579 20 3e 34           JSR File_Dialog

357c a2 1f              LDX #$1f             ; Save local variables
357e bd 00 3a RG_02     LDA Z_VAR,X          ; to stack bottom -
3581 9d 00 02           STA Charbuf,X        ; if restoring fails
3584 ca                 DEX                  ; we can retrieve them
3585 10 f7              BPL RG_02
3587 ad 24 38           LDA Save_Unit
358a 85 ba              STA FA
358c 20 b1 ff           JSR LISTEN           ; open Pos,Device,3
358f a9 f3              LDA #$f3
3591 20 93 ff           JSR SECOND
3594 a0 00              LDY #0
3596 b9 0a 38 RG_10     LDA File_Text,Y
3599 c9 20              CMP #' '
359b 90 06              BCC RG_20
359d 20 a8 ff           JSR CIOUT
35a0 c8                 INY
35a1 10 f3              BPL RG_10
35a3 20 ae ff RG_20     JSR UNLSN

              ; Check drive error channel

35a6 ad 24 38           LDA Save_Unit
35a9 85 ba              STA FA
35ab 20 b4 ff           JSR TALK
35ae a9 63              LDA #$63
35b0 20 96 ff           JSR TKSA
35b3 a9 3a              LDA #>Z_VAR
35b5 85 0c              STA RAM_HI
35b7 20 31 36           JSR Read_Block      ; Read Z_VAR
35ba ad 20 3a           LDA Z_VAR+$20
35bd cd 02 3d           CMP Z_HEADER+2      ; Check for
35c0 d0 08              BNE RG_03           ; correct version
35c2 ad 21 3a           LDA Z_VAR+$21
35c5 cd 03 3d           CMP Z_HEADER+3
35c8 f0 11              BEQ RG_05           ; OK -> continue restoring
35ca a2 1f    RG_03     LDX #$1f            ; Restore local variables
35cc bd 00 02 RG_04     LDA Charbuf,X       ; and abort restoring
35cf 9d 00 3a           STA Z_VAR,X
35d2 ca                 DEX
35d3 10 f7              BPL RG_04
35d5 20 bc 33           JSR Reset_Screen
35d8 4c ec 24           JMP Main_False

35db ad 10 3d RG_05     LDA h_flags_hi      ; save flags
35de 48                 PHA
35df ad 11 3d           LDA h_flags_lo
35e2 48                 PHA

35e3 a2 02              LDX #2
35e5 86 3e              STX A0L
35e7 20 31 36 RG_77     JSR Read_Block
35ea c6 3e              DEC A0L
35ec d0 f9              BNE RG_77

35ee a9 3d              LDA #>Z_HEADER
35f0 85 0c              STA RAM_HI
35f2 ae 0e 3d           LDX h_dynamic_size_hi
35f5 e8                 INX                 ; # of blocks
35f6 86 3e              STX A0L             ; block counter
35f8 20 31 36 RG_06     JSR Read_Block
35fb c6 3e              DEC A0L
35fd d0 f9              BNE RG_06

35ff 68                 PLA                 ; restore flags
3600 8d 11 3d           STA h_flags_lo
3603 68                 PLA
3604 8d 10 3d           STA h_flags_hi

3607 ad 22 3a           LDA Z_VAR+$22
360a 85 2c              STA z_stack_ptr
360c ad 24 3a           LDA Z_VAR+$24
360f 85 2d              STA z_frame_ptr
3611 a2 02              LDX #2
3613 bd 26 3a RG_07     LDA Z_VAR+$26,X
3616 95 03              STA QI0,X
3618 ca                 DEX
3619 10 f8              BPL RG_07
361b 20 ab ff           JSR UNTLK
361e 4c 21 36           JMP Close_Save_File


              ; ***************
3621            Close_Save_File
              ; ***************

3621 ad 24 38           LDA Save_Unit
3624 85 ba              STA FA
3626 20 b1 ff           JSR LISTEN
3629 a9 e3              LDA #$e3
362b 20 93 ff           JSR SECOND
362e 4c ae ff           JMP UNLSN

              ; **********
3631            Read_Block
              ; **********

3631 a0 00              LDY #0
3633 84 42              STY X0L
3635 84 90              STY IO_STATUS
3637 20 a5 ff ReBl_10   JSR ACPTR
363a 91 0b              STA (RAM_LO),Y
363c c8                 INY
363d d0 f8              BNE ReBl_10
363f e6 0c              INC RAM_HI
3641 a9 2e              LDA #'.'
3643 4c 9d 32           JMP CHROUT

              ; **********
3646            ASCII_Hex
              ; **********

              ; Output: (X) = High nibble (A) = Low nibble
3646 48                PHA
3647 4a                LSR A
3648 4a                LSR A
3649 4a                LSR A
364a 4a                LSR A
364b 09 30             ORA #'0'
364d c9 3a             CMP #$3a
364f 90 02             BCC Hex_11
3651 69 06             ADC #6
3653 aa       Hex_11   TAX
3654 68                PLA
3655 29 0f             AND #15
3657 09 30             ORA #'0'
3659 c9 3a             CMP #$3a
365b 90 02             BCC Hex_12
365d 69 06             ADC #6
365f 60       Hex_12   RTS ;Size   26 [ASCII_Hex]

              ; ******************
3660            Select_Text_Window
              ; ******************

3660 a9 01             LDA #1
3662 8d 63 39          STA Win_Top
3665 a5 28             LDA Last_Row
3667 8d 64 39          STA Win_Bot
366a 60                RTS ;Size   11 [Select_Text_Window]

              ; ********************
366b            Select_Status_Window
              ; ********************

366b a2 00             LDX #0
366d 8e 63 39          STX Win_Top
3670 4c 70 21          JMP Set_Screen_Pointer_X

              ; ***********
3673            Save_Cursor
              ; ***********

3673 20 99 21           JSR Get_Row_Col
3676 86 25              STX C_Save_Row
3678 84 24              STY C_Save_Col
367a 60                 RTS ;Size    8 [Save_Cursor]


              ; **************
367b            Restore_Cursor
              ; **************

367b a6 25              LDX C_Save_Row
367d a4 24              LDY C_Save_Col
367f 4c 86 21           JMP Set_Row_Col

              ; **************
3682            Erase_Last_Row
              ; **************

3682 a2 18              LDX #ROWS-1
3684 a0 00              LDY #0

              ; *********
3686            Erase_Row
              ; *********

3686 20 70 21           JSR Set_Screen_Pointer_X
3689 a9 20              LDA #' '
368b a4 29              LDY Last_Col
368d 91 57    ClRo_10   STA (Scr_Adr),Y
368f 88                 DEY
3690 10 fb              BPL ClRo_10
3692 60                 RTS ;Size   13 [Erase_Row]

              ; ******************
3693            Erase_Upper_Window
              ; ******************
3693 a2 00              LDX #0
3695 a0 00    EUW_10    LDY #0
3697 20 86 36           JSR Erase_Row
369a e8                 INX
369b ec 61 21           CPX Z_Upper_Size
369e 90 f5              BCC EUW_10
36a0 60                 RTS ;Size   14 [Erase_Upper_Window]

              ; ********
36a1            ASCII_TS
              ; ********

              ; Convert binary number in (A) to
              ; two decimal digits in (X) and (A)

36a1 a2 2f              LDX #'0'-1
36a3 38                 SEC
36a4 e8       asts_01   INX
36a5 e9 0a              SBC #10
36a7 b0 fb              BCS asts_01
36a9 69 3a              ADC #$3a
36ab 60                 RTS ;Size   11 [ASCII_TS]

              ; *********
36ac            Load_Page
              ; *********

              ; Read 256 bytes of data from disk and store them in RAM
              ; at the address (RAM_LO) = 32 bit address.
              ; The I/O routines TALK, TKSA, ACPTR, and UNTLK are used
              ; ACPTR sets the STATUS bit 6 ($40) on error

36ac a5 ba              LDA FA
36ae 20 b4 ff           JSR TALK            ; open channel
36b1 a9 68              LDA #$68            ; SA = 8
36b3 20 96 ff           JSR TKSA            ; select channel to disk buffer
36b6 a3 00              LDZ #0
36b8 64 90              STZ IO_STATUS
36ba 20 a5 ff LoPa_10   JSR ACPTR
36bd ea 92 0b           STA [RAM_LO],Z
36c0 a5 90              LDA IO_STATUS
36c2 d0 03              BNE LoPa_20
36c4 1b                 INZ
36c5 d0 f3              BNE LoPa_10
36c7 20 ab ff LoPa_20   JSR UNTLK           ; 256 bytes read, send untalk
36ca e6 14              INC Block_Lo        ; increment block number Block_Lo/Hi
36cc d0 02              BNE LoPa_30
36ce e6 15              INC Block_Hi
36d0 e6 0c    LoPa_30   INC RAM_HI          ; advance RAM pointer page
36d2 60                 RTS                 ; return OK ;Size   39 [Load_Page]

              ; **********
36d3            Load_Story
              ; **********

              ; Continue story loading in bank 4 and bank 5

36d3 a2 00              LDX #0
36d5 86 0c              STX RAM_HI
36d7 a2 04              LDX #4
36d9 86 0d              STX RAM_BA         ; load at $040000
36db 20 ac 36 LoSt_10   JSR Load_Page
36de a5 90              LDA IO_STATUS
36e0 d0 17              BNE LoSt_90        ; end of file
36e2 a5 14              LDA Block_Lo
36e4 29 07              AND #7
36e6 d0 05              BNE LoSt_20
36e8 a9 2e              LDA #'.'
36ea 20 9d 32           JSR CHROUT
36ed a5 0c    LoSt_20   LDA RAM_HI
36ef d0 ea              BNE LoSt_10
36f1 e6 0d              INC RAM_BA
36f3 a5 0d              LDA RAM_BA
36f5 c9 06              CMP #6
36f7 90 e2              BCC LoSt_10
36f9 4c 2e 34 LoSt_90   JMP Close_Story

              ; *************
36fc            Delete_Config
              ; *************

36fc ad 23 38           LDA Game_Unit
36ff 85 ba              STA FA
3701 20 b1 ff           JSR LISTEN
3704 a9 6f              LDA #$6f
3706 20 93 ff           JSR SECOND
3709 a0 00              LDY #0
370b b9 87 39 DeCo_10   LDA ConfigDel,Y
370e 20 a8 ff           JSR CIOUT
3711 c8                 INY
3712 c0 09              CPY #[?ConfigDel + ?Configname]
3714 90 f5              BCC DeCo_10
3716 4c ae ff           JMP UNLSN

              ; ***********
3719            Prep_Config
              ; ***********

3719 a9 92              LDA #<CONFIG_START
371b a0 39              LDY #>CONFIG_START
371d 85 3e              STA A0L
371f 84 3f              STY A0H
3721 a9 99              LDA #<CONFIG_END
3723 a0 39              LDY #>CONFIG_END
3725 85 40              STA A1L
3727 84 41              STY A1H
3729 a9 06              LDA #?Configname
372b a2 8a              LDX #<Configname
372d a0 39              LDY #>Configname
372f 4c bd ff           JMP SETNAM

              ; ***********
3732            Save_Config
              ; ***********

3732 20 fc 36           JSR Delete_Config
3735 20 19 37           JSR Prep_Config
3738 e6 b7              INC FNLEN           ; add ','
373a e6 b7              INC FNLEN           ; add 'W'
373c 4c a1 37           JMP Save_File

              ; ***********
373f            Load_Config
              ; ***********

373f 20 19 37           JSR Prep_Config
3742 20 46 37           JSR Load_File
3745 60                 RTS ;Size    7 [Load_Config]


              ; *********
3746            Load_File
              ; *********

              ; Input : (A0) = start address
              ;       : (A1) = end   address
              ;       : SETNAM was called

3746 a5 ba              LDA FA
3748 20 b1 ff           JSR LISTEN
374b a9 f3              LDA #$f3
374d 20 93 ff           JSR SECOND
3750 a0 00              LDY #0
3752 84 90              STY IO_STATUS
3754 b1 bb    LoFi_10   LDA (FNADR),Y
3756 20 a8 ff           JSR CIOUT
3759 c8                 INY
375a c4 b7              CPY FNLEN
375c 90 f6              BCC LoFi_10
375e 20 ae ff           JSR UNLSN
3761 a5 ba              LDA FA
3763 20 b4 ff           JSR TALK
3766 a9 63              LDA #$63
3768 20 96 ff           JSR TKSA
376b a0 00              LDY #0
376d 20 a5 ff           JSR ACPTR           ; read first byte
3770 a6 90              LDX IO_STATUS
3772 f0 05              BEQ LoFi_30
3774 d0 1b              BNE LoFi_60

3776 20 a5 ff LoFi_20   JSR ACPTR
3779 91 3e    LoFi_30   STA (A0L),Y
377b a5 90              LDA IO_STATUS
377d d0 12              BNE LoFi_60         ; EOF
377f e6 3e              INC A0L
3781 d0 02              BNE LoFi_40
3783 e6 3f              INC A0H
3785 a5 3f    LoFi_40   LDA A0H
3787 c5 41              CMP A1H
3789 90 eb              BCC LoFi_20
378b a5 3e              LDA A0L
378d c5 40              CMP A1L
378f 90 e5              BCC LoFi_20

3791 20 ab ff LoFi_60   JSR UNTLK           ; close file
3794 a5 ba              LDA FA
3796 20 b1 ff           JSR LISTEN
3799 a9 e3              LDA #$e3
379b 20 93 ff           JSR SECOND
379e 4c ae ff           JMP UNLSN

              ; *********
37a1            Save_File
              ; *********

              ; Input : (A0) = start address
              ;       : (A1) = end   address
              ;       : SETNAM was called

37a1 a5 ba              LDA FA
37a3 20 b1 ff           JSR LISTEN
37a6 a9 f3              LDA #$f3
37a8 20 93 ff           JSR SECOND
37ab a0 00              LDY #0
37ad 84 90              STY IO_STATUS
37af b1 bb    SaFi_10   LDA (FNADR),Y
37b1 20 a8 ff           JSR CIOUT
37b4 c8                 INY
37b5 c4 b7              CPY FNLEN
37b7 90 f6              BCC SaFi_10
37b9 20 ae ff           JSR UNLSN

              ; TODO: check error channel

37bc a5 ba              LDA FA
37be 20 b1 ff           JSR LISTEN
37c1 a9 63              LDA #$63
37c3 20 93 ff           JSR SECOND
37c6 a0 00              LDY #0
37c8 b1 3e    SaFi_20   LDA (A0L),Y
37ca 20 a8 ff           JSR CIOUT
37cd e6 3e              INC A0L
37cf d0 02              BNE SaFi_40
37d1 e6 3f              INC A0H
37d3 a5 3f    SaFi_40   LDA A0H
37d5 c5 41              CMP A1H
37d7 90 ef              BCC SaFi_20
37d9 a5 3e              LDA A0L
37db c5 40              CMP A1L
37dd 90 e9              BCC SaFi_20

37df 20 ae ff SaFi_60   JSR UNLSN           ; close file
37e2 a5 ba              LDA FA
37e4 20 b1 ff           JSR LISTEN
37e7 a9 e3              LDA #$e3
37e9 20 93 ff           JSR SECOND
37ec 4c ae ff           JMP UNLSN

37ef 00 00 00 TEXT_WORD       .FILL  9 (0) ; unpacked ASCII word ; 9 bytes
37f8 00 00 00 DICT_WORD       .FILL 11 (0) ;   packed ZSCII word ; 11 bytes

3803 00       Location_Length .BYTE 0
3804 00       Tokenizer_Flag  .BYTE 0

              ; ------- data for unit dialog --------
3805 02       Unit_Buf        .BYTE 2 ; input length
3806 30 38 00 Unit_Text       .BYTE "08",0
              ; ------- data for file name dialog----
3809 14       File_Buf        .BYTE 20 ; input length
380a 73 61 76 File_Text .BYTE "savename",0
3813 00 00 00           .FILL 12 (0) ; 12 bytes
              ; ------- story signature ------------
381f 5a 33 20 Storyname .BYTE "Z3 *"
3823 08       Game_Unit .BYTE 8
3824 09       Save_Unit .BYTE 9

3825 0d 50 72 PRESSRET  .BYTE "\rPress <RETURN> to continue."
3841 53 61 76 SAVEUNIT  .BYTE "Save to unit:"
384e 53 61 76 SAVEFILE  .BYTE "Save to file:"
385b 52 65 73 LOADUNIT  .BYTE "Restore from unit:"
386d 52 65 73 LOADFILE  .BYTE "Restore from file:"
387f 12 3c 4d MORE      .BYTE REVERSE_ON,"<MORE>",REVERSE_OFF
3887 45 6e 64 EOS       .BYTE "End of session - press any key"
38a5 4e 4f 20 NOSTORY   .BYTE "NO Z3 STORY"


38b0 93 42 49 BITSHIFTER .BYTE CLEAR,"BIT SHIFTER 30-JUL-2020\r"
38c9 0d       InfoClr    .BYTE CR
38ca 50 72 6f InfoPro    .BYTE 'Program: 0001 - 00FF    0 Pages\r'
38ea 42 61 6e InfoSta    .BYTE 'Bank  0: 0000 - 00FF    0 Pages\r'
390a 53 74 6f InfoSto    .BYTE 'Story  :        Size    0 Pages\r',0
392b          InfoEnd

392b 20 20 20 BLANKS    .BYTE "            "

3937 13 12 20 PRE_STATUS .BYTE HOME,REVERSE_ON," "
0034          STAT_SCORE = 52
0016          MOVES_COL  = 22

393a 53 63 6f SCORE      .BYTE "Score: 0       Moves: 0     ",0
3957 54 69 6d STIME      .BYTE "Time: 00:00",0
0007          SCORE_COL  =  7
0006          STIME_COL  =  6

3963 00       Win_Top    .BYTE  0
3964 18       Win_Bot    .BYTE 24

3965 0d 52 41 RAMB_0    .BYTE '\rRAM Bank 0: '
3972 0d 52 41 RAMB_1    .BYTE '\rRAM Bank 1: '

397f 45 72 72 INTERR    .BYTE "Error 00"

3987 53 30 3a ConfigDel  .BYTE "S0:"        ; prefix for scratch command
398a 43 4f 4e Configname .BYTE "CONFIG"
3990 2c 57    ConfigWri  .BYTE ",W"         ; postfix for write command


3992          CONFIG_START
3992 01       FG_Color   .BYTE WHITE        ; f1 133
3993 01       TI_Color   .BYTE WHITE        ; f3 134
3994 06       BO_Color   .BYTE BLUE         ; f5 135
3995 06       BG_Color   .BYTE BLUE         ; f2 137
3996 02       TB_Color   .BYTE RED          ; f4 138
3997 00                  .BYTE 0            ; f6 139
3998 00                  .BYTE 0            ; f8 140
3999          CONFIG_END

              ; ***
3999            EOP
              ; ***



  786 Symbols
-------------
BLACK                          $0000    27
R6510                          $0001   174D   374
WHITE                          $0001    28D  3747   4153   5021   5022
Z_Code                         $0002    70D   502    660    810    851
                                       881    901    906   1120   2070
                                      3456
RED                            $0002    29D  5025
QI0                            $0003    71D   767   1335   1336   1424
                                      1431   1660   2074   2360   2366
                                      2976   2998   4450   4619
ZV                             $0003     8D   676
CYAN                           $0003    30D  4080   4102
O_PARENT                       $0004   279D  1543   1583   1610   1829
                                      1918
V_SIZE                         $0004   285D  2892
QI1                            $0004    72D   765   1338   1339   1663
                                      2076   2357   2369   2979   2990
                                      3000
PURPLE                         $0004    31
QI2                            $0005    73D  1344   1345   1664   2080
                                      2356   2372   2977   2993   3002
GREEN                          $0005    32
O_SIBLING                      $0005   280D  1524   1595   1601   1605
                                      1927
BLUE                           $0006    33D  5023   5024
STIME_COL                      $0006  5005D  3685   3694
WORD_LENGTH                    $0006   286D  2682   2689   3199   3275
O_CHILD                        $0006   281D  1531   1591   1920
QDL                            $0006    77D  3090   3123   3149   3159
                                      3762   3796
YELLOW                         $0007    34D  3737
SCORE_COL                      $0007  5004D  3713
O_PROP                         $0007   282D  1627   3342
QDH                            $0007    78D  3030   3134   3138   3142
                                      3148   3157   3161   3163   3165
                                      3169   3170
QD0                            $0008    79D  1425   1430   1690   1965
                                      2833   2834   2845   2883   2928
                                      2950   3020   3106
BACKSPACE                      $0008    48
ORANGE                         $0008    35
QD1                            $0009    80D  1693   1968   2836   2846
                                      2885   2931   2942   2952   3021
                                      3110
O_SIZE                         $0009   283
BROWN                          $0009    36
TAB                            $0009    49
QD2                            $000a    81D  1696   1971   2838   2848
                                      2929   2945   2954   3023   3113
PINK                           $000a    37
DARKGREY                       $000b    38
RAM_LO/RAM_HI                  $000b    85D  2949   2997   4513y  4645y
                                      4772     86D   502    673   2935
                                      2944   2983   2992   4482   4490
                                      4517   4572   4600   4648   4781
                                      4791   4802
GREY                           $000c    39
CR                             $000d    50D  3497   3566   3849   3877
                                      4033   4413   4990
LT_GREEN                       $000d    40
RAM_BA                         $000d    87D  2927   2948   2975   2996
                                      4793   4804   4805
LT_BLUE                        $000e    41
LV0                            $000f    91D  2122   2128   2129   2218
                                      2220   2227   2233   2246   3066
                                      3068   3595   3604   3609   3618
                                      3623   3632
LT_GREY                        $000f    42
LV1                            $0010    92D  2121   2131   2132   2219
                                      2224   2228   2235   2247   3596
                                      3600   3605   3610   3614   3619
                                      3624   3628
LV2                            $0011    93D  2165   2184   2499   2501
                                      3080   3084
CURSOR_DOWN                    $0011    51
LV3                            $0012    94D  2167   2181
REVERSE_ON                     $0012    52D  4035   4984   4998
HOME                           $0013    53D  4029   4998
alphabet                       $0013    96D  3032   3042   3044
Block_Lo                       $0014    97D   752    757   4778   4797
DEL                            $0014    54D  3851   4039   4114
Block_Hi                       $0015    98D  4780
MOVES_COL                      $0016  5000D  3716
Charbuf_Ptr                    $0016    99D  3501   3511   3521   3536
                                      3565   3568   3574   3580   3583
Charbuf_End                    $0017   100D  3515   3520   3533
Chars_Left                     $0018   101D  2670   2703   2707   2715
                                      2721   2759   2767   4079   4105
                                      4107   4130   4152
Info_Pages                     $0019   102D   588    727    733
ROWS                           $0019   173D   546    548    626    709
                                      3987   3990   4178   4715
OP_Type                        $001a   103D  1078   1080   1114
ESC                            $001b    55
ParNum                         $001c   104D   808   1090   1091   1117
                                      1727   1735   1741   2388   2405
                                      2588
CURSOR_RIGHT                   $001d    56
Parse_Index                    $001d   105D  2658   2735   2752
QuotL                          $001e   106D  2144   2169   2201   2202
                                      2216   2231
P_MASK                         $001f   284D  3359   3395
QuotH                          $001f   107D  2145   2171   2204   2205
                                      2217   2232
RemL                           $0020   108D  2153   2175   2188   2189
                                      2212   2222   2234   2524
RemH                           $0021   109D  2154   2177   2191   2192
                                      2213   2225   2236   2522
Resident_Pages                 $0022   110D   687    732    758   2932
                                      2943   2980   2991
Cols                           $0023   111D   549    617    720   3720
                                      3888   3911
C_Save_Col                     $0024   112D  4699   4708
C_Save_Row                     $0025   113D  4698   4707
C_Save_Adr                     $0026   114
Last_Row                       $0028   115D   627   3546   3924   4681
Last_Col                       $0029   116D   551    619    722   3485
                                      3507   3702   3728   3742   3779
                                      3900   3926   4062   4135   4724
Status_Col                     $002a   117D   670   3487   3495   3768
                                      3775   3783
MORE_Counter                   $002b   118D  3543   3544   3550   4101
                                      4292
z_stack_ptr                    $002c   119D   668   1168   1187   1191
                                      1468   1470   1644   2408   4445
                                      4614
z_frame_ptr                    $002d   120D   669   1643   1667   2353
                                      2409   4447   4616
NUMBER                         $002e   121D   600   2496   3603   3617
                                      3631   3638   3640   3643   3646
                                      3668   3686   3688   3695   3698
P0L                            $0033   122
P0H                            $0034   123
STAT_SCORE                     $0034  4999D  3719
P1L                            $0035   124
P1H                            $0036   125
P2L                            $0037   126
P2H                            $0038   127
P3L                            $0039   128
P3H                            $003a   129
DPL                            $003b   130D  2640   2858
DPH                            $003c   131D  2641   2859
DPI                            $003d   132D  2865   2898
A0L/A0H                        $003e   133D   350    357y  1155y  1158y
                                      1242y  1245y  1265   1392   1402
                                      1412   1585   1589y  1598y  1607y
                                      1631y  1822   1878y  1888y  1889y
                                      1898y  1899y  1924y  1984   2005
                                      2019y  2022y  2054   2420y  2423y
                                      2432y  2442   2463y  2466y  3099
                                      3104y  3108y  3304   3313   3322
                                      3327y  3347y  3348   3351y  3354
                                      3355   3358y  3367y  3389   3390
                                      3394y  4594   4596   4603   4605
                                      4833   4894y  4897   4903   4942y
                                      4944   4950    134D   353    361
                                      1261   1263   1266   1269   1394
                                      1404   1414   1587   1812   1815
                                      1819   1987   2008   2057   2446
                                      3102   3306   3308   3310   3312
                                      3315   3319   3323   3326   3349
                                      3357   3392   4834   4899   4900
                                      4946   4947
A1L/A1H                        $0040   135D   351    358y  1586   1596y
                                      1606y  1611y  1613y  1919y  1928y
                                      4837   4904   4951    136D   355
                                       362    363   1588   2374   2398
                                      2403   4838   4901   4948
X0L                            $0042   137D   589    639    642    646
                                      1086   1094   1095   1147   1159
                                      1174   1218   1230   1244   1372
                                      1382   1411   1477   1534   1552
                                      1562   1565   1719   1821   2526
                                      3590   3771   4511   4642
X0H                            $0043   138D   587    637    643    648
                                      1084   1096   1097   1145   1156
                                      1175   1212   1232   1241   1313
                                      1315   1329   1341   1374   1384
                                      1413   1476   1554   1564   1720
                                      1813   1816   1818   1936   2523
                                      2528   3591   3772
X1L/X1H                        $0044   139D  1128   1166   1353   1363
                                      1371   1391   1456   1514   1572
                                      1593   1603   1620   1671   1680
                                      1688   1709   1729   1841   1858
                                      1869   1923   1963   2052   2092
                                      2104   2127   2168   2345   2364
                                      2394   2441   2476   2483   2490
                                      2511   2518   2535   2566y  2574y
                                      2698y  2710y  2762y  3287   4075
                                      4078y  4083y  4104y  4142y  4149y
                                      4175   4265    140D  1355   1364
                                      1373   1393   1457   1515   1573
                                      1621   1672   1681   1691   1712
                                      1730   1845   1855   1866   1966
                                      2055   2095   2107   2130   2164
                                      2170   2346   2367   2396   2444
                                      2484   2493   2513   2520   2536
                                      2597   2599   4076
X2L/X2H                        $0046   141D  1381   1401   1731   1831
                                      1840   1842   1859   1870   1917
                                      1953   1964   2009   2033   2093
                                      2105   2124   2135   2174   2416
                                      2440   2512   2591   2650y  2655y
                                      2676y  2747y  3414   3437   3442
                                       142D  1383   1403   1733   1844
                                      1846   1856   1867   1954   1967
                                      2096   2108   2123   2136   2166
                                      2176   2417   2443   2514   2592
                                      2643   2645
X3L                            $0048   143D  1737   2422   2431   2465
                                      2635
X3H                            $0049   144D  1739   2419   2462   2636
X4L                            $004a   145D  1743   2869   2877   2878
                                      2901
X4H                            $004b   146D  1745   2867   2870   2872
                                      2880   2881   2903
X5L                            $004c   147D  2660   2696   2704   2709
                                      2717   2723   2761   2766
X5H                            $004d   148D  2663   2671   2681   2686
                                      2713   2716   2722   2727   2734
                                      2765
X6L                            $004e   149D  2662   2667   2732
X6H                            $004f   150D  2656   2668
X7L                            $0050   151D  2697   2729   2738   2746
                                      2886   2908
COLS                           $0050   172D   434    435    436    437
                                       438    439    440    441    442
                                       443    444    445    446    447
                                       448    449    450    451    452
                                       453    454    455    456    457
                                       460    461    462    463    464
                                       465    466    467    468    469
                                       470    471    472    473    474
                                       475    476    477    478    479
                                       480    481    482    483    616
                                       688    707    719
X7H                            $0051   152D  2739   2884   2907
X8L                            $0052   153
X8H                            $0053   154
Cursor_Col                     $0054   156D   554    565   3506   3819
                                      3828   3941   3972   3984   4017
                                      4021   4045   4058   4061   4133
Cursor_Row                     $0055   157D   514    553    564   3985
                                      3991   4182
Cursor_Vis                     $0056   158D  3822   3832
Scr_Adr                        $0057   159D   521    524   3821y  3830y
                                      3887   3891   3902   3909   3915
                                      3928   3957y  3960   4020y  4060y
                                      4725
Col_Adr                        $0059   160D   522    526    613    615
                                      3904   3910   3917   3930   3966
                                      3969   4047
ZP_END                         $005d   162D   663
KEY_F1                         $0085    14
KEY_F3                         $0086    15
KEY_F5                         $0087    16
KEY_F7                         $0088    17
KEY_F2                         $0089    18
KEY_F4                         $008a    19
KEY_F6                         $008b    20
KEY_F8                         $008c    21
IO_STATUS                      $0090   175D   750   4402   4404   4455
                                      4474   4485   4494   4512   4643
                                      4770   4773   4795   4876   4889
                                      4895   4927
CURSOR_UP                      $0091    58
REVERSE_OFF                    $0092    59D  3745   4037   4984
CLEAR                          $0093    57D  4031   4989
CURSOR_LEFT                    $009d    60
SAP                            $00ac   176D  3889   3893   3901   3908
                                      3912   3914   3918   3920
TAP                            $00ae   177D  3890   3895   3897   3899
                                      3903   3913   3922
FNLEN                          $00b7   178D  4850   4851   4880   4931
FA                             $00ba   179D   393   4350   4369   4397
                                      4457   4477   4551   4567   4631
                                      4765   4815   4871   4883   4908
                                      4922   4937   4955
FNADR                          $00bb   180D  4877y  4928
MEMUSS                         $00c3   181D  4160   4161   4163
RVS                            $00c7   182D  4001   4010   4059
BLNSW                          $00cc   183D   390
BLNCT                          $00cd   184
BLNON                          $00cf   185
Charbuf                        $0200   166D  3502   3516   3530   3531
                                      3567   3577   4547   4581
COLOR                          $0286   186D   401   3738   3748   4046
                                      4080   4102   4153
KEYRPT                         $028a   187
MODE                           $0291   188
DSTATUS                        $033c   189D  4406   4414   4416   4419
                                      4503   4503   4503
SCREEN                         $0800   190D   433    434    435    436
                                       437    438    439    440    441
                                       442    443    444    445    446
                                       447    448    449    450    451
                                       452    453    454    455    456
                                       457    459    460    461    462
                                       463    464    465    466    467
                                       468    469    470    471    472
                                       473    474    475    476    477
                                       478    479    480    481    482
                                       483
START                          $2001   310D   312    315    315    726
                                       728
Link                           $203b   338D   321
ReLoop                         $2052   357D   360    365
MEGA_Setup                     $2066   370D   342    366
Set_Mode_80                    $20b2   412D   398    763
Row_Lo                         $20c7   433D   520
Row_Hi                         $20e0   459D   523
Z_STATUS                       $20f9   485D  3484   3725   3740   3741
                                      3777
L_Encode_A                     $2153   486D  3221   3225   3235   3244
L_Encode_Y                     $2154   487D  3220   3246   3250
Sep_Std_List                   $2155   491D  2817   2818
Z_Arg_Count                    $215b   492D  1647   2402   2407
Z_Buffer_Mode                  $215c   493
Z_Call_Type                    $215d   494D  1659   1669   2344   2348
                                      2361
Z_Monospace                    $215e   495
Z_Underline                    $215f   496D  4204
Z_Active_Window                $2160   497
Z_Upper_Size                   $2161   499D   536   3549   3884   4100
                                      4180   4183   4291   4737
Z_Copy                         $2162   502
Breakpoint                     $216d   503
Set_Screen_Pointer             $216e   511D   555   4186
Set_Screen_Pointer_X           $2170   517D  3885   3942   3953   3973
                                      3992   4691   4722
Window_Home                    $2181   531D  4185
Set_Row_Col                    $2186   540D  4709
SRC_10                         $218c   549D   547
SRC_20                         $2192   553D   550
Get_Row_Col                    $2199   558D  4697
Info_Print                     $219e   569D   731    738
Info_Size                      $21bd   592D   741
InSi_10                        $21c6   600D   605
Screen_Setup                   $21d2   609D   399    667
Set_Screen_Rows                $21e1   622
Story_Pages                    $21e7   631D   739
STTS_10                        $2202   649D   645    647
z_restart                      $2203   653D   408   1009
Start_10                       $220b   661D   664
Start_20                       $223b   680D   677
Start_30                       $22b7   749D   759
Start_40                       $22c9   757D   754
Start_50                       $22cf   761D   751
PC_LOOP                        $22e5   771D   922
PC_30                          $22e5   805
opvar_10                       $22fb   850
z_op_var                       $22fb   840
opvar_20                       $22fe   851
z_op_zero                      $230b   860D   835
z_op_one                       $2310   870D   833
z_op_two                       $231e   888D   831
z_exe_1f                       $2332   907D   853
z_execute                      $2334   910D   857    867    885
JSRMOD                         $2342   921D   918    920
DumpQI                         $2348   924
z_error_2                      $2349   926D  1017
z_error_3                      $234e   927
z_error_4                      $2353   928D   940    968    969    970
                                       971
z_opcode                       $2358   931D   856    866    884    917
                                       919
opcodes_1op                    $2398   974D   884
opcodes_0op                    $23b8   999D   866
opcodes_var                    $23d8  1020D   856
z_error_1                      $2418  1056D  1035   1037   1039   1043
Get_Operand                    $241d  1065D   880    900    905   1112
opcodes_ext                    $241d  1059
geop_01                        $242a  1084D  1082
geop_02                        $2434  1088D  1081
geop_03                        $2439  1090D  1087
geop_04                        $2448  1099D  1088
Load_4_Operands                $2449  1102D   850   1119
L4OP_20                        $2458  1120D  1113
Get_Var_X1L                    $245b  1125D  1551   1561   1703
Get_Var_A                      $2465  1134D  1089
GeVa_10                        $246d  1141D  1129   1138
Get_Global_Var                 $247d  1151D  1142   3663   3683   3692
                                      3770
Put_Var                        $248a  1163D  1555   1566   1907   2543
Push_X0                        $2490  1171D  1131   1225
Push_AY                        $2494  1178D  2354   2358   2362   2380
                                      2404   2537
z_error_6                      $24a4  1194D  1192
Store_Zero                     $24a9  1197D  1990   2041   2305
Store_Object                   $24ab   287D  1533   1545
Store_Byte                     $24ab  1203D   287   1945   2036   2040
                                      2063   2351   4534
Store_AX                       $24ad  1209D  1673   1860   1871   2023
Store_A_X0H                    $24af  1215D  1938
Store_X0                       $24b1  1221D  1704   1721   2529
stx0_01                        $24b6  1227D  1167
Put_Global_Var                 $24c6  1237D  1228
Get_Global_Var_Addr            $24d3  1249D  1154   1240
GGVA_Ret                       $24eb  1270D  1289
Main_False                     $24ec  1283D  1517   1537   1748   1762
                                      1775   1788   1802   1834   1849
                                      1880   4586
Bran_01                        $24f1  1288D  1297
Main_True                      $24f8  1293D  1015   1518   1536   1747
                                      1761   1774   1787   1801   1833
                                      1848   1881   4431   4526
Bran_10                        $24fd  1298D  1287
Bran_11                        $2509  1305D  1300
Bran_12                        $2513  1311D  1307
Bran_13                        $2516  1313D  1310
Bran_14                        $251f  1317D  1304
Branch_XA                      $2525  1323D  1316   1682
Bran_20                        $252d  1334D  1332
Bran_21                        $253f  1344D  1342
z_rtrue                        $2544  1349D  1002   1320   1449
z_rfalse                       $254e  1359D  1003   1318
X1_TO_X0                       $2557  1368D  1757
X2_TO_X0                       $2560  1378D  1771   1798   1906
X1_TO_A0                       $2569  1388D  1770
X2_TO_A0                       $2572  1398D  1758   1784
X0_TO_A0                       $257b  1408D  1797
z_print                        $2584  1418D  1004   1447
z_prin_1                       $2586  1424D  1427
zprin_2                        $2592  1430D  1433
z_nop                          $2599  1436D  1006
z_print_ret                    $259a  1442D  1005
z_ret_popped                   $25a3  1452D  1010
z_pop                          $25ad  1461D  1011   1130   1139   1455
                                      1646   1651   1658   1662   1666
                                      2542
z_error_5                      $25c1  1480D  1469
z_quit                         $25c6  1483D  1012   3478
quit_10                        $25cb  1491D  1494
quit_20                        $25dc  1498D   679   1499
quit_30                        $25e6  1503D  1501
z_catch                        $25e9  1506
z_jz                           $25ea  1511D   981
z_jz_t                         $25f3  1518D  1516
z_get_sibling                  $25f6  1521D   982
z_get_child                    $25fa  1528D   983
zg_chi_1                       $25fc  1532D  1525
zg_chi_f                       $2609  1537D  1535
z_get_parent                   $260c  1540D   984
z_inc                          $2614  1548D   986   1796
z_inc_1                        $261d  1555D  1553
z_dec                          $2620  1558D   987   1783
z_dec_1                        $2629  1565D  1563
z_print_addr                   $262e  1569D   988
z_remove_obj                   $2635  1577D   990   1916
zro_10                         $2658  1601D  1594   1604
zro_20                         $2667  1609D  1599
zro_30                         $2670  1614D  1590
z_print_obj                    $2671  1617D   991
z_print_obj_A                  $2675  1624D  3773
zpo_10                         $2683  1636D  1634
z_ret                          $2686  1640D   992   1356   1365   1458
zret_10                        $2693  1651D  1656
zret_20                        $26a0  1658D  1649
zret_30                        $26c0  1674D  1670
z_jump                         $26c1  1677D   993
z_print_paddr                  $26c8  1685D   994
z_load                         $26da  1700D   995
z_not                          $26e0  1707D   996   1047
Store_XA                       $26e9  1716D  1989   2097   2109   2137
                                      2146   2155
z_je                           $26f0  1724D   941
z_je_1                         $2700  1735D  1732
z_je_2                         $270c  1741D  1738
z_je_t                         $2718  1747D  1734   1740
z_je_f                         $271b  1748D  1736   1742   1744   1746
z_error_9                      $271e  1749D  1728
z_jl                           $2723  1752D   942
z_jl_f                         $2731  1762D  1760
z_jg                           $2734  1765D   943
z_jg_f                         $2742  1775D  1773
z_dec_chk                      $2745  1778D   944
z_dec_cf                       $2753  1788D  1786
z_inc_chk                      $2756  1791D   945
z_inc_cf                       $2767  1802D  1800
CMP_A0_X0                      $276a  1805D  1759   1772   1785   1799
cmpax_1                        $2775  1818D  1814
cmpax_2                        $277f  1823D  1820
z_jin                          $2780  1826D   946
z_jin_f                        $278c  1834D  1832
z_test                         $278f  1837D   947
z_test_f                       $27a2  1849D  1843   1847
z_or                           $27a5  1852D   948
z_and                          $27b1  1863D   949
z_test_attr                    $27bd  1874D   950
z_teat_t                       $27c7  1881D  1879
z_set_attr                     $27ca  1884D   951
z_clear_attr                   $27d2  1893D   952
z_store                        $27dc  1903D   953
z_insert_obj                   $27e2  1910D   954
zinob_1                        $27fc  1929D  1926
z_loadw                        $27fd  1932D   955
z_loadb                        $2808  1941D   956
Word_Array                     $280e  1948D  1935
Byte_Array                     $2812  1957D  1944
z_get_prop_addr                $2827  1975D   958
gepa_10                        $2838  1990D  1983
z_get_prop                     $283b  1994D   957
zgp_10                         $2854  2015D  2002
zgp_20                         $285a  2019D  2013
zgp_30                         $285e  2022D  2017
z_get_next_prop                $2863  2027D   959
zgnp_10                        $286d  2037D  2034
zgnp_20                        $2878  2041D  2038
z_get_prop_len                 $287b  2045D   985
Dump_QI                        $2893  2066
z_add                          $28c0  2088D   960
z_sub                          $28cd  2100D   961
z_mul                          $28da  2112D   962
z_mul_1                        $28dd  2121D  2134
z_mul_2                        $28f4  2133D  2125
z_div                          $28fe  2140D   963
z_mod                          $2908  2149D   964
Divide_Signed                  $2912  2158D  2143   2152   2521
Divi_01                        $2927  2174D  2172
Divi_02                        $2934  2180D  2178
Divi_03                        $293e  2184D  2182
Divi_04                        $2942  2186D  2179
Divi_05                        $294f  2193D  2185
Negate_Quot                    $2950  2196D  2173   2183
Divide_Unsigned                $295e  2209D  2180
DiUn_01                        $2967  2216D  2230
DiUn_02                        $297f  2229D  2226
z_error_8                      $298f  2238D  2214
Prep_Mult_Div                  $2990  2241D  2120   2215
z_print_table                  $299a  2265D  1053
zpt_40                         $299a  2273
z_scan_table                   $299a  2252D  1046
z_copy_table                   $299a  2256D  1052
z_tokenize                     $299b  2276D  1050
z_check_argc                   $299c  2287D  1054
z_set_font                     $299d  2296
z_log_shift                    $299d  2292
Z_Active_Font                  $29a0  2306
z_set_color                    $29a1  2309D   967
z_call_n                       $29a5  2321D   966   1048   1049
z_call_s                       $29a9  2328D   965    989   1023
call_00                        $29ab  2344D  2325
call_10                        $29ba  2351D  2349
call_20                        $29bd  2353D  2347
call_30                        $29e9  2378D  2400
call_40                        $2a11  2398D  2389
call_50                        $2a16  2402D  2375
z_storew                       $2a29  2413D  1024
z_storeb                       $2a3a  2427D  1025
X1_PLUS_X2_TO_A0               $2a42  2436D  2418   2430
z_put_prop                     $2a54  2451D  1026
zpupr_3                        $2a67  2465D  2459
z_error10                      $2a6c  2469D  2457
z_error11                      $2a71  2470D  2461
z_print_char                   $2a76  2473D  1028
z_print_num                    $2a7b  2480D  1029
zprnu_1                        $2a90  2494D  2485
zprnu_2                        $2a95  2496D  2504
zprnu_3                        $2aa2  2502D  2498
z_random                       $2aa8  2508D  1030
zrand_1                        $2acc  2529D  2527
z_push                         $2acf  2532D  1031
z_pull                         $2ad6  2540D  1032
z_encode_text                  $2adc  2547D  1051
z_read_char                    $2adc  2556D  1045
Lower_Case_X1                  $2add  2563D  2602
LCX1_10                        $2adf  2566D  2576
LCX1_20                        $2af1  2575D  2570   2572
LCX1_Ret                       $2af4  2577D  2568
z_read                         $2af5  2580D  1027
zread_10                       $2b0d  2595D  2590   2593
zread_20                       $2b21  2606D  2604
Parse_Input                    $2b22  2611D  2605
Parse_05                       $2b2a  2638D  2634
Parse_07                       $2b30  2640D  2637
Parse_10                       $2b45  2654D  2651
Parse_15                       $2b49  2656D  2653
Parse_20                       $2b58  2667D  2705   2718   2728   2753
Parse_25                       $2b64  2674D  2669
Parse_30                       $2b6a  2681D  2672
Parse_35                       $2b73  2686D  2683
Parse_40                       $2b79  2690D  2692
Parse_45                       $2b95  2707D  2687   2702
Parse_50                       $2bb0  2720D  2700
Parse_55                       $2bb9  2727D  2708   2712
Parse_60                       $2bde  2746D  2737   2740   2751
Parse_70                       $2be8  2752D  2745
Skip_Surplus                   $2bed  2756D  2684
SkSu_10                        $2bf1  2761D  2768
SkSu_Ret                       $2c02  2769D  2760   2764
Sep_All                        $2c03  2772D  2711   2763
Sep_Dict                       $2c08  2784D  2699
SeDi_10                        $2c19  2799D  2793   2803
SeDi_20                        $2c24  2805D  2801
SeDi_Ret                       $2c25  2806D  2781
Sep_Std                        $2c26  2809D  2701   2780
SeSt_10                        $2c28  2818D  2821
SeSt_Ret                       $2c31  2823D  2819
Skip_Data                      $2c32  2826D  2863
SkDa_Ret                       $2c3f  2839D  2835   2837
Set_Data_AY                    $2c40  2842D  2796   2860
Dictionary_Search              $2c49  2852D  2731
DiSe_20                        $2c7a  2883D  2873   2902   2904
DiSe_30                        $2c84  2888D  2893
DiSe_50                        $2c92  2896D  2891   2899
DiSe_70                        $2ca4  2907D  2871
Next_Datum                     $2ca9  2912D  1937   1972   2797   2799
                                      2862   2864   2866   2868   2888
                                      2896   3154   3158
NEDA_10                        $2cc0  2941D  2930   2933
NEDA_50                        $2ccf  2949D  2936
NEDA_80                        $2cdc  2955D  2951   2953
Next_Instruction               $2cdf  2959D   809    837   1083   1085
                                      1137   1224   1286   1290   1296
                                      1314   2373   2383   2385
NEIN_10                        $2cf6  2989D  2978   2981
NEIN_50                        $2d05  2997D  2984
NEIN_80                        $2d12  3003D  2999   3001
ZSCII_2                        $2d15  3010D  3048   3227
Swap_Ret                       $2d2f  3012D  3034
Decode_YX                      $2d30  3015D  1574   1636
Decode_Text                    $2d38  3026D  1428   1697   3117
DeTe_10                        $2d3c  3031D  3058   3127
DeTe_15                        $2d40  3033D  3043
DeTe_20                        $2d4b  3038D  3035
DeTe_25                        $2d57  3044D  3041
DeTe_30                        $2d65  3052D  3046
DeTe_35                        $2d6d  3056D  3053
DeTe_40                        $2d6f  3057D  3037   3049   3055   3069
DeTe_50                        $2d75  3060D  3050
DeTe_55                        $2d87  3073D  3039
DeTe_60                        $2d9b  3090D  3093
DeTe_65                        $2dc4  3122D  3126
Get_Packed_Char                $2dcf  3131D  3033   3060   3067   3081
GPC_10                         $2de5  3147D  3139
GPC_20                         $2def  3154D  3135
GPC_Ret                        $2e14  3177D  3137
Encode                         $2e15  3180D  2730
Enco_10                        $2e1b  3196D  3204
Enco_20                        $2e1d  3197D  3211   3218   3247   3252
Enco_30                        $2e26  3203D  3194
Enco_35                        $2e37  3213D  3207   3209
Enco_40                        $2e43  3220D  3214   3216
Enco_50                        $2e54  3227D  3230
Enco_60                        $2e7b  3249D  3228
Enco_70                        $2e83  3254D  3200
Enco_80                        $2e87  3256D  3276
Get_Object_X1                  $2eb5  3284D  1532   1544   1584   1830
                                      3343   3436
Get_Object_Reg                 $2eb7  3290D  1592   1602   1628   1921
GOA_01                         $2ecc  3316D  3314
GOA_02                         $2ed3  3320D  3318
First_Property                 $2ee5  3331D  2035   3413
FiPr_10                        $2f02  3358D  3356
Property_Size                  $2f07  3364D  2015   2060   2458   3386
Next_Property                  $2f10  3377D  2039   3417
NePr_20                        $2f1e  3393D  3391
Find_Property                  $2f25  3399D  1982   2001   2037   2456
FIPR_10                        $2f28  3414D  3418
FIPR_20                        $2f34  3419D  3415
FIPR_30                        $2f35  3420D  3416
Get_Attr_Addr                  $2f36  3423D  1877   1887   1896
gaa_01                         $2f48  3447D  3449
gaa_02                         $2f49  3448D  3446
Dump_Code                      $2f4d  3453D  3476
Dump_Byte                      $2f4f  3459D  2071   2075   2077   2081
INTERNAL_ERROR                 $2f5b  3469D   926    927    928   1056
                                      1194   1480   1749   2469   2470
                                      4254
Print_To_Status                $2f76  3481D  3496
PTS_01                         $2f7f  3488D  3486
Print_Formatted                $2f80  3492D  2477   2487   2500   3057
PrFo_25                        $2f9c  3512D  3500
PrFo_30                        $2f9d  3514D  3508
PrFo_35                        $2fa1  3516D  3519
PrFo_40                        $2fab  3521D  3517
PrFo_45                        $2fb8  3530D  3535
PrFo_50                        $2fbf  3533D  3528
z_new_line                     $2fc7  3540D  1013   1448   3475   3498
                                      3524
znl_10                         $2fe7  3554D  3556
Terminate_Buffer               $2ffc  3562D  3547
Print_Buffer                   $3005  3571D  2315   2584   4174
PrBu_10                        $300b  3577D  3581
PrBu_Ret                       $301a  3584D  3575
Format_Integer                 $301b  3587D   596   3664   3684   3693
Format_XA                      $301f  3592D  2494
FORINT_01                      $3022  3594D  3602
FORINT_02                      $303a  3608D  3616
FORINT_03                      $3052  3622D  3630
FORINT_04                      $3068  3635D  3637
FORINT_05                      $3077  3643D  3649
FORINT_06                      $3084  3650D  3645
Status_Number                  $3085  3653D  3714   3717
StNu_10                        $3091  3668D  3675
StNu_20                        $309b  3673D  3670
Print_Time                     $30a1  3679D  3789
Print_Score                    $30d5  3709D  3787
PrSc_10                        $30eb  3723D  3721
PrSc_20                        $30ed  3724D  3706   3729
Print_Status                   $30fa  3733D  3790
z_show_status                  $3122  3752D  1014   2583   3548
zss_10                         $3127  3762D  3765
zss_20                         $3143  3777D  3780
zss_30                         $315c  3789D  3786
zss_40                         $315f  3790D  3788
zss_90                         $3164  3795D  3799
Fix_Colors                     $316f  3805
FiCo_10                        $3171  3809D  3813
Cursor_On                      $317d  3817D  3846
Cursor_Off                     $3186  3826D  3874
Get_Character                  $3191  3836D  4112   4339
GeCh_10                        $3196  3847D  3848   3871
GeCh_22                        $31af  3860D  3856
GeCh_24                        $31bb  3867D  3863
GeCh_30                        $31bf  3870D  3854   3861
GeCh_40                        $31c5  3873D  3850   3852   3858   3865
                                      3868
Scroll_Main_Window             $31ce  3881D  3989
SMW_10                         $31ef  3900D  3925
SMW_20                         $31f2  3901D  3906
SMW_30                         $3226  3927D  3932
Home_Screen                    $3233  3936D  4030
Clear_Screen                   $323d  3947D   406   4032   4289
ClSc_10                        $324a  3957D  3959   3962
ClSc_20                        $325a  3966D  3968   3971
Return_Screen                  $326d  3979D  4034   4064   4290
ReSc_10                        $327f  3991D  3988
Screen_Reverse_Off             $3286  3997D  4038
Screen_Reverse_On              $328b  4006D  4036
Screen_Del                     $3290  4014D  4040
ScDe_Ret                       $329b  4022D  4018
CHROUT                         $329d  4026D   756   2069   2073   2079
                                      2083   2085   3464   3466   3578
                                      3746   4093   4125   4143   4150
                                      4165   4277   4519   4650   4801
CHRO_20                        $32cc  4054D  4051
CHRO_80                        $32d2  4058D  4053   4055
CHRO_90                        $32e1  4065D  4063
Got_Line                       $32e4  4070D  4323   4381
goli_01                        $32f5  4082D  4094
goli_10                        $3308  4093D  4089   4091
Get_Line_X1                    $330e  4097D  2601
GLX_10                         $3322  4108D  4106
GLX_20                         $3322  4112D  4086   4120   4126   4139
                                      4144
GLX_30                         $3335  4124D  4117
GLX_40                         $333b  4130D  4115
GLX_45                         $3341  4133D  4131
GLX_50                         $3348  4138D  4132
GLX_70                         $334e  4141D  4136
GLX_90                         $3356  4148D  4113
PrintText                      $3365  4157D   678    742    747   1496
                                      3477   3553   3558   3739   3744
                                      4337   4436   4438   4503   4540
                                      4542
PrTe_A                         $336b  4163D  4168
PrTe_B                         $3376  4169D  4164
z_split_window                 $3377  4172D  1033
split_10                       $3380  4178D  4176
split_20                       $3394  4186D  4184
split_err                      $3398  4188D  4179
z_set_window                   $3399  4191D  1034
zsw_ret                        $3399  4193
Set_Underline                  $339a  4197
Sund_10                        $339e  4204D  4202
z_set_text_style               $33a2  4208D  1040
z_buffer_mode                  $33a3  4221D  1041
z_set_cursor                   $33a4  4226D  1038
z_output_stream                $33a5  4235D  1042
zew_20                         $33a6  4247
z_erase_window                 $33a6  4245D  1036
z_extension                    $33a7  4250D  1016
z_error12                      $33a8  4254
z_save_undo                    $33ad  4258
z_sound_effect                 $33ad  4262D  1044
Error_Beep                     $33b6  4273D  3870   4118   4138   4269
                                      4341
Click                          $33bb  4280D  4267
Reset_Screen                   $33bc  4286D   768   4585
Empty_Keyboard_Queue           $33c8  4296D  3551   4300   4338
Decode_Unit                    $33ce  4304D  4326
DeUn_10                        $33d5  4310D  4307
DeUn_20                        $33db  4313D  4309   4311
Unit_Dialog                    $33de  4318D  4437   4541
Wait_for_Return                $33f2  4331D   762
wfret_10                       $33fe  4339D  4342
wfret_99                       $3409  4343D  4340
Open_Story                     $340a  4346D   671
Close_Story                    $342e  4365D  4808
File_Dialog                    $343e  4376D  4439   4543
FiDi_10                        $3447  4383D  4389
FiDi_20                        $3453  4388D  4385
Read_Disk_Status               $3457  4393D  4502
RDS_10                         $3467  4403D  4411
RDS_20                         $347a  4412D  4408
RDS_30                         $347d  4413D  4405
z_ext_save                     $348f  4424
z_save                         $348f  4427D  1007
Save_Game                      $3495  4434D  4430
WG_10                          $34c5  4450D  4453
WG_20                          $34df  4462D  4467
WG_30                          $34ec  4469D  4464
WG_40                          $350d  4484D  4488
WG_50                          $351f  4493D  4497
WG_Err                         $352f  4501D  4475   4486   4495
Write_Block                    $3541  4507D  4484   4493
WrBl_10                        $3547  4513D  4516
z_restore                      $3556  4522D  1008
z_ext_restore                  $355c  4529
Restore_Game                   $3564  4537D  4525   4532
RG_02                          $357e  4546D  4549
RG_10                          $3596  4556D  4561
RG_20                          $35a3  4562D  4558
RG_03                          $35ca  4580D  4576
RG_04                          $35cc  4581D  4584
RG_05                          $35db  4588D  4579
RG_77                          $35e7  4595D  4597
RG_06                          $35f8  4604D  4606
RG_07                          $3613  4618D  4621
Close_Save_File                $3621  4627D  4499   4504   4623
Read_Block                     $3631  4638D  4573   4595   4604
ReBl_10                        $3637  4644D  4647
ASCII_Hex                      $3646  4653D   577    582   3461
Hex_11                         $3653  4666D  4664
Hex_12                         $365f  4673D  4671
Select_Text_Window             $3660  4676D   743   3749
Select_Status_Window           $366b  4686D  3736
Save_Cursor                    $3673  4694D  3552   3757
Restore_Cursor                 $367b  4704D  3557   3559   3801
Erase_Last_Row                 $3682  4712
Erase_Row                      $3686  4719D  4735
ClRo_10                        $368d  4725D  4727
Erase_Upper_Window             $3693  4731
EUW_10                         $3695  4734D  4738
ASCII_TS                       $36a1  4742D  3472
asts_01                        $36a4  4750D  4752
Load_Page                      $36ac  4757D   674    749   4794
LoPa_10                        $36ba  4771D  4776
LoPa_20                        $36c7  4777D  4774
LoPa_30                        $36d0  4781D  4779
Load_Story                     $36d3  4785D   761
LoSt_10                        $36db  4794D  4803   4807
LoSt_20                        $36ed  4802D  4799
LoSt_90                        $36f9  4808D  4796
Delete_Config                  $36fc  4811D  4848
DeCo_10                        $370b  4820D  4824
Prep_Config                    $3719  4828D  4849   4858
Save_Config                    $3732  4845D  1486
Load_Config                    $373f  4855D   397
Load_File                      $3746  4864D  4859
LoFi_10                        $3754  4877D  4881
LoFi_20                        $3776  4893D  4902   4905
LoFi_30                        $3779  4894D  4890
LoFi_40                        $3785  4900D  4898
LoFi_60                        $3791  4907D  4891   4896
Save_File                      $37a1  4915D  4852
SaFi_10                        $37af  4928D  4932
SaFi_20                        $37c8  4942D  4949   4952
SaFi_40                        $37d3  4947D  4945
SaFi_60                        $37df  4954
TEXT_WORD                      $37ef  4961D  2690   2714   2720   3203
DICT_WORD                      $37f8  4962D  2890   3197   3223   3233
                                      3242   3256   3261   3263   3264
                                      3266   3267   3269   3277   3279
Location_Length                $3803  4964D  3776
Tokenizer_Flag                 $3804  4965D  2586   2736
Unit_Buf                       $3805  4968D  4321   4322
Unit_Text                      $3806  4969D  4324   4325
File_Buf                       $3809  4971D  4379   4380
File_Text                      $380a  4972D  4383   4387   4462   4556
Storyname                      $381f  4975
Game_Unit                      $3823  4976D   394   4349   4368   4814
Save_Unit                      $3824  4977D   395   4327   4456   4550
                                      4566   4630
PRESSRET                       $3825  4979D  4334   4335   4336
SAVEUNIT                       $3841  4980D  4336   4436   4436   4436
SAVEFILE                       $384e  4981D  4438   4438   4438
LOADUNIT                       $385b  4982D  4540   4540   4540
LOADFILE                       $386d  4983D  4542   4542   4542
MORE                           $387f  4984D  3553   3553   3553
EOS                            $3887  4985D  1496   1496   1496
NOSTORY                        $38a5  4986D   678    678    678
BITSHIFTER                     $38b0  4989D   742    742    742
InfoClr                        $38c9  4990D   744    745    746
InfoPro                        $38ca  4991D   578    580    583    585
                                       601    737    740
InfoSta                        $38ea  4992D   737
InfoSto                        $390a  4993D   740
InfoEnd                        $392b  4994D   746
BLANKS                         $392b  4996D  3558   3558   3558
PRE_STATUS                     $3937  4998D  3739   3739   3739
SCORE                          $393a  5002D  3671   3705   3724
STIME                          $3957  5003D  3687   3689   3697   3699
                                      3705
Win_Top                        $3963  5007D  4181   4680   4690
Win_Bot                        $3964  5008D  4682
RAMB_0                         $3965  5010
RAMB_1                         $3972  5011
INTERR                         $397f  5013D  3473   3474   3477   3477
                                      3477
ConfigDel                      $3987  5015D  4820   4823
Configname                     $398a  5016D  4823   4839   4840   4841
ConfigWri                      $3990  5017
FG_Color                       $3992  5021D   400   3809   3811
CONFIG_START                   $3992  5020D  4831   4832
TI_Color                       $3993  5022
BO_Color                       $3994  5023D   404
BG_Color                       $3995  5024D   402
TB_Color                       $3996  5025
EOP                            $3999  5031D   219    315    352    354
                                       726    729
CONFIG_END                     $3999  5028D  4835   4836
Lvar_Lo                        $3a00   224D  1146   1231   1652   2379
                                      2386   2395
Z_VAR                          $3a00   219D   220    224    225   4442
                                      4444   4446   4448   4451   4481
                                      4546   4571   4574   4577   4582
                                      4613   4615   4618
Lvar_Hi                        $3a10   225D  1144   1233   1654   2378
                                      2384   2397
Z_STACK_LO                     $3b00   220D   221    223   1190   1471
Filename                       $3b00   223
Z_STACK_HI                     $3c00   221D   222   1188   1473
Z_HEADER                       $3d00   222D   231    232    233    234
                                       235    236    237    238    239
                                       240    241    242    243    244
                                       245    246    247    248    249
                                       250    251    252    253    254
                                       255    256    257    258    259
                                       260    261    262    263    264
                                       265    266    267    268    269
                                       271    272    672    686    735
                                       736   1268   1985   1988   2007
                                      2053   2056   2445   2598   2644
                                      2934   2982   3101   3325   3344
                                      4441   4443   4489   4575   4578
                                      4599
h_version                      $3d00   231D   675
h_config                       $3d01   232D   691    700   3784
h_resident_size_hi             $3d04   233
h_resident_size_lo             $3d05   234
h_start_pc_hi                  $3d06   235D   764
h_start_pc_lo                  $3d07   236D   766
h_dictionary_hi                $3d08   237D  2639   2795
h_dictionary_lo                $3d09   238D  2638   2794
h_objects_hi                   $3d0a   239D  2006   3324
h_objects_lo                   $3d0b   240D  2004   3321
h_globals_hi                   $3d0c   241D  1267
h_globals_lo                   $3d0d   242D  1264
h_dynamic_size_hi              $3d0e   243D  4491   4601
h_dynamic_size_lo              $3d0f   244
h_flags_hi                     $3d10   245D  4588   4611
h_flags_lo                     $3d11   246D   702    703   4590   4609
h_serial                       $3d12   247
h_abbreviations_hi             $3d18   248D  3100
h_abbreviations_lo             $3d19   249D  3098
h_file_size_hi                 $3d1a   250D   638
h_file_size_lo                 $3d1b   251D   640
h_checksum_hi                  $3d1c   252
h_checksum_lo                  $3d1d   253
h_interpreter_number           $3d1e   254D   715
h_interpreter_version          $3d1f   255D   717
h_screen_rows                  $3d20   256
h_screen_cols                  $3d21   257D   689
h_screen_width_hi              $3d22   258D   705
h_screen_width_lo              $3d23   259D   708
h_screen_height_hi             $3d24   260D   706
h_screen_height_lo             $3d25   261D   710
h_font_width                   $3d26   262D   712
h_font_height                  $3d27   263D   713
h_functions_offset_hi          $3d28   264
h_functions_offset_lo          $3d29   265
h_strings_offset_hi            $3d2a   266
h_strings_offset_lo            $3d2b   267
h_default_bg_color             $3d2c   268
h_default_fg_color             $3d2d   269
h_alphabet_hi                  $3d34   271
h_alphabet_lo                  $3d35   272
Raster                         $d012   192D  2517
BorderCol                      $d020   193D   405
BackgCol0                      $d021   194D   403
Random                         $d41b   195D  2516
COLRAM                         $d800   191
SETMSG                         $ff90   201D   407
SECOND                         $ff93   202D  4353   4372   4460   4480
                                      4554   4634   4818   4874   4911
                                      4925   4940   4958
TKSA                           $ff96   203D  4400   4570   4768   4886
ACPTR                          $ffa5   204D  4403   4644   4771   4888
                                      4893
CIOUT                          $ffa8   205D  4355   4357   4359   4361
                                      4465   4470   4472   4514   4559
                                      4821   4878   4929   4943
UNTLK                          $ffab   206D  4412   4622   4777   4907
UNLSN                          $ffae   207D  4362   4373   4473   4498
                                      4501   4562   4635   4825   4882
                                      4912   4933   4954   4959
LISTEN                         $ffb1   208D  4351   4370   4458   4478
                                      4552   4632   4816   4872   4909
                                      4923   4938   4956
TALK                           $ffb4   209D  4398   4568   4766   4884
SETNAM                         $ffbd   210D  4842
GETIN                          $ffe4   211D  1498   3554   3847   4299
PLOT                           $fff0   212
RESET                          $fffc   213D  1503
A0L/A0H                        $003e   133D   350    357y  1155y  1158y
                                      1242y  1245y  1265   1392   1402
                                      1412   1585   1589y  1598y  1607y
                                      1631y  1822   1878y  1888y  1889y
                                      1898y  1899y  1924y  1984   2005
                                      2019y  2022y  2054   2420y  2423y
                                      2432y  2442   2463y  2466y  3099
                                      3104y  3108y  3304   3313   3322
                                      3327y  3347y  3348   3351y  3354
                                      3355   3358y  3367y  3389   3390
                                      3394y  4594   4596   4603   4605
                                      4833   4894y  4897   4903   4942y
                                      4944   4950    134D   353    361
                                      1261   1263   1266   1269   1394
                                      1404   1414   1587   1812   1815
                                      1819   1987   2008   2057   2446
                                      3102   3306   3308   3310   3312
                                      3315   3319   3323   3326   3349
                                      3357   3392   4834   4899   4900
                                      4946   4947
X1L/X1H                        $0044   139D  1128   1166   1353   1363
                                      1371   1391   1456   1514   1572
                                      1593   1603   1620   1671   1680
                                      1688   1709   1729   1841   1858
                                      1869   1923   1963   2052   2092
                                      2104   2127   2168   2345   2364
                                      2394   2441   2476   2483   2490
                                      2511   2518   2535   2566y  2574y
                                      2698y  2710y  2762y  3287   4075
                                      4078y  4083y  4104y  4142y  4149y
                                      4175   4265    140D  1355   1364
                                      1373   1393   1457   1515   1573
                                      1621   1672   1681   1691   1712
                                      1730   1845   1855   1866   1966
                                      2055   2095   2107   2130   2164
                                      2170   2346   2367   2396   2444
                                      2484   2493   2513   2520   2536
                                      2597   2599   4076
COLS                           $0050   172D   434    435    436    437
                                       438    439    440    441    442
                                       443    444    445    446    447
                                       448    449    450    451    452
                                       453    454    455    456    457
                                       460    461    462    463    464
                                       465    466    467    468    469
                                       470    471    472    473    474
                                       475    476    477    478    479
                                       480    481    482    483    616
                                       688    707    719
X2L/X2H                        $0046   141D  1381   1401   1731   1831
                                      1840   1842   1859   1870   1917
                                      1953   1964   2009   2033   2093
                                      2105   2124   2135   2174   2416
                                      2440   2512   2591   2650y  2655y
                                      2676y  2747y  3414   3437   3442
                                       142D  1383   1403   1733   1844
                                      1846   1856   1867   1954   1967
                                      2096   2108   2123   2136   2166
                                      2176   2417   2443   2514   2592
                                      2643   2645
X0H                            $0043   138D   587    637    643    648
                                      1084   1096   1097   1145   1156
                                      1175   1212   1232   1241   1313
                                      1315   1329   1341   1374   1384
                                      1413   1476   1554   1564   1720
                                      1813   1816   1818   1936   2523
                                      2528   3591   3772
X0L                            $0042   137D   589    639    642    646
                                      1086   1094   1095   1147   1159
                                      1174   1218   1230   1244   1372
                                      1382   1411   1477   1534   1552
                                      1562   1565   1719   1821   2526
                                      3590   3771   4511   4642
A1L/A1H                        $0040   135D   351    358y  1586   1596y
                                      1606y  1611y  1613y  1919y  1928y
                                      4837   4904   4951    136D   355
                                       362    363   1588   2374   2398
                                      2403   4838   4901   4948
RAM_LO/RAM_HI                  $000b    85D  2949   2997   4513y  4645y
                                      4772     86D   502    673   2935
                                      2944   2983   2992   4482   4490
                                      4517   4572   4600   4648   4781
                                      4791   4802
FA                             $00ba   179D   393   4350   4369   4397
                                      4457   4477   4551   4567   4631
                                      4765   4815   4871   4883   4908
                                      4922   4937   4955
IO_STATUS                      $0090   175D   750   4402   4404   4455
                                      4474   4485   4494   4512   4643
                                      4770   4773   4795   4876   4889
                                      4895   4927
LV1                            $0010    92D  2121   2131   2132   2219
                                      2224   2228   2235   2247   3596
                                      3600   3605   3610   3614   3619
                                      3624   3628
LV0                            $000f    91D  2122   2128   2129   2218
                                      2220   2227   2233   2246   3066
                                      3068   3595   3604   3609   3618
                                      3623   3632
Scr_Adr                        $0057   159D   521    524   3821y  3830y
                                      3887   3891   3902   3909   3915
                                      3928   3957y  3960   4020y  4060y
                                      4725
Cursor_Col                     $0054   156D   554    565   3506   3819
                                      3828   3941   3972   3984   4017
                                      4021   4045   4058   4061   4133
NUMBER                         $002e   121D   600   2496   3603   3617
                                      3631   3638   3640   3643   3646
                                      3668   3686   3688   3695   3698
Last_Col                       $0029   116D   551    619    722   3485
                                      3507   3702   3728   3742   3779
                                      3900   3926   4062   4135   4724
QI0                            $0003    71D   767   1335   1336   1424
                                      1431   1660   2074   2360   2366
                                      2976   2998   4450   4619
Chars_Left                     $0018   101D  2670   2703   2707   2715
                                      2721   2759   2767   4079   4105
                                      4107   4130   4152
QD0                            $0008    79D  1425   1430   1690   1965
                                      2833   2834   2845   2883   2928
                                      2950   3020   3106
Col_Adr                        $0059   160D   522    526    613    615
                                      3904   3910   3917   3930   3966
                                      3969   4047
QDH                            $0007    78D  3030   3134   3138   3142
                                      3148   3157   3161   3163   3165
                                      3169   3170
X5H                            $004d   148D  2663   2671   2681   2686
                                      2713   2716   2722   2727   2734
                                      2765
z_stack_ptr                    $002c   119D   668   1168   1187   1191
                                      1468   1470   1644   2408   4445
                                      4614
ParNum                         $001c   104D   808   1090   1091   1117
                                      1727   1735   1741   2388   2405
                                      2588
QD1                            $0009    80D  1693   1968   2836   2846
                                      2885   2931   2942   2952   3021
                                      3110
QI1                            $0004    72D   765   1338   1339   1663
                                      2076   2357   2369   2979   2990
                                      3000
Z_Code                         $0002    70D   502    660    810    851
                                       881    901    906   1120   2070
                                      3456
Charbuf_Ptr                    $0016    99D  3501   3511   3521   3536
                                      3565   3568   3574   3580   3583
QD2                            $000a    81D  1696   1971   2838   2848
                                      2929   2945   2954   3023   3113
QI2                            $0005    73D  1344   1345   1664   2080
                                      2356   2372   2977   2993   3002
SAP                            $00ac   176D  3889   3893   3901   3908
                                      3912   3914   3918   3920
X5L                            $004c   147D  2660   2696   2704   2709
                                      2717   2723   2761   2766
RemH                           $0021   109D  2154   2177   2191   2192
                                      2213   2225   2236   2522
RemL                           $0020   108D  2153   2175   2188   2189
                                      2212   2222   2234   2524
ROWS                           $0019   173D   546    548    626    709
                                      3987   3990   4178   4715
TAP                            $00ae   177D  3890   3895   3897   3899
                                      3903   3913   3922
X4H                            $004b   146D  1745   2867   2870   2872
                                      2880   2881   2903
z_frame_ptr                    $002d   120D   669   1643   1667   2353
                                      2409   4447   4616
Resident_Pages                 $0022   110D   687    732    758   2932
                                      2943   2980   2991
CR                             $000d    50D  3497   3566   3849   3877
                                      4033   4413   4990
RAM_BA                         $000d    87D  2927   2948   2975   2996
                                      4793   4804   4805
Cursor_Row                     $0055   157D   514    553    564   3985
                                      3991   4182
X7L                            $0050   151D  2697   2729   2738   2746
                                      2886   2908
Status_Col                     $002a   117D   670   3487   3495   3768
                                      3775   3783
Cols                           $0023   111D   549    617    720   3720
                                      3888   3911
QuotH                          $001f   107D  2145   2171   2204   2205
                                      2217   2232
QuotL                          $001e   106D  2144   2169   2201   2202
                                      2216   2231
LV2                            $0011    93D  2165   2184   2499   2501
                                      3080   3084
QDL                            $0006    77D  3090   3123   3149   3159
                                      3762   3796
X4L                            $004a   145D  1743   2869   2877   2878
                                      2901
X3L                            $0048   143D  1737   2422   2431   2465
                                      2635
MORE_Counter                   $002b   118D  3543   3544   3550   4101
                                      4292
O_SIBLING                      $0005   280D  1524   1595   1601   1605
                                      1927
O_PARENT                       $0004   279D  1543   1583   1610   1829
                                      1918
FNLEN                          $00b7   178D  4850   4851   4880   4931
X3H                            $0049   144D  1739   2419   2462   2636
Last_Row                       $0028   115D   627   3546   3924   4681
Block_Lo                       $0014    97D   752    757   4778   4797
WORD_LENGTH                    $0006   286D  2682   2689   3199   3275
WHITE                          $0001    28D  3747   4153   5021   5022
RVS                            $00c7   182D  4001   4010   4059
MEMUSS                         $00c3   181D  4160   4161   4163
REVERSE_OFF                    $0092    59D  3745   4037   4984
X7H                            $0051   152D  2739   2884   2907
X6L                            $004e   149D  2662   2667   2732
Parse_Index                    $001d   105D  2658   2735   2752
OP_Type                        $001a   103D  1078   1080   1114
Info_Pages                     $0019   102D   588    727    733
Charbuf_End                    $0017   100D  3515   3520   3533
DEL                            $0014    54D  3851   4039   4114
alphabet                       $0013    96D  3032   3042   3044
REVERSE_ON                     $0012    52D  4035   4984   4998
O_CHILD                        $0006   281D  1531   1591   1920
FNADR                          $00bb   180D  4877y  4928
CLEAR                          $0093    57D  4031   4989
Cursor_Vis                     $0056   158D  3822   3832
X6H                            $004f   150D  2656   2668
DPI                            $003d   132D  2865   2898
DPH                            $003c   131D  2641   2859
DPL                            $003b   130D  2640   2858
C_Save_Row                     $0025   113D  4698   4707
C_Save_Col                     $0024   112D  4699   4708
P_MASK                         $001f   284D  3359   3395
HOME                           $0013    53D  4029   4998
LV3                            $0012    94D  2167   2181
O_PROP                         $0007   282D  1627   3342
BLUE                           $0006    33D  5023   5024
STIME_COL                      $0006  5005D  3685   3694
CYAN                           $0003    30D  4080   4102
BLNSW                          $00cc   183D   390
ZP_END                         $005d   162D   663
STAT_SCORE                     $0034  4999D  3719
MOVES_COL                      $0016  5000D  3716
Block_Hi                       $0015    98D  4780
SCORE_COL                      $0007  5004D  3713
YELLOW                         $0007    34D  3737
V_SIZE                         $0004   285D  2892
ZV                             $0003     8D   676
RED                            $0002    29D  5025
R6510                          $0001   174D   374
BLNON                          $00cf   185
BLNCT                          $00cd   184
CURSOR_LEFT                    $009d    60
CURSOR_UP                      $0091    58
KEY_F8                         $008c    21
KEY_F6                         $008b    20
KEY_F4                         $008a    19
KEY_F2                         $0089    18
KEY_F7                         $0088    17
KEY_F5                         $0087    16
KEY_F3                         $0086    15
KEY_F1                         $0085    14
X8H                            $0053   154
X8L                            $0052   153
P3H                            $003a   129
P3L                            $0039   128
P2H                            $0038   127
P2L                            $0037   126
P1H                            $0036   125
P1L                            $0035   124
P0H                            $0034   123
P0L                            $0033   122
C_Save_Adr                     $0026   114
CURSOR_RIGHT                   $001d    56
ESC                            $001b    55
CURSOR_DOWN                    $0011    51
LT_GREY                        $000f    42
LT_BLUE                        $000e    41
LT_GREEN                       $000d    40
GREY                           $000c    39
DARKGREY                       $000b    38
PINK                           $000a    37
TAB                            $0009    49
O_SIZE                         $0009   283
BROWN                          $0009    36
ORANGE                         $0008    35
BACKSPACE                      $0008    48
GREEN                          $0005    32
PURPLE                         $0004    31
BLACK                          $0000    27
A0L/A0H                        $003e   133D   350    357y  1155y  1158y
                                      1242y  1245y  1265   1392   1402
                                      1412   1585   1589y  1598y  1607y
                                      1631y  1822   1878y  1888y  1889y
                                      1898y  1899y  1924y  1984   2005
                                      2019y  2022y  2054   2420y  2423y
                                      2432y  2442   2463y  2466y  3099
                                      3104y  3108y  3304   3313   3322
                                      3327y  3347y  3348   3351y  3354
                                      3355   3358y  3367y  3389   3390
                                      3394y  4594   4596   4603   4605
                                      4833   4894y  4897   4903   4942y
                                      4944   4950    134D   353    361
                                      1261   1263   1266   1269   1394
                                      1404   1414   1587   1812   1815
                                      1819   1987   2008   2057   2446
                                      3102   3306   3308   3310   3312
                                      3315   3319   3323   3326   3349
                                      3357   3392   4834   4899   4900
                                      4946   4947
X1L/X1H                        $0044   139D  1128   1166   1353   1363
                                      1371   1391   1456   1514   1572
                                      1593   1603   1620   1671   1680
                                      1688   1709   1729   1841   1858
                                      1869   1923   1963   2052   2092
                                      2104   2127   2168   2345   2364
                                      2394   2441   2476   2483   2490
                                      2511   2518   2535   2566y  2574y
                                      2698y  2710y  2762y  3287   4075
                                      4078y  4083y  4104y  4142y  4149y
                                      4175   4265    140D  1355   1364
                                      1373   1393   1457   1515   1573
                                      1621   1672   1681   1691   1712
                                      1730   1845   1855   1866   1966
                                      2055   2095   2107   2130   2164
                                      2170   2346   2367   2396   2444
                                      2484   2493   2513   2520   2536
                                      2597   2599   4076
Z_HEADER                       $3d00   222D   231    232    233    234
                                       235    236    237    238    239
                                       240    241    242    243    244
                                       245    246    247    248    249
                                       250    251    252    253    254
                                       255    256    257    258    259
                                       260    261    262    263    264
                                       265    266    267    268    269
                                       271    272    672    686    735
                                       736   1268   1985   1988   2007
                                      2053   2056   2445   2598   2644
                                      2934   2982   3101   3325   3344
                                      4441   4443   4489   4575   4578
                                      4599
COLS                           $0050   172D   434    435    436    437
                                       438    439    440    441    442
                                       443    444    445    446    447
                                       448    449    450    451    452
                                       453    454    455    456    457
                                       460    461    462    463    464
                                       465    466    467    468    469
                                       470    471    472    473    474
                                       475    476    477    478    479
                                       480    481    482    483    616
                                       688    707    719
X2L/X2H                        $0046   141D  1381   1401   1731   1831
                                      1840   1842   1859   1870   1917
                                      1953   1964   2009   2033   2093
                                      2105   2124   2135   2174   2416
                                      2440   2512   2591   2650y  2655y
                                      2676y  2747y  3414   3437   3442
                                       142D  1383   1403   1733   1844
                                      1846   1856   1867   1954   1967
                                      2096   2108   2123   2136   2166
                                      2176   2417   2443   2514   2592
                                      2643   2645
SCREEN                         $0800   190D   433    434    435    436
                                       437    438    439    440    441
                                       442    443    444    445    446
                                       447    448    449    450    451
                                       452    453    454    455    456
                                       457    459    460    461    462
                                       463    464    465    466    467
                                       468    469    470    471    472
                                       473    474    475    476    477
                                       478    479    480    481    482
                                       483
X0H                            $0043   138D   587    637    643    648
                                      1084   1096   1097   1145   1156
                                      1175   1212   1232   1241   1313
                                      1315   1329   1341   1374   1384
                                      1413   1476   1554   1564   1720
                                      1813   1816   1818   1936   2523
                                      2528   3591   3772
X0L                            $0042   137D   589    639    642    646
                                      1086   1094   1095   1147   1159
                                      1174   1218   1230   1244   1372
                                      1382   1411   1477   1534   1552
                                      1562   1565   1719   1821   2526
                                      3590   3771   4511   4642
A1L/A1H                        $0040   135D   351    358y  1586   1596y
                                      1606y  1611y  1613y  1919y  1928y
                                      4837   4904   4951    136D   355
                                       362    363   1588   2374   2398
                                      2403   4838   4901   4948
RAM_LO/RAM_HI                  $000b    85D  2949   2997   4513y  4645y
                                      4772     86D   502    673   2935
                                      2944   2983   2992   4482   4490
                                      4517   4572   4600   4648   4781
                                      4791   4802
CHROUT                         $329d  4026D   756   2069   2073   2079
                                      2083   2085   3464   3466   3578
                                      3746   4093   4125   4143   4150
                                      4165   4277   4519   4650   4801
Z_VAR                          $3a00   219D   220    224    225   4442
                                      4444   4446   4448   4451   4481
                                      4546   4571   4574   4577   4582
                                      4613   4615   4618
FA                             $00ba   179D   393   4350   4369   4397
                                      4457   4477   4551   4567   4631
                                      4765   4815   4871   4883   4908
                                      4922   4937   4955
IO_STATUS                      $0090   175D   750   4402   4404   4455
                                      4474   4485   4494   4512   4643
                                      4770   4773   4795   4876   4889
                                      4895   4927
LV1                            $0010    92D  2121   2131   2132   2219
                                      2224   2228   2235   2247   3596
                                      3600   3605   3610   3614   3619
                                      3624   3628
LV0                            $000f    91D  2122   2128   2129   2218
                                      2220   2227   2233   2246   3066
                                      3068   3595   3604   3609   3618
                                      3623   3632
PrintText                      $3365  4157D   678    742    747   1496
                                      3477   3553   3558   3739   3744
                                      4337   4436   4438   4503   4540
                                      4542
Scr_Adr                        $0057   159D   521    524   3821y  3830y
                                      3887   3891   3902   3909   3915
                                      3928   3957y  3960   4020y  4060y
                                      4725
DICT_WORD                      $37f8  4962D  2890   3197   3223   3233
                                      3242   3256   3261   3263   3264
                                      3266   3267   3269   3277   3279
Cursor_Col                     $0054   156D   554    565   3506   3819
                                      3828   3941   3972   3984   4017
                                      4021   4045   4058   4061   4133
NUMBER                         $002e   121D   600   2496   3603   3617
                                      3631   3638   3640   3643   3646
                                      3668   3686   3688   3695   3698
Last_Col                       $0029   116D   551    619    722   3485
                                      3507   3702   3728   3742   3779
                                      3900   3926   4062   4135   4724
Next_Instruction               $2cdf  2959D   809    837   1083   1085
                                      1137   1224   1286   1290   1296
                                      1314   2373   2383   2385
Main_True                      $24f8  1293D  1015   1518   1536   1747
                                      1761   1774   1787   1801   1833
                                      1848   1881   4431   4526
QI0                            $0003    71D   767   1335   1336   1424
                                      1431   1660   2074   2360   2366
                                      2976   2998   4450   4619
Next_Datum                     $2ca9  2912D  1937   1972   2797   2799
                                      2862   2864   2866   2868   2888
                                      2896   3154   3158
Chars_Left                     $0018   101D  2670   2703   2707   2715
                                      2721   2759   2767   4079   4105
                                      4107   4130   4152
QD0                            $0008    79D  1425   1430   1690   1965
                                      2833   2834   2845   2883   2928
                                      2950   3020   3106
Main_False                     $24ec  1283D  1517   1537   1748   1762
                                      1775   1788   1802   1834   1849
                                      1880   4586
Col_Adr                        $0059   160D   522    526    613    615
                                      3904   3910   3917   3930   3966
                                      3969   4047
QDH                            $0007    78D  3030   3134   3138   3142
                                      3148   3157   3161   3163   3165
                                      3169   3170
INTERNAL_ERROR                 $2f5b  3469D   926    927    928   1056
                                      1194   1480   1749   2469   2470
                                      4254
z_pop                          $25ad  1461D  1011   1130   1139   1455
                                      1646   1651   1658   1662   1666
                                      2542
X5H                            $004d   148D  2663   2671   2681   2686
                                      2713   2716   2722   2727   2734
                                      2765
z_stack_ptr                    $002c   119D   668   1168   1187   1191
                                      1468   1470   1644   2408   4445
                                      4614
ParNum                         $001c   104D   808   1090   1091   1117
                                      1727   1735   1741   2388   2405
                                      2588
QD1                            $0009    80D  1693   1968   2836   2846
                                      2885   2931   2942   2952   3021
                                      3110
QI1                            $0004    72D   765   1338   1339   1663
                                      2076   2357   2369   2979   2990
                                      3000
Z_Code                         $0002    70D   502    660    810    851
                                       881    901    906   1120   2070
                                      3456
Charbuf_Ptr                    $0016    99D  3501   3511   3521   3536
                                      3565   3568   3574   3580   3583
QD2                            $000a    81D  1696   1971   2838   2848
                                      2929   2945   2954   3023   3113
QI2                            $0005    73D  1344   1345   1664   2080
                                      2356   2372   2977   2993   3002
Z_Upper_Size                   $2161   499D   536   3549   3884   4100
                                      4180   4183   4291   4737
Charbuf                        $0200   166D  3502   3516   3530   3531
                                      3567   3577   4547   4581
SAP                            $00ac   176D  3889   3893   3901   3908
                                      3912   3914   3918   3920
X5L                            $004c   147D  2660   2696   2704   2709
                                      2717   2723   2761   2766
RemH                           $0021   109D  2154   2177   2191   2192
                                      2213   2225   2236   2522
RemL                           $0020   108D  2153   2175   2188   2189
                                      2212   2222   2234   2524
ROWS                           $0019   173D   546    548    626    709
                                      3987   3990   4178   4715
InfoPro                        $38ca  4991D   578    580    583    585
                                       601    737    740
Store_Byte                     $24ab  1203D   287   1945   2036   2040
                                      2063   2351   4534
Set_Screen_Pointer_X           $2170   517D  3885   3942   3953   3973
                                      3992   4691   4722
DSTATUS                        $033c   189D  4406   4414   4416   4419
                                      4503   4503   4503
COLOR                          $0286   186D   401   3738   3748   4046
                                      4080   4102   4153
TAP                            $00ae   177D  3890   3895   3897   3899
                                      3903   3913   3922
X4H                            $004b   146D  1745   2867   2870   2872
                                      2880   2881   2903
z_frame_ptr                    $002d   120D   669   1643   1667   2353
                                      2409   4447   4616
Resident_Pages                 $0022   110D   687    732    758   2932
                                      2943   2980   2991
CR                             $000d    50D  3497   3566   3849   3877
                                      4033   4413   4990
RAM_BA                         $000d    87D  2927   2948   2975   2996
                                      4793   4804   4805
Lvar_Hi                        $3a10   225D  1144   1233   1654   2378
                                      2384   2397
Lvar_Lo                        $3a00   224D  1146   1231   1652   2379
                                      2386   2395
EOP                            $3999  5031D   219    315    352    354
                                       726    729
Save_Unit                      $3824  4977D   395   4327   4456   4550
                                      4566   4630
Get_Object_X1                  $2eb5  3284D  1532   1544   1584   1830
                                      3343   3436
Store_XA                       $26e9  1716D  1989   2097   2109   2137
                                      2146   2155
Push_AY                        $2494  1178D  2354   2358   2362   2380
                                      2404   2537
Cursor_Row                     $0055   157D   514    553    564   3985
                                      3991   4182
X7L                            $0050   151D  2697   2729   2738   2746
                                      2886   2908
Status_Col                     $002a   117D   670   3487   3495   3768
                                      3775   3783
Cols                           $0023   111D   549    617    720   3720
                                      3888   3911
QuotH                          $001f   107D  2145   2171   2204   2205
                                      2217   2232
QuotL                          $001e   106D  2144   2169   2201   2202
                                      2216   2231
LV2                            $0011    93D  2165   2184   2499   2501
                                      3080   3084
QDL                            $0006    77D  3090   3123   3149   3159
                                      3762   3796
INTERR                         $397f  5013D  3473   3474   3477   3477
                                      3477
STIME                          $3957  5003D  3687   3689   3697   3699
                                      3705
Error_Beep                     $33b6  4273D  3870   4118   4138   4269
                                      4341
GLX_20                         $3322  4112D  4086   4120   4126   4139
                                      4144
GeCh_40                        $31c5  3873D  3850   3852   3858   3865
                                      3868
z_new_line                     $2fc7  3540D  1013   1448   3475   3498
                                      3524
Get_Global_Var                 $247d  1151D  1142   3663   3683   3692
                                      3770
z_opcode                       $2358   931D   856    866    884    917
                                       919
z_error_4                      $2353   928D   940    968    969    970
                                       971
Z_Call_Type                    $215d   494D  1659   1669   2344   2348
                                      2361
Z_STATUS                       $20f9   485D  3484   3725   3740   3741
                                      3777
START                          $2001   310D   312    315    315    726
                                       728
X4L                            $004a   145D  1743   2869   2877   2878
                                      2901
X3L                            $0048   143D  1737   2422   2431   2465
                                      2635
MORE_Counter                   $002b   118D  3543   3544   3550   4101
                                      4292
O_SIBLING                      $0005   280D  1524   1595   1601   1605
                                      1927
O_PARENT                       $0004   279D  1543   1583   1610   1829
                                      1918
h_flags_lo                     $3d11   246D   702    703   4590   4609
Z_STACK_LO                     $3b00   220D   221    223   1190   1471
Configname                     $398a  5016D  4823   4839   4840   4841
SAVEUNIT                       $3841  4980D  4336   4436   4436   4436
Game_Unit                      $3823  4976D   394   4349   4368   4814
File_Text                      $380a  4972D  4383   4387   4462   4556
TEXT_WORD                      $37ef  4961D  2690   2714   2720   3203
Format_Integer                 $301b  3587D   596   3664   3684   3693
Print_Formatted                $2f80  3492D  2477   2487   2500   3057
Dump_Byte                      $2f4f  3459D  2071   2075   2077   2081
Find_Property                  $2f25  3399D  1982   2001   2037   2456
Property_Size                  $2f07  3364D  2015   2060   2458   3386
Get_Object_Reg                 $2eb7  3290D  1592   1602   1628   1921
Enco_20                        $2e1d  3197D  3211   3218   3247   3252
Get_Packed_Char                $2dcf  3131D  3033   3060   3067   3081
DeTe_40                        $2d6f  3057D  3037   3049   3055   3069
Parse_20                       $2b58  2667D  2705   2718   2728   2753
CMP_A0_X0                      $276a  1805D  1759   1772   1785   1799
z_je_f                         $271b  1748D  1736   1742   1744   1746
z_ret                          $2686  1640D   992   1356   1365   1458
Store_AX                       $24ad  1209D  1673   1860   1871   2023
Put_Var                        $248a  1163D  1555   1566   1907   2543
Get_Operand                    $241d  1065D   880    900    905   1112
z_error_1                      $2418  1056D  1035   1037   1039   1043
L_Encode_A                     $2153   486D  3221   3225   3235   3244
FNLEN                          $00b7   178D  4850   4851   4880   4931
X3H                            $0049   144D  1739   2419   2462   2636
Last_Row                       $0028   115D   627   3546   3924   4681
Block_Lo                       $0014    97D   752    757   4778   4797
WORD_LENGTH                    $0006   286D  2682   2689   3199   3275
WHITE                          $0001    28D  3747   4153   5021   5022
h_config                       $3d01   232D   691    700   3784
Z_STACK_HI                     $3c00   221D   222   1188   1473
FG_Color                       $3992  5021D   400   3809   3811
Win_Top                        $3963  5007D  4181   4680   4690
SCORE                          $393a  5002D  3671   3705   3724
PRE_STATUS                     $3937  4998D  3739   3739   3739
BLANKS                         $392b  4996D  3558   3558   3558
InfoClr                        $38c9  4990D   744    745    746
BITSHIFTER                     $38b0  4989D   742    742    742
NOSTORY                        $38a5  4986D   678    678    678
EOS                            $3887  4985D  1496   1496   1496
MORE                           $387f  4984D  3553   3553   3553
LOADFILE                       $386d  4983D  4542   4542   4542
LOADUNIT                       $385b  4982D  4540   4540   4540
SAVEFILE                       $384e  4981D  4438   4438   4438
PRESSRET                       $3825  4979D  4334   4335   4336
Load_Page                      $36ac  4757D   674    749   4794
Restore_Cursor                 $367b  4704D  3557   3559   3801
ASCII_Hex                      $3646  4653D   577    582   3461
Read_Block                     $3631  4638D  4573   4595   4604
Close_Save_File                $3621  4627D  4499   4504   4623
WG_Err                         $352f  4501D  4475   4486   4495
Empty_Keyboard_Queue           $33c8  4296D  3551   4300   4338
Return_Screen                  $326d  3979D  4034   4064   4290
Clear_Screen                   $323d  3947D   406   4032   4289
z_show_status                  $3122  3752D  1014   2583   3548
Print_Buffer                   $3005  3571D  2315   2584   4174
Get_Attr_Addr                  $2f36  3423D  1877   1887   1896
Decode_Text                    $2d38  3026D  1428   1697   3117
DiSe_20                        $2c7a  2883D  2873   2902   2904
Parse_60                       $2bde  2746D  2737   2740   2751
z_call_s                       $29a9  2328D   965    989   1023
z_call_n                       $29a5  2321D   966   1048   1049
Divide_Signed                  $2912  2158D  2143   2152   2521
X2_TO_X0                       $2560  1378D  1771   1798   1906
z_rtrue                        $2544  1349D  1002   1320   1449
Store_X0                       $24b1  1221D  1704   1721   2529
Store_Zero                     $24a9  1197D  1990   2041   2305
Get_Var_X1L                    $245b  1125D  1551   1561   1703
z_execute                      $2334   910D   857    867    885
Z_Arg_Count                    $215b   492D  1647   2402   2407
L_Encode_Y                     $2154   487D  3220   3246   3250
RVS                            $00c7   182D  4001   4010   4059
MEMUSS                         $00c3   181D  4160   4161   4163
REVERSE_OFF                    $0092    59D  3745   4037   4984
X7H                            $0051   152D  2739   2884   2907
X6L                            $004e   149D  2662   2667   2732
Parse_Index                    $001d   105D  2658   2735   2752
OP_Type                        $001a   103D  1078   1080   1114
Info_Pages                     $0019   102D   588    727    733
Charbuf_End                    $0017   100D  3515   3520   3533
DEL                            $0014    54D  3851   4039   4114
alphabet                       $0013    96D  3032   3042   3044
REVERSE_ON                     $0012    52D  4035   4984   4998
O_CHILD                        $0006   281D  1531   1591   1920
h_flags_hi                     $3d10   245D  4588   4611
h_dynamic_size_hi              $3d0e   243D  4491   4601
h_objects_lo                   $3d0b   240D  2004   3321
h_objects_hi                   $3d0a   239D  2006   3324
h_dictionary_lo                $3d09   238D  2638   2794
h_dictionary_hi                $3d08   237D  2639   2795
CONFIG_END                     $3999  5028D  4835   4836
CONFIG_START                   $3992  5020D  4831   4832
ConfigDel                      $3987  5015D  4820   4823
File_Buf                       $3809  4971D  4379   4380
Unit_Text                      $3806  4969D  4324   4325
Unit_Buf                       $3805  4968D  4321   4322
Tokenizer_Flag                 $3804  4965D  2586   2736
SaFi_20                        $37c8  4942D  4949   4952
LoFi_60                        $3791  4907D  4891   4896
LoFi_20                        $3776  4893D  4902   4905
Prep_Config                    $3719  4828D  4849   4858
LoSt_10                        $36db  4794D  4803   4807
Save_Cursor                    $3673  4694D  3552   3757
Select_Text_Window             $3660  4676D   743   3749
Restore_Game                   $3564  4537D  4525   4532
Write_Block                    $3541  4507D  4484   4493
File_Dialog                    $343e  4376D  4439   4543
Unit_Dialog                    $33de  4318D  4437   4541
DeUn_20                        $33db  4313D  4309   4311
Reset_Screen                   $33bc  4286D   768   4585
goli_10                        $3308  4093D  4089   4091
Got_Line                       $32e4  4070D  4323   4381
CHRO_80                        $32d2  4058D  4053   4055
ClSc_20                        $325a  3966D  3968   3971
ClSc_10                        $324a  3957D  3959   3962
GeCh_30                        $31bf  3870D  3854   3861
GeCh_10                        $3196  3847D  3848   3871
Get_Character                  $3191  3836D  4112   4339
PrSc_20                        $30ed  3724D  3706   3729
Status_Number                  $3085  3653D  3714   3717
Next_Property                  $2f10  3377D  2039   3417
First_Property                 $2ee5  3331D  2035   3413
Enco_40                        $2e43  3220D  3214   3216
Enco_35                        $2e37  3213D  3207   3209
DeTe_10                        $2d3c  3031D  3058   3127
Decode_YX                      $2d30  3015D  1574   1636
ZSCII_2                        $2d15  3010D  3048   3227
NEIN_80                        $2d12  3003D  2999   3001
NEIN_10                        $2cf6  2989D  2978   2981
NEDA_80                        $2cdc  2955D  2951   2953
NEDA_10                        $2cc0  2941D  2930   2933
DiSe_50                        $2c92  2896D  2891   2899
Set_Data_AY                    $2c40  2842D  2796   2860
SkDa_Ret                       $2c3f  2839D  2835   2837
Sep_Std                        $2c26  2809D  2701   2780
SeDi_10                        $2c19  2799D  2793   2803
Sep_All                        $2c03  2772D  2711   2763
SkSu_Ret                       $2c02  2769D  2760   2764
Parse_55                       $2bb9  2727D  2708   2712
Parse_45                       $2b95  2707D  2687   2702
zread_10                       $2b0d  2595D  2590   2593
LCX1_20                        $2af1  2575D  2570   2572
X1_PLUS_X2_TO_A0               $2a42  2436D  2418   2430
Prep_Mult_Div                  $2990  2241D  2120   2215
Negate_Quot                    $2950  2196D  2173   2183
z_test_f                       $27a2  1849D  1843   1847
z_je_t                         $2718  1747D  1734   1740
z_not                          $26e0  1707D   996   1047
zro_10                         $2658  1601D  1594   1604
z_remove_obj                   $2635  1577D   990   1916
z_dec                          $2620  1558D   987   1783
z_inc                          $2614  1548D   986   1796
quit_20                        $25dc  1498D   679   1499
z_quit                         $25c6  1483D  1012   3478
z_print                        $2584  1418D  1004   1447
X2_TO_A0                       $2572  1398D  1758   1784
z_rfalse                       $254e  1359D  1003   1318
Branch_XA                      $2525  1323D  1316   1682
Get_Global_Var_Addr            $24d3  1249D  1154   1240
Store_Object                   $24ab   287D  1533   1545
Push_X0                        $2490  1171D  1131   1225
GeVa_10                        $246d  1141D  1129   1138
Load_4_Operands                $2449  1102D   850   1119
JSRMOD                         $2342   921D   918    920
z_restart                      $2203   653D   408   1009
STTS_10                        $2202   649D   645    647
Screen_Setup                   $21d2   609D   399    667
Info_Print                     $219e   569D   731    738
Set_Screen_Pointer             $216e   511D   555   4186
Sep_Std_List                   $2155   491D  2817   2818
Set_Mode_80                    $20b2   412D   398    763
MEGA_Setup                     $2066   370D   342    366
ReLoop                         $2052   357D   360    365
FNADR                          $00bb   180D  4877y  4928
CLEAR                          $0093    57D  4031   4989
Cursor_Vis                     $0056   158D  3822   3832
X6H                            $004f   150D  2656   2668
DPI                            $003d   132D  2865   2898
DPH                            $003c   131D  2641   2859
DPL                            $003b   130D  2640   2858
C_Save_Row                     $0025   113D  4698   4707
C_Save_Col                     $0024   112D  4699   4708
P_MASK                         $001f   284D  3359   3395
HOME                           $0013    53D  4029   4998
LV3                            $0012    94D  2167   2181
O_PROP                         $0007   282D  1627   3342
BLUE                           $0006    33D  5023   5024
STIME_COL                      $0006  5005D  3685   3694
CYAN                           $0003    30D  4080   4102
h_font_height                  $3d27   263D   713
h_font_width                   $3d26   262D   712
h_screen_height_lo             $3d25   261D   710
h_screen_height_hi             $3d24   260D   706
h_screen_width_lo              $3d23   259D   708
h_screen_width_hi              $3d22   258D   705
h_screen_cols                  $3d21   257D   689
h_interpreter_version          $3d1f   255D   717
h_interpreter_number           $3d1e   254D   715
h_file_size_lo                 $3d1b   251D   640
h_file_size_hi                 $3d1a   250D   638
h_abbreviations_lo             $3d19   249D  3098
h_abbreviations_hi             $3d18   248D  3100
h_globals_lo                   $3d0d   242D  1264
h_globals_hi                   $3d0c   241D  1267
h_start_pc_lo                  $3d07   236D   766
h_start_pc_hi                  $3d06   235D   764
h_version                      $3d00   231D   675
BG_Color                       $3995  5024D   402
BO_Color                       $3994  5023D   404
Win_Bot                        $3964  5008D  4682
InfoEnd                        $392b  4994D   746
InfoSto                        $390a  4993D   740
InfoSta                        $38ea  4992D   737
Location_Length                $3803  4964D  3776
SaFi_40                        $37d3  4947D  4945
SaFi_10                        $37af  4928D  4932
Save_File                      $37a1  4915D  4852
LoFi_40                        $3785  4900D  4898
LoFi_30                        $3779  4894D  4890
LoFi_10                        $3754  4877D  4881
Load_File                      $3746  4864D  4859
Load_Config                    $373f  4855D   397
Save_Config                    $3732  4845D  1486
DeCo_10                        $370b  4820D  4824
Delete_Config                  $36fc  4811D  4848
LoSt_90                        $36f9  4808D  4796
LoSt_20                        $36ed  4802D  4799
Load_Story                     $36d3  4785D   761
LoPa_30                        $36d0  4781D  4779
LoPa_20                        $36c7  4777D  4774
LoPa_10                        $36ba  4771D  4776
asts_01                        $36a4  4750D  4752
ASCII_TS                       $36a1  4742D  3472
EUW_10                         $3695  4734D  4738
ClRo_10                        $368d  4725D  4727
Erase_Row                      $3686  4719D  4735
Select_Status_Window           $366b  4686D  3736
Hex_12                         $365f  4673D  4671
Hex_11                         $3653  4666D  4664
ReBl_10                        $3637  4644D  4647
RG_07                          $3613  4618D  4621
RG_06                          $35f8  4604D  4606
RG_77                          $35e7  4595D  4597
RG_05                          $35db  4588D  4579
RG_04                          $35cc  4581D  4584
RG_03                          $35ca  4580D  4576
RG_20                          $35a3  4562D  4558
RG_10                          $3596  4556D  4561
RG_02                          $357e  4546D  4549
z_restore                      $3556  4522D  1008
WrBl_10                        $3547  4513D  4516
WG_50                          $351f  4493D  4497
WG_40                          $350d  4484D  4488
WG_30                          $34ec  4469D  4464
WG_20                          $34df  4462D  4467
WG_10                          $34c5  4450D  4453
Save_Game                      $3495  4434D  4430
z_save                         $348f  4427D  1007
RDS_30                         $347d  4413D  4405
RDS_20                         $347a  4412D  4408
RDS_10                         $3467  4403D  4411
Read_Disk_Status               $3457  4393D  4502
FiDi_20                        $3453  4388D  4385
FiDi_10                        $3447  4383D  4389
Close_Story                    $342e  4365D  4808
Open_Story                     $340a  4346D   671
wfret_99                       $3409  4343D  4340
wfret_10                       $33fe  4339D  4342
Wait_for_Return                $33f2  4331D   762
DeUn_10                        $33d5  4310D  4307
Decode_Unit                    $33ce  4304D  4326
Click                          $33bb  4280D  4267
z_sound_effect                 $33ad  4262D  1044
z_extension                    $33a7  4250D  1016
z_erase_window                 $33a6  4245D  1036
z_output_stream                $33a5  4235D  1042
z_set_cursor                   $33a4  4226D  1038
z_buffer_mode                  $33a3  4221D  1041
z_set_text_style               $33a2  4208D  1040
Sund_10                        $339e  4204D  4202
z_set_window                   $3399  4191D  1034
split_err                      $3398  4188D  4179
split_20                       $3394  4186D  4184
split_10                       $3380  4178D  4176
z_split_window                 $3377  4172D  1033
PrTe_B                         $3376  4169D  4164
PrTe_A                         $336b  4163D  4168
GLX_90                         $3356  4148D  4113
GLX_70                         $334e  4141D  4136
GLX_50                         $3348  4138D  4132
GLX_45                         $3341  4133D  4131
GLX_40                         $333b  4130D  4115
GLX_30                         $3335  4124D  4117
GLX_10                         $3322  4108D  4106
Get_Line_X1                    $330e  4097D  2601
goli_01                        $32f5  4082D  4094
CHRO_90                        $32e1  4065D  4063
CHRO_20                        $32cc  4054D  4051
ScDe_Ret                       $329b  4022D  4018
Screen_Del                     $3290  4014D  4040
Screen_Reverse_On              $328b  4006D  4036
Screen_Reverse_Off             $3286  3997D  4038
ReSc_10                        $327f  3991D  3988
Home_Screen                    $3233  3936D  4030
SMW_30                         $3226  3927D  3932
SMW_20                         $31f2  3901D  3906
SMW_10                         $31ef  3900D  3925
Scroll_Main_Window             $31ce  3881D  3989
GeCh_24                        $31bb  3867D  3863
GeCh_22                        $31af  3860D  3856
Cursor_Off                     $3186  3826D  3874
Cursor_On                      $317d  3817D  3846
FiCo_10                        $3171  3809D  3813
zss_90                         $3164  3795D  3799
zss_40                         $315f  3790D  3788
zss_30                         $315c  3789D  3786
zss_20                         $3143  3777D  3780
zss_10                         $3127  3762D  3765
Print_Status                   $30fa  3733D  3790
PrSc_10                        $30eb  3723D  3721
Print_Score                    $30d5  3709D  3787
Print_Time                     $30a1  3679D  3789
StNu_20                        $309b  3673D  3670
StNu_10                        $3091  3668D  3675
FORINT_06                      $3084  3650D  3645
FORINT_05                      $3077  3643D  3649
FORINT_04                      $3068  3635D  3637
FORINT_03                      $3052  3622D  3630
FORINT_02                      $303a  3608D  3616
FORINT_01                      $3022  3594D  3602
Format_XA                      $301f  3592D  2494
PrBu_Ret                       $301a  3584D  3575
PrBu_10                        $300b  3577D  3581
Terminate_Buffer               $2ffc  3562D  3547
znl_10                         $2fe7  3554D  3556
PrFo_50                        $2fbf  3533D  3528
PrFo_45                        $2fb8  3530D  3535
PrFo_40                        $2fab  3521D  3517
PrFo_35                        $2fa1  3516D  3519
PrFo_30                        $2f9d  3514D  3508
PrFo_25                        $2f9c  3512D  3500
PTS_01                         $2f7f  3488D  3486
Print_To_Status                $2f76  3481D  3496
Dump_Code                      $2f4d  3453D  3476
gaa_02                         $2f49  3448D  3446
gaa_01                         $2f48  3447D  3449
FIPR_30                        $2f35  3420D  3416
FIPR_20                        $2f34  3419D  3415
FIPR_10                        $2f28  3414D  3418
NePr_20                        $2f1e  3393D  3391
FiPr_10                        $2f02  3358D  3356
GOA_02                         $2ed3  3320D  3318
GOA_01                         $2ecc  3316D  3314
Enco_80                        $2e87  3256D  3276
Enco_70                        $2e83  3254D  3200
Enco_60                        $2e7b  3249D  3228
Enco_50                        $2e54  3227D  3230
Enco_30                        $2e26  3203D  3194
Enco_10                        $2e1b  3196D  3204
Encode                         $2e15  3180D  2730
GPC_Ret                        $2e14  3177D  3137
GPC_20                         $2def  3154D  3135
GPC_10                         $2de5  3147D  3139
DeTe_65                        $2dc4  3122D  3126
DeTe_60                        $2d9b  3090D  3093
DeTe_55                        $2d87  3073D  3039
DeTe_50                        $2d75  3060D  3050
DeTe_35                        $2d6d  3056D  3053
DeTe_30                        $2d65  3052D  3046
DeTe_25                        $2d57  3044D  3041
DeTe_20                        $2d4b  3038D  3035
DeTe_15                        $2d40  3033D  3043
Swap_Ret                       $2d2f  3012D  3034
NEIN_50                        $2d05  2997D  2984
NEDA_50                        $2ccf  2949D  2936
DiSe_70                        $2ca4  2907D  2871
DiSe_30                        $2c84  2888D  2893
Dictionary_Search              $2c49  2852D  2731
Skip_Data                      $2c32  2826D  2863
SeSt_Ret                       $2c31  2823D  2819
SeSt_10                        $2c28  2818D  2821
SeDi_Ret                       $2c25  2806D  2781
SeDi_20                        $2c24  2805D  2801
Sep_Dict                       $2c08  2784D  2699
SkSu_10                        $2bf1  2761D  2768
Skip_Surplus                   $2bed  2756D  2684
Parse_70                       $2be8  2752D  2745
Parse_50                       $2bb0  2720D  2700
Parse_40                       $2b79  2690D  2692
Parse_35                       $2b73  2686D  2683
Parse_30                       $2b6a  2681D  2672
Parse_25                       $2b64  2674D  2669
Parse_15                       $2b49  2656D  2653
Parse_10                       $2b45  2654D  2651
Parse_07                       $2b30  2640D  2637
Parse_05                       $2b2a  2638D  2634
Parse_Input                    $2b22  2611D  2605
zread_20                       $2b21  2606D  2604
z_read                         $2af5  2580D  1027
LCX1_Ret                       $2af4  2577D  2568
LCX1_10                        $2adf  2566D  2576
Lower_Case_X1                  $2add  2563D  2602
z_read_char                    $2adc  2556D  1045
z_encode_text                  $2adc  2547D  1051
z_pull                         $2ad6  2540D  1032
z_push                         $2acf  2532D  1031
zrand_1                        $2acc  2529D  2527
z_random                       $2aa8  2508D  1030
zprnu_3                        $2aa2  2502D  2498
zprnu_2                        $2a95  2496D  2504
zprnu_1                        $2a90  2494D  2485
z_print_num                    $2a7b  2480D  1029
z_print_char                   $2a76  2473D  1028
z_error11                      $2a71  2470D  2461
z_error10                      $2a6c  2469D  2457
zpupr_3                        $2a67  2465D  2459
z_put_prop                     $2a54  2451D  1026
z_storeb                       $2a3a  2427D  1025
z_storew                       $2a29  2413D  1024
call_50                        $2a16  2402D  2375
call_40                        $2a11  2398D  2389
call_30                        $29e9  2378D  2400
call_20                        $29bd  2353D  2347
call_10                        $29ba  2351D  2349
call_00                        $29ab  2344D  2325
z_set_color                    $29a1  2309D   967
z_check_argc                   $299c  2287D  1054
z_tokenize                     $299b  2276D  1050
z_print_table                  $299a  2265D  1053
z_copy_table                   $299a  2256D  1052
z_scan_table                   $299a  2252D  1046
z_error_8                      $298f  2238D  2214
DiUn_02                        $297f  2229D  2226
DiUn_01                        $2967  2216D  2230
Divide_Unsigned                $295e  2209D  2180
Divi_05                        $294f  2193D  2185
Divi_04                        $2942  2186D  2179
Divi_03                        $293e  2184D  2182
Divi_02                        $2934  2180D  2178
Divi_01                        $2927  2174D  2172
z_mod                          $2908  2149D   964
z_div                          $28fe  2140D   963
z_mul_2                        $28f4  2133D  2125
z_mul_1                        $28dd  2121D  2134
z_mul                          $28da  2112D   962
z_sub                          $28cd  2100D   961
z_add                          $28c0  2088D   960
z_get_prop_len                 $287b  2045D   985
zgnp_20                        $2878  2041D  2038
zgnp_10                        $286d  2037D  2034
z_get_next_prop                $2863  2027D   959
zgp_30                         $285e  2022D  2017
zgp_20                         $285a  2019D  2013
zgp_10                         $2854  2015D  2002
z_get_prop                     $283b  1994D   957
gepa_10                        $2838  1990D  1983
z_get_prop_addr                $2827  1975D   958
Byte_Array                     $2812  1957D  1944
Word_Array                     $280e  1948D  1935
z_loadb                        $2808  1941D   956
z_loadw                        $27fd  1932D   955
zinob_1                        $27fc  1929D  1926
z_insert_obj                   $27e2  1910D   954
z_store                        $27dc  1903D   953
z_clear_attr                   $27d2  1893D   952
z_set_attr                     $27ca  1884D   951
z_teat_t                       $27c7  1881D  1879
z_test_attr                    $27bd  1874D   950
z_and                          $27b1  1863D   949
z_or                           $27a5  1852D   948
z_test                         $278f  1837D   947
z_jin_f                        $278c  1834D  1832
z_jin                          $2780  1826D   946
cmpax_2                        $277f  1823D  1820
cmpax_1                        $2775  1818D  1814
z_inc_cf                       $2767  1802D  1800
z_inc_chk                      $2756  1791D   945
z_dec_cf                       $2753  1788D  1786
z_dec_chk                      $2745  1778D   944
z_jg_f                         $2742  1775D  1773
z_jg                           $2734  1765D   943
z_jl_f                         $2731  1762D  1760
z_jl                           $2723  1752D   942
z_error_9                      $271e  1749D  1728
z_je_2                         $270c  1741D  1738
z_je_1                         $2700  1735D  1732
z_je                           $26f0  1724D   941
z_load                         $26da  1700D   995
z_print_paddr                  $26c8  1685D   994
z_jump                         $26c1  1677D   993
zret_30                        $26c0  1674D  1670
zret_20                        $26a0  1658D  1649
zret_10                        $2693  1651D  1656
zpo_10                         $2683  1636D  1634
z_print_obj_A                  $2675  1624D  3773
z_print_obj                    $2671  1617D   991
zro_30                         $2670  1614D  1590
zro_20                         $2667  1609D  1599
z_print_addr                   $262e  1569D   988
z_dec_1                        $2629  1565D  1563
z_inc_1                        $261d  1555D  1553
z_get_parent                   $260c  1540D   984
zg_chi_f                       $2609  1537D  1535
zg_chi_1                       $25fc  1532D  1525
z_get_child                    $25fa  1528D   983
z_get_sibling                  $25f6  1521D   982
z_jz_t                         $25f3  1518D  1516
z_jz                           $25ea  1511D   981
quit_30                        $25e6  1503D  1501
quit_10                        $25cb  1491D  1494
z_error_5                      $25c1  1480D  1469
z_ret_popped                   $25a3  1452D  1010
z_print_ret                    $259a  1442D  1005
z_nop                          $2599  1436D  1006
zprin_2                        $2592  1430D  1433
z_prin_1                       $2586  1424D  1427
X0_TO_A0                       $257b  1408D  1797
X1_TO_A0                       $2569  1388D  1770
X1_TO_X0                       $2557  1368D  1757
Bran_21                        $253f  1344D  1342
Bran_20                        $252d  1334D  1332
Bran_14                        $251f  1317D  1304
Bran_13                        $2516  1313D  1310
Bran_12                        $2513  1311D  1307
Bran_11                        $2509  1305D  1300
Bran_10                        $24fd  1298D  1287
Bran_01                        $24f1  1288D  1297
GGVA_Ret                       $24eb  1270D  1289
Put_Global_Var                 $24c6  1237D  1228
stx0_01                        $24b6  1227D  1167
Store_A_X0H                    $24af  1215D  1938
z_error_6                      $24a4  1194D  1192
Get_Var_A                      $2465  1134D  1089
L4OP_20                        $2458  1120D  1113
geop_04                        $2448  1099D  1088
geop_03                        $2439  1090D  1087
geop_02                        $2434  1088D  1081
geop_01                        $242a  1084D  1082
opcodes_var                    $23d8  1020D   856
opcodes_0op                    $23b8   999D   866
opcodes_1op                    $2398   974D   884
z_error_2                      $2349   926D  1017
z_exe_1f                       $2332   907D   853
z_op_two                       $231e   888D   831
z_op_one                       $2310   870D   833
z_op_zero                      $230b   860D   835
PC_LOOP                        $22e5   771D   922
Start_50                       $22cf   761D   751
Start_40                       $22c9   757D   754
Start_30                       $22b7   749D   759
Start_20                       $223b   680D   677
Start_10                       $220b   661D   664
Story_Pages                    $21e7   631D   739
InSi_10                        $21c6   600D   605
Info_Size                      $21bd   592D   741
Get_Row_Col                    $2199   558D  4697
SRC_20                         $2192   553D   550
SRC_10                         $218c   549D   547
Set_Row_Col                    $2186   540D  4709
Window_Home                    $2181   531D  4185
Z_Underline                    $215f   496D  4204
Row_Hi                         $20e0   459D   523
Row_Lo                         $20c7   433D   520
Link                           $203b   338D   321
BLNSW                          $00cc   183D   390
ZP_END                         $005d   162D   663
STAT_SCORE                     $0034  4999D  3719
MOVES_COL                      $0016  5000D  3716
Block_Hi                       $0015    98D  4780
SCORE_COL                      $0007  5004D  3713
YELLOW                         $0007    34D  3737
V_SIZE                         $0004   285D  2892
ZV                             $0003     8D   676
RED                            $0002    29D  5025
R6510                          $0001   174D   374
h_alphabet_lo                  $3d35   272
h_alphabet_hi                  $3d34   271
h_default_fg_color             $3d2d   269
h_default_bg_color             $3d2c   268
h_strings_offset_lo            $3d2b   267
h_strings_offset_hi            $3d2a   266
h_functions_offset_lo          $3d29   265
h_functions_offset_hi          $3d28   264
h_screen_rows                  $3d20   256
h_checksum_lo                  $3d1d   253
h_checksum_hi                  $3d1c   252
h_serial                       $3d12   247
h_dynamic_size_lo              $3d0f   244
h_resident_size_lo             $3d05   234
h_resident_size_hi             $3d04   233
Filename                       $3b00   223
TB_Color                       $3996  5025
TI_Color                       $3993  5022
ConfigWri                      $3990  5017
RAMB_1                         $3972  5011
RAMB_0                         $3965  5010
Storyname                      $381f  4975
SaFi_60                        $37df  4954
Erase_Upper_Window             $3693  4731
Erase_Last_Row                 $3682  4712
z_ext_restore                  $355c  4529
z_ext_save                     $348f  4424
z_save_undo                    $33ad  4258
z_error12                      $33a8  4254
zew_20                         $33a6  4247
Set_Underline                  $339a  4197
zsw_ret                        $3399  4193
Fix_Colors                     $316f  3805
Z_Active_Font                  $29a0  2306
z_log_shift                    $299d  2292
z_set_font                     $299d  2296
zpt_40                         $299a  2273
Dump_QI                        $2893  2066
z_catch                        $25e9  1506
opcodes_ext                    $241d  1059
z_error_3                      $234e   927
DumpQI                         $2348   924
opvar_20                       $22fe   851
opvar_10                       $22fb   850
z_op_var                       $22fb   840
PC_30                          $22e5   805
Set_Screen_Rows                $21e1   622
Breakpoint                     $216d   503
Z_Copy                         $2162   502
Z_Active_Window                $2160   497
Z_Monospace                    $215e   495
Z_Buffer_Mode                  $215c   493
MODE                           $0291   188
KEYRPT                         $028a   187
BLNON                          $00cf   185
BLNCT                          $00cd   184
CURSOR_LEFT                    $009d    60
CURSOR_UP                      $0091    58
KEY_F8                         $008c    21
KEY_F6                         $008b    20
KEY_F4                         $008a    19
KEY_F2                         $0089    18
KEY_F7                         $0088    17
KEY_F5                         $0087    16
KEY_F3                         $0086    15
KEY_F1                         $0085    14
X8H                            $0053   154
X8L                            $0052   153
P3H                            $003a   129
P3L                            $0039   128
P2H                            $0038   127
P2L                            $0037   126
P1H                            $0036   125
P1L                            $0035   124
P0H                            $0034   123
P0L                            $0033   122
C_Save_Adr                     $0026   114
CURSOR_RIGHT                   $001d    56
ESC                            $001b    55
CURSOR_DOWN                    $0011    51
LT_GREY                        $000f    42
LT_BLUE                        $000e    41
LT_GREEN                       $000d    40
GREY                           $000c    39
DARKGREY                       $000b    38
PINK                           $000a    37
TAB                            $0009    49
O_SIZE                         $0009   283
BROWN                          $0009    36
ORANGE                         $0008    35
BACKSPACE                      $0008    48
GREEN                          $0005    32
PURPLE                         $0004    31
BLACK                          $0000    27
