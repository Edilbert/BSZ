              *************************************
              * BSZ = Bit Shifter's Z interpreter *
              *       for MEGA65      02-Sep-2020 *
              *************************************

              .CPU 45GS02

              ***********************
              * Commodore KEY codes *
              ***********************

0085          KEY_F1   = 133
0086          KEY_F3   = 134
0087          KEY_F5   = 135
0088          KEY_F7   = 136
0089          KEY_F2   = 137
008a          KEY_F4   = 138
008b          KEY_F6   = 139
008c          KEY_F8   = 140

              *************************
              * Commodore Color Codes *
              *************************

0000          BLACK    =  0
0001          WHITE    =  1
0002          RED      =  2
0003          CYAN     =  3
0004          PURPLE   =  4
0005          GREEN    =  5
0006          BLUE     =  6
0007          YELLOW   =  7
0008          ORANGE   =  8
0009          BROWN    =  9
000a          PINK     = 10
000b          DARKGREY = 11
000c          GREY     = 12
000d          LT_GREEN = 13
000e          LT_BLUE  = 14
000f          LT_GREY  = 15

              *************************
              * display control codes *
              *************************

0008          BACKSPACE     = $08
0009          TAB           = $09
000d          CR            = $0d
0011          CURSOR_DOWN   = $11
0012          REVERSE_ON    = $12
0013          HOME          = $13
0014          DEL           = $14
001b          ESC           = $1b
001d          CURSOR_RIGHT  = $1d
0093          CLEAR         = $93
0091          CURSOR_UP     = $91
0092          REVERSE_OFF   = $92
009d          CURSOR_LEFT   = $9d

              ********************************************************
              * Interpreter Zero page variables (occupy BASIC space) *
              ********************************************************

0002          & = $02

              ; Instruction pointer     LDZ QI0  ->  LDA (RAM_LO),Z

0002          Z_Code         .BSS 1 ; current code byte
0003          QI0            .BSS 1 ; Byte 0  pc = (QI0/QI1/QI2)
0004          QI1            .BSS 1 ; Byte 1  Floppy block low
0005          QI2            .BSS 1 ; Byte 2  Floppy block high

              ; Data pointer            LDZ QD0  ->  LDA (RAM_LO),Z

0006          QDL            .BSS 1 ; current packed data low
0007          QDH            .BSS 1 ; current packed data high
0008          QD0            .BSS 1 ; Byte 0  pc = (QD0/QD1/QD2)
0009          QD1            .BSS 1 ; Byte 1  Floppy block low
000a          QD2            .BSS 1 ; Byte 2  Floppy block high

              ; keep above variables together (block push/pull)

000b          RAM_LO         .BSS 1 ; RAM address for disk access
000c          RAM_HI         .BSS 1
000d          RAM_BA         .BSS 2 ; RAM BANK

              ; Multi purpose local variables

000f          LV0            .BSS 1
0010          LV1            .BSS 1
0011          LV2            .BSS 1
0012          LV3            .BSS 1

0013          Alphabet       .BSS 1
0014          Block_Lo       .BSS 1
0015          Block_Hi       .BSS 1
0016          C_Save_Col     .BSS 1 ; save column
0017          C_Save_Row     .BSS 1 ; save row
0018          Charbuf_Ptr    .BSS 1
0019          Charbuf_End    .BSS 1
001a          Chars_Left     .BSS 1
001b          Info_Pages     .BSS 1
001c          MORE_Counter   .BSS 1
001d          NUMBER         .BSS 5
0022          OP_Type        .BSS 2
0024          ParNum         .BSS 1
0025          Parse_Index    .BSS 1
0026          Prop_Mask      .BSS 1
0027          QuotL          .BSS 1
0028          QuotH          .BSS 1
0029          RemL           .BSS 1
002a          RemH           .BSS 1
002b          Resident_Pages .BSS 1
002c          Save_Unit      .BSS 1
002d          Status_Col     .BSS 1
002e          Upper_Size     .BSS 1 ; rows of upper window
002f          Version        .BSS 1 ; $80 = version > 3
0030          Vocab_Length   .BSS 1 ; length of packed vocab
0031          Win_Top        .BSS 1 ; upper row of active window
0032          Word_Length    .BSS 1 ; length of dictionary words
0033          z_stack_ptr    .BSS 1
0034          z_frame_ptr    .BSS 1
0035          DPL            .BSS 1 ; dictionary pointer
0036          DPH            .BSS 1
0037          DPI            .BSS 1
0038          A0L            .BSS 1 ; primary   address register
0039          A0H            .BSS 1
003a          A1L            .BSS 1 ; secondary address register
003b          A1H            .BSS 1
003c          X0L            .BSS 1 ; primary value   register
003d          X0H            .BSS 1
003e          X1L            .BSS 1 ; parameter register
003f          X1H            .BSS 1 ; X1L - X4H must be contiguous
0040          X2L            .BSS 1
0041          X2H            .BSS 1
0042          X3L            .BSS 1
0043          X3H            .BSS 1
0044          X4L            .BSS 1
0045          X4H            .BSS 1
0046          X5L            .BSS 1
0047          X5H            .BSS 1
0048          X6L            .BSS 1
0049          X6H            .BSS 1
004a          X7L            .BSS 1
004b          X7H            .BSS 1
004c          X8L            .BSS 1
004d          X8H            .BSS 1

004e          Cursor_Col     .BSS 1
004f          Cursor_Row     .BSS 1
0050          Cursor_Vis     .BSS 1
0051          Scr_Adr        .BSS 2 ; screen RAM 16 bit address
0053          Z_Mem_Ptr      .BSS 2 ; Z memory pointer
0055          Col_Adr        .BSS 4 ; colour RAM 32 bit address
0059          DICT_WORD      .BSS 6 ; packed ZSCII dictionary word

005f          ZP_END         .BSS 1


              ********************
              * system variables *
              ********************

0050          COLS        =  80
0019          ROWS        =  25
0001          R6510       = $01              ; C64 bank switching CPU port
0090          IO_STATUS   = $90              ; used by I/O routines
00ac          SAP         = $ac              ; source address pointer
00ae          TAP         = $ae              ; target address pointer
00b7          FNLEN       = $b7
00ba          FA          = $ba
00bb          FNADR       = $bb
00c3          MEMUSS      = $c3              ; string address
00c7          RVS         = $c7              ; reverse flag
00cc          BLNSW       = $cc              ; cursor blink flag
00cd          BLNCT       = $cd
00cf          BLNON       = $cf
0200          Charbuf     = $200
0286          COLOR       = $286
0288          SCNMPG      = $288             ; screen memory page for C64 mode
0314          CINV        = $314             ; kernal vector table
033c          DSTATUS     = $33c             ; 40 bytes disk status
0800          SCREEN      = $0800            ; character RAM in 80 column mode
d800          COLRAM      = $d800            ; color     RAM
d012          Raster      = $d012
d020          BorderCol   = $d020
d021          BackgCol0   = $d021
d41b          Random      = $d41b
fd30          ROM_Vectors = $fd30
fda3          Init_IO     = $fda3
ff5b          Init_Editor = $ff5b

              **********
              * Kernal *
              ******** *

ff90          SETMSG = $ff90
ff93          SECOND = $ff93
ff96          TKSA   = $ff96
ffa5          ACPTR  = $ffa5
ffa8          CIOUT  = $ffa8
ffab          UNTLK  = $ffab
ffae          UNLSN  = $ffae
ffb1          LISTEN = $ffb1
ffb4          TALK   = $ffb4
ffbd          SETNAM = $ffbd
ffe4          GETIN  = $ffe4
fff0          PLOT   = $fff0
fffc          RESET  = $fffc

              ************
              * Z arrays *
              ************

1f00          Z_STATUS    = $1f00               ; version 3
3e00          Z_VAR       = [EOP + $ff] & $ff00
3f00          Z_STACK_LO  = Z_VAR      + $100   ; keep this area together
4000          Z_STACK_HI  = Z_STACK_LO + $100
4100          Z_HEADER    = Z_STACK_HI + $100
3e00          Lvar_Lo     = Z_VAR
3e10          Lvar_Hi     = Z_VAR + $10


              ****************
              * STORY HEADER *
              ****************

4100          h_version             = Z_HEADER
4101          h_config              = Z_HEADER +   1
4104          h_resident_size_hi    = Z_HEADER +   4
4105          h_resident_size_lo    = Z_HEADER +   5
4106          h_start_pc_hi         = Z_HEADER +   6
4107          h_start_pc_lo         = Z_HEADER +   7
4108          h_dictionary_hi       = Z_HEADER +   8
4109          h_dictionary_lo       = Z_HEADER +   9
410a          h_objects_hi          = Z_HEADER +  10
410b          h_objects_lo          = Z_HEADER +  11
410c          h_globals_hi          = Z_HEADER +  12
410d          h_globals_lo          = Z_HEADER +  13
410e          h_dynamic_size_hi     = Z_HEADER +  14
410f          h_dynamic_size_lo     = Z_HEADER +  15
4110          h_flags_hi            = Z_HEADER +  16
4111          h_flags_lo            = Z_HEADER +  17
4112          h_serial              = Z_HEADER +  18
4118          h_abbreviations_hi    = Z_HEADER +  24
4119          h_abbreviations_lo    = Z_HEADER +  25
411a          h_file_size_hi        = Z_HEADER +  26 ; in words for version 1-3
411b          h_file_size_lo        = Z_HEADER +  27 ; in words for version 1-3
411c          h_checksum_hi         = Z_HEADER +  28
411d          h_checksum_lo         = Z_HEADER +  29
411e          h_interpreter_number  = Z_HEADER +  30
411f          h_interpreter_version = Z_HEADER +  31
4120          h_screen_rows         = Z_HEADER +  32
4121          h_screen_cols         = Z_HEADER +  33
4122          h_screen_width_hi     = Z_HEADER +  34
4123          h_screen_width_lo     = Z_HEADER +  35
4124          h_screen_height_hi    = Z_HEADER +  36
4125          h_screen_height_lo    = Z_HEADER +  37
4126          h_font_width          = Z_HEADER +  38
4127          h_font_height         = Z_HEADER +  39
4128          h_functions_offset_hi = Z_HEADER +  40
4129          h_functions_offset_lo = Z_HEADER +  41
412a          h_strings_offset_hi   = Z_HEADER +  42
412b          h_strings_offset_lo   = Z_HEADER +  43
412c          h_default_bg_color    = Z_HEADER +  44
412d          h_default_fg_color    = Z_HEADER +  45

4134          h_Alphabet_hi         = Z_HEADER +  52
4135          h_Alphabet_lo         = Z_HEADER +  53

              ***************
              * Print Macro *
              ***************

            MACRO Print(lab)
                      LDA #<lab
                      LDY #>lab
                      LDX #?lab
                      JSR PrintText
            ENDMAC

            MACRO ERROR(num)
                      LDA #num
                      JMP INTERNAL_ERROR
            ENDMAC

            MACRO MAC_Color(color)
                       LDA #color
                       STA COLOR
            ENDMAC

2001          START = $2001   ; *** BASIC ***  C65

2001          * = START

                        .STORE START,EOP-START,"bsz-mega65"

              ****************
              * BASIC header *
              ****************

2001 3b 20              .WORD Link
2003 e4 07              .WORD 2020      ; line number
2005 8b                 .BYTE $8b       ; IF   token
2006 c2                 .BYTE $c2       ; PEEK token
2007 28 34 34           .BYTE "(44)"
200b b2                 .BYTE $b2       ; =    token
200c 38                 .BYTE "8"
200d a7                 .BYTE $a7       ; THEN token
200e 9e                 .BYTE $9e       ; SYS  token
200f 28 32 31           .BYTE "(2112):" ; C64  start
2016 d5                 .BYTE $d5       ; ELSE token
2017 fe 02              .BYTE $fe,$02   ; BANK token
2019 30 3a              .BYTE "0:"      ; BANK argument
201b 9e                 .BYTE $9e       ; SYS  token
201c 28 38 32           .BYTE "(8253):" ; C65  start
2023 8f                 .BYTE $8f       ; REM  token
2024 20 42 49           .BYTE " BIT SHIFTER 02-SEP-20",0
203b 00 00    Link      .WORD 0         ; BASIC end marker

              ; SYS entry for MEGA65 mode

203d 4c 66 20           JMP MEGA_Setup

              ; SYS entry for C64 mode

2040 a9 41              lda #65   ; 40MHz CPU
2042 85 00              sta 0

2044 a0 00              LDY #0
2046 84 38              STY A0L
2048 84 3a              STY A1L
204a a9 25              LDA #>[EOP - $1800]
204c 85 39              STA A0H
204e a9 3d              LDA #>EOP
2050 85 3b              STA A1H

2052 b1 38    ReLoop    LDA (A0L),Y
2054 91 3a              STA (A1L),Y
2056 c8                 INY
2057 d0 f9              BNE ReLoop
2059 c6 39              DEC A0H
205b c6 3b              DEC A1H
205d a5 3b              LDA A1H
205f c9 20              CMP #$20
2061 b0 ef              BCS ReLoop
2063 4c 66 20           JMP MEGA_Setup


              *****************
              Module MEGA_Setup
              *****************

2066 78                 SEI
2067 a9 00              LDA #0              ; Configure MEGA65 memory
2069 aa                 TAX
206a a8                 TAY
206b 4b                 TAZ
206c 5c                 MAP
206d ea                 EOM

206e a9 36              LDA #$36            ; I/O & kernal
2070 85 01              STA R6510
2072 a9 41              LDA #65   ; 40 MHz
2074 85 00              STA 0

2076 20 a3 fd           JSR Init_IO
2079 20 cb 20           JSR Set_Kernal_Vectors
207c a9 04              LDA #$04            ; C64 default value
207e 8d 88 02           STA SCNMPG          ; set screen memory page
2081 20 5b ff           JSR Init_Editor

2084 a9 ff              LDA #-1             ; cursor off
2086 85 cc              STA BLNSW
2088 58                 CLI
2089 a2 08              LDX #8
208b 86 ba              STX FA
208d 8e e9 3b           STX Game_Unit
2090 86 2c              STX Save_Unit       ; default SAVE unit = GAME unit

2092 20 17 3b           JSR Load_Config
2095 20 b6 20           JSR Set_Mode_80
2098 20 df 35           JSR Screen_Setup
209b ad 3d 3d           LDA FG_Color
209e 8d 86 02           STA COLOR
20a1 ad 40 3d           LDA BG_Color
20a4 8d 21 d0           STA BackgCol0
20a7 ad 3f 3d           LDA BO_Color
20aa 8d 20 d0           STA BorderCol
20ad 20 a4 38           JSR Clear_Screen
20b0 20 90 ff           JSR SETMSG          ; disable kernal messages
20b3 4c 09 36           JMP z_restart
20b6          EndMod [MEGA_Setup] Size = 80 [$50]

              ******************
              Module Set_Mode_80
              ******************

              *         make VIC IV registers visible
              *         by using the knock sequence $47 $53

20b6 a9 47              LDA #$47
20b8 8d 2f d0           STA $d02f
20bb a9 53              LDA #$53
20bd 8d 2f d0           STA $d02f

20c0 a9 c0              LDA #$c0           ; 80 columns, fast
20c2 8d 31 d0           STA $d031
20c5 a9 26              LDA #$26           ; SCR = $0800,  CB = $0C00
20c7 8d 18 d0           STA $d018
20ca 60                 RTS
20cb          EndMod [Set_Mode_80] Size = 21 [$15]

              *************************
              Module Set_Kernal_Vectors
              *************************

20cb a0 1f              LDY #$1F          ; 16 vectors
20cd b9 30 fd _loop     LDA ROM_Vectors,Y
20d0 99 14 03           STA CINV,Y
20d3 88                 DEY
20d4 10 f7              BPL _loop
20d6 60                 RTS
20d7          EndMod [Set_Kernal_Vectors] Size = 12 [$c]

              **************
              Module PC_LOOP
              **************

              * read next instruction byte from Z-program counter
              * read optional operand bytes and call operator subroutine

20d7 a9 00              LDA #0
20d9 85 24              STA ParNum           ; reset # of operands
20db 20 5a 37           JSR Next_Instruction
20de 85 02              STA Z_Code           ; remember op code

20e0 10 39              BPL z_op_two         ; [$00 - $7f] -> codes with  2 operands
20e2 c9 b0              CMP #$b0
20e4 90 27              BCC z_op_one         ; [$80 - $af] -> codes with  1 operand
20e6 c9 c0              CMP #$c0
20e8 90 1f              BCC z_op_zero        ; [$b0 - $bf] -> codes with no operand

20ea 20 5a 37           JSR Next_Instruction ; [$c0 - $ff] -> codes with 0-4 operands

              ; max 4 operands (11223344) for version 3
              ;  or 8 operands for version > 3
              ; ---------------------------------------
              ; 00 = 16 bit constant
              ; 01 =  8 bit constant
              ; 10 = 16 bit variable
              ; 11 = no operand (end marker)

20ed a6 02              LDX Z_Code
20ef e0 fa              CPX #$fa            ; call with 8 arguments
20f1 d0 06              BNE opvar_10
20f3 20 66 22           JSR Load_8_Operands
20f6 4c fc 20           JMP opvar_20
20f9 20 54 22 opvar_10  JSR Load_4_Operands
20fc a5 02    opvar_20  LDA Z_Code
20fe c9 e0              CMP #$e0
2100 90 2d              BCC z_exe_1f        ; [$c0 - $df] -> use 2 operand table
2102 29 1f              AND #$1f            ; [$e0 - $ff] -> use variable operands
2104 18                 CLC
2105 69 40              ADC #[opcodes_var - z_opcode] >> 1
2107 d0 28              BNE z_execute       ; always

              *********
2109          z_op_zero
              *********

              ; opcodes with no operand, opcode = $b0 - $bf

2109 e9 7f              SBC #$af - [[opcodes_0op - z_opcode] >> 1] ; carry is clear
210b d0 24              BNE z_execute       ; always

              ********
210d          z_op_one
              ********

              ; opcode = 10tt cccc  opcodes with 1 operand
              ;     tt = 00 : 16 bit constant $8x
              ;     tt = 01 :  8 bit constant $9x
              ;     tt = 10 :    variable     $ax

210d 0a                 ASL A
210e 0a                 ASL A
210f 20 28 22           JSR Get_Operand
2112 a5 02              LDA Z_Code
2114 29 0f              AND #15
2116 18                 CLC
2117 69 20              ADC #[opcodes_1op - z_opcode] >> 1
2119 d0 16              BNE z_execute

              ********
211b          z_op_two
              ********

              ; opcode = 0fsc cccc  opcodes with 2 operands
              ;      f = 0 : 1st. op = short constant
              ;      f = 1 : 1st. op = variable
              ;      s = 0 : 2nd. op = short constant
              ;      s = 1 : 2nd. op = variable

211b 18                 CLC
211c 29 40              AND #$40            ; $40 if 1st. op variable
211e 69 40              ADC #$40            ; $80 if 1st. op variable
2120 20 28 22           JSR Get_Operand     ; $80 variable, $40 8 bit constant
2123 a5 02              LDA Z_Code
2125 0a                 ASL A               ; C=0
2126 29 40              AND #$40
2128 69 40              ADC #$40
212a 20 28 22           JSR Get_Operand
212d a5 02              LDA Z_Code
212f 29 1f    z_exe_1f  AND #$1f            ; fall through

              *********
2131          z_execute
              *********

              ; Input : A = index to opcode table

2131 0a                 ASL A               ; convert to word index
2132 a8                 TAY
2133 b9 4f 21           LDA z_opcode,Y
2136 8d 40 21           STA JSRMOD+1
2139 b9 50 21           LDA z_opcode+1,Y
213c 8d 41 21           STA JSRMOD+2
213f 20 ff ff JSRMOD    JSR $ffff
2142 4c d7 20           JMP PC_LOOP
2145          EndMod [PC_LOOP] Size = 110 [$6e]

              z_error_2 ERROR(2)
2145 a9 02              LDA #2
2147 4c dc 2f           JMP INTERNAL_ERROR

              z_error_4 ERROR(4)
214a a9 04              LDA #4
214c 4c dc 2f           JMP INTERNAL_ERROR


              ********
214f          z_opcode
              ********

              ; $00-$1f : byte const + short const
              ; $20-$3f : byte const + variable
              ; $40-$5f : variable   + byte const
              ; $60-$7f : variable   + variable
              ; $c0-$df : 0-4 arguments defined in follow up byte

214f 4a 21              .WORD z_error_4       ; 00 20 40 60   c0
2151 7f 25              .WORD z_je            ; 01 21 41 61   c1
2153 b2 25              .WORD z_jl            ; 02 22 42 62   c2
2155 c3 25              .WORD z_jg            ; 03 23 43 63   c3
2157 d4 25              .WORD z_dec_chk       ; 04 24 44 64   c4
2159 e5 25              .WORD z_inc_chk       ; 05 25 45 65   c5
215b 0f 26              .WORD z_jin           ; 06 26 46 66   c6
215d 28 26              .WORD z_test          ; 07 27 47 67   c7
215f 3e 26              .WORD z_or            ; 08 28 48 68   c8
2161 4a 26              .WORD z_and           ; 09 29 49 69   c9
2163 56 26              .WORD z_test_attr     ; 0a 2a 4a 6a   ca
2165 63 26              .WORD z_set_attr      ; 0b 2b 4b 6b   cb
2167 6b 26              .WORD z_clear_attr    ; 0c 2c 4c 6c   cc
2169 75 26              .WORD z_store         ; 0d 2d 4d 6d   cd
216b 7b 26              .WORD z_insert_obj    ; 0e 2e 4e 6e   ce
216d c5 26              .WORD z_loadw         ; 0f 2f 4f 6f   cf
216f d0 26              .WORD z_loadb         ; 10 30 50 70   d0
2171 03 27              .WORD z_get_prop      ; 11 31 51 71   d1
2173 ef 26              .WORD z_get_prop_addr ; 12 32 52 72   d2
2175 2b 27              .WORD z_get_next_prop ; 13 33 53 73   d3
2177 6b 27              .WORD z_add           ; 14 34 54 74   d4
2179 78 27              .WORD z_sub           ; 15 35 55 75   d5
217b 85 27              .WORD z_mul           ; 16 36 56 76   d6
217d a9 27              .WORD z_div           ; 17 37 57 77   d7
217f b3 27              .WORD z_mod           ; 18 38 58 78   d8
2181 fb 29              .WORD z_call_s        ; 19 39 59 79   d9
2183 f7 29              .WORD z_call_n        ; 1a 3a 5a 7a   da
2185 d9 29              .WORD z_set_color     ; 1b 3b 5b 7b   db
2187 4a 21              .WORD z_error_4       ; 1c 3c 5c 7c   dc
2189 4a 21              .WORD z_error_4       ; 1d 3d 5d 7d   dd
218b 4a 21              .WORD z_error_4       ; 1e 3e 5e 7e   de
218d 4a 21              .WORD z_error_4       ; 1f 3f 5f 7f   df

              ; ***********
218f            opcodes_1op
              ; ***********

              ; $80-$8f : word constant
              ; $90-$9f : byte constant
              ; $a0-$af : variable

218f 03 24              .WORD z_jz            ; 80 90 a0
2191 0f 24              .WORD z_get_sibling   ; 81 91 a1
2193 19 24              .WORD z_get_child     ; 82 92 a2
2195 33 24              .WORD z_get_parent    ; 83 93 a3
2197 43 27              .WORD z_get_prop_len  ; 84 94 a4
2199 41 24              .WORD z_inc           ; 85 95 a5
219b 49 24              .WORD z_dec           ; 86 96 a6
219d 51 24              .WORD z_print_addr    ; 87 97 a7
219f fb 29              .WORD z_call_s        ; 88 98 a8
21a1 58 24              .WORD z_remove_obj    ; 89 99 a9
21a3 ec 24              .WORD z_print_obj     ; 8a 9a aa
21a5 0b 25              .WORD z_ret           ; 8b 9b ab
21a7 46 25              .WORD z_jump          ; 8c 9c ac
21a9 4d 25              .WORD z_print_paddr   ; 8d 9d ad
21ab 69 25              .WORD z_load          ; 8e 9e ae
21ad f7 29    ZV8F      .WORD z_call_n        ; 8f 9f af  V3 = z_not

              ; ***********
21af            opcodes_0op
              ; ***********

21af 6c 23              .WORD z_rtrue         ; b0
21b1 76 23              .WORD z_rfalse        ; b1
21b3 ac 23              .WORD z_print         ; b2
21b5 c2 23              .WORD z_print_ret     ; b3
21b7 c1 23              .WORD z_nop           ; b4
21b9 7d 33              .WORD z_save          ; b5
21bb 49 34              .WORD z_restore       ; b6
21bd 09 36              .WORD z_restart       ; b7
21bf cb 23              .WORD z_ret_popped    ; b8
21c1 02 24    ZVB9      .WORD z_catch         ; b9 V3 = z_pop
21c3 ee 23              .WORD z_quit          ; ba
21c5 71 30              .WORD z_new_line      ; bb
21c7 90 37              .WORD z_show_status   ; bc
21c9 20 23              .WORD Main_True       ; bd z_verify
21cb b8 32              .WORD z_extension     ; be
21cd 45 21              .WORD z_error_2       ; bf

              ; ***********
21cf            opcodes_var
              ; ***********

21cf fb 29              .WORD z_call_s         ; e0 V3 call with 0-3 args
21d1 92 2a              .WORD z_storew         ; e1
21d3 a2 2a              .WORD z_storeb         ; e2
21d5 bc 2a              .WORD z_put_prop       ; e3
21d7 93 2b              .WORD z_read           ; e4
21d9 de 2a              .WORD z_print_char     ; e5
21db e3 2a              .WORD z_print_num      ; e6
21dd 10 2b              .WORD z_random         ; e7
21df 34 2b              .WORD z_push           ; e8
21e1 3b 2b              .WORD z_pull           ; e9
21e3 d8 39              .WORD z_split_window   ; ea
21e5 d6 31              .WORD z_set_window     ; eb
21e7 0f 22              .WORD z_error_1        ; ec z_call_s 0-8 args
21e9 9e 32              .WORD z_erase_window   ; ed
21eb 0f 22              .WORD z_error_1        ; ee z_erase_line
21ed 3a 32              .WORD z_set_cursor     ; ef
21ef 0f 22              .WORD z_error_1        ; f0 z_get_cursor
21f1 20 32              .WORD z_set_text_style ; f1
21f3 31 32              .WORD z_buffer_mode    ; f2
21f5 4f 32              .WORD z_output_stream  ; f3
21f7 0f 22              .WORD z_error_1        ; f4 z_input_stream
21f9 e9 32              .WORD z_sound_effect   ; f5
21fb 86 2b              .WORD z_read_char      ; f6
21fd 49 28              .WORD z_scan_table     ; f7
21ff 6f 25              .WORD z_not            ; f8
2201 f7 29              .WORD z_call_n         ; f9 z_call_n 0-3 args
2203 f7 29              .WORD z_call_n         ; fa z_call_n 0-8 args
2205 94 29              .WORD z_tokenize       ; fb
2207 41 2b              .WORD z_encode_text    ; fc
2209 ce 28              .WORD z_copy_table     ; fd
220b 5b 29              .WORD z_print_table    ; fe
220d af 29              .WORD z_check_argc     ; ff

              z_error_1 ERROR(1)
220f a9 01              LDA #1
2211 4c dc 2f           JMP INTERNAL_ERROR


              ; ***********
2214            opcodes_ext
              ; ***********

2214 75 33              .WORD z_ext_save       ; 00
2216 4f 34              .WORD z_ext_restore    ; 01
2218 bd 29              .WORD z_log_shift      ; 02
221a de 32              .WORD z_error12        ; 03 z_art_shift,
221c d6 29              .WORD z_set_font       ; 04
221e de 32              .WORD z_error12        ; 05 z_draw_picture,
2220 de 32              .WORD z_error12        ; 06 z_picture_data,
2222 de 32              .WORD z_error12        ; 07 z_erase_picture,
2224 de 32              .WORD z_error12        ; 08 z_set_margins,
2226 e3 32              .WORD z_save_undo      ; 09

              ;    0a z_restore_undo,
              ;    0b z_print_unicode,
              ;    0c z_check_unicode,
              ;    0d __illegal__,
              ;    0e __illegal__,
              ;    0f __illegal__,
              ;    10 z_move_window,
              ;    11 z_window_size,
              ;    12 z_window_style,
              ;    13 z_get_wind_prop,
              ;    14 z_scroll_window,
              ;    15 z_pop_stack,
              ;    16 z_read_mouse,
              ;    17 z_mouse_window,
              ;    18 z_push_stack,
              ;    19 z_put_wind_prop,
              ;    1a z_print_form,
              ;    1b z_make_menu,
              ;    1c z_picture_table


              ; ***********
2228            Get_Operand
              ; ***********

              ; Input: (A) = tt00 0000
              ; ----------------------
              ; tt = 00 : 16 bit constant
              ; tt = 01 :  8 bit constant
              ; tt = 10 :    variable
              ; tt = 11 :    none

              ; Output: Store 1st. in X1, 2nd. in X2, etc. until X8
              ;         Overflow set if none

2228 85 22              STA OP_Type
222a a9 00              LDA #0
222c 24 22              BIT OP_Type
222e 30 0f              BMI geop_02
2230 70 03              BVS geop_01
2232 20 5a 37           JSR Next_Instruction ; 00 -> word
2235 85 3d    geop_01   STA X0H
2237 20 5a 37           JSR Next_Instruction ; 01 -> byte
223a 85 3c              STA X0L
223c 4c 44 22           JMP geop_03
223f 70 12    geop_02   BVS geop_04          ; 11 -> end
2241 20 8d 22           JSR Get_Var_A        ; 10 -> variable
2244 e6 24    geop_03   INC ParNum
2246 a5 24              LDA ParNum
2248 0a                 ASL A
2249 aa                 TAX
224a a5 3c              LDA X0L
224c 95 3c              STA X0L,X
224e a5 3d              LDA X0H
2250 95 3d              STA X0H,X
2252 b8                 CLV
2253 60       geop_04   RTS

              ; ***************
2254            Load_4_Operands
              ; ***************

              ; max 4 operands (2 type bits)
              ; ----------------------------
              ; 00 = 16 bit constant
              ; 01 =  8 bit constant
              ; 10 = 16 bit variable
              ; 11 = no operand (end marker)

2254 20 28 22           JSR Get_Operand
2257 70 0a              BVS L4OP_20         ; V=1 -> end of args
2259 a5 22              LDA OP_Type
225b 0a                 ASL A
225c 0a                 ASL A               ; shift next 2 type bits to 7 and 6
225d a6 24              LDX ParNum
225f e0 04              CPX #4
2261 90 f1              BCC Load_4_Operands
2263 a5 02    L4OP_20   LDA Z_Code
2265 60                 RTS

              ; ***************
2266            Load_8_Operands
              ; ***************

              ; max 8 operands (2 type bits)
              ; ----------------------------
              ; 00 = 16 bit constant
              ; 01 =  8 bit constant
              ; 10 = 16 bit variable
              ; 11 = no operand (end marker)

2266 48                 PHA                  ; 1st. type byte
2267 20 5a 37           JSR Next_Instruction ; 2nd. type byte
226a 85 23              STA OP_Type+1
226c 68                 PLA
226d 20 28 22 L8OP_10   JSR Get_Operand
2270 70 0e              BVS L8OP_20         ; V=1 -> end of args
2272 a5 22              LDA OP_Type
2274 06 23              ASL OP_Type+1
2276 2a                 ROL A
2277 06 23              ASL OP_Type+1
2279 2a                 ROL A
227a a6 24              LDX ParNum
227c e0 08              CPX #8
227e 90 ed              BCC L8OP_10
2280 a5 02    L8OP_20   LDA Z_Code
2282 60                 RTS

              ; ***********
2283            Get_Var_X1L
              ; ***********

2283 a5 3e              LDA X1L
2285 d0 0e              BNE GeVa_10
2287 20 d5 23           JSR z_pop
228a 4c b8 22           JMP Push_X0

              ; *********
228d            Get_Var_A
              ; *********

228d 20 5a 37           JSR Next_Instruction
2290 d0 03              BNE GeVa_10
2292 4c d5 23           JMP z_pop

2295 c9 10    GeVa_10   CMP #16
2297 b0 0c              BCS Get_Global_Var
2299 aa                 TAX
229a bd 10 3e           LDA Lvar_Hi,X
229d 85 3d              STA X0H
229f bd 00 3e           LDA Lvar_Lo,X
22a2 85 3c              STA X0L
22a4 60                 RTS

              ; **************
22a5            Get_Global_Var
              ; **************

22a5 20 fb 22           JSR Get_Global_Var_Addr
22a8 b1 38              LDA (A0L),Y
22aa 85 3d              STA X0H
22ac c8                 INY
22ad b1 38              LDA (A0L),Y
22af 85 3c              STA X0L
22b1 60                 RTS

              ; *******
22b2            Put_Var
              ; *******

22b2 a5 3e              LDA X1L             ; X1L == 0 : push  X0
22b4 d0 28              BNE stx0_01         ; X1L != 0 : store X0
22b6 c6 33              DEC z_stack_ptr      ; X0 replaces top of stack

              ; *******
22b8            Push_X0
              ; *******

22b8 a5 3c              LDA X0L
22ba a4 3d              LDY X0H

              ; *******
22bc            Push_AY
              ; *******

              ; Input : A = low  byte
              ;         Y = high byte
              ; X register is preserved

22bc 48                 PHA
22bd 98                 TYA
22be a4 33              LDY z_stack_ptr
22c0 99 00 40           STA Z_STACK_HI,Y
22c3 68                 PLA
22c4 99 00 3f           STA Z_STACK_LO,Y
22c7 e6 33              INC z_stack_ptr
22c9 f0 01              BEQ z_error_6
22cb 60                 RTS

              z_error_6 ERROR(6)
22cc a9 06              LDA #6
22ce 4c dc 2f           JMP INTERNAL_ERROR


              ; **********
22d1            Store_Zero
              ; **********

22d1 a9 00              LDA #0

              ; **********
22d3            Store_Byte
              ; **********

22d3 a2 00              LDX #0

              ; ********
22d5            Store_AX
              ; ********

22d5 86 3d              STX X0H

              ; ***********
22d7            Store_A_X0H
              ; ***********

22d7 85 3c              STA X0L

              ; ********
22d9            Store_X0
              ; ********

22d9 20 5a 37           JSR Next_Instruction
22dc f0 da              BEQ Push_X0         ;    0: push   value

22de c9 10    stx0_01   CMP #16             ; 1-15: local  variable
22e0 b0 0c              BCS Put_Global_Var  ; > 15: global variable
22e2 aa                 TAX
22e3 a5 3c              LDA X0L
22e5 9d 00 3e           STA Lvar_Lo,X
22e8 a5 3d              LDA X0H
22ea 9d 10 3e           STA Lvar_Hi,X
22ed 60                 RTS

              ; **************
22ee            Put_Global_Var
              ; **************

22ee 20 fb 22           JSR Get_Global_Var_Addr
22f1 a5 3d              LDA X0H             ; store in big endian order
22f3 91 38              STA (A0L),Y
22f5 c8                 INY
22f6 a5 3c              LDA X0L
22f8 91 38              STA (A0L),Y
22fa 60                 RTS

              ; *******************
22fb            Get_Global_Var_Addr
              ; *******************

              ;  Input: (A)  = Variable # ( 16 - 255)
              ; Output: (A0) = Address of Variable
              ;         (Y)  = 0  IMPORTANT: used by callers

              ; A0 = Z_HEADER + h_globals + 2 * (A)

22fb 38                 SEC
22fc e9 10              SBC #16             ; variable index = number - 16
22fe a0 00              LDY #0
2300 84 39              STY A0H
2302 0a                 ASL A
2303 26 39              ROL A0H             ; (A/A0H) = index * 2 (C=0)
2305 6d 0d 41           ADC h_globals_lo
2308 85 38              STA A0L
230a a5 39              LDA A0H             ; 0 or 1
230c 6d 0c 41           ADC h_globals_hi
230f 69 41              ADC #>Z_HEADER
2311 85 39              STA A0H
2313 60       GGVA_Ret  RTS

              ; Take a jump after an instruction based on the flag, either true or
              ; false. The branch can be short or long; it is encoded in one or two
              ; bytes respectively. When bit 7 of the first byte is set, the jump
              ; takes place if the flag is true; otherwise it is taken if the flag
              ; is false. When bit 6 of the first byte is set, the branch is short;
              ; otherwise it is long. The offset occupies the bottom 6 bits of the
              ; first byte plus all the bits in the second byte for long branches.
              ; Uniquely, an offset of 0 means return false, and an offset of 1 is
              ; return true. The branch distance is offset - 2.

              ; **********
2314            Main_False
              ; **********

2314 20 5a 37           JSR Next_Instruction
2317 10 0c              BPL Bran_10
2319 29 40    Bran_01   AND #$40
231b d0 f6              BNE GGVA_Ret
231d 4c 5a 37           JMP Next_Instruction

              ; *********
2320            Main_True
              ; *********

2320 20 5a 37           JSR Next_Instruction  ; A = specifier
2323 10 f4              BPL Bran_01
2325 aa       Bran_10   TAX                   ; X = specifier
2326 29 40              AND #$40              ; bit 6: 1=short 0=long
2328 f0 07              BEQ Bran_11           ; ---------------------
232a 8a                 TXA                   ; short forward branch
232b 29 3f              AND #$3f              ; A = offset (6 bits)
232d a2 00              LDX #0                ; X = 0 (high offset)
232f f0 16              BEQ Bran_14           ; ---------------------
2331 8a       Bran_11   TXA                   ; long branch
2332 29 20              AND #$20              ; sign bit of offset
2334 f0 05              BEQ Bran_12           ; -> positive offset
2336 8a                 TXA
2337 09 c0              ORA #$c0              ; negative offset
2339 d0 03              BNE Bran_13           ; -> always
233b 8a       Bran_12   TXA
233c 29 3f              AND #$3f              ; positive offset
233e 85 3d    Bran_13   STA X0H               ; high byte offset (6 bits)
2340 20 5a 37           JSR Next_Instruction  ; A = low  byte of long offset
2343 a6 3d              LDX X0H               ; X = high byte of long offset
2345 d0 06              BNE Branch_XA         ; -> long branch
2347 a8       Bran_14   TAY                   ; Y = offset
2348 f0 2c              BEQ z_rfalse          ; Offset 0: return false
234a 88                 DEY                   ; Y = offset - 1
234b f0 1f              BEQ z_rtrue           ; Offset 1: return true

              ; *********
234d            Branch_XA
              ; *********

              ; branch to IP + (A/X) - 2
              ; Input : (A/X) = signed word with 14 significant bits

234d 86 3d              STX X0H             ; offset high
234f 38                 SEC
2350 e9 02              SBC #2
2352 b0 01              BCS Bran_20
2354 ca                 DEX
2355 18       Bran_20   CLC                 ; (A/X) = offset - 2
2356 65 03              ADC QI0
2358 85 03              STA QI0
235a 8a                 TXA
235b 65 04              ADC QI1
235d 85 04              STA QI1
235f a9 00              LDA #0              ; A = 0
2361 24 3d              BIT X0H             ; check sign of offset
2363 10 02              BPL Bran_21         ; -> positive
2365 a9 ff              LDA #-1             ; A = -1
2367 65 05    Bran_21   ADC QI2             ; add carry and sign
2369 85 05              STA QI2
236b 60                 RTS

              ; ***************************
236c            z_rtrue  ; op0 opcode # $00
              ; ***************************

236c a2 01              LDX #1
236e 86 3e              STX X1L
2370 ca                 DEX
2371 86 3f              STX X1H
2373 4c 0b 25           JMP z_ret

              ; ****************************
2376            z_rfalse ; op0 opcode # $01
              ; ****************************

2376 a2 00              LDX #0
2378 86 3e              STX X1L
237a 86 3f              STX X1H
237c 4c 0b 25           JMP z_ret

              ; ********
237f            X1_TO_X0
              ; ********

237f a5 3e              LDA X1L
2381 85 3c              STA X0L
2383 a5 3f              LDA X1H
2385 85 3d              STA X0H
2387 60                 RTS

              ; ********
2388            X2_TO_X0
              ; ********

2388 a5 40              LDA X2L
238a 85 3c              STA X0L
238c a5 41              LDA X2H
238e 85 3d              STA X0H
2390 60                 RTS

              ; ********
2391            X1_TO_A0
              ; ********

2391 a5 3e              LDA X1L
2393 85 38              STA A0L
2395 a5 3f              LDA X1H
2397 85 39              STA A0H
2399 60                 RTS

              ; ********
239a            X2_TO_A0
              ; ********

239a a5 40              LDA X2L
239c 85 38              STA A0L
239e a5 41              LDA X2H
23a0 85 39              STA A0H
23a2 60                 RTS

              ; ********
23a3            X0_TO_A0
              ; ********

23a3 a5 3c              LDA X0L
23a5 85 38              STA A0L
23a7 a5 3d              LDA X0H
23a9 85 39              STA A0H
23ab 60                 RTS

              ; ***************************
23ac            z_print  ; op0 opcode # $02
              ; ***************************

              ; print text from instruction pointer (QI).

23ac a2 02              LDX #2
23ae b5 03    z_prin_1  LDA QI0,X           ; copy QI -> QD
23b0 95 08              STA QD0,X
23b2 ca                 DEX
23b3 10 f9              BPL z_prin_1
23b5 20 6b 2d           JSR Decode_Text     ; print text from (QD)
23b8 a2 02              LDX #2
23ba b5 08    zprin_2   LDA QD0,X           ; copy QD -> QI
23bc 95 03              STA QI0,X
23be ca                 DEX
23bf 10 f9              BPL zprin_2

              ; *******************************
23c1            z_nop        ; op0 opcode # $04
              ; *******************************

23c1 60                 RTS

              ; *******************************
23c2            z_print_ret  ; op0 opcode # $03
              ; *******************************

              ; print text from instruction pointer (QI) add a new line and return true.

23c2 20 ac 23           JSR z_print
23c5 20 71 30           JSR z_new_line
23c8 4c 6c 23           JMP z_rtrue

              ; *******************************
23cb            z_ret_popped ; op0 opcode # $08
              ; *******************************

23cb 20 d5 23           JSR z_pop
23ce 85 3e              STA X1L
23d0 84 3f              STY X1H
23d2 4c 0b 25           JMP z_ret

              ; *************************
23d5            z_pop      ; opcode # $b9
              ; *************************

              ; pop 16 bit word from Z stack
              ; Output: (X0) = (A/Y)  = value
              ; X register preserved

23d5 c6 33              DEC z_stack_ptr
23d7 f0 10              BEQ z_error_5
23d9 a4 33              LDY z_stack_ptr
23db b9 00 3f           LDA Z_STACK_LO,Y
23de 48                 PHA
23df b9 00 40           LDA Z_STACK_HI,Y
23e2 a8                 TAY
23e3 68                 PLA
23e4 84 3d              STY X0H
23e6 85 3c              STA X0L
23e8 60                 RTS

              z_error_5 ERROR(5)
23e9 a9 05              LDA #5
23eb 4c dc 2f           JMP INTERNAL_ERROR


              ; ********************************
23ee            z_quit        ; op0 opcode # $0a
              ; ********************************

23ee 20 0a 3b           JSR Save_Config
                        Print(EOS)
23f1 a9 4c              LDA #<EOS
23f3 a0 3c              LDY #>EOS
23f5 a2 1e              LDX #?EOS
23f7 20 c6 39           JSR PrintText


23fa 20 e4 ff quit_20   JSR GETIN           ; entry for early quit
23fd f0 fb              BEQ quit_20
23ff 6c fc ff           JMP (RESET)

              ; *******
2402            z_catch
              ; *******
2402 60                 RTS                 ; not implemented

              ; ********************************
2403            z_jz          ; op1 opcode # $00
              ; ********************************

2403 a5 3e              LDA X1L
2405 05 3f              ORA X1H
2407 f0 03              BEQ z_jz_t
2409 4c 14 23           JMP Main_False
240c 4c 20 23 z_jz_t    JMP Main_True

              ***************************************
              Module z_get_sibling ; op1 opcode # $01
              ***************************************

240f a0 05              LDY #5              ; version = 3 sibling
2411 24 2f              BIT Version
2413 10 0c              BPL zg_chi_1
2415 a0 08              LDY #8              ; version > 3 sibling
2417 80 08              BRA zg_chi_1

              ***************************************
              Module z_get_child   ; op1 opcode # $02
              ***************************************

2419 a0 06              LDY #6              ; version = 3 child
241b 24 2f              BIT Version
241d 10 02              BPL zg_chi_1
241f a0 0a              LDY #10             ; version > 3 child
2421 20 16 2f zg_chi_1  JSR Get_Object_X1   ; X1 object's address -> A0
2424 20 d5 22           JSR Store_AX        ; (A/X) -> (X0) -> Store
2427 a5 3c              LDA X0L
2429 05 3d              ORA X0H
242b f0 03              BEQ zg_chi_f
242d 4c 20 23           JMP Main_True       ; there is an object
2430 4c 14 23 zg_chi_f  JMP Main_False      ; there is no object
2433          EndMod [z_get_child] Size = 26 [$1a]

              ****************************************
              Module z_get_parent   ; op1 opcode # $03
              ****************************************

2433 a0 04              LDY #4              ; version = 3 parent
2435 24 2f              BIT Version
2437 10 02              BPL _get
2439 a0 06              LDY #6              ; version > 3 parent
243b 20 16 2f _get      JSR Get_Object_X1   ; (A/X) = parent object
243e 4c d5 22           JMP Store_AX
2441          EndMod [z_get_parent] Size = 14 [$e]

              ; *********************************
2441            z_inc          ; op1 opcode # $05
              ; *********************************

2441 20 83 22           JSR Get_Var_X1L
2444 e3 3c              INW X0L
2446 4c b2 22           JMP Put_Var

              ; *********************************
2449            z_dec          ; op1 opcode # $06
              ; *********************************

2449 20 83 22           JSR Get_Var_X1L
244c c3 3c              DEW X0L
244e 4c b2 22           JMP Put_Var

              ; *********************************
2451            z_print_addr   ; op1 opcode # $07
              ; *********************************

2451 a4 3e              LDY X1L
2453 a6 3f              LDX X1H
2455 4c 63 2d           JMP Decode_YX

              ****************************************
              Module z_remove_obj   ; op1 opcode # $09
              ****************************************

              ; Remove (unlink) object (X1)

2458 24 2f              BIT Version
245a 10 54              BPL _V3

245c a0 06              LDY #6              ; parent offset
245e 20 16 2f           JSR Get_Object_X1   ; object's address -> A0
2461 a5 38              LDA A0L             ; object's address -> A1
2463 85 3a              STA A1L
2465 a5 39              LDA A0H
2467 85 3b              STA A1H
2469 8a                 TXA                 ; parent high
246a 11 38              ORA (A0L),Y         ; parent low
246c f0 41              BEQ _ret40          ; return if no parent

              ; Get parent's 1st. child

246e b1 38              LDA (A0L),Y         ; parent low (X = high)
2470 a0 0a              LDY #10             ; child offset
2472 20 1a 2f           JSR Get_Object_Reg  ; parent's address -> A0
2475 c5 3e              CMP X1L             ; object == parent's 1st. Child ?
2477 d0 15              BNE _ro_10          ; -> no
2479 e4 3f              CPX X1H             ; object == parent's 1st. Child ?
247b d0 11              BNE _ro_10          ; -> no

              ; Parent's 1st. child is this object, so
              ; make object's sibling the 1st. child of parent

247d a0 08              LDY #8              ; sibling offset
247f b1 3a              LDA (A1L),Y         ; object's sibling high
2481 c8                 INY
2482 c8                 INY                 ; Y = 10
2483 91 38              STA (A0L),Y         ; parent's child high
2485 88                 DEY                 ; Y =  9
2486 b1 3a              LDA (A1L),Y         ; object's sibling low
2488 c8                 INY
2489 c8                 INY                 ; Y = 11
248a 91 38              STA (A0L),Y         ; parent's child low
248c d0 16              BNE _ro_20          ; always (INY)

              ; Parent's 1st. child is not this object
              ; Loop through siblings until found

248e a0 08    _ro_10    LDY #8              ; sibling offset
2490 20 1a 2f           JSR Get_Object_Reg  ; parent's child -> A0
2493 c5 3e              CMP X1L             ; object == parent's child's sibling ?
2495 d0 f7              BNE _ro_10          ; -> no
2497 e4 3f              CPX X1H             ; object == parent's child's sibling ?
2499 d0 f3              BNE _ro_10          ; -> no, try next sibling (A/X)

              ; Link younger sibling to older sibling

249b b1 3a              LDA (A1L),Y         ; younger sibling low
249d 91 38              STA (A0L),Y         ; older   sibling low
249f 88                 DEY                 ; Y = 8
24a0 b1 3a              LDA (A1L),Y         ; younger sibling high
24a2 91 38              STA (A0L),Y         ; older   sibling high

              ; clear object's parent & sibling (Y=6 .. 9)

24a4 a9 00    _ro_20    LDA #0
24a6 a0 06              LDY #6              ; parent offset
24a8 91 3a    _ro_30    STA (A1L),Y         ; clear parent & sibling
24aa c8                 INY
24ab c0 0a              CPY #10             ; after sibling
24ad 90 f9              BCC _ro_30
24af 60       _ret40    RTS

24b0 a0 04    _V3       LDY #4              ; parent offset
24b2 20 16 2f           JSR Get_Object_X1
24b5 a5 38              LDA A0L
24b7 85 3a              STA A1L
24b9 a5 39              LDA A0H
24bb 85 3b              STA A1H
24bd b1 38              LDA (A0L),Y         ; A = parent object
24bf f0 2a              BEQ _ret70          ; -> has no parent
24c1 a0 06              LDY #6              ; child offset
24c3 20 1a 2f           JSR Get_Object_Reg  ; A = child of parent
24c6 c5 3e              CMP X1L             ; is it me ?
24c8 d0 09              BNE _ro_50          ; -> no
24ca a0 05              LDY #5              ; sibling offset
24cc b1 3a              LDA (A1L),Y         ; my sibling
24ce c8                 INY                 ; Y = child offset
24cf 91 38              STA (A0L),Y         ; is parent's cild
24d1 d0 0f              BNE _ro_60          ; always

24d3 a0 05    _ro_50    LDY #5              ; A = sibling of parnent's
24d5 20 1a 2f           JSR Get_Object_Reg  ; child
24d8 c5 3e              CMP X1L             ; me ?
24da d0 f7              BNE _ro_50          ; -> no
24dc a0 05              LDY #5              ; sibling offset
24de b1 3a              LDA (A1L),Y         ; my sibling is
24e0 91 38              STA (A0L),Y         ; parent's child sibling

24e2 a9 00    _ro_60    LDA #0
24e4 a0 04              LDY #4              ; parent offset
24e6 91 3a              STA (A1L),Y         ; I have no parnet
24e8 c8                 INY                 ; Y = sibling offset
24e9 91 3a              STA (A1L),Y         ; I have no sibling
24eb 60       _ret70    RTS
24ec          EndMod [z_remove_obj] Size = 148 [$94]

              ****************************************
              Module z_print_obj    ; op1 opcode # $0a
              ****************************************

24ec a5 3e              LDA X1L
24ee a6 3f              LDX X1H

              *************
24f0          z_print_obj_A
              *************

24f0 a0 0c              LDY #12             ; version > 3 offset
24f2 24 2f              BIT Version
24f4 30 02              BMI _prio_1
24f6 a0 07              LDY #7              ; version = 3 offset
24f8 20 1a 2f _prio_1   JSR Get_Object_Reg
24fb 24 2f              BIT Version
24fd 30 04              BMI _V4
24ff aa                 TAX                 ; object prop high
2500 c8                 INY
2501 b1 38              LDA (A0L),Y
2503 a8       _V4       TAY                 ; object prop low
2504 c8                 INY
2505 d0 01              BNE _decode
2507 e8                 INX                 ; object prop high
2508 4c 63 2d _decode   JMP Decode_YX
250b          EndMod [z_print_obj] Size = 31 [$1f]

              ; *****************************
250b            z_ret          ; opcode # $ab
              ; *****************************

250b a5 34              LDA z_frame_ptr      ; stack ptr = frame ptr
250d 85 33              STA z_stack_ptr

250f 20 d5 23           JSR z_pop
2512 8c 76 35           STY Z_Arg_Count     ; # of args
2515 aa                 TAX                 ; # of local vars
2516 f0 0d              BEQ zret_20         ; -> no locals vars

2518 20 d5 23 zret_10   JSR z_pop           ; pop next local var
251b 9d 00 3e           STA Lvar_Lo,X       ; and restore it
251e 98                 TYA
251f 9d 10 3e           STA Lvar_Hi,X
2522 ca                 DEX
2523 d0 f3              BNE zret_10         ; -> loop

2525 20 d5 23 zret_20   JSR z_pop
2528 8d 78 35           STA Z_Call_Type
252b 84 03              STY QI0             ; restore instruction pointer L

252d 20 d5 23           JSR z_pop
2530 85 04              STA QI1             ; restore instruction pointer M
2532 84 05              STY QI2             ; restore instruction pointer H

2534 20 d5 23           JSR z_pop
2537 85 34              STA z_frame_ptr

2539 ad 78 35           LDA Z_Call_Type
253c d0 07              BNE zret_30         ; -> no return value
253e a5 3e              LDA X1L
2540 a6 3f              LDX X1H
2542 4c d5 22           JMP Store_AX
2545 60       zret_30   RTS

              ; *********************************
2546            z_jump         ; op1 opcode # $0c
              ; *********************************

2546 a5 3e              LDA X1L
2548 a6 3f              LDX X1H
254a 4c 4d 23           JMP Branch_XA

              ****************************************
              Module z_print_paddr  ; op1 opcode # $0d
              ****************************************

254d a5 3e              LDA X1L
254f 0a                 ASL A
2550 85 08              STA QD0
2552 a5 3f              LDA X1H
2554 2a                 ROL A
2555 85 09              STA QD1
2557 a9 00              LDA #0
2559 2a                 ROL A
255a 85 0a              STA QD2
255c 24 2f              BIT Version
255e 10 06              BPL _label
2560 06 08              ASL QD0
2562 26 09              ROL QD1
2564 26 0a              ROL QD2
2566 4c 6b 2d _label    JMP Decode_Text
2569          EndMod [z_print_paddr] Size = 28 [$1c]

              ; *********************************
2569            z_load         ; op1 opcode # $0e
              ; *********************************

2569 20 83 22           JSR Get_Var_X1L
256c 4c d9 22           JMP Store_X0

              ; *********************************
256f            z_not          ; op1 opcode # $0f
              ; *********************************
256f a5 3e              LDA X1L
2571 49 ff              EOR #$ff
2573 aa                 TAX
2574 a5 3f              LDA X1H
2576 49 ff              EOR #$ff

              ; ********
2578            Store_XA
              ; ********

2578 86 3c              STX X0L
257a 85 3d              STA X0H
257c 4c d9 22           JMP Store_X0

              ; *********************************
257f            z_je           ; var opcode # $01
              ; *********************************

257f c6 24              DEC ParNum
2581 f0 2a              BEQ z_error_9
2583 a5 3e              LDA X1L      ; (X1 == X2)
2585 a6 3f              LDX X1H
2587 c5 40              CMP X2L
2589 d0 04              BNE z_je_1
258b e4 41              CPX X2H
258d f0 18              BEQ z_je_t
258f c6 24    z_je_1    DEC ParNum
2591 f0 17              BEQ z_je_f
2593 c5 42              CMP X3L
2595 d0 04              BNE z_je_2
2597 e4 43              CPX X3H
2599 f0 0c              BEQ z_je_t
259b c6 24    z_je_2    DEC ParNum
259d f0 0b              BEQ z_je_f
259f c5 44              CMP X4L
25a1 d0 07              BNE z_je_f
25a3 e4 45              CPX X4H
25a5 d0 03              BNE z_je_f
25a7 4c 20 23 z_je_t    JMP Main_True
25aa 4c 14 23 z_je_f    JMP Main_False
              z_error_9 ERROR(9)
25ad a9 09              LDA #9
25af 4c dc 2f           JMP INTERNAL_ERROR


              ; *********************************
25b2            z_jl           ; var opcode # $02
              ; *********************************

              ; jump true if (X2 < X1)

25b2 20 7f 23           JSR X1_TO_X0
25b5 20 9a 23           JSR X2_TO_A0
25b8 20 f9 25           JSR CMP_A0_X0
25bb b0 03              BCS z_jl_f
25bd 4c 20 23           JMP Main_True
25c0 4c 14 23 z_jl_f    JMP Main_False

              ; *********************************
25c3            z_jg           ; var opcode # $03
              ; *********************************

              ; jump true if (X2 > X1)

25c3 20 91 23           JSR X1_TO_A0
25c6 20 88 23           JSR X2_TO_X0
25c9 20 f9 25           JSR CMP_A0_X0
25cc b0 03              BCS z_jg_f
25ce 4c 20 23           JMP Main_True
25d1 4c 14 23 z_jg_f    JMP Main_False

              ; *********************************
25d4            z_dec_chk      ; var opcode # $04
              ; *********************************

              ; jump true if (--X0 < X2)

25d4 20 49 24           JSR z_dec
25d7 20 9a 23           JSR X2_TO_A0
25da 20 f9 25           JSR CMP_A0_X0
25dd b0 03              BCS z_dec_cf
25df 4c 20 23           JMP Main_True
25e2 4c 14 23 z_dec_cf  JMP Main_False

              ; *********************************
25e5            z_inc_chk      ; var opcode # $05
              ; *********************************

              ; jump true if (++X0 < X2)

25e5 20 41 24           JSR z_inc
25e8 20 a3 23           JSR X0_TO_A0
25eb 20 88 23           JSR X2_TO_X0
25ee 20 f9 25           JSR CMP_A0_X0
25f1 b0 03              BCS z_inc_cf
25f3 4c 20 23           JMP Main_True
25f6 4c 14 23 z_inc_cf  JMP Main_False

              ; *********
25f9            CMP_A0_X0
              ; *********

              ; Compare A0 with X0
              ; A0 >= X0 : Carry set
              ; A0 <  X0 : Carry clear

25f9 a5 39              LDA A0H
25fb 45 3d              EOR X0H
25fd 10 05              BPL cmpax_1 ; equal signs
25ff a5 39              LDA A0H
2601 c5 3d              CMP X0H
2603 60                 RTS
2604 a5 3d    cmpax_1   LDA X0H
2606 c5 39              CMP A0H
2608 d0 04              BNE cmpax_2
260a a5 3c              LDA X0L
260c c5 38              CMP A0L
260e 60       cmpax_2   RTS

              ****************************************
              Module z_jin          ; var opcode # $06
              ****************************************

260f a0 04              LDY #4              ; version = 3 parent
2611 24 2f              BIT Version
2613 10 02              BPL _get
2615 a0 06              LDY #6              ; version > 3 parent
2617 20 16 2f _get      JSR Get_Object_X1
261a e4 41              CPX X2H
261c d0 07              BNE _false
261e c5 40              CMP X2L
2620 d0 03              BNE _false
2622 4c 20 23           JMP Main_True
2625 4c 14 23 _false    JMP Main_False
2628          EndMod [z_jin] Size = 25 [$19]

              ; *********************************
2628            z_test         ; var opcode # $07
              ; *********************************

2628 a5 40              LDA X2L
262a 25 3e              AND X1L
262c c5 40              CMP X2L
262e d0 0b              BNE z_test_f
2630 a5 41              LDA X2H
2632 25 3f              AND X1H
2634 c5 41              CMP X2H
2636 d0 03              BNE z_test_f
2638 4c 20 23           JMP Main_True
263b 4c 14 23 z_test_f  JMP Main_False

              ; *********************************
263e            z_or           ; var opcode # $08
              ; *********************************

263e a5 3f              LDA X1H
2640 05 41              ORA X2H
2642 aa                 TAX
2643 a5 3e              LDA X1L
2645 05 40              ORA X2L
2647 4c d5 22           JMP Store_AX

              ; *********************************
264a            z_and          ; var opcode # $09
              ; *********************************

264a a5 3f              LDA X1H
264c 25 41              AND X2H
264e aa                 TAX
264f a5 3e              LDA X1L
2651 25 40              AND X2L
2653 4c d5 22           JMP Store_AX

              ; *********************************
2656            z_test_attr    ; var opcode # $0a
              ; *********************************

2656 20 b7 2f           JSR Get_Attr_Addr
2659 31 38              AND (A0L),Y
265b d0 03              BNE z_teat_t
265d 4c 14 23           JMP Main_False
2660 4c 20 23 z_teat_t  JMP Main_True

              ; *********************************
2663            z_set_attr     ; var opcode # $0b
              ; *********************************

2663 20 b7 2f           JSR Get_Attr_Addr
2666 11 38              ORA (A0L),Y
2668 91 38              STA (A0L),Y
266a 60                 RTS

              ; *********************************
266b            z_clear_attr   ; var opcode # $0c
              ; *********************************

266b 20 b7 2f           JSR Get_Attr_Addr
266e 49 ff              EOR #$ff
2670 31 38              AND (A0L),Y
2672 91 38              STA (A0L),Y
2674 60                 RTS

              ; *******
2675            z_store
              ; *******

2675 20 88 23           JSR X2_TO_X0
2678 4c b2 22           JMP Put_Var

              ****************************************
              Module z_insert_obj   ; var opcode # $0e
              ****************************************

              ; insert object (X1) as 1st. child of object (X2)

267b 20 58 24           JSR z_remove_obj    ; unlink object (X1)

267e 24 2f              BIT Version
2680 10 2b              BPL _V3

2682 a0 06              LDY #6              ; parent offset
2684 a5 41              LDA X2H
2686 91 3a              STA (A1L),Y         ; X1's parent = X2 high
2688 aa                 TAX
2689 c8                 INY                 ; Y = 7
268a a5 40              LDA X2L
268c 91 3a              STA (A1L),Y         ; X1's parent = X2 high

268e a0 0a              LDY #10             ; child offset
2690 20 1a 2f           JSR Get_Object_Reg  ; X2 object's address -> A0
2693 85 0f              STA LV0             ; old child of X2 low
2695 a5 3e              LDA X1L             ; Y = 11
2697 91 38              STA (A0L),Y         ; new child low  = X1L
2699 88                 DEY                 ; Y = 10
269a a5 3f              LDA X1H
269c 91 38              STA (A0L),Y         ; new child high = X1H

269e 8a                 TXA                 ; X2's old child high
269f 05 0f              ORA LV0             ; X2's old child low
26a1 f0 21              BEQ _return         ; -> old child was zero

26a3 88                 DEY                 ; Y =  9
26a4 a5 0f              LDA LV0             ; X2's old child   low
26a6 91 3a              STA (A1L),Y         ; X1's new sibling low
26a8 88                 DEY                 ; Y =  8
26a9 8a                 TXA                 ; X2's old child   high
26aa 91 3a              STA (A1L),Y         ; X1's new sibling high
26ac 60                 RTS

26ad a5 40    _V3       LDA X2L
26af a0 04              LDY #4              ; parent offset
26b1 91 3a              STA (A1L),Y         ; object's new parent
26b3 a0 06              LDY #6              ; child offset
26b5 20 1a 2f           JSR Get_Object_Reg  ; get new parent's child
26b8 aa                 TAX                 ; X = parent's first child
26b9 a5 3e              LDA X1L
26bb 91 38              STA (A0L),Y         ; object becomes parent's first child
26bd 8a                 TXA
26be f0 04              BEQ _return         ; parent had no child before
26c0 a0 05              LDY #5              ; sibling offset
26c2 91 3a              STA (A1L),Y         ; old child becommes sibling
26c4 60       _return   RTS
26c5          EndMod [z_insert_obj] Size = 74 [$4a]

              ; *********************************
26c5            z_loadw        ; var opcode # $0f
              ; *********************************

26c5 20 d6 26           JSR Word_Array      ; set &X1[X2]
26c8 85 3d              STA X0H             ; put value
26ca 20 24 37           JSR Next_Datum      ; get low  byte
26cd 4c d7 22           JMP Store_A_X0H     ; return word

              ; *********************************
26d0            z_loadb        ; var opcode # $10
              ; *********************************

26d0 20 da 26           JSR Byte_Array      ; set &X1[X2]
26d3 4c d3 22           JMP Store_Byte      ; return byte

              ; **********
26d6            Word_Array
              ; **********

              ; address QD = base (X1) + index (X2 * 2)

26d6 06 40              ASL X2L
26d8 26 41              ROL X2H

              ; **********
26da            Byte_Array
              ; **********

              ; address QD = base (X1) + index (X2)

26da 18                 CLC
26db a5 3e              LDA X1L
26dd 65 40              ADC X2L
26df 85 08              STA QD0
26e1 a5 3f              LDA X1H
26e3 65 41              ADC X2H
26e5 85 09              STA QD1
26e7 a9 00              LDA #0
26e9 2a                 ROL A               ; add carry for address > 64K
26ea 85 0a              STA QD2
26ec 4c 24 37           JMP Next_Datum      ; get next byte

              ; ****************************************
26ef            z_get_prop_addr ; opcodes 12 32 52 72 d2
              ; ****************************************

              ; get property address of property X2 of object X1
              ; store address of property if found
              ; else store zero

26ef 20 9e 2f           JSR Find_Property
26f2 d0 0c              BNE gepa_10
26f4 a5 38              LDA A0L
26f6 e9 fe              SBC #<[Z_HEADER-2]  ; carry from Find_Property
26f8 aa                 TAX                 ; set address after ID/size info
26f9 a5 39              LDA A0H
26fb e9 40              SBC #>[Z_HEADER-2]
26fd 4c 78 25           JMP Store_XA
2700 4c d1 22 gepa_10   JMP Store_Zero
2703                    .SIZE [BLACK] Size = 9987 [$2703]
2703                    .SIZE [BLACK] Size = 9987 [$2703]

              ; ***********************************
2703            z_get_prop ; opcodes 11 31 51 71 d1
              ; ***********************************

              ; get property X2 of object X1
              ; if X1 has no property X2 use default value
              ; the routine must access properties of size byte or word only

2703 20 9e 2f           JSR Find_Property
2706 f0 14              BEQ zgp_10          ; -> found property

2708 ad 0b 41           LDA h_objects_lo    ; use default
270b 85 38              STA A0L
270d ad 0a 41           LDA h_objects_hi
2710 69 41              ADC #>Z_HEADER      ; carry is clear
2712 85 39              STA A0H             ; A0 = address of default properties
2714 a5 40              LDA X2L             ; property #
2716 e9 00              SBC #0              ; (C=0) : minus 1
2718 0a                 ASL A               ; default properties have word size
2719 a8                 TAY
271a 10 06              BPL zgp_20          ; branch always

271c 20 6a 2f zgp_10    JSR Property_Size   ; get size
271f aa                 TAX                 ; 1: word
2720 f0 04              BEQ zgp_30          ; 0: byte (X=0)

2722 b1 38    zgp_20    LDA (A0L),Y         ; property value high
2724 aa                 TAX
2725 c8                 INY
2726 b1 38    zgp_30    LDA (A0L),Y         ; property value low
2728 4c d5 22           JMP Store_AX
272b                    .SIZE [BLACK] Size = 10027 [$272b]
272b                    .SIZE [BLACK] Size = 10027 [$272b]

              ; ****************************************
272b            z_get_next_prop ; opcodes 13 33 53 73 d3
              ; ****************************************

              ; for X2L == 0 find first property of object X1
              ; otherwise find next property after property X2L

272b a5 40              LDA X2L
272d d0 06              BNE zgnp_10         ; -> next prop after X2
272f 20 3d 2f           JSR First_Property
2732 4c d3 22           JMP Store_Byte
2735 20 9e 2f zgnp_10   JSR Find_Property
2738 d0 06              BNE zgnp_20         ; -> prop X2 was not found
273a 20 89 2f           JSR Next_Property
273d 4c d3 22           JMP Store_Byte
2740 4c d1 22 zgnp_20   JMP Store_Zero
2743                    .SIZE [BLACK] Size = 10051 [$2743]
2743                    .SIZE [BLACK] Size = 10051 [$2743]

              ****************************************
              Module z_get_prop_len ; opcodes 84 94 a4
              ****************************************

              ; get length of property, which address is in X1
              ; The length info is stored one byte before (X1)

2743 18                 CLC
2744 a5 3e              LDA X1L
2746 69 ff              ADC #<[Z_HEADER-1]
2748 85 38              STA A0L
274a a5 3f              LDA X1H
274c 69 40              ADC #>[Z_HEADER-1]
274e 85 39              STA A0H             ; (A0) = (X1) + Header - 1
2750 a0 00              LDY #0
2752 24 2f              BIT Version
2754 10 0e              BPL _V3
2756 b1 38              LDA (A0L),Y
2758 30 05              BMI _mask           ; -> length = lower 6 bits
275a 0a                 ASL A               ; bit 7 = length info
275b 0a                 ASL A               ; carry = length info
275c 98                 TYA                 ; A = 0
275d 69 01              ADC #1              ; A = 1 or 2
275f 29 3f    _mask     AND #$3f            ; version > 3 mask
2761 4c d3 22           JMP Store_Byte

2764 20 6a 2f _V3       JSR Property_Size
2767 1a                 INC A
2768 4c d3 22           JMP Store_Byte
276b          EndMod [z_get_prop_len] Size = 40 [$28]


              ; *********************************
276b            z_add          ; var opcode # $14
              ; *********************************

276b 18                 CLC
276c a5 3e              LDA X1L
276e 65 40              ADC X2L
2770 aa                 TAX
2771 a5 3f              LDA X1H
2773 65 41              ADC X2H
2775 4c 78 25           JMP Store_XA

              ; *********************************
2778            z_sub          ; var opcode # $15
              ; *********************************

2778 38                 SEC
2779 a5 3e              LDA X1L
277b e5 40              SBC X2L
277d aa                 TAX
277e a5 3f              LDA X1H
2780 e5 41              SBC X2H
2782 4c 78 25           JMP Store_XA

              ; *********************************
2785            z_mul          ; var opcode # $16
              ; *********************************

              ; 16 bit multiplication
              ;
              ; (X2) = (X1) * (X2)
              ;

2785 20 3f 28           JSR Prep_Mult_Div
2788 66 10    z_mul_1   ROR LV1
278a 66 0f              ROR LV0
278c 66 41              ROR X2H
278e 66 40              ROR X2L
2790 90 0d              BCC z_mul_2
2792 18                 CLC
2793 a5 3e              LDA X1L
2795 65 0f              ADC LV0
2797 85 0f              STA LV0
2799 a5 3f              LDA X1H
279b 65 10              ADC LV1
279d 85 10              STA LV1
279f ca       z_mul_2   DEX
27a0 10 e6              BPL z_mul_1
27a2 a6 40              LDX X2L
27a4 a5 41              LDA X2H
27a6 4c 78 25           JMP Store_XA

              ; *********************************
27a9            z_div          ; var opcode # $17
              ; *********************************

27a9 20 bd 27           JSR Divide_Signed
27ac a6 27              LDX QuotL
27ae a5 28              LDA QuotH
27b0 4c 78 25           JMP Store_XA

              ; *********************************
27b3            z_mod          ; var opcode # $18
              ; *********************************

27b3 20 bd 27           JSR Divide_Signed
27b6 a6 29              LDX RemL
27b8 a5 2a              LDA RemH
27ba 4c 78 25           JMP Store_XA

              ; *************
27bd            Divide_Signed
              ; *************

              ; (Quot) = (X1) / (X2)
              ; (Rem ) = (X1) % (X2)

27bd a5 3f              LDA X1H
27bf 85 11              STA LV2          ; Rem_Sign
27c1 45 41              EOR X2H
27c3 85 12              STA LV3          ; Quot_Sign
27c5 a5 3e              LDA X1L
27c7 85 27              STA QuotL
27c9 a5 3f              LDA X1H
27cb 85 28              STA QuotH
27cd 10 03              BPL Divi_01
27cf 20 fb 27           JSR Negate_Quot ; Make Quot positive
27d2 a5 40    Divi_01   LDA X2L
27d4 85 29              STA RemL
27d6 a5 41              LDA X2H
27d8 85 2a              STA RemH
27da 10 03              BPL Divi_02
27dc 20 ed 27           JSR Divi_04     ; Make Rem positive
27df 20 09 28 Divi_02   JSR Divide_Unsigned
27e2 a5 12              LDA LV3         ; Quot_Sign
27e4 10 03              BPL Divi_03
27e6 20 fb 27           JSR Negate_Quot ; (+/-) or (-/+)
27e9 a5 11    Divi_03   LDA LV2         ; Rem_Sign
27eb 10 0d              BPL Divi_05
27ed a9 00    Divi_04   LDA #0
27ef 38                 SEC
27f0 e5 29              SBC RemL
27f2 85 29              STA RemL
27f4 a9 00              LDA #0
27f6 e5 2a              SBC RemH
27f8 85 2a              STA RemH
27fa 60       Divi_05   RTS

              ; ***********
27fb            Negate_Quot
              ; ***********

27fb a9 00              LDA #0
27fd 38                 SEC
27fe e5 27              SBC QuotL
2800 85 27              STA QuotL
2802 a9 00              LDA #0
2804 e5 28              SBC QuotH
2806 85 28              STA QuotH
2808 60                 RTS

              ; ***************
2809            Divide_Unsigned
              ; ***************

2809 a5 29              LDA RemL
280b 05 2a              ORA RemH
280d f0 2b              BEQ z_error_8
280f 20 3f 28           JSR Prep_Mult_Div
2812 26 27    DiUn_01   ROL QuotL
2814 26 28              ROL QuotH
2816 26 0f              ROL LV0
2818 26 10              ROL LV1
281a a5 0f              LDA LV0
281c 38                 SEC
281d e5 29              SBC RemL
281f a8                 TAY
2820 a5 10              LDA LV1
2822 e5 2a              SBC RemH
2824 90 04              BCC DiUn_02
2826 84 0f              STY LV0
2828 85 10              STA LV1
282a ca       DiUn_02   DEX
282b d0 e5              BNE DiUn_01
282d 26 27              ROL QuotL
282f 26 28              ROL QuotH
2831 a5 0f              LDA LV0
2833 85 29              STA RemL
2835 a5 10              LDA LV1
2837 85 2a              STA RemH
2839 60                 RTS
              z_error_8 ERROR(8)  ; Divide by zero
283a a9 08              LDA #8
283c 4c dc 2f           JMP INTERNAL_ERROR


              ; *************
283f            Prep_Mult_Div
              ; *************

283f a2 10              LDX #16
2841 a9 00              LDA #0
2843 85 0f              STA LV0
2845 85 10              STA LV1
2847 18                 CLC
2848 60                 RTS

              *******************
              Module z_scan_table
              *******************

              ; Input : X1 = search value
              ;         X2 = address of table
              ;         X3 = number of table entries
              ;         X4 = type (default = $82)

2849 a5 43              LDA X3H
284b 30 5e              BMI zst_fa          ; length  < 0 : false
284d 05 42              ORA X3L
284f f0 5a              BEQ zst_fa          ; length == 0 : false

2851 a5 24              LDA ParNum
2853 c9 04              CMP #4              ; type parameter given ?
2855 d0 04              BNE zst_10          ; -> use default type $82
2857 a5 44              LDA X4L
2859 d0 04              BNE zst_20          ; -> use type parameter

285b a9 82    zst_10    LDA #$82            ; default: word table, size=2
285d 85 44              STA X4L             ; word/byte flag

285f a6 42    zst_20    LDX X3L             ; countdown low
2861 24 44              BIT X4L
2863 30 04              BMI zst_30          ; -> word
2865 a5 3e              LDA X1L
2867 85 3f              STA X1H             ; byte to search

2869 a5 40    zst_30    LDA X2L             ; setup table address
286b 85 08              STA QD0
286d a5 41              LDA X2H
286f 85 09              STA QD1
2871 a9 00              LDA #0
2873 85 0a              STA QD2

2875 a5 08    zst_40    LDA QD0             ; remember address
2877 85 3c              STA X0L
2879 a5 09              LDA QD1
287b 85 3d              STA X0H

287d 20 24 37           JSR Next_Datum      ; next table item high (or byte)
2880 c5 3f              CMP X1H             ; compare
2882 d0 0b              BNE zst_50          ; -> no match
2884 24 44              BIT X4L
2886 10 29              BPL zst_tr          ; -> compare bytes
2888 20 24 37           JSR Next_Datum      ; next table item low
288b c5 3e              CMP X1L             ; compare
288d f0 22              BEQ zst_tr          ; -> match

288f a5 44    zst_50    LDA X4L
2891 29 7f              AND #$7f            ; length
2893 18                 CLC
2894 65 3c              ADC X0L             ; QD = X0 + item length
2896 85 08              STA QD0
2898 90 06              BCC zst_60          ; -> no page crossed
289a a9 00              LDA #0
289c 65 3d              ADC X0H
289e 85 09              STA QD1

28a0 8a       zst_60    TXA                 ; countdown low
28a1 d0 02              BNE zst_70
28a3 c6 43              DEC X3H
28a5 ca       zst_70    DEX
28a6 8a                 TXA
28a7 05 43              ORA X3H
28a9 d0 ca              BNE zst_40

28ab 20 d1 22 zst_fa    JSR Store_Zero      ; Store 0 and return false
28ae 4c 14 23           JMP Main_False

28b1 20 d9 22 zst_tr    JSR Store_X0        ; store X and return true
28b4 4c 20 23           JMP Main_True
28b7          EndMod [z_scan_table] Size = 110 [$6e]

              ******************
              Module Clear_Table
              ******************

28b7 18                 CLC
28b8 a5 3f              LDA X1H
28ba 69 41              ADC #>Z_HEADER
28bc 85 3f              STA X1H
28be a0 00              LDY #0              ; Y = 0
28c0 a9 00    ClTa_10   LDA #0              ; A = 0
28c2 91 3e              STA (X1L),Y
28c4 c8                 INY
28c5 d0 02              BNE ClTa_20
28c7 e6 3f              INC X1H
28c9 c3 42    ClTa_20   DEW X3L
28cb d0 f3              BNE ClTa_10
28cd 60                 RTS
28ce          EndMod [Clear_Table] Size = 23 [$17]

              *******************
              Module z_copy_table
              *******************

              ; Input : X1 = source
              ;         X2 = target
              ;         X3 = size

28ce a5 40              LDA X2L
28d0 05 41              ORA X2H
28d2 f0 e3              BEQ Clear_Table
28d4 a5 42              LDA X3L
28d6 05 43              ORA X3H
28d8 f0 53              BEQ cota_ret        ; size = 0

28da a5 43              LDA X3H
28dc 10 10              BPL cota_20         ; -> safe copy

28de 38                 SEC                 ; make size positive
28df a9 00              LDA #0
28e1 e5 42              SBC X3L
28e3 85 42              STA X3L
28e5 a9 00              LDA #0
28e7 e5 43              SBC X3H
28e9 85 43              STA X3H
28eb 4c 0d 29           JMP cota_30         ; -> forced forward

28ee a5 3e    cota_20   LDA X1L
28f0 c5 40              CMP X2L
28f2 a5 3f              LDA X1H
28f4 e5 41              SBC X2H
28f6 b0 15              BCS cota_30         ; -> (X1 > X2) forward

28f8 a5 3e              LDA X1L             ; check overlap (X1 < X2)
28fa 65 42              ADC X3L             ; C=0
28fc aa                 TAX                 ; X = end source low
28fd a5 3f              LDA X1H
28ff 65 43              ADC X3H             ; (X/A) = end source + 1
2901 c5 41              CMP X2H
2903 90 08              BCC cota_30         ; no overlap -> forward
2905 d0 27              BNE cota_45         ;    overlap -> backward
2907 e4 40              CPX X2L
2909 f0 02              BEQ cota_30         ; source end == dest start
290b b0 21              BCS cota_45

              ; forward copy (X1 may point to high memory)

290d a9 00    cota_30   LDA #0              ; data pointer = source
290f 85 0a              STA QD2
2911 a5 3f              LDA X1H
2913 85 09              STA QD1
2915 a5 3e              LDA X1L
2917 85 08              STA QD0

2919 18                 CLC
291a a5 41              LDA X2H
291c 69 41              ADC #>Z_HEADER
291e 85 41              STA X2H

2920 20 24 37 cota_35   JSR Next_Datum      ; LDA (source)
2923 a0 00              LDY #0
2925 91 40              STA (X2L),Y         ; STA (target)
2927 e3 40              INW X2L             ; ++X2
2929 c3 42              DEW X3L             ; --X3 (counter)
292b d0 f3              BNE cota_35         ; -> loop
292d 60       cota_ret  RTS

              ; backward copy

292e 18       cota_45   CLC                 ; set source end
292f a5 3e              LDA X1L
2931 65 42              ADC X3L
2933 85 3e              STA X1L
2935 a5 3f              LDA X1H
2937 65 43              ADC X3H
2939 69 41              ADC #>Z_HEADER
293b 85 3f              STA X1H
293d 18                 CLC                 ; set target end
293e a5 40              LDA X2L
2940 65 42              ADC X3L
2942 85 40              STA X2L
2944 a5 41              LDA X2H
2946 65 43              ADC X3H
2948 69 41              ADC #>Z_HEADER
294a 85 41              STA X2H
294c a0 00              LDY #0
294e c3 3e    cota_50   DEW X1L             ; --X1
2950 c3 40              DEW X2L             ; --X2
2952 b1 3e              LDA (X1L),Y
2954 91 40              STA (X2L),Y         ; copy byte
2956 c3 42              DEW X3L             ; --X3
2958 d0 f4              BNE cota_50         ; loop
295a 60                 RTS
295b          EndMod [z_copy_table] Size = 141 [$8d]

              ********************
              Module z_print_table
              ********************

              ; Input : X1 = zscii text
              ;         X2 = width
              ;         X3 = height
              ;         X4 = skip

295b 20 ad 30           JSR Print_Buffer
295e a5 3e              LDA X1L             ; set text address
2960 85 08              STA QD0
2962 a5 3f              LDA X1H
2964 85 09              STA QD1
2966 a9 00              LDA #0
2968 85 0a              STA QD2
296a a5 24              LDA ParNum
296c c9 03              CMP #3
296e b0 04              BCS zpt_10
2970 a9 01              LDA #1
2972 85 42              STA X3L             ; default height = 1
2974 20 47 3a zpt_10    JSR Save_Cursor
2977 20 4f 3a zpt_20    JSR Restore_Cursor
297a a6 40              LDX X2L             ; width
297c f0 15              BEQ zpt_40
297e 86 41              STX X2H
2980 20 24 37 zpt_30    JSR Next_Datum
2983 20 e6 38           JSR CHROUT
2986 c6 41              DEC X2H             ; column countdown
2988 d0 f6              BNE zpt_30
298a c6 42              DEC X3L             ; row    countdown
298c f0 05              BEQ zpt_40
298e e6 17              INC C_Save_Row
2990 4c 77 29           JMP zpt_20
2993 60       zpt_40    RTS
2994          EndMod [z_print_table] Size = 57 [$39]

              *****************
              Module z_tokenize
              *****************

              ;         X1 = text input buffer
              ;         X2 = parse buffer
              ;         X3 = dictionary
              ;         X4 = flag

2994 18                 CLC
2995 a5 3f              LDA X1H
2997 69 41              ADC #>Z_HEADER
2999 85 3f              STA X1H             ; input buffer
299b a6 24              LDX ParNum
299d ca                 DEX
299e ca                 DEX
299f f0 0b              BEQ _standard       ; standard dictionary
29a1 ca                 DEX
29a2 8e c8 3b           STX Tokenizer_Flag  ; 0 or 1
29a5 a5 42              LDA X3L
29a7 a4 43              LDY X3H
29a9 4c c9 2b           JMP Parse_AY_Dict
29ac 4c c3 2b _standard JMP Parse_Input
29af          EndMod [z_tokenize] Size = 27 [$1b]

              ****************************************
              Module z_check_argc   ;     opcode # $ff
              ****************************************

29af ad 76 35           LDA Z_Arg_Count
29b2 c5 3e              CMP X1L
29b4 b0 03              BCS zca_10
29b6 4c 14 23           JMP Main_False
29b9 4c 20 23 zca_10    JMP Main_True
29bc 60                 RTS
29bd          EndMod [z_check_argc] Size = 14 [$e]

              ******************
              Module z_log_shift
              ******************

              ; Input : X1 = number
              ;         X2 = shifts

29bd a5 3e              LDA X1L
29bf a4 40              LDY X2L
29c1 30 08              BMI _right
29c3 0a       _left     ASL A
29c4 26 3f              ROL X1H
29c6 88                 DEY
29c7 d0 fa              BNE _left
29c9 f0 06              BEQ _store

29cb 46 3f    _right    LSR X1H
29cd 6a                 ROR A
29ce c8                 INY
29cf d0 fa              BNE _right

29d1 a6 3f    _store    LDX X1H
29d3 4c d5 22           JMP Store_AX
29d6          EndMod [z_log_shift] Size = 25 [$19]

              ; **********
29d6            z_set_font
              ; **********

              ; 0 : previous font
              ; 1 : normal   font
              ; 2 : picture  font
              ; 3 : character graphics
              ; 4 : fixed pitch

              ;          JSR Print_Buffer
              ;          LDA E_Attribute
              ;          LDX X1L
              ;          CPX #3
              ;          BNE SeFo_10
              ;          AND #$7f
              ;          BIT
              ;SeFo_10   ORA #$80
              ;          STA E_Attribute
              ;          LDA Z_Active_Font
              ;          STX Z_Active_Font
              ;          JMP Store_Byte
29d6 4c d1 22           JMP Store_Zero

              *******************************************
              Module z_set_color ; opcodes 1b 3b 5b 7b db
              *******************************************

              ; Input : X1 = foreground color
              ;         X2 = background color

29d9 20 ad 30           JSR Print_Buffer

29dc a6 3e              LDX X1L
29de bd ed 29           LDA BG_CODE,X
29e1 8d 3d 3d           STA FG_Color
29e4 a6 40              LDX X2L
29e6 bd ed 29           LDA BG_CODE,X
29e9 8d 40 3d           STA BG_Color
29ec 60                 RTS
29ed          EndMod [z_set_color] Size = 20 [$14]

29ed 00       BG_CODE   .BYTE $00 ;  0 current
29ee 00                 .BYTE $00 ;  1 default
29ef 00                 .BYTE $00 ;  2 black
29f0 08                 .BYTE $08 ;  3 red
29f1 04                 .BYTE $04 ;  4 green
29f2 0d                 .BYTE $0d ;  5 yellow
29f3 02                 .BYTE $02 ;  6 blue
29f4 0a                 .BYTE $0a ;  7 magenta
29f5 06                 .BYTE $06 ;  8 cyan
29f6 0f                 .BYTE $0f ;  9 white

              ****************************************
              Module z_call_n       ; op2 opcode # $f9
              ****************************************

29f7 a9 01              LDA #1
29f9 80 02              BRA call_00         ; always
29fb          EndMod [z_call_n] Size = 4 [$4]

              ****************************************
              Module z_call_s       ; op2 opcode # $00
              ****************************************

              ; call subroutine (X1) with 0 - 3 arguments
              ; X1 = subroutine address / 2 (word count)
              ; X2 - X4 arguments
              ; If (X1 == 0) push zero and return
              ; Push saved stack pointer & QI0
              ; Push QI1 & QI2
              ; For # of args do:
              ;     Push local variable
              ;     Set default from instruction stream
              ;     Replace from argument if set
              ; Push argument count & count eor'd with $ff

29fb a9 00              LDA #0
29fd 8d 78 35 call_00   STA Z_Call_Type
2a00 a5 3e              LDA X1L
2a02 05 3f              ORA X1H
2a04 d0 09              BNE call_20
2a06 ad 78 35           LDA Z_Call_Type
2a09 f0 01              BEQ call_10
2a0b 60                 RTS
2a0c 4c d3 22 call_10   JMP Store_Byte

2a0f a5 34    call_20   LDA z_frame_ptr      ; push frame pointer
2a11 20 bc 22           JSR Push_AY

2a14 a4 05              LDY QI2             ; push instruction pointer H
2a16 a5 04              LDA QI1             ; push instruction pointer M
2a18 20 bc 22           JSR Push_AY

2a1b a4 03              LDY QI0             ; push instruction pointer L
2a1d ad 78 35           LDA Z_Call_Type     ; push call type
2a20 20 bc 22           JSR Push_AY

2a23 a5 3e              LDA X1L             ; compute call address
2a25 0a                 ASL A
2a26 85 03              STA QI0
2a28 a5 3f              LDA X1H
2a2a 2a                 ROL A
2a2b 85 04              STA QI1
2a2d a9 00              LDA #0
2a2f 2a                 ROL A
2a30 85 05              STA QI2             ; IP = (X1) * 2
2a32 24 2f              BIT Version
2a34 10 05              BPL call_25
2a36 06 03              ASL QI0
2a38 eb 04 00           ROW QI1             ; IP = (X1) * 4
2a3b 20 5a 37 call_25   JSR Next_Instruction
2a3e 85 3b              STA A1H             ; number of local variables
2a40 f0 3d              BEQ call_50         ; no local variables
2a42 a2 01              LDX #1

2a44 bc 10 3e call_30   LDY Lvar_Hi,X
2a47 bd 00 3e           LDA Lvar_Lo,X
2a4a 20 bc 22           JSR Push_AY         ; push local var of caller
              ;-----------------------------
2a4d 24 2f              BIT Version
2a4f 10 0a              BPL call_32
2a51 a9 00              LDA #0              ; initialize with zero
2a53 9d 10 3e           STA Lvar_Hi,X
2a56 9d 00 3e           STA Lvar_Lo,X
2a59 80 0c              BRA call_36
              ;-----------------------------
2a5b 20 5a 37 call_32   JSR Next_Instruction; initialize with default value
2a5e 9d 10 3e           STA Lvar_Hi,X
2a61 20 5a 37           JSR Next_Instruction; from instruction stream
2a64 9d 00 3e           STA Lvar_Lo,X
              ;-----------------------------
2a67 e4 24    call_36   CPX ParNum          ; index > # of args ?
2a69 b0 0f              BCS call_40         ; -> stay with default value

2a6b 8a                 TXA
2a6c 0a                 ASL A               ; or replace with arg value
2a6d a8                 TAY
2a6e b9 3e 00           LDA X1L,Y
2a71 9d 00 3e           STA Lvar_Lo,X
2a74 b9 3f 00           LDA X1H,Y
2a77 9d 10 3e           STA Lvar_Hi,X
2a7a e4 3b    call_40   CPX A1H             ; # of vars to process
2a7c e8                 INX
2a7d 90 c5              BCC call_30

2a7f ac 76 35 call_50   LDY Z_Arg_Count
2a82 a5 3b              LDA A1H             ; push # of local vars
2a84 20 bc 22           JSR Push_AY
2a87 a4 24              LDY ParNum
2a89 88                 DEY
2a8a 8c 76 35           STY Z_Arg_Count
2a8d a5 33              LDA z_stack_ptr
2a8f 85 34              STA z_frame_ptr      ; set new frame pointer
2a91 60                 RTS
2a92          EndMod [z_call_s] Size = 151 [$97]

              ***********************************
              Module z_storew       ; X1[X2] = X3
              ***********************************

2a92 cb 40 00           ASW X2L
2a95 20 aa 2a           JSR X1_PLUS_X2_TO_A0
2a98 a5 43              LDA X3H
2a9a 91 38              STA (A0L),Y
2a9c c8                 INY
2a9d a5 42              LDA X3L
2a9f 91 38              STA (A0L),Y
2aa1 60                 RTS
2aa2          EndMod [z_storew] Size = 16 [$10]

              ; ****************************
2aa2            z_storeb       ; X1[X2] = X3
              ; ****************************

2aa2 20 aa 2a           JSR X1_PLUS_X2_TO_A0
2aa5 a5 42              LDA X3L
2aa7 91 38              STA (A0L),Y
2aa9 60                 RTS

              ; ****************
2aaa            X1_PLUS_X2_TO_A0
              ; ****************

2aaa 18                 CLC
2aab a5 40              LDA X2L
2aad 65 3e              ADC X1L
2aaf 85 38              STA A0L
2ab1 a5 41              LDA X2H
2ab3 65 3f              ADC X1H
2ab5 69 41              ADC #>Z_HEADER
2ab7 85 39              STA A0H
2ab9 a0 00              LDY #0
2abb 60                 RTS

              ; *********************************
2abc            z_put_prop     ; op2 opcode # $03
              ; *********************************

              ; object (X1) property (X2) = X3

2abc 20 9e 2f           JSR Find_Property
2abf d0 13              BNE z_error10
2ac1 20 6a 2f           JSR Property_Size
2ac4 f0 09              BEQ zpupr_3         ; 0: byte
2ac6 c9 01              CMP #1              ; 1: word
2ac8 d0 0f              BNE z_error11
2aca a5 43              LDA X3H
2acc 91 38              STA (A0L),Y
2ace c8                 INY
2acf a5 42    zpupr_3   LDA X3L
2ad1 91 38              STA (A0L),Y
2ad3 60                 RTS

              z_error10 ERROR(10)
2ad4 a9 0a              LDA #10
2ad6 4c dc 2f           JMP INTERNAL_ERROR

              z_error11 ERROR(11)
2ad9 a9 0b              LDA #11
2adb 4c dc 2f           JMP INTERNAL_ERROR


              ; ************
2ade            z_print_char
              ; ************

2ade a5 3e              LDA X1L
2ae0 4c 15 30           JMP Print_Formatted

              ; ***********
2ae3            z_print_num
              ; ***********

2ae3 a6 3e              LDX X1L
2ae5 a5 3f              LDA X1H
2ae7 10 0f              BPL zprnu_1
2ae9 a9 2d              LDA #'-'
2aeb 20 15 30           JSR Print_Formatted
2aee 38                 SEC
2aef a9 00              LDA #0
2af1 e5 3e              SBC X1L
2af3 aa                 TAX
2af4 a9 00              LDA #0
2af6 e5 3f              SBC X1H
2af8 20 c7 30 zprnu_1   JSR Format_XA
2afb a2 00              LDX #0
2afd b5 1d    zprnu_2   LDA NUMBER,X
2aff c9 20              CMP #' '
2b01 f0 07              BEQ zprnu_3
2b03 86 11              STX LV2
2b05 20 15 30           JSR Print_Formatted
2b08 a6 11              LDX LV2
2b0a e8       zprnu_3   INX
2b0b e0 05              CPX #5
2b0d 90 ee              BCC zprnu_2
2b0f 60                 RTS

              ; ********
2b10            z_random
              ; ********

2b10 a5 3e              LDA X1L
2b12 85 40              STA X2L
2b14 a5 3f              LDA X1H
2b16 85 41              STA X2H
2b18 ad 1b d4           LDA Random
2b1b ae 12 d0           LDX Raster
2b1e 86 3e              STX X1L
2b20 29 7f              AND #$7f
2b22 85 3f              STA X1H
2b24 20 bd 27           JSR Divide_Signed
2b27 a5 2a              LDA RemH
2b29 85 3d              STA X0H
2b2b a6 29              LDX RemL
2b2d 86 3c              STX X0L
2b2f e3 3c              INW X0L
2b31 4c d9 22           JMP Store_X0

              ; ******
2b34            z_push
              ; ******

2b34 a5 3e              LDA X1L
2b36 a4 3f              LDY X1H
2b38 4c bc 22           JMP Push_AY

              ; ******
2b3b            z_pull
              ; ******
2b3b 20 d5 23           JSR z_pop
2b3e 4c b2 22           JMP Put_Var


              ; *************
2b41            z_encode_text
              ; *************
              ; Input : X1 = text buffer
              ;         X2 = length of word
              ;         X3 = start index
              ;         X4 = encoded text

2b41 18                 CLC
2b42 a5 3f              LDA X1H
2b44 69 41              ADC #>Z_HEADER
2b46 85 3f              STA X1H
2b48 a9 00              LDA #0
2b4a a2 09              LDX #9              ; word length
2b4c 9d be 3b zet_10    STA TEXT_WORD-1,X
2b4f ca                 DEX
2b50 d0 fa              BNE zet_10

2b52 a4 42              LDY X3L
2b54 b1 3e    zet_20    LDA (X1L),Y
2b56 da                 PHX
2b57 5a                 PHY
2b58 20 a8 2c           JSR Sep_All
2b5b 7a                 PLY
2b5c fa                 PLX
2b5d b0 0d              BCS zet_30
2b5f 9d bf 3b           STA TEXT_WORD,X
2b62 c8                 INY
2b63 e8                 INX
2b64 e4 32              CPX Word_Length
2b66 b0 04              BCS zet_30
2b68 e4 40              CPX X2L
2b6a 90 e8              BCC zet_20

2b6c 20 48 2e zet_30    JSR Encode
2b6f 18                 CLC
2b70 a5 44              LDA X4L
2b72 85 38              STA A0L
2b74 a5 45              LDA X4H
2b76 69 41              ADC #>Z_HEADER
2b78 85 39              STA A0H
2b7a a4 30              LDY Vocab_Length
2b7c 88                 DEY
2b7d b9 59 00 zet_40    LDA DICT_WORD,Y
2b80 91 38              STA (A0L),Y
2b82 88                 DEY
2b83 10 f8              BPL zet_40
2b85 60                 RTS

              ; ***********
2b86            z_read_char
              ; ***********
2b86 20 ad 30           JSR Print_Buffer
2b89 a5 2e              LDA Upper_Size
2b8b 85 1c              STA MORE_Counter
2b8d 20 fc 37           JSR Get_Character
2b90 4c d3 22           JMP Store_Byte

              *************
              Module z_read
              *************

2b93 24 2f              BIT Version
2b95 30 03              BMI _V4
2b97 20 90 37           JSR z_show_status
2b9a 20 ad 30 _V4       JSR Print_Buffer    ; print prompt
2b9d a2 00              LDX #0
2b9f 8e c8 3b           STX Tokenizer_Flag
2ba2 18                 CLC
2ba3 a5 3f              LDA X1H
2ba5 69 41              ADC #>Z_HEADER
2ba7 85 3f              STA X1H
2ba9 20 53 39           JSR Get_Line_X1     ; read input from user
2bac c6 24              DEC ParNum
2bae f0 09              BEQ _no_parse
2bb0 a5 40              LDA X2L
2bb2 05 41              ORA X2H
2bb4 f0 03              BEQ _no_parse
2bb6 20 c3 2b           JSR Parse_Input
2bb9 24 2f    _no_parse BIT Version
2bbb 10 05              BPL _return
2bbd a9 0d              LDA #CR
2bbf 4c d3 22           JMP Store_Byte
2bc2 60       _return   RTS
2bc3          EndMod [z_read] Size = 48 [$30]

              ******************
              Module Parse_Input
              ******************

              ;         X1    = text input buffer
              ;         X1[0] = buffer size
              ;         X1[1] = string length (Version > 3)

              ;         X2    = parse buffer  (item size = 4)
              ;         X2[0] = buffer size   (max. 59 items)
              ;         X2[1] = buffer length (items)

              ;         X7L   = item[0] dictionary address high
              ;         X7H   = item[1] dictionary address low
              ;         X8L   = item[2] # of characters
              ;         X8H   = item[3] start of word in text buffer

              ;         X5L   = index to text buffer
              ;         X5H   = size of word (characters)
              ;         X6L   = X2[1] = items parsed
              ;         X6H   = X2[0] = parse buffer limit

2bc3 ad 09 41           LDA h_dictionary_lo
2bc6 ac 08 41           LDY h_dictionary_hi

              *************
2bc9          Parse_AY_Dict
              *************

2bc9 85 35              STA DPL
2bcb 84 36              STY DPH
2bcd 18                 CLC
2bce a5 41              LDA X2H             ; X2 += Header
2bd0 69 41              ADC #>Z_HEADER      ; parse buffer
2bd2 85 41              STA X2H

              ; limit buffer capacity to 59 items

2bd4 a0 00              LDY #0
2bd6 b1 40              LDA (X2L),Y
2bd8 f0 04              BEQ Parse_10        ; -> use default
2bda c9 3c              CMP #60
2bdc 90 04              BCC Parse_15        ; -> OK (1..59)
2bde a9 3b    Parse_10  LDA #59
2be0 91 40              STA (X2L),Y         ; use default
2be2 85 49    Parse_15  STA X6H             ; copy of parse buffer limit
2be4 24 2f              BIT Version
2be6 10 05              BPL Parse_17
2be8 c8                 INY                 ; Y = 1
2be9 b1 3e              LDA (X1L),Y
2beb 85 1a              STA Chars_Left      ; Version > 3
2bed a0 02    Parse_17  LDY #2              ; Y = 2
2bef 84 25              STY Parse_Index     ; start in parse buffer
2bf1 24 2f              BIT Version
2bf3 30 01              BMI Parse_18
2bf5 88                 DEY                 ; start at 1 for Version = 3
2bf6 84 46    Parse_18  STY X5L             ; buffer index
2bf8 a0 00              LDY #0
2bfa 84 48              STY X6L             ; items parsed
2bfc 84 47              STY X5H             ; word size = 0

              ; parse loop for items (words or delimiters)

2bfe a6 48    Parse_20  LDX X6L             ; items parsed
2c00 e4 49              CPX X6H             ; items max.
2c02 b0 06              BCS Parse_25        ; -> exceeded # of words
2c04 a5 1a              LDA Chars_Left
2c06 05 47              ORA X5H             ; word size
2c08 d0 06              BNE Parse_30

2c0a a0 01    Parse_25  LDY #1              ; finish
2c0c 8a                 TXA
2c0d 91 40              STA (X2L),Y         ; items parsed
2c0f 60                 RTS                 ; exit

              ; continue parsing word

2c10 a5 47    Parse_30  LDA X5H             ; word size
2c12 c5 32              CMP Word_Length
2c14 90 03              BCC Parse_35        ; -> word length < max
2c16 20 92 2c           JSR Skip_Surplus    ; skip to next delimiter

2c19 a5 47    Parse_35  LDA X5H             ; word size
2c1b d0 1e              BNE Parse_45        ; -> search word in dictionary

2c1d a2 08              LDX #8              ; clear Word buffer
2c1f 9d bf 3b Parse_40  STA TEXT_WORD,X
2c22 ca                 DEX
2c23 10 fa              BPL Parse_40

              ; not a word, is this character a delimiter ?

2c25 a4 46              LDY X5L             ; buffer index
2c27 84 4d              STY X7L+3           ; X8H = word position
2c29 b1 3e              LDA (X1L),Y
2c2b 20 ad 2c           JSR Sep_Dict        ; dot, comma, quote
2c2e b0 25              BCS Parse_50        ; -> in dictionary
2c30 20 cb 2c           JSR Sep_Std         ; standard separators
2c33 90 06              BCC Parse_45
2c35 c6 1a              DEC Chars_Left      ; ignore ! or ?
2c37 e6 46              INC X5L             ; ++buffer index
2c39 d0 c3              BNE Parse_20        ; always

2c3b a5 1a    Parse_45  LDA Chars_Left
2c3d f0 1f              BEQ Parse_55
2c3f a4 46              LDY X5L             ; buffer index
2c41 b1 3e              LDA (X1L),Y
2c43 20 a8 2c           JSR Sep_All         ; check all separators
2c46 b0 16              BCS Parse_55
2c48 a6 47              LDX X5H             ; word size
2c4a 9d bf 3b           STA TEXT_WORD,X
2c4d c6 1a              DEC Chars_Left
2c4f e6 47              INC X5H             ; ++word size
2c51 e6 46              INC X5L             ; ++buffer index
2c53 80 a9              BRA Parse_20

2c55 8d bf 3b Parse_50  STA TEXT_WORD       ; word is a separator
2c58 c6 1a              DEC Chars_Left
2c5a e6 47              INC X5H             ; ++word size
2c5c e6 46              INC X5L             ; ++buffer index

              ; start parsing

2c5e a5 47    Parse_55  LDA X5H             ; word size
2c60 f0 9c              BEQ Parse_20        ; -> nothing to parse
2c62 85 4c              STA X7L+2           ; X8L = # of letters
2c64 20 48 2e           JSR Encode          ; convert to packed format
2c67 20 ee 2c           JSR Dictionary_Search ; result -> X7
2c6a e6 48              INC X6L             ; Inc # of items
2c6c a2 00              LDX #0
2c6e 86 47              STX X5H             ; word size
2c70 a4 25              LDY Parse_Index
2c72 ad c8 3b           LDA Tokenizer_Flag  ; 1 : store matches only
2c75 f0 0c              BEQ Parse_60        ; -> store anyhow
2c77 a5 4a              LDA X7L
2c79 05 4b              ORA X7H
2c7b d0 06              BNE Parse_60
2c7d c8                 INY                 ; skip this entry
2c7e c8                 INY                 ; no synonym replacement
2c7f c8                 INY
2c80 c8                 INY
2c81 d0 0a              BNE Parse_70        ; 0 : Dict address hi
2c83 b5 4a    Parse_60  LDA X7L,X           ; 1 : Dict address lo
2c85 91 40              STA (X2L),Y         ; 2 : # of letters
2c87 c8                 INY                 ; 3 : text buffer position
2c88 e8                 INX
2c89 e0 04              CPX #4
2c8b 90 f6              BCC Parse_60
2c8d 84 25    Parse_70  STY Parse_Index     ; Parse_Index += 4
2c8f 4c fe 2b           JMP Parse_20
2c92          EndMod [Parse_Input] Size = 207 [$cf]

              ; ************
2c92            Skip_Surplus
              ; ************

2c92 a5 1a              LDA Chars_Left
2c94 f0 11              BEQ SkSu_Ret
2c96 a4 46    SkSu_10   LDY X5L             ; buffer index
2c98 b1 3e              LDA (X1L),Y
2c9a 20 a8 2c           JSR Sep_All
2c9d b0 08              BCS SkSu_Ret
2c9f e6 47              INC X5H             ; word size
2ca1 e6 46              INC X5L             ; buffer index
2ca3 c6 1a              DEC Chars_Left
2ca5 d0 ef              BNE SkSu_10
2ca7 60       SkSu_Ret  RTS

              ; *******
2ca8            Sep_All
              ; *******

              ; Input : (A) = character
              ; Output: C=1 is separator, C=0 is not

              ; check standard list and dictionary list

2ca8 20 cb 2c           JSR Sep_Std
2cab b0 1d              BCS SeDi_Ret         ; -> is separator

              ; ********
2cad            Sep_Dict
              ; ********

              ; Input : (A) = character
              ; Output: C=1 is separator, C=0 is not

              ; typical list: , . "

2cad 48                 PHA
2cae 8d c2 2c           STA SeDi_10+4       ; search character
2cb1 ad 09 41           LDA h_dictionary_lo
2cb4 ac 08 41           LDY h_dictionary_hi
2cb7 20 e5 2c           JSR Set_Data_AY
2cba 20 24 37           JSR Next_Datum
2cbd aa                 TAX                 ; X = # of separators
2cbe 20 24 37 SeDi_10   JSR Next_Datum
2cc1 c9 20              CMP #' '            ; modified !
2cc3 f0 04              BEQ SeDi_20         ; yes: return with C=1
2cc5 ca                 DEX
2cc6 d0 f6              BNE SeDi_10
2cc8 18                 CLC                 ; no : return with C=0
2cc9 68       SeDi_20   PLA
2cca 60       SeDi_Ret  RTS

              ; *******
2ccb            Sep_Std
              ; *******

              ; Input : (A) = character
              ; Output: C=1 is separator, C=0 is not

              ; standard list: ! ? , . CR SPACE

2ccb a2 05              LDX #?Sep_Std_List-1 ; size of separator list
2ccd dd 70 35 SeSt_10   CMP Sep_Std_List,X
2cd0 f0 04              BEQ SeSt_Ret          ; yes: return with C=1
2cd2 ca                 DEX
2cd3 10 f8              BPL SeSt_10
2cd5 18                 CLC                  ; no : return with C=0
2cd6 60       SeSt_Ret  RTS

              ; *********
2cd7            Skip_Data
              ; *********

              ; Input : A = # of bytes to skip
              ; Output: QD pointer updated

2cd7 18                 CLC
2cd8 65 08              ADC QD0
2cda 85 08              STA QD0
2cdc 90 06              BCC SkDa_Ret
2cde e6 09              INC QD1
2ce0 d0 02              BNE SkDa_Ret
2ce2 e6 0a              INC QD2
2ce4 60       SkDa_Ret  RTS

              ; ***********
2ce5            Set_Data_AY
              ; ***********

2ce5 85 08              STA QD0
2ce7 84 09              STY QD1
2ce9 a0 00              LDY #0
2ceb 84 0a              STY QD2
2ced 60                 RTS

              ; *****************
2cee            Dictionary_Search
              ; *****************

              ; Input : DP = dictionary
              ;         RA = search token

2cee a5 35              LDA DPL             ; start of dictionary
2cf0 a4 36              LDY DPH
2cf2 20 e5 2c           JSR Set_Data_AY

2cf5 20 24 37           JSR Next_Datum      ; size of separator list
2cf8 20 d7 2c           JSR Skip_Data       ; skip list
2cfb 20 24 37           JSR Next_Datum      ; item size
2cfe 85 37              STA DPI
2d00 20 24 37           JSR Next_Datum      ; item count hi
2d03 85 45              STA X4H
2d05 20 24 37           JSR Next_Datum      ; item count lo
2d08 85 44              STA X4L
2d0a 05 45              ORA X4H
2d0c f0 36              BEQ DiSe_70         ; -> empty dictionary
2d0e a5 45              LDA X4H
2d10 30 0d              BMI DiSe_20         ; -> entries are unsorted

2d12 38                 SEC
2d13 a9 00              LDA #0              ; positive countdown is sorted
2d15 e5 44              SBC X4L             ; make count down negative
2d17 85 44              STA X4L
2d19 a9 00              LDA #0
2d1b e5 45              SBC X4H
2d1d 85 45              STA X4H

2d1f a5 08    DiSe_20   LDA QD0             ; X7 = address of next item
2d21 85 4b              STA X7H
2d23 a5 09              LDA QD1
2d25 85 4a              STA X7L
2d27 a2 00              LDX #0              ; X = token byte index
2d29 20 24 37 DiSe_30   JSR Next_Datum
2d2c e8                 INX
2d2d d5 58              CMP DICT_WORD-1,X
2d2f d0 05              BNE DiSe_50
2d31 e4 30              CPX Vocab_Length
2d33 90 f4              BCC DiSe_30
2d35 60                 RTS                 ; -> match

2d36 20 24 37 DiSe_50   JSR Next_Datum      ; skip to next item
2d39 e8                 INX
2d3a e4 37              CPX DPI             ; item_Size
2d3c 90 f8              BCC DiSe_50

2d3e e3 44              INW X4L             ; count up to zero
2d40 d0 dd              BNE DiSe_20

2d42 a9 00              LDA #0
2d44 85 4b    DiSe_70   STA X7H             ; not found: return (X7) = 0
2d46 85 4a              STA X7L
2d48 60       DiSe_Ret  RTS


              ;                6789abcdef0123456789abcdef
              ;                --------------------------
              ;         .BYTE "abcdefghijklmnopqrstuvwxyz"
              ;         .BYTE "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
2d49 00 0d 30 ZSCII_2   .BYTE "\0\r0123456789.,!?_#'\"/\\-:()"

              ; *********
2d63            Decode_YX
              ; *********

              ; print 5bit encoded text from address (Y/X)

2d63 84 08              STY QD0
2d65 86 09              STX QD1
2d67 a9 00              LDA #0
2d69 85 0a              STA QD2

              ; ***********
2d6b            Decode_Text
              ; ***********

2d6b a2 00              LDX #0
2d6d 86 07              STX QDH
2d6f a2 00    DeTe_10   LDX #0
2d71 86 13              STX Alphabet
2d73 20 02 2e DeTe_15   JSR Get_Packed_Char
2d76 b0 d0              BCS DiSe_Ret        ; return
2d78 d0 04              BNE DeTe_20
2d7a a9 20              LDA #' '            ; 0 : space
2d7c d0 24              BNE DeTe_40
2d7e c9 04    DeTe_20   CMP #4              ; 1,2,3 : abbreviations
2d80 90 38              BCC DeTe_55
2d82 c9 06              CMP #6              ; shift 4:capital, 5:numeric
2d84 b0 04              BCS DeTe_25
2d86 85 13              STA Alphabet
2d88 90 e9              BCC DeTe_15
2d8a a6 13    DeTe_25   LDX Alphabet
2d8c e0 05              CPX #5              ; numeric
2d8e d0 08              BNE DeTe_30
2d90 aa                 TAX
2d91 bd 43 2d           LDA ZSCII_2-6,X
2d94 d0 0c              BNE DeTe_40
2d96 f0 10              BEQ DeTe_50

2d98 e0 04    DeTe_30   CPX #4              ; upper case
2d9a d0 04              BNE DeTe_35
2d9c 69 3a              ADC #$3a            ; carry is set   from CPX
2d9e d0 02              BNE DeTe_40
2da0 69 5b    DeTe_35   ADC #$5b            ; carry is clear from CPX
2da2 20 15 30 DeTe_40   JSR Print_Formatted
2da5 4c 6f 2d           JMP DeTe_10

2da8 20 02 2e DeTe_50   JSR Get_Packed_Char ; 10 bit ZSCII
2dab 0a                 ASL A
2dac 0a                 ASL A
2dad 0a                 ASL A
2dae 0a                 ASL A
2daf 0a                 ASL A
2db0 85 0f              STA LV0
2db2 20 02 2e           JSR Get_Packed_Char
2db5 05 0f              ORA LV0
2db7 4c a2 2d           JMP DeTe_40

              ; process code for abbreviations (1,2,3) plus abbr. index

2dba e9 00    DeTe_55   SBC #0        ; subtract 1 (C=0)
2dbc 0a                 ASL A         ; 0, 1, 2
2dbd 0a                 ASL A
2dbe 0a                 ASL A
2dbf 0a                 ASL A
2dc0 0a                 ASL A
2dc1 0a                 ASL A
2dc2 85 11              STA LV2             ; -> $00, $40, $80
2dc4 20 02 2e           JSR Get_Packed_Char
2dc7 0a                 ASL A
2dc8 18                 CLC
2dc9 65 11              ADC LV2             ; add offset
2dcb a8                 TAY                 ; index to abbr. table

              ; push QD2, QD1, QD0, QDH, QDL for recursive call

2dcc a2 04              LDX #4
2dce b5 06    DeTe_60   LDA QDL,X
2dd0 48                 PHA
2dd1 ca                 DEX
2dd2 10 fa              BPL DeTe_60

              ; recursive call of Decode_Text for abbreviation

2dd4 18                 CLC
2dd5 ad 19 41           LDA h_abbreviations_lo
2dd8 85 38              STA A0L
2dda ad 18 41           LDA h_abbreviations_hi
2ddd 69 41              ADC #>Z_HEADER
2ddf 85 39              STA A0H             ; (A0) = start of abbr. pointer
2de1 c8                 INY
2de2 b1 38              LDA (A0L),Y         ; address low
2de4 0a                 ASL A               ; x 2
2de5 85 08              STA QD0
2de7 88                 DEY
2de8 b1 38              LDA (A0L),Y         ; address high
2dea 2a                 ROL A               ; x 2
2deb 85 09              STA QD1
2ded a9 00              LDA #0
2def 2a                 ROL A               ; high mem
2df0 85 0a              STA QD2

              ; recursive call

2df2 20 6b 2d           JSR Decode_Text

              ; pull QDL, QDH, QD0, QD1, QD2 after recursive call

2df5 a2 00              LDX #0
2df7 68       DeTe_65   PLA
2df8 95 06              STA QDL,X
2dfa e8                 INX
2dfb e0 05              CPX #5
2dfd 90 f8              BCC DeTe_65
2dff 4c 6f 2d           JMP DeTe_10
2e02                    .SIZE [BLACK] Size = 11778 [$2e02]
2e02                    .SIZE [BLACK] Size = 11778 [$2e02]

              ; ***************
2e02            Get_Packed_Char
              ; ***************

2e02 a5 07              LDA QDH
2e04 f0 1c              BEQ GPC_20          ; load next word
2e06 c9 80              CMP #%100 00000     ; EOS flag
2e08 f0 3d              BEQ GPC_Ret         ; return with C=1 : End-Of-String
2e0a 24 07              BIT QDH             ; valid 2nd. char ?
2e0c 50 0a              BVC GPC_10          ; goto  3rd. cahr
2e0e 29 9f              AND #%100 11111     ; save EOS clear bit 6
2e10 09 20              ORA #%001 00000     ; make non zero
2e12 85 07              STA QDH
2e14 29 1f              AND #%000 11111     ; extract data
2e16 18                 CLC
2e17 60                 RTS                 ; return with 2nd. char

2e18 29 80    GPC_10    AND #%100 00000     ; save EOS only
2e1a 85 07              STA QDH
2e1c a5 06              LDA QDL
2e1e 29 1f              AND #%000 11111     ; extract 5 bit
2e20 18                 CLC
2e21 60                 RTS                 ; return with 3rd. char

2e22 20 24 37 GPC_20    JSR Next_Datum
2e25 aa                 TAX                 ; x = first half
2e26 29 03              AND #%0000 0011     ; extract part of 2nd. char
2e28 85 07              STA QDH
2e2a 20 24 37           JSR Next_Datum
2e2d 85 06              STA QDL
2e2f 0a                 ASL A
2e30 26 07              ROL QDH
2e32 0a                 ASL A
2e33 26 07              ROL QDH
2e35 0a                 ASL A
2e36 26 07              ROL QDH
2e38 8a                 TXA
2e39 29 80              AND #%1000 0000     ; save EOS flag
2e3b 09 40              ORA #%0100 0000     ; set valid 2nd. char flag
2e3d 05 07              ORA QDH             ; add value
2e3f 85 07              STA QDH             ; save 2nd. char

2e41 8a                 TXA
2e42 4a                 LSR A
2e43 4a                 LSR A
2e44 29 1f              AND #%000 11111
2e46 18                 CLC
2e47 60       GPC_Ret   RTS                 ; return with 1st. char

              ; ******
2e48            Encode
              ; ******

              ; The encode takes 9 ASCII characters (6 in version 3) and
              ; converts them to packed ZSCII. This routine is called from the parser
              ; only, which already converts uppercase to lowercase letters.
              ; Also the output length is restricted to 6 characters (4 in bersion 3)
              ; because this is the size of a dictionary entry.

              ; Input:  6-9 ASCII charcaters in TEXT_WORD
              ; Output: 4-6 Z     characters in DICT_WORD

2e48 a0 00              LDY #0              ; TEXT_WORD[Y]
2e4a a2 00              LDX #0              ; DICT_WORD[X]
2e4c f0 0a              BEQ Enco_30

2e4e a9 05    Enco_10   LDA #5              ; void (numeric shift)
2e50 95 59    Enco_20   STA DICT_WORD,X     ; store next ZSCII
2e52 e8                 INX
2e53 e4 32              CPX Word_Length
2e55 b0 5b              BCS Enco_70

2e57 c8                 INY
2e58 b9 bf 3b Enco_30   LDA TEXT_WORD,Y     ; get next ASCII char
2e5b f0 f1              BEQ Enco_10         ; insert void char

2e5d c9 5b              CMP #'Z'+1          ; (A-Z) upper range
2e5f b0 08              BCS Enco_35
2e61 c9 41              CMP #'A'            ; (A-Z) lower range
2e63 90 04              BCC Enco_35
2e65 e9 3b              SBC #$3b            ; (A-Z) -> $06-$1f
2e67 d0 e7              BNE Enco_20         ; -> loop always

2e69 c9 7b    Enco_35   CMP #'z'+1          ; (a-z) upper range
2e6b b0 08              BCS Enco_40
2e6d c9 61              CMP #'a'            ; (a-z) lower range
2e6f 90 04              BCC Enco_40
2e71 e9 5b              SBC #$5b            ; (a-z) -> $06-$1f
2e73 d0 db              BNE Enco_20         ; -> loop always

2e75 8c 6f 35 Enco_40   STY L_Encode_Y
2e78 8d 6e 35           STA L_Encode_A
2e7b a9 05              LDA #5
2e7d 95 59              STA DICT_WORD,X
2e7f e8                 INX
2e80 ad 6e 35           LDA L_Encode_A
2e83 a0 19              LDY #25
2e85 d9 49 2d Enco_50   CMP ZSCII_2,Y
2e88 f0 20              BEQ Enco_60         ; found ZSCII in table 3
2e8a 88                 DEY
2e8b d0 f8              BNE Enco_50

2e8d a9 06              LDA #6              ; shift to 10 bit char
2e8f 95 59              STA DICT_WORD,X
2e91 e8                 INX
2e92 ad 6e 35           LDA L_Encode_A
2e95 4a                 LSR A
2e96 4a                 LSR A
2e97 4a                 LSR A
2e98 4a                 LSR A
2e99 4a                 LSR A
2e9a 29 03              AND #3
2e9c 95 59              STA DICT_WORD,X
2e9e e8                 INX
2e9f ad 6e 35           LDA L_Encode_A
2ea2 29 1f              AND #$1f
2ea4 ac 6f 35           LDY L_Encode_Y
2ea7 4c 50 2e           JMP Enco_20

2eaa 98       Enco_60   TYA                 ; use index to table 3 as value
2eab ac 6f 35           LDY L_Encode_Y      ; restore read index
2eae 69 05              ADC #5              ; add offset 6 (5 + carry)
2eb0 d0 9e              BNE Enco_20         ; loop always

2eb2 a2 00    Enco_70   LDX #0
2eb4 a0 00              LDY #0
2eb6 b5 5a    Enco_80   LDA DICT_WORD+1,X
2eb8 0a                 ASL A
2eb9 0a                 ASL A
2eba 0a                 ASL A
2ebb 0a                 ASL A
2ebc 36 59              ROL DICT_WORD,X
2ebe 0a                 ASL A
2ebf 36 59              ROL DICT_WORD,X
2ec1 15 5b              ORA DICT_WORD+2,X
2ec3 48                 PHA
2ec4 b5 59              LDA DICT_WORD,X
2ec6 99 59 00           STA DICT_WORD,Y
2ec9 68                 PLA
2eca 99 5a 00           STA DICT_WORD+1,Y
2ecd e8                 INX
2ece e8                 INX
2ecf e8                 INX
2ed0 c8                 INY
2ed1 c8                 INY
2ed2 e4 32              CPX Word_Length
2ed4 90 e0              BCC Enco_80
2ed6 b9 57 00           LDA DICT_WORD-2,Y
2ed9 09 80              ORA #$80            ; end of string flag
2edb 99 57 00           STA DICT_WORD-2,Y
2ede 60                 RTS

              *************
              Module A0_x_8
              *************

2edf 85 38              STA A0L
2ee1 86 39              STX A0H             ; (A0) = object
2ee3 0a                 ASL A
2ee4 26 39              ROL A0H             ; (A/A0H) = object *  2
2ee6 0a                 ASL A
2ee7 26 39              ROL A0H             ; (A/A0H) = object *  4
2ee9 0a                 ASL A
2eea 26 39              ROL A0H             ; (A/A0H) = object *  8
2eec 60                 RTS
2eed          EndMod [A0_x_8] Size = 14 [$e]

              ********************
              Module Object_Offset
              ********************

              ; V3 Address = (h_objects) + 53 + 9 * object

2eed 24 2f              BIT Version
2eef 30 0f              BMI _V4
2ef1 a2 00              LDX #0
2ef3 20 df 2e           JSR A0_x_8
2ef6 65 38              ADC A0L
2ef8 90 03              BCC _label
2efa e6 39              INC A0H             ; (A/A0H) = object *  9
2efc 18                 CLC
2efd 69 35    _label    ADC #53             ; V3 offset 53
2eff 60                 RTS

              ; V4 Address = (h_objects) + 112 + 14 * object

2f00 20 df 2e _V4       JSR A0_x_8
2f03 38                 SEC
2f04 e5 38              SBC A0L
2f06 48                 PHA                 ; low  of  (object *  7)
2f07 a5 39              LDA A0H
2f09 86 39              STX A0H
2f0b e5 39              SBC A0H
2f0d 85 39              STA A0H             ; high of  (object *  7)
2f0f 68                 PLA
2f10 0a                 ASL A
2f11 26 39              ROL A0H             ; (A/A0H) = object * 14
2f13 69 70              ADC #112            ; V4 offset 112
2f15 60                 RTS
2f16          EndMod [Object_Offset] Size = 41 [$29]

              ********************
              Module Get_Object_X1
              ********************

2f16 a5 3e              LDA X1L
2f18 a6 3f              LDX X1H

              **************
2f1a          Get_Object_Reg
              **************

              ; Compute address of object

              ; Version > 3:
              ; -----------------------------------------
              ; Address = (h_objects) + 112 + 14 * object
              ; Input : (A/X) = input  object id
              ;         Y     = object item
              ; Output: (A/X) = output object id
              ;         (A0L) = address

2f1a 20 ed 2e           JSR Object_Offset
2f1d 90 03              BCC _label
2f1f e6 39              INC A0H
2f21 18                 CLC
2f22 6d 0b 41 _label    ADC h_objects_lo
2f25 85 38              STA A0L
2f27 a5 39              LDA A0H
2f29 6d 0a 41           ADC h_objects_hi
2f2c 69 41              ADC #>Z_HEADER
2f2e 85 39              STA A0H
2f30 a2 00              LDX #0             ; object hi for V3
2f32 24 2f              BIT Version
2f34 10 04              BPL _objlow
2f36 b1 38              LDA (A0L),Y
2f38 aa                 TAX                ; object hi
2f39 c8                 INY
2f3a b1 38    _objlow   LDA (A0L),Y        ; object lo
2f3c 60                 RTS
2f3d          EndMod [Get_Object_X1] Size = 39 [$27]

              *********************
              Module First_Property
              *********************

              ; Find address of property table of object (X1)

              ; Input : (X1) = object ID
              ; Output: (A0) = pointer to property table after NAME
              ;          A   = ID of first property
              ;          Y   = 0

2f3d a0 07              LDY #7              ; version = 3 offset to property pointer
2f3f 24 2f              BIT Version
2f41 10 02              BPL _fips_1
2f43 a0 0c              LDY #12             ; version > 3 offset to property pointer
2f45 20 16 2f _fips_1   JSR Get_Object_X1
2f48 24 2f              BIT Version
2f4a 30 04              BMI _fips_2
2f4c aa                 TAX                 ; property pointer high
2f4d c8                 INY
2f4e b1 38              LDA (A0L),Y         ; property pointer low
2f50 85 38    _fips_2   STA A0L             ; property table low
2f52 8a                 TXA                 ; property table high
2f53 69 41              ADC #>Z_HEADER      ; C=0 from Get_Object
2f55 85 39              STA A0H             ; (A0) = property table
2f57 a0 00              LDY #0              ; offset to NAME property
2f59 b1 38              LDA (A0L),Y         ; size of name (words)
2f5b 0a                 ASL A               ; size of name (bytes)
2f5c 38                 SEC                 ; add size + 1
2f5d 65 38              ADC A0L
2f5f 85 38              STA A0L
2f61 90 02              BCC FiPr_10
2f63 e6 39              INC A0H
2f65 b1 38    FiPr_10   LDA (A0L),Y
2f67 25 26              AND Prop_Mask       ; A = property ID
2f69 60                 RTS
2f6a          EndMod [First_Property] Size = 45 [$2d]

              ********************
              Module Property_Size
              ********************

2f6a 24 2f              BIT Version
2f6c 10 12              BPL _V3
2f6e b1 38              LDA (A0L),Y
2f70 10 07              BPL _one
2f72 c8                 INY
2f73 b1 38              LDA (A0L),Y         ; 2nd. size byte
2f75 c8                 INY
2f76 25 26              AND Prop_Mask
2f78 60                 RTS

2f79 c8       _one      INY                 ; Y points after size
2f7a 0a                 ASL A               ; bit 7 = length info
2f7b 0a                 ASL A               ; carry = length info
2f7c 2a                 ROL A               ; bit 0 = length info
2f7d 29 01              AND #1
2f7f 60                 RTS

2f80 b1 38    _V3       LDA (A0L),Y
2f82 c8                 INY
2f83 4a                 LSR A
2f84 4a                 LSR A
2f85 4a                 LSR A
2f86 4a                 LSR A
2f87 4a                 LSR A
2f88 60                 RTS
2f89          EndMod [Property_Size] Size = 31 [$1f]

              ; *************
2f89            Next_Property
              ; *************

              ; use size info and point to next property (V3-V5)

              ; Input : (A0) = pointer to current property
              ; Output: (A0) = pointer to next property
              ;            Y = 0

2f89 20 6a 2f           JSR Property_Size
2f8c 18                 CLC
2f8d 69 02              ADC #2
2f8f 65 38              ADC A0L
2f91 85 38              STA A0L
2f93 90 02              BCC NePr_20
2f95 e6 39              INC A0H
2f97 a0 00    NePr_20   LDY #0
2f99 b1 38              LDA (A0L),Y
2f9b 25 26              AND Prop_Mask
2f9d 60                 RTS

              ********************
              Module Find_Property
              ********************

              ; search for property X2L of object X1

              ; Input : (X1)  = object   ID
              ;         (X2L) = property ID

              ; Output: Z=0 if property was not found
              ;         Z=1 if property was found
              ;             A = 0
              ;             Y = 0
              ;             C = 1 if separate length byte

2f9e 20 3d 2f           JSR First_Property  ; -> (A0) and Y = 0
2fa1 c5 40    _loop     CMP X2L
2fa3 f0 07              BEQ _match
2fa5 90 0f              BCC _return         ; -> not in table (Z=0)
2fa7 20 89 2f           JSR Next_Property
2faa 80 f5              BRA _loop
2fac 18       _match    CLC
2fad 24 2f              BIT Version
2faf 10 03              BPL _ok
2fb1 b1 38              LDA (A0L),Y         ; prepare pointer advancement
2fb3 0a                 ASL A               ; C=1 for 2 byte header
2fb4 a9 00    _ok       LDA #0              ; set zero flag
2fb6 60       _return   RTS                 ; Z=1 success, Z=0 not found
2fb7          EndMod [Find_Property] Size = 25 [$19]

              ; *************
2fb7            Get_Attr_Addr
              ; *************

              ; Input
              ; -----
              ; X1L = object #
              ; X2L = flag   #
              ;
              ; Output
              ; ------
              ; (A0L),Y = Address of attribute
              ; (A)     = Attribute mask

2fb7 20 16 2f           JSR Get_Object_X1
2fba a5 40              LDA X2L      ; flag #
2fbc 4a                 LSR A
2fbd 4a                 LSR A
2fbe 4a                 LSR A
2fbf a8                 TAY          ; offset = flag / 8
2fc0 a5 40              LDA X2L
2fc2 29 07              AND #7       ; flag mod 8
2fc4 aa                 TAX
2fc5 a9 80              LDA #$80     ; flag 0
2fc7 d0 01              BNE gaa_02
2fc9 4a       gaa_01    LSR A
2fca ca       gaa_02    DEX
2fcb 10 fc              BPL gaa_01
2fcd 60                 RTS

              ; *********
2fce            Dump_Code
              ; *********

2fce a5 02              LDA Z_Code
2fd0 20 1c 3a           JSR ASCII_Hex
2fd3 48                 PHA
2fd4 8a                 TXA
2fd5 20 e6 38           JSR CHROUT
2fd8 68                 PLA
2fd9 4c e6 38           JMP CHROUT


              ; **************
2fdc            INTERNAL_ERROR
              ; **************

2fdc 20 70 3a           JSR ASCII_TS
2fdf 8e 2f 3d           STX INTERR+7
2fe2 8d 30 3d           STA INTERR+8
2fe5 20 71 30           JSR z_new_line
2fe8 20 ce 2f           JSR Dump_Code
                        Print(INTERR)
2feb a9 28              LDA #<INTERR
2fed a0 3d              LDY #>INTERR
2fef a2 0a              LDX #?INTERR
2ff1 20 c6 39           JSR PrintText

2ff4 a2 02              LDX #2
2ff6 b5 00    INER_10   LDA 0,X
2ff8 9d 00 40           STA $4000,X
2ffb e8                 INX
2ffc d0 f8              BNE INER_10
2ffe 4c ee 23           JMP z_quit

              ; ***************
3001            Print_To_Status
              ; ***************

3001 99 00 1f           STA Z_STATUS,Y
3004 c0 4f              CPY #COLS-1
3006 b0 02              BCS PTS_01
3008 e6 2d              INC Status_Col
300a 60       PTS_01    RTS

              ****************
              Module Print_Mem
              ****************

300b a0 00             LDY #0
300d 91 53             STA (Z_Mem_Ptr),Y
300f e3 53             INW Z_Mem_Ptr
3011 60                RTS
3012          EndMod [Print_Mem] Size = 7 [$7]

              ; ****************
3012            Print_Unbuffered
              ; ****************

3012 4c e6 38           JMP CHROUT

              **********************
              Module Print_Formatted
              **********************

3015 24 2f              BIT Version
3017 10 11              BPL PrFo_10
3019 2c ca 3b           BIT Z_Mem_Flag
301c 30 ed              BMI Print_Mem       ; print to stream # 3
301e ac 77 35           LDY Z_Buffer_Mode
3021 f0 ef              BEQ Print_Unbuffered
3023 ac 7b 35           LDY Z_Active_Window
3026 d0 ea              BNE Print_Unbuffered
3028 f0 04              BEQ PrFo_20
302a a4 2d    PrFo_10   LDY Status_Col      ; Version 3
302c 10 d3              BPL Print_To_Status
302e c9 0d    PrFo_20   CMP #CR
3030 f0 3f              BEQ z_new_line
3032 c9 20              CMP #' '            ; not printable ?
3034 90 10              BCC PrFo_25
3036 a4 18              LDY Charbuf_Ptr
3038 99 00 02           STA Charbuf,Y
303b aa                 TAX                 ; X = char
303c 18                 CLC
303d 98                 TYA
303e 65 4e              ADC Cursor_Col
3040 c9 50              CMP #COLS
3042 b0 03              BCS PrFo_30         ; -> buffer full: print row


3044 e6 18              INC Charbuf_Ptr
3046 60       PrFo_25   RTS

3047 a9 20    PrFo_30   LDA #' '        ; scan backwards for blank
3049 84 19              STY Charbuf_End
304b d9 00 02 PrFo_35   CMP Charbuf,Y
304e f0 05              BEQ PrFo_40
3050 88                 DEY
3051 d0 f8              BNE PrFo_35
3053 a4 19              LDY Charbuf_End ; no blanks found
3055 84 18    PrFo_40   STY Charbuf_Ptr ; print line before Charbuf_Ptr
3057 98                 TYA
3058 48                 PHA             ; save line break col
3059 20 71 30           JSR z_new_line  ; print line
305c 68                 PLA
305d aa                 TAX             ; line break col
305e a0 00              LDY #0
3060 f0 07              BEQ PrFo_50

3062 bd 00 02 PrFo_45   LDA Charbuf,X   ; scroll rest of buffer
3065 99 00 02           STA Charbuf,Y
3068 c8                 INY
3069 e4 19    PrFo_50   CPX Charbuf_End
306b e8                 INX
306c 90 f4              BCC PrFo_45
306e 84 18              STY Charbuf_Ptr
3070 60                 RTS
3071          EndMod [Print_Formatted] Size = 92 [$5c]

              ; ************
3071            z_new_line
              ; ************

3071 e6 1c              INC MORE_Counter
3073 a6 1c              LDX MORE_Counter
3075 e0 17              CPX #ROWS-2
3077 90 2b              BCC Terminate_Buffer
3079 20 90 37           JSR z_show_status
307c a5 2e              LDA Upper_Size
307e 85 1c              STA MORE_Counter
3080 20 f8 32           JSR Empty_Keyboard_Queue
3083 20 47 3a           JSR Save_Cursor
                        Print(MORE)
3086 a9 44              LDA #<MORE
3088 a0 3c              LDY #>MORE
308a a2 08              LDX #?MORE
308c 20 c6 39           JSR PrintText

308f 20 e4 ff znl_10    JSR GETIN
3092 aa                 TAX
3093 f0 fa              BEQ znl_10
3095 20 4f 3a           JSR Restore_Cursor
                        Print(BLANKS)
3098 a9 f0              LDA #<BLANKS
309a a0 3c              LDY #>BLANKS
309c a2 0c              LDX #?BLANKS
309e 20 c6 39           JSR PrintText

30a1 20 4f 3a           JSR Restore_Cursor

              ; ****************
30a4            Terminate_Buffer
              ; ****************

30a4 a6 18              LDX Charbuf_Ptr
30a6 a9 0d              LDA #CR
30a8 9d 00 02           STA Charbuf,X
30ab e6 18              INC Charbuf_Ptr

              ; ************
30ad            Print_Buffer
              ; ************

30ad a5 18              LDA Charbuf_Ptr
30af f0 11              BEQ PrBu_Ret        ; -> nothing to print
30b1 a2 00              LDX #0
30b3 bd 00 02 PrBu_10   LDA Charbuf,X       ; flush buffer
30b6 20 e6 38           JSR CHROUT
30b9 e8                 INX
30ba e4 18              CPX Charbuf_Ptr
30bc 90 f5              BCC PrBu_10
30be a2 00              LDX #0
30c0 86 18              STX Charbuf_Ptr
30c2 60       PrBu_Ret  RTS

              ; **************
30c3            Format_Integer
              ; **************

30c3 a6 3c              LDX X0L
30c5 a5 3d              LDA X0H
30c7 a0 2f    Format_XA LDY #$2f
30c9 38                 SEC
30ca c8       FORINT_01 INY
30cb 86 0f              STX LV0
30cd 85 10              STA LV1
30cf 8a                 TXA
30d0 e9 10              SBC #<10000
30d2 aa                 TAX
30d3 a5 10              LDA LV1
30d5 e9 27              SBC #>10000
30d7 b0 f1              BCS FORINT_01
30d9 84 1d              STY NUMBER
30db a6 0f              LDX LV0
30dd a5 10              LDA LV1
30df a0 2f              LDY #$2f
30e1 38                 SEC
30e2 c8       FORINT_02 INY
30e3 86 0f              STX LV0
30e5 85 10              STA LV1
30e7 8a                 TXA
30e8 e9 e8              SBC #<1000
30ea aa                 TAX
30eb a5 10              LDA LV1
30ed e9 03              SBC #>1000
30ef b0 f1              BCS FORINT_02
30f1 84 1e              STY NUMBER+1
30f3 a6 0f              LDX LV0
30f5 a5 10              LDA LV1
30f7 a0 2f              LDY #$2f
30f9 38                 SEC
30fa c8       FORINT_03 INY
30fb 86 0f              STX LV0
30fd 85 10              STA LV1
30ff 8a                 TXA
3100 e9 64              SBC #100
3102 aa                 TAX
3103 a5 10              LDA LV1
3105 e9 00              SBC #0
3107 b0 f1              BCS FORINT_03
3109 84 1f              STY NUMBER+2
310b a5 0f              LDA LV0
310d a0 2f              LDY #$2f
310f 38                 SEC
3110 c8       FORINT_04 INY
3111 e9 0a              SBC #10
3113 b0 fb              BCS FORINT_04
3115 84 20              STY NUMBER+3
3117 69 3a              ADC #$3a
3119 85 21              STA NUMBER+4
311b a2 00              LDX #0
311d a9 20              LDA #' '
311f b4 1d    FORINT_05 LDY NUMBER,X
3121 c0 30              CPY #'0'
3123 d0 07              BNE FORINT_06
3125 95 1d              STA NUMBER,X
3127 e8                 INX
3128 e0 04              CPX #4
312a 90 f3              BCC FORINT_05
312c 60       FORINT_06 RTS

              ********************
              Module Status_Number
              ********************

              ; This routine is used in version 3 stories
              ; Insert number (score, moves, time) into status line
              ; Imput : (A) = global variable
              ;         (Y) = status line column

312d 5a                 PHY
312e 20 a5 22           JSR Get_Global_Var
3131 20 c3 30           JSR Format_Integer
3134 7a                 PLY
3135 a2 00              LDX #0
3137 b5 1d    StNu_10   LDA NUMBER,X
3139 c9 20              CMP #' '
313b f0 04              BEQ StNu_20
313d 99 ff 3c           STA SCORE,Y
3140 c8                 INY
3141 e8       StNu_20   INX
3142 e0 05              CPX #5
3144 90 f1              BCC StNu_10
3146 60                 RTS
3147          EndMod [Status_Number] Size = 26 [$1a]

              *****************
              Module Print_Time
              *****************

3147 a9 11              LDA #$11            ; hours var
3149 20 a5 22           JSR Get_Global_Var
314c 20 c3 30           JSR Format_Integer
314f a0 06              LDY #STIME_COL
3151 a5 20              LDA NUMBER+3
3153 99 1b 3d           STA STIME,Y
3156 a5 21              LDA NUMBER+4
3158 99 1c 3d           STA STIME+1,Y

315b a9 12              LDA #$12            ; minutes var
315d 20 a5 22           JSR Get_Global_Var
3160 20 c3 30           JSR Format_Integer
3163 a0 06              LDY #STIME_COL
3165 a5 20              LDA NUMBER+3
3167 09 30              ORA #'0'            ; blank -> '0'
3169 99 1e 3d           STA STIME+3,Y
316c a5 21              LDA NUMBER+4
316e 99 1f 3d           STA STIME+4,Y

3171 a2 00              LDX #0
3173 bd 1b 3d _loop     LDA STIME,X
3176 9d 58 1f           STA Z_STATUS+88,X
3179 e8                 INX
317a e0 0c              CPX #12
317c 90 f5              BCC _loop
317e 60                 RTS
317f          EndMod [Print_Time] Size = 56 [$38]

              ******************
              Module Print_Score
              ******************

317f a9 20              LDA #' '
3181 a0 0b              LDY #SCORE_COL+4
3183 99 ff 3c _clr_sc   STA SCORE,Y         ; clear score
3186 88                 DEY
3187 c0 07              CPY #SCORE_COL
3189 d0 f8              BNE _clr_sc
318b a9 11              LDA #$11            ; score var
318d 20 2d 31           JSR Status_Number   ; print score
3190 a9 20              LDA #' '
3192 a0 1a              LDY #MOVES_COL+4
3194 99 ff 3c _clr_mv   STA SCORE,Y         ; clear score
3197 88                 DEY
3198 c0 16              CPY #MOVES_COL
319a d0 f8              BNE _clr_mv
319c a9 12              LDA #$12            ; moves var
319e 20 2d 31           JSR Status_Number

31a1 a2 00              LDX #0
31a3 bd ff 3c _loop     LDA SCORE,X
31a6 9d 34 1f           STA Z_STATUS+STAT_SCORE,X
31a9 e8                 INX
31aa e0 1c              CPX #COLS-STAT_SCORE
31ac 90 f5              BCC _loop
31ae 60                 RTS
31af          EndMod [Print_Score] Size = 48 [$30]

              *******************
              Module Print_Status
              *******************

31af 20 40 3a           JSR Select_Status_Window
31b2 a9 07              LDA #YELLOW
31b4 8d 86 02           STA COLOR
                        Print(PRE_STATUS)
31b7 a9 fc              LDA #<PRE_STATUS
31b9 a0 3c              LDY #>PRE_STATUS
31bb a2 03              LDX #?PRE_STATUS
31bd 20 c6 39           JSR PrintText

31c0 a9 00              LDA #<Z_STATUS
31c2 a0 1f              LDY #>Z_STATUS
31c4 a2 4f              LDX #COLS-1
31c6 20 c6 39           JSR PrintText
31c9 a9 92              LDA #REVERSE_OFF
31cb 20 e6 38           JSR CHROUT
31ce a9 01              LDA #WHITE
31d0 8d 86 02           STA COLOR
31d3 4c 36 3a           JMP Select_Text_Window
31d6          EndMod [Print_Status] Size = 39 [$27]

              *******************
              MODULE z_set_window
              *******************
31d6 20 ad 30           JSR Print_Buffer
31d9 a6 3e              LDX X1L             ; new active window
31db ec 7b 35           CPX Z_Active_Window
31de f0 1a              BEQ _return         ; -> no change
31e0 8e 7b 35           STX Z_Active_Window
31e3 bd 3d 3d           LDA FG_Color,X
31e6 8d 86 02           STA COLOR
31e9 8a                 TXA
31ea f0 0f              BEQ _lower

              ; switch from window lower window 0 to upper window 1

31ec a2 00              LDX #0
31ee 86 31              STX Win_Top
31f0 ca                 DEX                 ; X = -1
31f1 8e 79 35           STX Z_Monospace
31f4 a6 2e              LDX Upper_Size
31f6 ca                 DEX
31f7 8e 27 3d           STX Win_Bot
31fa 60       _return   RTS

              ; switch from upper window 1 to lower window 0

31fb a5 2e    _lower    LDA Upper_Size    ; window 0: lower
31fd 85 31              STA Win_Top
31ff a2 18              LDX #ROWS-1
3201 8e 27 3d           STX Win_Bot
3204 a0 00              LDY #0
3206 8c 79 35           STY Z_Monospace
3209 4c 93 35           JMP Set_Row_Col
320c          ENDMOD [z_set_window] Size = 54 [$36]

              ; *************
320c            Set_Underline
              ; *************

              ; Input : Z-Flag

320c f0 02              BEQ Sund_10
320e a9 fc              LDA #%1111 1100
3210 8d 7a 35 Sund_10   STA Z_Underline
3213 60                 RTS

              ; ***********
3214            Set_Reverse
              ; ***********

              ; Input : Z-Flag

3214 f0 05              BEQ Srev_10
3216 a9 80              LDA #$80
3218 85 c7              STA RVS             ; reverse on
321a 60                 RTS

321b a9 00    Srev_10   LDA #0              ; reverse off
321d 85 c7              STA RVS
321f 60                 RTS

              ; ****************
3220            z_set_text_style
              ; ****************

              ; % 76543210 Z                C128
              ;       ^--- 8: fixed pitch   ignore (font is fixed anyway)
              ;        ^-- 4: Italic        Att Bit 5 = underline
              ;         ^- 2: Bold
              ;          ^ 1: Reverse       RVS = $ff
              ;            0: Normal        RVS = 0    Underline = 0

3220 20 ad 30           JSR Print_Buffer
3223 a5 3e              LDA X1L
3225 29 01              AND #1
3227 20 14 32           JSR Set_Reverse
322a a5 3e              LDA X1L
322c 29 04              AND #4
322e 4c 0c 32           JMP Set_Underline

              ; *************
3231            z_buffer_mode
              ; *************
3231 20 ad 30           JSR Print_Buffer
3234 a5 3e              LDA X1L
3236 8d 77 35           STA Z_Buffer_Mode
3239 60                 RTS

              ; ************
323a            z_set_cursor
              ; ************

              ; Input : X1 = new row position relative to window top
              ;         X2 = new column position

323a a5 2e              LDA Upper_Size
323c 85 1c              STA MORE_Counter
323e 20 ad 30           JSR Print_Buffer    ; the Z  cursor home is [1:1]

3241 a6 3e              LDX X1L             ; the OS cursor home is [0:0]
3243 ca                 DEX                 ; so subtract 1 from each
3244 a4 40              LDY X2L
3246 88                 DEY

              ;  JSR Monitor_Break

3247 8a                 TXA
3248 18                 CLC
3249 65 31              ADC Win_Top
324b aa                 TAX
324c 4c 93 35           JMP Set_Row_Col

              **********************
              Module z_output_stream
              **********************

              ; Input:  (X1L) = stream number  3:  select memory
              ;                               -3:deselect memory
              ;         (X2)  = table address

324f 20 ad 30           JSR Print_Buffer    ; flush buffer
3252 a5 3e              LDA X1L             ; stream number
3254 c9 fd              CMP #-3             ; deselect memory stream ?
3256 f0 21              BEQ zos_20          ; -> do
3258 c9 03              CMP #3              ; select memory stream ?
325a d0 1c              BNE zos_10          ; no -> return
325c a9 ff              LDA #-1
325e 8d ca 3b           STA Z_Mem_Flag      ; open memory channel
3261 18                 CLC
3262 a5 41              LDA X2H
3264 69 41              ADC #>Z_HEADER
3266 8d cc 3b           STA Z_Mem_Base+1    ; Z_Mem_Base = TABLE
3269 85 54              STA Z_Mem_Ptr+1
326b a5 40              LDA X2L
326d 8d cb 3b           STA Z_Mem_Base
3270 69 02              ADC #2
3272 85 53              STA Z_Mem_Ptr       ; Z_Mem_Ptr = TABLE+2
3274 90 02              BCC zos_10
3276 e6 54              INC Z_Mem_Ptr+1
3278 60       zos_10    RTS

              ; close memory channel
              ; store length of TABLE in first word of (Z_Mem_Base)

3279 a0 01    zos_20    LDY #1
327b ad cb 3b           LDA Z_Mem_Base      ; (A0) = (Z_Mem_Base)
327e 85 38              STA A0L
3280 ad cc 3b           LDA Z_Mem_Base+1
3283 85 39              STA A0H
3285 38                 SEC
3286 a5 53              LDA Z_Mem_Ptr       ; (A/X) = (Z_Mem_Ptr)-2
3288 a6 54              LDX Z_Mem_Ptr+1
328a e9 02              SBC #2
328c b0 02              BCS zos_30
328e ca                 DEX
328f 38                 SEC
3290 e5 38    zos_30    SBC A0L
3292 91 38              STA (A0L),Y         ; length low
3294 88                 DEY                 ; Y = 0
3295 8c ca 3b           STY Z_Mem_Flag      ; close channel
3298 8a                 TXA
3299 e5 39              SBC A0H
329b 91 38              STA (A0L),Y         ; length high
329d 60                 RTS
329e          EndMod [z_output_stream] Size = 79 [$4f]

              ; **************
329e            z_erase_window
              ; **************
329e 20 ad 30           JSR Print_Buffer
32a1 a6 3e              LDX X1L
32a3 e0 ff              CPX #-1
32a5 d0 0e              BNE zew_10
32a7 a9 00              LDA #0
32a9 85 2e              STA Upper_Size
32ab 85 31              STA Win_Top
32ad 8d 7b 35           STA Z_Active_Window
32b0 a9 93              LDA #CLEAR
32b2 4c e6 38           JMP CHROUT
32b5 4c 63 3a zew_10    JMP Erase_Upper_Window

              ; ***********
32b8            z_extension
              ; ***********
32b8 68                 PLA                  ; remove return address
32b9 68                 PLA
32ba 20 5a 37           JSR Next_Instruction ; extendedcode
32bd 85 02              STA Z_Code
32bf 20 5a 37           JSR Next_Instruction ; operand type
32c2 20 54 22           JSR Load_4_Operands
32c5 a5 02              LDA Z_Code
32c7 29 1f              AND #$1f
32c9 c9 0a              CMP #10
32cb b0 11              BCS z_error12
32cd 0a                 ASL A
32ce a8                 TAY
32cf b9 14 22           LDA opcodes_ext,Y
32d2 8d 40 21           STA JSRMOD+1
32d5 b9 15 22           LDA opcodes_ext+1,Y
32d8 8d 41 21           STA JSRMOD+2
32db 4c 3f 21           JMP JSRMOD

              z_error12 ERROR(12)
32de a9 0c              LDA #12
32e0 4c dc 2f           JMP INTERNAL_ERROR



              ; ***********
32e3            z_save_undo
              ; ***********

32e3 a9 ff              LDA #$FF
32e5 aa                 TAX
32e6 4c d5 22           JMP Store_AX

              ; **************
32e9            z_sound_effect
              ; **************

32e9 a6 3e              LDX X1L
32eb ca                 DEX
32ec f0 09              BEQ Click
32ee ca                 DEX
32ef f0 01              BEQ Error_Beep
32f1 60                 RTS

              ; **********
32f2            Error_Beep
              ; **********

32f2 a9 07              LDA #7
32f4 4c e6 38           JMP CHROUT

              ; *****
32f7            Click
              ; *****
32f7 60                 RTS




              ; ********************
32f8            Empty_Keyboard_Queue
              ; ********************

32f8 20 e4 ff           JSR GETIN
32fb d0 fb              BNE Empty_Keyboard_Queue
32fd 60                 RTS

              ; ***********
32fe            Decode_Unit
              ; ***********
32fe c9 30              CMP #'0'
3300 b0 03              BCS DeUn_10
3302 8a                 TXA                 ; one digit
3303 d0 06              BNE DeUn_20
3305 e0 31    DeUn_10   CPX #'1'
3307 d0 02              BNE DeUn_20
3309 69 09              ADC #9              ; two digits 10 - 15
330b 29 0f    DeUn_20   AND #15
330d 60                 RTS


              ; ***********
330e            Unit_Dialog
              ; ***********

330e a2 cd              LDX #<Unit_Buf
3310 a0 3b              LDY #>Unit_Buf
3312 20 2d 39           JSR Got_Line
3315 ae cf 3b           LDX Unit_Text       ; 10
3318 ad d0 3b           LDA Unit_Text+1     ;  1
331b 20 fe 32           JSR Decode_Unit
331e 85 2c              STA Save_Unit
3320 60                 RTS

              ; ***************
3321            Wait_for_Return
              ; ***************

3321 a9 ea              LDA #<PRESSRET
3323 a0 3b              LDY #>PRESSRET
3325 a2 1c              LDX #[SAVEUNIT-PRESSRET]
3327 20 c6 39           JSR PrintText
332a 20 f8 32           JSR Empty_Keyboard_Queue
332d 20 fc 37 wfret_10  JSR Get_Character
3330 f0 03              BEQ wfret_99        ; -> CR
              ;         JSR Error_Beep
3332 4c 2d 33           JMP wfret_10
3335 60       wfret_99  RTS

              ; ***********
3336            File_Dialog
              ; ***********

3336 a2 d2              LDX #<File_Buf
3338 a0 3b              LDY #>File_Buf
333a 4c 2d 39           JMP Got_Line

              ; ****************
333d            Read_Disk_Status
              ; ****************
333d 8a                 TXA
333e 48                 PHA
333f a5 ba              LDA FA
3341 20 b4 ff           JSR TALK
3344 a9 6f              LDA #$6f
3346 20 96 ff           JSR TKSA
3349 a0 00              LDY #0
334b 84 90              STY IO_STATUS
334d 20 a5 ff RDS_10    JSR ACPTR           ; read status
3350 a6 90              LDX IO_STATUS
3352 d0 0f              BNE RDS_30
3354 99 3c 03           STA DSTATUS,Y
3357 c9 20              CMP #' '
3359 90 05              BCC RDS_20
335b c8                 INY
335c c0 28              CPY #40
335e 90 ed              BCC RDS_10
3360 20 ab ff RDS_20    JSR UNTLK           ; close channel
3363 a9 0d    RDS_30    LDA #CR
3365 99 3c 03           STA DSTATUS,Y
3368 a9 00              LDA #0
336a 99 3d 03           STA DSTATUS+1,Y
336d 68                 PLA
336e aa                 TAX
336f ad 3c 03           LDA DSTATUS
3372 29 0f              AND #15             ; return with 1st. value
3374 60                 RTS

              ; **********
3375            z_ext_save
              ; **********
3375 20 83 33           JSR Save_Game
3378 a9 01              LDA #1
337a 4c d3 22           JMP Store_Byte
              ; ******
337d            z_save
              ; ******

337d 20 83 33           JSR Save_Game
3380 4c 20 23           JMP Main_True

              ; *********
3383            Save_Game
              ; *********
                        Print(SAVEUNIT)
3383 a9 06              LDA #<SAVEUNIT
3385 a0 3c              LDY #>SAVEUNIT
3387 a2 0d              LDX #?SAVEUNIT
3389 20 c6 39           JSR PrintText

338c 20 0e 33           JSR Unit_Dialog
                        Print(SAVEFILE)
338f a9 13              LDA #<SAVEFILE
3391 a0 3c              LDY #>SAVEFILE
3393 a2 0d              LDX #?SAVEFILE
3395 20 c6 39           JSR PrintText

3398 20 36 33           JSR File_Dialog

339b ad 02 41           LDA Z_HEADER+2        ; save config
339e 8d 20 3e           STA Z_VAR+$20
33a1 ad 03 41           LDA Z_HEADER+3
33a4 8d 21 3e           STA Z_VAR+$21
33a7 a5 33              LDA z_stack_ptr      ; save Z stack pointer
33a9 8d 22 3e           STA Z_VAR+$22
33ac a5 34              LDA z_frame_ptr
33ae 8d 24 3e           STA Z_VAR+$24
33b1 a2 02              LDX #2
33b3 b5 03    WG_10     LDA QI0,X           ; save IP
33b5 9d 26 3e           STA Z_VAR+$26,X
33b8 ca                 DEX
33b9 10 f8              BPL WG_10
33bb e8                 INX
33bc 86 90              STX IO_STATUS       ; clear status
33be a5 2c              LDA Save_Unit
33c0 85 ba              STA FA
33c2 20 b1 ff           JSR LISTEN          ; open Pos,Device,3
33c5 a9 f3              LDA #$f3
33c7 20 93 ff           JSR SECOND
33ca a0 00              LDY #0
33cc b9 d4 3b WG_20     LDA File_Text,Y
33cf c9 20              CMP #' '
33d1 90 0c              BCC WG_30
33d3 c9 61              CMP #'a'
33d5 90 02              BCC WG_25
33d7 e9 20              SBC #$20
33d9 20 a8 ff WG_25     JSR CIOUT
33dc c8                 INY
33dd d0 ed              BNE WG_20

33df a9 2c    WG_30     LDA #','
33e1 20 a8 ff           JSR CIOUT
33e4 a9 57              LDA #'W'
33e6 20 a8 ff           JSR CIOUT
33e9 20 ae ff           JSR UNLSN
33ec a5 90              LDA IO_STATUS
33ee d0 32              BNE WG_Err

33f0 a5 ba              LDA FA
33f2 20 b1 ff           JSR LISTEN
33f5 a9 63              LDA #$63
33f7 20 93 ff           JSR SECOND
33fa a9 3e              LDA #>Z_VAR        ; Save variables & stack
33fc 85 0c              STA RAM_HI
33fe a2 03              LDX #3
3400 20 34 34 WG_40     JSR Write_Block
3403 a5 90              LDA IO_STATUS
3405 d0 1b              BNE WG_Err
3407 ca                 DEX
3408 d0 f6              BNE WG_40
340a a9 41              LDA #>Z_HEADER
340c 85 0c              STA RAM_HI
340e ae 0e 41           LDX h_dynamic_size_hi
3411 e8                 INX                 ; # of blocks
3412 20 34 34 WG_50     JSR Write_Block
3415 a5 90              LDA IO_STATUS
3417 d0 09              BNE WG_Err
3419 ca                 DEX
341a d0 f6              BNE WG_50
341c 20 ae ff           JSR UNLSN
341f 4c 18 35           JMP Close_Save_File

3422 20 ae ff WG_Err    JSR UNLSN
3425 20 3d 33           JSR Read_Disk_Status
                        Print(DSTATUS)
3428 a9 3c              LDA #<DSTATUS
342a a0 03              LDY #>DSTATUS
342c a2 00              LDX #?DSTATUS
342e 20 c6 39           JSR PrintText

3431 4c 18 35           JMP Close_Save_File

              ; ***********
3434            Write_Block
              ; ***********

3434 a0 00              LDY #0
3436 84 3c              STY X0L
3438 84 90              STY IO_STATUS
343a b1 0b    WrBl_10   LDA (RAM_LO),Y
343c 20 a8 ff           JSR CIOUT
343f c8                 INY
3440 d0 f8              BNE WrBl_10
3442 e6 0c              INC RAM_HI
3444 a9 2e              LDA #'.'
3446 4c e6 38           JMP CHROUT

              ; *********
3449            z_restore
              ; *********

3449 20 57 34           JSR Restore_Game
344c 4c 20 23           JMP Main_True

              ; *************
344f            z_ext_restore
              ; *************

344f 20 57 34           JSR Restore_Game
3452 a9 02              LDA #2
3454 4c d3 22           JMP Store_Byte

              ; ************
3457            Restore_Game
              ; ************

                        Print(LOADUNIT)
3457 a9 20              LDA #<LOADUNIT
3459 a0 3c              LDY #>LOADUNIT
345b a2 12              LDX #?LOADUNIT
345d 20 c6 39           JSR PrintText

3460 20 0e 33           JSR Unit_Dialog
                        Print(LOADFILE)
3463 a9 32              LDA #<LOADFILE
3465 a0 3c              LDY #>LOADFILE
3467 a2 12              LDX #?LOADFILE
3469 20 c6 39           JSR PrintText

346c 20 36 33           JSR File_Dialog

346f a2 1f              LDX #$1f             ; Save local variables
3471 bd 00 3e RG_02     LDA Z_VAR,X          ; to stack bottom -
3474 9d 00 02           STA Charbuf,X        ; if restoring fails
3477 ca                 DEX                  ; we can retrieve them
3478 10 f7              BPL RG_02
347a a5 2c              LDA Save_Unit
347c 85 ba              STA FA
347e 20 b1 ff           JSR LISTEN           ; open Pos,Device,3
3481 a9 f3              LDA #$f3
3483 20 93 ff           JSR SECOND
3486 a0 00              LDY #0
3488 b9 d4 3b RG_10     LDA File_Text,Y
348b c9 20              CMP #' '
348d 90 0c              BCC RG_20
348f c9 61              CMP #'a'
3491 90 02              BCC RG_15
3493 e9 20              SBC #$20
3495 20 a8 ff RG_15     JSR CIOUT
3498 c8                 INY
3499 10 ed              BPL RG_10
349b 20 ae ff RG_20     JSR UNLSN

              ; Check drive error channel

349e a5 2c              LDA Save_Unit
34a0 85 ba              STA FA
34a2 20 b4 ff           JSR TALK
34a5 a9 63              LDA #$63
34a7 20 96 ff           JSR TKSA
34aa a9 3e              LDA #>Z_VAR
34ac 85 0c              STA RAM_HI
34ae 20 27 35           JSR Read_Block      ; Read Z_VAR
34b1 ad 20 3e           LDA Z_VAR+$20
34b4 cd 02 41           CMP Z_HEADER+2      ; Check for
34b7 d0 08              BNE RG_03           ; correct version
34b9 ad 21 3e           LDA Z_VAR+$21
34bc cd 03 41           CMP Z_HEADER+3
34bf f0 11              BEQ RG_05           ; OK -> continue restoring
34c1 a2 1f    RG_03     LDX #$1f            ; Restore local variables
34c3 bd 00 02 RG_04     LDA Charbuf,X       ; and abort restoring
34c6 9d 00 3e           STA Z_VAR,X
34c9 ca                 DEX
34ca 10 f7              BPL RG_04
34cc 20 f7 39           JSR Reset_Screen
34cf 4c 14 23           JMP Main_False

34d2 ad 10 41 RG_05     LDA h_flags_hi      ; save flags
34d5 48                 PHA
34d6 ad 11 41           LDA h_flags_lo
34d9 48                 PHA

34da a2 02              LDX #2
34dc 86 38              STX A0L
34de 20 27 35 RG_77     JSR Read_Block
34e1 c6 38              DEC A0L
34e3 d0 f9              BNE RG_77

34e5 a9 41              LDA #>Z_HEADER
34e7 85 0c              STA RAM_HI
34e9 ae 0e 41           LDX h_dynamic_size_hi
34ec e8                 INX                 ; # of blocks
34ed 86 38              STX A0L             ; block counter
34ef 20 27 35 RG_06     JSR Read_Block
34f2 c6 38              DEC A0L
34f4 d0 f9              BNE RG_06

34f6 68                 PLA                 ; restore flags
34f7 8d 11 41           STA h_flags_lo
34fa 68                 PLA
34fb 8d 10 41           STA h_flags_hi

34fe ad 22 3e           LDA Z_VAR+$22
3501 85 33              STA z_stack_ptr
3503 ad 24 3e           LDA Z_VAR+$24
3506 85 34              STA z_frame_ptr
3508 a2 02              LDX #2
350a bd 26 3e RG_07     LDA Z_VAR+$26,X
350d 95 03              STA QI0,X
350f ca                 DEX
3510 10 f8              BPL RG_07
3512 20 ab ff           JSR UNTLK
3515 4c 18 35           JMP Close_Save_File


              ; ***************
3518            Close_Save_File
              ; ***************

3518 a5 2c              LDA Save_Unit
351a 85 ba              STA FA
351c 20 b1 ff           JSR LISTEN
351f a9 e3              LDA #$e3
3521 20 93 ff           JSR SECOND
3524 4c ae ff           JMP UNLSN

              ; **********
3527            Read_Block
              ; **********

3527 a0 00              LDY #0
3529 84 3c              STY X0L
352b 84 90              STY IO_STATUS
352d 20 a5 ff ReBl_10   JSR ACPTR
3530 91 0b              STA (RAM_LO),Y
3532 c8                 INY
3533 d0 f8              BNE ReBl_10
3535 e6 0c              INC RAM_HI
3537 a9 2e              LDA #'.'
3539 4c e6 38           JMP CHROUT



              ********
              * DATA *
              ********

353c 00       Row_Lo    .BYTE <[SCREEN]
353d 50                 .BYTE <[SCREEN +  1 * COLS]
353e a0                 .BYTE <[SCREEN +  2 * COLS]
353f f0                 .BYTE <[SCREEN +  3 * COLS]
3540 40                 .BYTE <[SCREEN +  4 * COLS]
3541 90                 .BYTE <[SCREEN +  5 * COLS]
3542 e0                 .BYTE <[SCREEN +  6 * COLS]
3543 30                 .BYTE <[SCREEN +  7 * COLS]
3544 80                 .BYTE <[SCREEN +  8 * COLS]
3545 d0                 .BYTE <[SCREEN +  9 * COLS]
3546 20                 .BYTE <[SCREEN + 10 * COLS]
3547 70                 .BYTE <[SCREEN + 11 * COLS]
3548 c0                 .BYTE <[SCREEN + 12 * COLS]
3549 10                 .BYTE <[SCREEN + 13 * COLS]
354a 60                 .BYTE <[SCREEN + 14 * COLS]
354b b0                 .BYTE <[SCREEN + 15 * COLS]
354c 00                 .BYTE <[SCREEN + 16 * COLS]
354d 50                 .BYTE <[SCREEN + 17 * COLS]
354e a0                 .BYTE <[SCREEN + 18 * COLS]
354f f0                 .BYTE <[SCREEN + 19 * COLS]
3550 40                 .BYTE <[SCREEN + 20 * COLS]
3551 90                 .BYTE <[SCREEN + 21 * COLS]
3552 e0                 .BYTE <[SCREEN + 22 * COLS]
3553 30                 .BYTE <[SCREEN + 23 * COLS]
3554 80                 .BYTE <[SCREEN + 24 * COLS]

3555 08       Row_Hi    .BYTE >[SCREEN]
3556 08                 .BYTE >[SCREEN +  1 * COLS]
3557 08                 .BYTE >[SCREEN +  2 * COLS]
3558 08                 .BYTE >[SCREEN +  3 * COLS]
3559 09                 .BYTE >[SCREEN +  4 * COLS]
355a 09                 .BYTE >[SCREEN +  5 * COLS]
355b 09                 .BYTE >[SCREEN +  6 * COLS]
355c 0a                 .BYTE >[SCREEN +  7 * COLS]
355d 0a                 .BYTE >[SCREEN +  8 * COLS]
355e 0a                 .BYTE >[SCREEN +  9 * COLS]
355f 0b                 .BYTE >[SCREEN + 10 * COLS]
3560 0b                 .BYTE >[SCREEN + 11 * COLS]
3561 0b                 .BYTE >[SCREEN + 12 * COLS]
3562 0c                 .BYTE >[SCREEN + 13 * COLS]
3563 0c                 .BYTE >[SCREEN + 14 * COLS]
3564 0c                 .BYTE >[SCREEN + 15 * COLS]
3565 0d                 .BYTE >[SCREEN + 16 * COLS]
3566 0d                 .BYTE >[SCREEN + 17 * COLS]
3567 0d                 .BYTE >[SCREEN + 18 * COLS]
3568 0d                 .BYTE >[SCREEN + 19 * COLS]
3569 0e                 .BYTE >[SCREEN + 20 * COLS]
356a 0e                 .BYTE >[SCREEN + 21 * COLS]
356b 0e                 .BYTE >[SCREEN + 22 * COLS]
356c 0f                 .BYTE >[SCREEN + 23 * COLS]
356d 0f                 .BYTE >[SCREEN + 24 * COLS]

356e 00       L_Encode_A  .BYTE 0 ;
356f 00       L_Encode_Y  .BYTE 0 ;

              ; data for separators / delimiters in parsing

3570 21 3f 2c Sep_Std_List    .BYTE "!?,.\r " ; built in standard
3576 00       Z_Arg_Count     .BYTE 0 ; argument count
3577 01       Z_Buffer_Mode   .BYTE 1 ; output buffering on or off
3578 00       Z_Call_Type     .BYTE 0 ; type of subroutine call
3579 00       Z_Monospace     .BYTE 0
357a 00       Z_Underline     .BYTE 0
357b 00       Z_Active_Window .BYTE 0

              ******************************
              * Cursor, Windows and Screen *
              ******************************

              ******************
357c          Set_Screen_Pointer
              ******************

357c a6 4f              LDX Cursor_Row

              ********************
357e          Set_Screen_Pointer_X
              ********************

357e bd 3c 35           LDA Row_Lo,X
3581 85 51              STA Scr_Adr
3583 85 55              STA Col_Adr
3585 bd 55 35           LDA Row_Hi,X
3588 85 52              STA Scr_Adr+1
358a 29 07              AND #7
358c 85 56              STA Col_Adr+1
358e 60                 RTS


              ***********
358f          Window_Home
              ***********

358f a6 2e              LDX Upper_Size
3591 a0 00              LDY #0

              ***********
3593          Set_Row_Col
              ***********

              ; Input : X = screen row    (0 .. 24)
              ;         Y = screen column (0 .. 79)

3593 e0 19              CPX #ROWS
3595 90 02              BCC SRC_10
3597 a2 18              LDX #ROWS-1
3599 c0 50    SRC_10    CPY #COLS
359b 90 02              BCC SRC_20
359d a0 4f              LDY #COLS-1

359f 86 4f    SRC_20    STX Cursor_Row
35a1 84 4e              STY Cursor_Col
35a3 20 7c 35           JSR Set_Screen_Pointer

              ***********
35a6          Get_Row_Col
              ***********

              ; Output: X = screen row    (0 .. 24)
              ;         Y = screen column (0 .. 79)

35a6 a6 4f              LDX Cursor_Row
35a8 a4 4e              LDY Cursor_Col
35aa 60                 RTS

              **********
35ab          Info_Print
              **********

              ; Input: (X) = First page, (A) = Last page, (Y) = print pos
              ;----------------------------------------------------------

35ab 48                 PHA
35ac 8a                 TXA
35ad 20 1c 3a           JSR ASCII_Hex
35b0 99 99 3c           STA InfoPro + 10,Y
35b3 8a                 TXA
35b4 99 98 3c           STA InfoPro +  9,Y
35b7 68                 PLA
35b8 20 1c 3a           JSR ASCII_Hex
35bb 99 a0 3c           STA InfoPro + 17,Y
35be 8a                 TXA
35bf 99 9f 3c           STA InfoPro + 16,Y
35c2 a9 00              LDA #0
35c4 85 3d              STA X0H
35c6 a5 1b              LDA Info_Pages
35c8 85 3c              STA X0L

              ; *********
35ca            Info_Size
              ; *********
35ca 98                 TYA
35cb 48                 PHA
35cc 20 c3 30           JSR Format_Integer
35cf 68                 PLA
35d0 a8                 TAY
35d1 a2 01              LDX #1
35d3 b5 1d    InSi_10   LDA NUMBER,X
35d5 99 a4 3c           STA InfoPro+21,Y
35d8 c8                 INY
35d9 e8                 INX
35da e0 05              CPX #5
35dc 90 f5              BCC InSi_10
35de 60                 RTS

              ; ************
35df            Screen_Setup
              ; ************

35df a9 0f              LDA #$0F       ; colour RAM: $FF80000
35e1 85 58              STA Col_Adr+3
35e3 a9 f8              LDA #$F8
35e5 85 57              STA Col_Adr+2
35e7 60                 RTS

              ; ***********
35e8            Story_Pages
              ; ***********

              ; Leave story size in X0L/X0H for printing

35e8 a9 00              LDA #0
35ea 85 3d              STA X0H
35ec ad 1a 41           LDA h_file_size_hi    ; size in words high
35ef 85 3c              STA X0L
35f1 ad 1b 41           LDA h_file_size_lo    ; size in words low
35f4 0a                 ASL A
35f5 26 3c              ROL X0L
35f7 26 3d              ROL X0H               ; size * 2
35f9 24 2f              BIT Version
35fb 10 05              BPL STTS_05
35fd 0a                 ASL A
35fe 26 3c              ROL X0L
3600 26 3d              ROL X0H               ; size * 4
3602 c9 00    STTS_05   CMP #0
3604 f0 02              BEQ STTS_10           ; at page boundary
3606 e3 3c              INW X0L               ; add 1 to round up
3608 60       STTS_10   RTS


              ; *********
3609            z_restart
              ; *********

3609 d8                 CLD
360a a2 fb              LDX #$fb       ; Commodore default stack initialisation
360c 9a                 TXS
360d a9 00              LDA #0         ; clear ZP variables
360f a2 02              LDX #Z_Code    ; start of interpreter variables
3611 95 00    Start_10  STA 0,X
3613 e8                 INX
3614 e0 5f              CPX #ZP_END
3616 90 f9              BCC Start_10
3618 a9 01              LDA #1
361a 85 2e              STA Upper_Size       ; status line for version 3
361c 20 df 35           JSR Screen_Setup
361f e6 33              INC z_stack_ptr      ;  1
3621 e6 34              INC z_frame_ptr      ;  1
3623 c6 2d              DEC Status_Col       ; -1
3625 20 02 3a           JSR Open_Story       ; open  8,8,8,"z3*"
3628 a9 41              LDA #>Z_HEADER
362a 85 0c              STA RAM_HI
362c 20 7b 3a           JSR Load_Page        ; load first block to Z_HEADER
362f ad 00 41           LDA h_version
3632 c9 06              CMP #6
3634 b0 3c              BCS Start_20         ; version > 5
3636 c9 03              CMP #3
3638 90 38              BCC Start_20         ; version < 3
363a f0 12              BEQ Start_15         ; version = 3
363c 09 80              ORA #$80             ; version > 3
363e 85 2f              STA Version
3640 a9 09              LDA #9
3642 85 32              STA Word_Length
3644 a9 06              LDA #6
3646 85 30              STA Vocab_Length
3648 a9 3f              LDA #$3f
364a 85 26              STA Prop_Mask
364c 80 30              BRA Start_22

              ; Version 3 initialisation

364e 85 2f    Start_15  STA Version
3650 a9 06              LDA #6
3652 85 32              STA Word_Length
3654 a9 04              LDA #4
3656 85 30              STA Vocab_Length
3658 a9 1f              LDA #$1f
365a 85 26              STA Prop_Mask
365c a9 6f              LDA #<z_not
365e 8d ad 21           STA ZV8F
3661 a9 25              LDA #>z_not
3663 8d ae 21           STA ZV8F+1
3666 a9 d5              LDA #<z_pop
3668 8d c1 21           STA ZVB9
366b a9 23              LDA #>z_pop
366d 8d c2 21           STA ZVB9+1
3670 80 0c              BRA Start_22

              Start_20  Print(NOSTORY)
3672 a9 6a              LDA #<NOSTORY
3674 a0 3c              LDY #>NOSTORY
3676 a2 0b              LDX #?NOSTORY
3678 20 c6 39           JSR PrintText

367b 4c fa 23           JMP quit_20
367e          Start_22

              ; =================
              ; Set Memory Layout
              ; =================

367e a2 8f              LDX #>[$D000 - Z_HEADER]
3680 86 2b              STX Resident_Pages  ; reserved
3682 a2 50              LDX #COLS
3684 8e 21 41           STX h_screen_cols

3687 ad 01 41           LDA h_config
368a 09 31              ORA #%0011 0001     ; fixed font / colours
              ;               0--- ---- 7:timed input
              ;                 1- ---- 5:split screen
              ;                  1 ---- 4:fixed  font
              ;                    0--- 3:italic font
              ;                     0-- 2:bold   font
              ;                      0- 1:pictures
              ;                       1 0:colors
368c 8d 01 41           STA h_config
368f a9 0c              LDA #%0000 1100
3691 0d 11 41           ORA h_flags_lo
3694 8d 11 41           STA h_flags_lo
3697 a9 00              LDA #0
3699 8d 22 41           STA h_screen_width_hi
369c 8d 24 41           STA h_screen_height_hi
369f a9 50              LDA #COLS
36a1 8d 23 41           STA h_screen_width_lo
36a4 a9 18              LDA #ROWS-1
36a6 8d 25 41           STA h_screen_height_lo
36a9 a9 01              LDA #1
36ab 8d 26 41           STA h_font_width
36ae 8d 27 41           STA h_font_height
36b1 a9 08              LDA #8              ; 6:PC 7:C128 8:C64
36b3 8d 1e 41           STA h_interpreter_number
36b6 a9 47              LDA #'G'
36b8 8d 1f 41           STA h_interpreter_version

              ; -------- compute story location and size -----

36bb a9 1e              LDA #>EOP - >START+1 ; program
36bd 85 1b              STA Info_Pages
36bf a2 20              LDX #>START
36c1 a9 3d              LDA #>EOP
36c3 a0 00              LDY #0
36c5 20 ab 35           JSR Info_Print
36c8 a5 2b              LDA Resident_Pages ; static
36ca 85 1b              STA Info_Pages
36cc 18                 CLC
36cd 69 40              ADC #>Z_HEADER-1
36cf a2 41              LDX #>Z_HEADER
36d1 a0 20              LDY #InfoSta-InfoPro
36d3 20 ab 35           JSR Info_Print
36d6 20 e8 35           JSR Story_Pages
36d9 a0 40              LDY #InfoSto-InfoPro
36db 20 ca 35           JSR Info_Size
                        Print(BITSHIFTER)
36de a9 75              LDA #<BITSHIFTER
36e0 a0 3c              LDY #>BITSHIFTER
36e2 a2 19              LDX #?BITSHIFTER
36e4 20 c6 39           JSR PrintText

36e7 20 36 3a           JSR Select_Text_Window
36ea a9 8e              LDA #<InfoClr
36ec a0 3c              LDY #>InfoClr
36ee a2 62              LDX #[InfoEnd - InfoClr]
36f0 20 c6 39           JSR PrintText

36f3 20 7b 3a Start_30  JSR Load_Page       ; Load resident area
36f6 a5 90              LDA IO_STATUS
36f8 d0 11              BNE Start_50        ; EOF
36fa a5 14              LDA Block_Lo
36fc 29 07              AND #7
36fe d0 05              BNE Start_40
3700 a9 2e              LDA #'.'
3702 20 e6 38           JSR CHROUT
3705 a5 14    Start_40  LDA Block_Lo
3707 c5 2b              CMP Resident_Pages
3709 90 e8              BCC Start_30

370b 20 9e 3a Start_50  JSR Load_Story
370e 20 21 33           JSR Wait_for_Return
3711 20 b6 20           JSR Set_Mode_80
3714 ad 06 41           LDA h_start_pc_hi   ; Initialize pc
3717 85 04              STA QI1
3719 ad 07 41           LDA h_start_pc_lo
371c 85 03              STA QI0
371e 20 f7 39           JSR Reset_Screen
3721 4c d7 20           JMP PC_LOOP

              ; ***********
3724            Next_Datum
              ; ***********

              ; Input
              ; =====
              ; QD0 = Block pointer
              ; QD1 = Block # lo
              ; QD2 = Block # hi

              ; Output
              ; ======
              ; (A) = Byte from (Block),QD0
              ; Pointer QD incremented

3724 a9 00              LDA #0
3726 85 0d              STA RAM_BA
3728 ab 08 00           LDZ QD0
372b a5 0a              LDA QD2             ; page high
372d d0 0c              BNE NEDA_10         ; > 64 K
372f a5 09              LDA QD1
3731 c5 2b              CMP Resident_Pages
3733 b0 06              BCS NEDA_10         ; -> not resident
3735 69 41              ADC #>Z_HEADER
3737 85 0c              STA RAM_HI
3739 d0 0f              BNE NEDA_50         ; -> always

              ; load if address is beyond resident part
              ; address = (QD1/2) - Resident + $040000

373b 38       NEDA_10   SEC
373c a5 09              LDA QD1             ; page low
373e e5 2b              SBC Resident_Pages
3740 85 0c              STA RAM_HI          ; page low
3742 a5 0a              LDA QD2
3744 e9 00              SBC #0              ; page high
3746 69 03              ADC #3              ; bank 4 = carry  + 3
3748 85 0d              STA RAM_BA
374a ea b2 0b NEDA_50   LDA [RAM_LO],Z
374d e6 08              INC QD0
374f d0 06              BNE NEDA_80
3751 e6 09              INC QD1
3753 d0 02              BNE NEDA_80
3755 e6 0a              INC QD2
3757 c9 00    NEDA_80   CMP #0              ; set flags
3759 60                 RTS

              ; ****************
375a            Next_Instruction
              ; ****************

              ; Input
              ; =====
              ; QI0 = pointer inside page
              ; QI1 = page # low
              ; QI2 = page # high

              ; Output
              ; ======
              ; (A) = Byte from 24 bit address (QI)
              ; Pointer QI incremented
              ; test if address is inside resident part

375a a9 00              LDA #0
375c 85 0d              STA RAM_BA
375e ab 03 00           LDZ QI0
3761 a5 05              LDA QI2             ; page high
3763 d0 0c              BNE NEIN_10         ; > 64 K
3765 a5 04              LDA QI1
3767 c5 2b              CMP Resident_Pages
3769 b0 06              BCS NEIN_10         ; -> not resident
376b 69 41              ADC #>Z_HEADER
376d 85 0c              STA RAM_HI
376f d0 0f              BNE NEIN_50         ; -> always

              ; load if address is beyond resident part
              ; address = (QI1/2) - Resident + $040000

3771 38       NEIN_10   SEC
3772 a5 04              LDA QI1             ; page low
3774 e5 2b              SBC Resident_Pages
3776 85 0c              STA RAM_HI          ; page low
3778 a5 05              LDA QI2
377a e9 00              SBC #0              ; page high
377c 69 03              ADC #3              ; bank 4 = carry  + 3
377e 85 0d              STA RAM_BA
3780 ea b2 0b NEIN_50   LDA [RAM_LO],Z
3783 e6 03              INC QI0
3785 d0 06              BNE NEIN_80
3787 e6 04              INC QI1
3789 d0 02              BNE NEIN_80
378b e6 05              INC QI2
378d c9 00    NEIN_80   CMP #0              ; set flags
378f 60                 RTS


              ; *************
3790            z_show_status
              ; *************

              ; save cursor coordinates, print to statusline

3790 20 47 3a           JSR Save_Cursor

              ; push QD2, QD1, QD0, QDH, QDL

3793 a2 04              LDX #4
3795 b5 06    zss_10    LDA QDL,X
3797 48                 PHA
3798 ca                 DEX
3799 10 fa              BPL zss_10

379b e8                 INX                 ; X = 0
379c 86 2d              STX Status_Col      ; switch decoder to status line
379e a9 10              LDA #$10            ; get location
37a0 20 a5 22           JSR Get_Global_Var
37a3 a5 3c              LDA X0L
37a5 a6 3d              LDX X0H
37a7 20 f0 24           JSR z_print_obj_A
37aa a9 20              LDA #' '            ; fill rest of line with blanks
37ac a6 2d              LDX Status_Col
37ae 9d 00 1f zss_20    STA Z_STATUS,X    ; erase rest of line
37b1 e8                 INX
37b2 e0 50              CPX #COLS
37b4 90 f8              BCC zss_20

37b6 a2 ff              LDX #$ff
37b8 86 2d              STX Status_Col      ; reset decoder
37ba ad 01 41           LDA h_config
37bd 29 02              AND #2              ; Score_Time_Flag
37bf d0 06              BNE zss_30
37c1 20 7f 31           JSR Print_Score
37c4 4c ca 37           JMP zss_40
37c7 20 47 31 zss_30    JSR Print_Time
37ca 20 af 31 zss_40    JSR Print_Status

              ; pull QDL, QDH, QD0, QD1, QD2 after recursive call

37cd a2 00              LDX #0
37cf 68       zss_90    PLA
37d0 95 06              STA QDL,X
37d2 e8                 INX
37d3 e0 05              CPX #5
37d5 90 f8              BCC zss_90

37d7 4c 4f 3a           JMP Restore_Cursor

              ; **********
37da            Fix_Colors
              ; **********

37da a2 07              LDX #7
37dc bd 3d 3d FiCo_10   LDA FG_Color,X
37df 29 0f              AND #15
37e1 9d 3d 3d           STA FG_Color,X
37e4 ca                 DEX
37e5 10 f5              BPL FiCo_10
37e7 60                 RTS

              ; *********
37e8            Cursor_On
              ; *********
37e8 a4 4e              LDY Cursor_Col
37ea a9 a0              LDA #$A0
37ec 91 51              STA (Scr_Adr),Y
37ee 85 50              STA Cursor_Vis
37f0 60                 RTS

              ; **********
37f1            Cursor_Off
              ; **********
37f1 a4 4e              LDY Cursor_Col
37f3 a9 20              LDA #' '
37f5 91 51              STA (Scr_Adr),Y
37f7 a9 00              LDA #0
37f9 85 50              STA Cursor_Vis
37fb 60                 RTS

              ; *************
37fc            Get_Character
              ; *************

              ; get a character from keyboard
              ; allow all ASCII characters $20 - $7e
              ; allow control codes CR and DEL
              ; compare char with CR before return

37fc 58                 CLI
37fd 5a                 PHY                 ; save Y
37fe 20 e8 37           JSR Cursor_On
3801 20 e4 ff GeCh_10   JSR GETIN
3804 f0 fb              BEQ GeCh_10
3806 c9 0d              CMP #CR
3808 f0 23              BEQ GeCh_40         ; allow CR
380a c9 14              CMP #DEL
380c f0 1f              BEQ GeCh_40
380e c9 db              CMP #'Z'+$81        ; CBM 'Z'+1
3810 b0 18              BCS GeCh_30         ; -> not ASCII
3812 c9 c1              CMP #'A'+$80        ; CBM 'A'
3814 90 04              BCC GeCh_22
3816 29 7f              AND #$7f            ; to ASCII
3818 d0 13              BNE GeCh_40         ; always

381a c9 5b    GeCh_22   CMP #'Z'+1          ; CBM 'z'+1
381c b0 0c              BCS GeCh_30         ; -> not ASCII
381e c9 41              CMP #'A'            ; CBM 'a'
3820 90 04              BCC GeCh_24
3822 69 1f              ADC #$1f            ; to ASCII
3824 d0 07              BNE GeCh_40         ; always

3826 c9 20    GeCh_24   CMP #' '
3828 b0 03              BCS GeCh_40

382a          GeCh_30   ;JSR Error_Beep      ; unacceptable
382a 4c 01 38           JMP GeCh_10

382d 48       GeCh_40   PHA                 ; push char
382e 20 f1 37           JSR Cursor_Off
3831 68                 PLA
3832 7a                 PLY                 ; restore Y
3833 c9 0d              CMP #CR
3835 60                 RTS

              ; ******************
3836            Scroll_Main_Window
              ; ******************

3836 a6 2e              LDX Upper_Size
3838 20 7e 35           JSR Set_Screen_Pointer_X
383b 18                 CLC
383c a5 51              LDA Scr_Adr
383e 69 50              ADC #COLS
3840 85 ac              STA SAP         ; screen low
3842 85 ae              STA TAP         ; colour low
3844 a5 52              LDA Scr_Adr+1
3846 69 00              ADC #0
3848 85 ad              STA SAP+1       ; screen high
384a 29 07              AND #7
384c 85 af              STA TAP+1       ; colour high
384e a9 f8              LDA #$f8
3850 85 b0              STA TAP+2       ; colour bank low
3852 a9 0f              LDA #$0f
3854 85 b1              STA TAP+3       ; colour bank high
3856 a3 4f    SMW_10    LDZ #COLS-1
3858 b2 ac    SMW_20    LDA (SAP),Z
385a 92 51              STA (Scr_Adr),Z
385c ea b2 ae           LDA [TAP],Z
385f ea 92 55           STA [Col_Adr],Z
3862 3b                 DEZ
3863 10 f3              BPL SMW_20
3865 18                 CLC
3866 a5 ac              LDA SAP
3868 85 51              STA Scr_Adr
386a 85 55              STA Col_Adr
386c 69 50              ADC #COLS           ; C=0
386e 85 ac              STA SAP
3870 85 ae              STA TAP
3872 a5 ad              LDA SAP+1
3874 85 52              STA Scr_Adr+1
3876 29 07              AND #7
3878 85 56              STA Col_Adr+1
387a a5 ad              LDA SAP+1
387c 69 00              ADC #0
387e 85 ad              STA SAP+1
3880 29 07              AND #7
3882 85 af              STA TAP+1
3884 e8                 INX
3885 e0 18              CPX #ROWS-1
3887 90 cd              BCC SMW_10
3889 a3 4f              LDZ #COLS-1
388b a9 20    SMW_30    LDA #' '
388d 92 51              STA (Scr_Adr),Z
388f a9 01              LDA #1
3891 ea 92 55           STA [Col_Adr],Z
3894 3b                 DEZ
3895 10 f4              BPL SMW_30
3897 60                 RTS

              ******************
              MODULE Home_Screen
              ******************

3898 da                 PHX
3899 a2 00              LDX #0
389b 86 4e              STX Cursor_Col
389d 86 4f              STX Cursor_Row
389f 20 7e 35           JSR Set_Screen_Pointer_X
38a2 fa                 PLX
38a3 60                 RTS
38a4          ENDMOD [Home_Screen] Size = 12 [$c]

              *******************
              MODULE Clear_Screen
              *******************

38a4 da                 PHX
38a5 5a                 PHY
38a6 a2 18              LDX #ROWS-1
38a8 20 56 3a _loop     JSR Erase_Row
38ab ca                 DEX
38ac 10 fa              BPL _loop
38ae 20 98 38           JSR Home_Screen
38b1 7a                 PLY
38b2 fa                 PLX
38b3 60                 RTS
38b4          ENDMOD [Clear_Screen] Size = 16 [$10]

              ; *************
38b4            Return_Screen
              ; *************
38b4 da                 PHX
38b5 5a                 PHY
38b6 a0 00              LDY #0
38b8 84 4e              STY Cursor_Col
38ba a6 4f              LDX Cursor_Row
38bc e8                 INX
38bd e0 19              CPX #ROWS
38bf 90 05              BCC ReSc_10
38c1 20 36 38           JSR Scroll_Main_Window
38c4 a2 18              LDX #ROWS-1
38c6 86 4f    ReSc_10   STX Cursor_Row
38c8 20 7e 35           JSR Set_Screen_Pointer_X
38cb 7a                 PLY
38cc fa                 PLX

              ; ******************
38cd            Screen_Reverse_Off
              ; ******************

38cd a9 00              LDA #0
38cf 85 c7              STA RVS
38d1 60                 RTS


              ; *****************
38d2            Screen_Reverse_On
              ; *****************

38d2 a9 80              LDA #$80
38d4 85 c7              STA RVS
38d6 60                 RTS

              *****************
              Module Screen_Del
              *****************
38d7 5a                 PHY
38d8 a4 4e              LDY Cursor_Col
38da a9 20              LDA #' '
38dc 91 51              STA (Scr_Adr),Y
38de c6 4e              DEC Cursor_Col
38e0 10 02              BPL _exit
38e2 e6 4e              INC Cursor_Col
38e4 7a       _exit     PLY
38e5 60                 RTS
38e6          EndMod [Screen_Del] Size = 15 [$f]

              *************
              MODULE CHROUT
              *************

38e6 c9 13              CMP #HOME
38e8 f0 ae              BEQ Home_Screen
38ea c9 93              CMP #CLEAR
38ec f0 b6              BEQ Clear_Screen
38ee c9 0d              CMP #CR
38f0 f0 c2              BEQ Return_Screen
38f2 c9 12              CMP #REVERSE_ON
38f4 f0 dc              BEQ Screen_Reverse_On
38f6 c9 92              CMP #REVERSE_OFF
38f8 f0 d3              BEQ Screen_Reverse_Off
38fa c9 14              CMP #DEL
38fc f0 d9              BEQ Screen_Del

38fe da                 PHX
38ff 5a                 PHY
3900 48                 PHA
3901 ab 4e 00           LDZ Cursor_Col
3904 c2 50              CPZ #COLS
3906 90 03              BCC CHRO_10
3908 20 b4 38           JSR Return_Screen
390b ad 86 02 CHRO_10   LDA COLOR
390e ea 92 55           STA [Col_Adr],Z
3911 68                 PLA
3912 29 7f              AND #$7f
3914 c9 20              CMP #' '
3916 b0 04              BCS CHRO_20
3918 a9 2e              LDA #'.'            ; 00-1f -> replace with dot
391a d0 06              BNE CHRO_80
391c c9 5b    CHRO_20   CMP #'['
391e 90 02              BCC CHRO_80
3920 29 1f              AND #$1f            ; 5b-7f -> 01-1f

3922 a4 4e    CHRO_80   LDY Cursor_Col
3924 05 c7              ORA RVS
3926 91 51              STA (Scr_Adr),Y
3928 e6 4e              INC Cursor_Col
392a 7a                 PLY
392b fa                 PLX
392c 60                 RTS
392d          ENDMOD [CHROUT] Size = 71 [$47]

              ***************
              Module Got_Line
              ***************

              ; Get line from keyboard with preset text

392d 86 3e              STX X1L
392f 84 3f              STY X1H
3931 a0 00              LDY #0
3933 b1 3e              LDA (X1L),Y
3935 85 1a              STA Chars_Left      ; maximum edit length
                        MAC_Color(CYAN)
3937 a9 03               LDA #CYAN
3939 8d 86 02            STA COLOR

393c c8       _loop     INY
393d c8                 INY
393e b1 3e              LDA (X1L),Y
3940 88                 DEY
3941 c9 20              CMP #' '
3943 90 05              BCC _set
3945 20 e6 38           JSR CHROUT
3948 80 f2              BRA _loop
394a 24 2f    _set      BIT Version
394c 30 1d              BMI GLX_20
394e e3 3e              INW X1L
3950 88                 DEY
3951 80 18              BRA GLX_20
3953          EndMod [Got_Line] Size = 38 [$26]

              ******************
              Module Get_Line_X1
              ******************

3953 a5 2e              LDA Upper_Size
3955 85 1c              STA MORE_Counter
                        MAC_Color(CYAN)
3957 a9 03               LDA #CYAN
3959 8d 86 02            STA COLOR

395c a0 00              LDY #0
395e b1 3e              LDA (X1L),Y
3960 85 1a              STA Chars_Left      ; maximum edit length
3962 d0 02              BNE GLX_10
3964 c6 1a              DEC Chars_Left
3966 24 2f    GLX_10    BIT Version
3968 10 01              BPL GLX_20
396a c8                 INY                 ; Version > 3

              ; receive character from keyboard loop

396b 20 fc 37 GLX_20    JSR Get_Character  ; Y = previous position
396e f0 3b              BEQ GLX_90         ; -> CR = end of input
3970 c9 14              CMP #DEL
3972 d0 15              BNE GLX_40
3974 88                 DEY                ; Y = prev - 1
3975 30 08              BMI _del_err       ; version 3 check
3977 24 2f              BIT Version
3979 10 08              BPL GLX_30
397b c0 01              CPY #1             ; version > 3 check
397d b0 04              BCS GLX_30         ; -> not at 1st. column

397f          _del_err ;JSR Error_Beep      ; No DEL at 1st. char
397f c8                 INY                 ; restore Y
3980 4c 6b 39           JMP GLX_20

              ; handle DEL character

3983 20 d7 38 GLX_30    JSR Screen_Del       ; print DEL
3986 4c 6b 39           JMP GLX_20

              ; check edit limit

3989 c4 1a    GLX_40    CPY Chars_Left      ; edit limit
398b f0 02              BEQ GLX_45
398d b0 07              BCS GLX_50          ; -> at limit
398f a6 4e    GLX_45    LDX Cursor_Col
3991 e8                 INX
3992 e0 4f              CPX #COLS-1         ; -> end of line
3994 90 03              BCC GLX_70

3996          GLX_50    ;JSR Error_Beep      ; reached max buffer length
3996 4c 6b 39           JMP GLX_20

3999 c8       GLX_70    INY
399a c9 41              CMP #'A'
399c 90 06              BCC GLX_80
399e c9 5b              CMP #'Z'+1
39a0 b0 02              BCS GLX_80
39a2 69 20              ADC #$20            ; to lower case
39a4 91 3e    GLX_80    STA (X1L),Y
39a6 20 e6 38           JSR CHROUT          ; ASCII print
39a9 80 c0              BRA GLX_20

              ; receivced CR: terminate buffer and return

39ab c8       GLX_90    INY
39ac 91 3e              STA (X1L),Y         ; store CR
39ae 20 e6 38           JSR CHROUT
                        MAC_Color(WHITE)
39b1 a9 01               LDA #WHITE
39b3 8d 86 02            STA COLOR

39b6 88                 DEY                 ; don't count CR
39b7 84 1a              STY Chars_Left      ; edit length
39b9 24 2f              BIT Version
39bb 10 08              BPL _return
39bd 88                 DEY
39be 98                 TYA
39bf a0 01              LDY #1
39c1 91 3e              STA (X1L),Y         ; length of string
39c3 85 1a              STA Chars_Left
39c5 60       _return   RTS
39c6          EndMod [Get_Line_X1] Size = 115 [$73]

              ; *********
39c6            PrintText
              ; *********

39c6 85 c3              STA MEMUSS
39c8 84 c4              STY MEMUSS+1
39ca a0 00              LDY #0
39cc b1 c3    PrTe_A    LDA (MEMUSS),Y
39ce f0 07              BEQ PrTe_B
39d0 20 e6 38           JSR CHROUT
39d3 c8                 INY
39d4 ca                 DEX
39d5 d0 f5              BNE PrTe_A
39d7 60       PrTe_B    RTS

              ; **************
39d8            z_split_window
              ; **************
39d8 20 ad 30           JSR Print_Buffer
39db a6 3e              LDX X1L             ; new size
39dd 10 02              BPL split_10
39df a2 00              LDX #0              ; C64 workaround
39e1 e0 19    split_10  CPX #ROWS
39e3 b0 11              BCS split_err
39e5 86 2e              STX Upper_Size    ; update size
39e7 86 31              STX Win_Top
39e9 a6 4f              LDX Cursor_Row
39eb e4 2e              CPX Upper_Size
39ed b0 03              BCS split_20
39ef 20 8f 35           JSR Window_Home
39f2 20 7c 35 split_20  JSR Set_Screen_Pointer
39f5 60                 RTS
39f6 00       split_err BRK

              ; ************
39f7            Reset_Screen
              ; ************

39f7 20 a4 38           JSR Clear_Screen
39fa 20 b4 38           JSR Return_Screen
39fd a5 2e              LDA Upper_Size
39ff 85 1c              STA MORE_Counter
3a01 60                 RTS

              ; **********
3a02            Open_Story
              ; **********

3a02 ad e9 3b           LDA Game_Unit       ; open "Z*",FA,8
3a05 85 ba              STA FA
3a07 20 b1 ff           JSR LISTEN
3a0a a9 f8              LDA #$f8
3a0c 20 93 ff           JSR SECOND
3a0f a9 5a              LDA #'Z'
3a11 20 a8 ff           JSR CIOUT
3a14 a9 2a              LDA #'*'
3a16 20 a8 ff           JSR CIOUT
3a19 4c ae ff           JMP UNLSN

              ; **********
3a1c            ASCII_Hex
              ; **********

              ; Output: (X) = High nibble (A) = Low nibble
3a1c 48                PHA
3a1d 4a                LSR A
3a1e 4a                LSR A
3a1f 4a                LSR A
3a20 4a                LSR A
3a21 09 30             ORA #'0'
3a23 c9 3a             CMP #$3a
3a25 90 02             BCC Hex_11
3a27 69 06             ADC #6
3a29 aa       Hex_11   TAX
3a2a 68                PLA
3a2b 29 0f             AND #15
3a2d 09 30             ORA #'0'
3a2f c9 3a             CMP #$3a
3a31 90 02             BCC Hex_12
3a33 69 06             ADC #6
3a35 60       Hex_12   RTS

              ; ******************
3a36            Select_Text_Window
              ; ******************

3a36 a9 01             LDA #1
3a38 85 31             STA Win_Top
3a3a a9 18             LDA #ROWS-1
3a3c 8d 27 3d          STA Win_Bot
3a3f 60                RTS

              ; ********************
3a40            Select_Status_Window
              ; ********************

3a40 a2 00             LDX #0
3a42 86 31             STX Win_Top
3a44 4c 7e 35          JMP Set_Screen_Pointer_X

              ; ***********
3a47            Save_Cursor
              ; ***********

3a47 20 a6 35           JSR Get_Row_Col
3a4a 86 17              STX C_Save_Row
3a4c 84 16              STY C_Save_Col
3a4e 60                 RTS


              ; **************
3a4f            Restore_Cursor
              ; **************

3a4f a6 17              LDX C_Save_Row
3a51 a4 16              LDY C_Save_Col
3a53 4c 93 35           JMP Set_Row_Col

              ; *********
3a56            Erase_Row
              ; *********

3a56 20 7e 35           JSR Set_Screen_Pointer_X
3a59 a9 20              LDA #' '
3a5b a0 4f              LDY #COLS-1
3a5d 91 51    ClRo_10   STA (Scr_Adr),Y
3a5f 88                 DEY
3a60 10 fb              BPL ClRo_10
3a62 60                 RTS

              ; ******************
3a63            Erase_Upper_Window
              ; ******************
3a63 a2 00              LDX #0
3a65 a0 00    EUW_10    LDY #0
3a67 20 56 3a           JSR Erase_Row
3a6a e8                 INX
3a6b e4 2e              CPX Upper_Size
3a6d 90 f6              BCC EUW_10
3a6f 60                 RTS

              ; ********
3a70            ASCII_TS
              ; ********

              ; Convert binary number in (A) to
              ; two decimal digits in (X) and (A)

3a70 a2 2f              LDX #'0'-1
3a72 38                 SEC
3a73 e8       asts_01   INX
3a74 e9 0a              SBC #10
3a76 b0 fb              BCS asts_01
3a78 69 3a              ADC #$3a
3a7a 60                 RTS

              ****************
              Module Load_Page
              ****************

              ; Read 256 bytes of data from disk and store them in RAM
              ; at the address (RAM_LO) = 32 bit address.
              ; The I/O routines TALK, TKSA, ACPTR, and UNTLK are used
              ; ACPTR sets the STATUS bit 6 ($40) on error

3a7b a5 ba              LDA FA
3a7d 20 b4 ff           JSR TALK            ; open channel
3a80 a9 68              LDA #$68            ; SA = 8
3a82 20 96 ff           JSR TKSA            ; select channel to disk buffer
3a85 a3 00              LDZ #0
3a87 64 90              STZ IO_STATUS
3a89 20 a5 ff _loop     JSR ACPTR
3a8c ea 92 0b           STA [RAM_LO],Z
3a8f a5 90              LDA IO_STATUS
3a91 d0 03              BNE _eof
3a93 1b                 INZ
3a94 d0 f3              BNE _loop
3a96 20 ab ff _eof      JSR UNTLK           ; 256 bytes read, send untalk
3a99 e3 14              INW Block_Lo        ; increment block word Block_Lo/Hi
3a9b e6 0c              INC RAM_HI          ; advance RAM pointer page
3a9d 60                 RTS                 ; return OK
3a9e          EndMod [Load_Page] Size = 35 [$23]

              *****************
              Module Load_Story
              *****************

              ; Continue story loading in bank 4 and bank 5

3a9e a2 00              LDX #0
3aa0 86 0c              STX RAM_HI
3aa2 a2 04              LDX #4             ; RAM bank
3aa4 86 0d              STX RAM_BA         ; load at $040000
3aa6 20 7b 3a _loop     JSR Load_Page
3aa9 a5 90              LDA IO_STATUS
3aab d0 17              BNE _eof
3aad a5 14              LDA Block_Lo
3aaf 29 07              AND #7
3ab1 d0 05              BNE _prog
3ab3 a9 2e              LDA #'.'
3ab5 20 e6 38           JSR CHROUT
3ab8 a5 0c    _prog     LDA RAM_HI
3aba d0 ea              BNE _loop
3abc e6 0d              INC RAM_BA
3abe a5 0d              LDA RAM_BA
3ac0 c9 06              CMP #6
3ac2 90 e2              BCC _loop
3ac4 ad e9 3b _eof      LDA Game_Unit       ; close #8
3ac7 85 ba              STA FA
3ac9 20 b1 ff           JSR LISTEN
3acc a9 e8              LDA #$e8
3ace 20 93 ff           JSR SECOND
3ad1 4c ae ff           JMP UNLSN
3ad4          EndMod [Load_Story] Size = 54 [$36]

              ; *************
3ad4            Delete_Config
              ; *************

3ad4 ad e9 3b           LDA Game_Unit
3ad7 85 ba              STA FA
3ad9 20 b1 ff           JSR LISTEN
3adc a9 6f              LDA #$6f
3ade 20 93 ff           JSR SECOND
3ae1 a0 00              LDY #0
3ae3 b9 32 3d DeCo_10   LDA ConfigDel,Y
3ae6 20 a8 ff           JSR CIOUT
3ae9 c8                 INY
3aea c0 09              CPY #[?ConfigDel + ?Configname]
3aec 90 f5              BCC DeCo_10
3aee 4c ae ff           JMP UNLSN

              ; ***********
3af1            Prep_Config
              ; ***********

3af1 a9 3d              LDA #<CONFIG_START
3af3 a0 3d              LDY #>CONFIG_START
3af5 85 38              STA A0L
3af7 84 39              STY A0H
3af9 a9 44              LDA #<CONFIG_END
3afb a0 3d              LDY #>CONFIG_END
3afd 85 3a              STA A1L
3aff 84 3b              STY A1H
3b01 a9 06              LDA #?Configname
3b03 a2 35              LDX #<Configname
3b05 a0 3d              LDY #>Configname
3b07 4c bd ff           JMP SETNAM

              ; ***********
3b0a            Save_Config
              ; ***********

3b0a 20 d4 3a           JSR Delete_Config
3b0d 20 f1 3a           JSR Prep_Config
3b10 e6 b7              INC FNLEN           ; add ','
3b12 e6 b7              INC FNLEN           ; add 'W'
3b14 4c 75 3b           JMP Save_File

              ; ***********
3b17            Load_Config
              ; ***********

3b17 20 f1 3a           JSR Prep_Config
3b1a 20 1e 3b           JSR Load_File
3b1d 60                 RTS


              ; *********
3b1e            Load_File
              ; *********

              ; Input : (A0) = start address
              ;       : (A1) = end   address
              ;       : SETNAM was called

3b1e a5 ba              LDA FA
3b20 20 b1 ff           JSR LISTEN
3b23 a9 f3              LDA #$f3
3b25 20 93 ff           JSR SECOND
3b28 a0 00              LDY #0
3b2a 84 90              STY IO_STATUS
3b2c b1 bb    LoFi_10   LDA (FNADR),Y
3b2e 20 a8 ff           JSR CIOUT
3b31 c8                 INY
3b32 c4 b7              CPY FNLEN
3b34 90 f6              BCC LoFi_10
3b36 20 ae ff           JSR UNLSN
3b39 a5 ba              LDA FA
3b3b 20 b4 ff           JSR TALK
3b3e a9 63              LDA #$63
3b40 20 96 ff           JSR TKSA
3b43 a0 00              LDY #0
3b45 20 a5 ff           JSR ACPTR           ; read first byte
3b48 a6 90              LDX IO_STATUS
3b4a f0 05              BEQ LoFi_30
3b4c d0 17              BNE LoFi_60

3b4e 20 a5 ff LoFi_20   JSR ACPTR
3b51 91 38    LoFi_30   STA (A0L),Y
3b53 a5 90              LDA IO_STATUS
3b55 d0 0e              BNE LoFi_60         ; EOF
3b57 e3 38              INW A0L
3b59 a5 39              LDA A0H
3b5b c5 3b              CMP A1H
3b5d 90 ef              BCC LoFi_20
3b5f a5 38              LDA A0L
3b61 c5 3a              CMP A1L
3b63 90 e9              BCC LoFi_20

3b65 20 ab ff LoFi_60   JSR UNTLK           ; close file
3b68 a5 ba              LDA FA
3b6a 20 b1 ff           JSR LISTEN
3b6d a9 e3              LDA #$e3
3b6f 20 93 ff           JSR SECOND
3b72 4c ae ff           JMP UNLSN

              ; *********
3b75            Save_File
              ; *********

              ; Input : (A0) = start address
              ;       : (A1) = end   address
              ;       : SETNAM was called

3b75 a5 ba              LDA FA
3b77 20 b1 ff           JSR LISTEN
3b7a a9 f3              LDA #$f3
3b7c 20 93 ff           JSR SECOND
3b7f a0 00              LDY #0
3b81 84 90              STY IO_STATUS
3b83 b1 bb    SaFi_10   LDA (FNADR),Y
3b85 20 a8 ff           JSR CIOUT
3b88 c8                 INY
3b89 c4 b7              CPY FNLEN
3b8b 90 f6              BCC SaFi_10
3b8d 20 ae ff           JSR UNLSN

              ; TODO: check error channel

3b90 a5 ba              LDA FA
3b92 20 b1 ff           JSR LISTEN
3b95 a9 63              LDA #$63
3b97 20 93 ff           JSR SECOND
3b9a a0 00              LDY #0
3b9c b1 38    SaFi_20   LDA (A0L),Y
3b9e 20 a8 ff           JSR CIOUT
3ba1 e3 38              INW A0L
3ba3 a5 39              LDA A0H
3ba5 c5 3b              CMP A1H
3ba7 90 f3              BCC SaFi_20
3ba9 a5 38              LDA A0L
3bab c5 3a              CMP A1L
3bad 90 ed              BCC SaFi_20

3baf 20 ae ff           JSR UNLSN           ; close file
3bb2 a5 ba              LDA FA
3bb4 20 b1 ff           JSR LISTEN
3bb7 a9 e3              LDA #$e3
3bb9 20 93 ff           JSR SECOND
3bbc 4c ae ff           JMP UNLSN

3bbf 00 00 00 TEXT_WORD       .FILL  9 (0) ; unpacked ASCII word ; 9 bytes

3bc8 00       Tokenizer_Flag  .BYTE 0
3bc9 00       E_Attribute     .BYTE 0
3bca 00       Z_Mem_Flag      .BYTE 0
3bcb 00 00    Z_Mem_Base      .WORD 0

              ; ------- data for unit dialog --------
3bcd 02 02    Unit_Buf  .BYTE 2,2 ; input length
3bcf 30 38 00 Unit_Text .BYTE "08",0
              ; ------- data for file name dialog----
3bd2 14 14    File_Buf  .BYTE 20,20 ; input length
3bd4 73 61 76 File_Text .BYTE "savename",0
3bdd 00 00 00           .FILL 12 (0) ; 12 bytes
              ; ------- story signature ------------
3be9 08       Game_Unit .BYTE 8

3bea 0d 50 72 PRESSRET  .BYTE "\rPress <RETURN> to continue."
3c06 53 61 76 SAVEUNIT  .BYTE "Save to unit:"
3c13 53 61 76 SAVEFILE  .BYTE "Save to file:"
3c20 52 65 73 LOADUNIT  .BYTE "Restore from unit:"
3c32 52 65 73 LOADFILE  .BYTE "Restore from file:"
3c44 12 3c 4d MORE      .BYTE REVERSE_ON,"<MORE>",REVERSE_OFF
3c4c 45 6e 64 EOS       .BYTE "End of session - press any key"
3c6a 4e 4f 20 NOSTORY   .BYTE "NO Z3 STORY"


3c75 93 42 49 BITSHIFTER .BYTE CLEAR,"BIT SHIFTER 02-SEP-2020\r"
3c8e 0d       InfoClr    .BYTE CR
3c8f 50 72 6f InfoPro    .BYTE 'Program: 0001 - 00FF    0 Pages\r'
3caf 42 61 6e InfoSta    .BYTE 'Bank  0: 0000 - 00FF    0 Pages\r'
3ccf 53 74 6f InfoSto    .BYTE 'Story  :        Size    0 Pages\r',0
3cf0          InfoEnd

3cf0 20 20 20 BLANKS    .BYTE "            "

3cfc 13 12 20 PRE_STATUS .BYTE HOME,REVERSE_ON," "
0034          STAT_SCORE = 52
0016          MOVES_COL  = 22

3cff 53 63 6f SCORE      .BYTE "Score: 0       Moves: 0     "
3d1b 54 69 6d STIME      .BYTE "Time: 00:00 "
0007          SCORE_COL  =  7
0006          STIME_COL  =  6

3d27 18       Win_Bot    .BYTE 24
3d28 20 45 72 INTERR     .BYTE " Error 00 "

3d32 53 30 3a ConfigDel  .BYTE "S0:"        ; prefix for scratch command
3d35 43 4f 4e Configname .BYTE "CONFIG"
3d3b 2c 57               .BYTE ",W"         ; postfix for write command

3d3d          CONFIG_START
3d3d 01       FG_Color   .BYTE WHITE        ; f1 133
3d3e 07       TI_Color   .BYTE YELLOW       ; f3 134
3d3f 06       BO_Color   .BYTE BLUE         ; f5 135
3d40 06       BG_Color   .BYTE BLUE         ; f2 137
3d41 02       TB_Color   .BYTE RED          ; f4 138
3d42 00                  .BYTE 0            ; f6 139
3d43 00                  .BYTE 0            ; f8 140
3d44          CONFIG_END

              ; ***
3d44            EOP
              ; ***



  827 Symbols
-------------
BLACK                          $0000    25
WHITE                          $0001    26D  3827   5244   5672
R6510                          $0001   166D   364
Z_Code                         $0002    68D   437    455    461    490
                                       510    515    757    785   3504
                                      4019   4022   4612
RED                            $0002    27D  5676
QI0                            $0003    69D  1000   1001   1089   1096
                                      1391   2398   2404   2413   4190
                                      4365   4746   4815   4837
CYAN                           $0003    28D  5162   5184
QI1                            $0004    70D  1003   1004   1394   2395
                                      2407   2414   4744   4818   4829
                                      4839
PURPLE                         $0004    29
QI2                            $0005    71D  1009   1010   1395   2394
                                      2410   4816   4832   4841
GREEN                          $0005    30
QDL                            $0006    75D  3067   3100   3126   3136
                                      4857   4890
BLUE                           $0006    31D  5674   5675
STIME_COL                      $0006  5662D  3758   3767
QDH                            $0007    76D  3007   3111   3115   3119
                                      3125   3134   3138   3140   3142
                                      3146   3147
SCORE_COL                      $0007  5661D  3788   3791
YELLOW                         $0007    32D  3818   5673
QD0                            $0008    77D  1090   1095   1421   1430
                                      1741   2046   2052   2070   2162
                                      2216   2908   2909   2920   2958
                                      2997   3083   4767   4789
ORANGE                         $0008    33
BACKSPACE                      $0008    46
BROWN                          $0009    34
TAB                            $0009    47
QD1                            $0009    78D  1424   1431   1744   2048
                                      2054   2074   2160   2218   2911
                                      2921   2960   2998   3087   4770
                                      4781   4791
QD2                            $000a    79D  1427   1432   1747   2050
                                      2158   2220   2913   2923   3000
                                      3090   4768   4784   4793
PINK                           $000a    35
RAM_LO/RAM_HI                  $000b    83D  4256y  4391y  4788   4836
                                      5429     84D  4225   4233   4260
                                      4318   4346   4394   4625   4774
                                      4783   4822   4831   5436   5447
                                      5458
DARKGREY                       $000b    36
GREY                           $000c    37
RAM_BA                         $000d    85D  4766   4787   4814   4835
                                      5449   5460   5461
LT_GREEN                       $000d    38
CR                             $000d    48D  2673   3571   3640   4150
                                      4942   4970   5114   5647
LT_BLUE                        $000e    39
LT_GREY                        $000f    40
LV0                            $000f    89D  1673   1681   1685   1887
                                      1893   1894   1983   1985   1992
                                      1998   2011   3043   3045   3669
                                      3678   3683   3692   3697   3706
LV1                            $0010    90D  1886   1896   1897   1984
                                      1989   1993   2000   2012   3670
                                      3674   3679   3684   3688   3693
                                      3698   3702
CURSOR_DOWN                    $0011    49
LV2                            $0011    91D  1930   1949   2548   2550
                                      3057   3061
LV3                            $0012    92D  1932   1946
REVERSE_ON                     $0012    50D  5116   5641   5655
HOME                           $0013    51D  5110   5655
Alphabet                       $0013    94D  3009   3019   3021
Block_Lo                       $0014    95D  4731   4736   5435   5453
DEL                            $0014    52D  4944   5120   5198
Block_Hi                       $0015    96
MOVES_COL                      $0016  5657D  3796   3799
C_Save_Col                     $0016    97D  5363   5372
C_Save_Row                     $0017    98D  2237   5362   5371
Charbuf_Ptr                    $0018    99D  3575   3585   3595   3610
                                      3639   3642   3648   3654   3657
ROWS                           $0019   165D  3620   3860   4507   4509
                                      4693   5017   5047   5066   5069
                                      5279   5345
Charbuf_End                    $0019   100D  3589   3594   3607
Chars_Left                     $001a   101D  2728   2744   2777   2781
                                      2789   2795   2834   2842   5161
                                      5187   5189   5218   5246   5253
Info_Pages                     $001b   102D  4549   4706   4712
ESC                            $001b    53
MORE_Counter                   $001c   103D  2646   3618   3619   3624
                                      3928   5183   5298
NUMBER                         $001d   104D  2545   3677   3691   3705
                                      3712   3714   3717   3720   3740
                                      3759   3761   3768   3771   4561
CURSOR_RIGHT                   $001d    54
OP_Type                        $0022   105D   715    717    751    773
                                       777    778    780
ParNum                         $0024   106D   435    727    728    754
                                       782   1464   1472   1478   2030
                                      2221   2255   2436   2453   2665
Parse_Index                    $0025   107D  2730   2809   2826
Prop_Mask                      $0026   108D  3383   3398   3437   4640
                                      4651
QuotL                          $0027   109D  1909   1934   1966   1967
                                      1981   1996
QuotH                          $0028   110D  1910   1936   1969   1970
                                      1982   1997
RemL                           $0029   111D  1918   1940   1953   1954
                                      1977   1987   1999   2572
RemH                           $002a   112D  1919   1942   1956   1957
                                      1978   1990   2001   2570
Resident_Pages                 $002b   113D  4671   4711   4737   4771
                                      4782   4819   4830
Save_Unit                      $002c   114D   380   4103   4196   4293
                                      4312   4376
Status_Col                     $002d   115D  3537   3569   4622   4863
                                      4870   4877
Upper_Size                     $002e   116D  2645   3623   3851   3858
                                      3927   4006   4497   4618   4977
                                      5182   5281   5284   5297   5394
Version                        $002f   117D  1178   1188   1205   1242
                                      1354   1358   1428   1567   1660
                                      1835   2411   2424   2654   2671
                                      2724   2731   3280   3340   3361
                                      3365   3391   3462   3560   4593
                                      4634   4645   5171   5190   5202
                                      5247
Vocab_Length                   $0030   118D  2633   2967   4638   4649
Win_Top                        $0031   119D  3848   3859   3940   4007
                                      5282   5344   5354
Word_Length                    $0032   120D  2621   2756   3176   3252
                                      4636   4647
z_stack_ptr                    $0033   121D   832    851    855   1133
                                      1135   1375   2456   4185   4360
                                      4620
STAT_SCORE                     $0034  5656D  3806   3808
z_frame_ptr                    $0034   122D  1374   1398   2391   2457
                                      4187   4362   4621
DPL                            $0035   123D  2707   2933
DPH                            $0036   124D  2708   2934
DPI                            $0037   125D  2940   2973
A0L/A0H                        $0038   126D   332    339y   819y   822y
                                       907y   910y   930   1057   1067
                                      1077   1247   1252y  1257y  1272y
                                      1277y  1293y  1296y  1310   1314y
                                      1323y  1332y  1362y  1559   1621y
                                      1631y  1632y  1641y  1642y  1675y
                                      1678y  1699y  1760   1781   1795y
                                      1798y  1830   1837y  2468y  2471y
                                      2481y  2491   2512y  2515y  2629
                                      2636y  3076   3081y  3085y  3263
                                      3284   3295   3334   3342y  3345y
                                      3369y  3370   3375y  3378   3379
                                      3382y  3393y  3396y  3408y  3431
                                      3432   3436y  3464y  3978   3988
                                      3989y  3994y  4340   4342   4349
                                      4351   5495   5556y  5559   5563
                                      5602y  5604   5608    127D   335
                                       343    926    928    931    934
                                      1059   1069   1079   1249   1312
                                      1549   1552   1556   1763   1784
                                      1833   2495   2632   3079   3264
                                      3266   3268   3270   3286   3297
                                      3298   3299   3300   3303   3331
                                      3335   3338   3373   3381   3434
                                      3980   3993   5496   5560   5605
A1L/A1H                        $003a   128D   333    340y  1248   1269y
                                      1274y  1292y  1295y  1302y  1311
                                      1321y  1331y  1336y  1338y  1665y
                                      1669y  1686y  1689y  1694y  1703y
                                      5499   5564   5609    129D   337
                                       344    345   1250   1313   2416
                                      2446   2451   5500   5561   5606
X0L                            $003c   130D   723    731    732    811
                                       823    838    883    895    909
                                      1037   1047   1076   1142   1193
                                      1217   1225   1456   1558   2053
                                      2069   2573   2574   3664   4254
                                      4388   4550   4588   4591   4596
                                      4600   4866
X0H                            $003d   131D   721    733    734    809
                                       820    839    877    897    906
                                       978    980    994   1006   1039
                                      1049   1078   1141   1194   1457
                                      1550   1553   1555   1712   2055
                                      2073   2571   3665   4548   4586
                                      4592   4597   4867
X1L/X1H                        $003e   132D   792    830   1018   1028
                                      1036   1056   1121   1167   1232
                                      1260   1285   1318   1328   1346
                                      1402   1411   1419   1446   1466
                                      1584   1601   1612   1674   1698
                                      1739   1828   1857   1869   1892
                                      1933   2042   2063   2101y  2137
                                      2143   2161   2180   2182   2196
                                      2198y  2215   2272   2286   2337
                                      2383   2402   2442   2490   2525
                                      2532   2539   2560   2566   2581
                                      2611y  2727y  2772y  2784y  2837y
                                      3312   3836   3905   3908   3916
                                      3931   3953   4002   4049   5157
                                      5160y  5165y  5173   5186y  5235y
                                      5242y  5252y  5276    133D  1020
                                      1029   1038   1058   1122   1168
                                      1233   1262   1287   1347   1403
                                      1412   1422   1449   1467   1588
                                      1598   1609   1677   1742   1831
                                      1860   1872   1895   1929   1935
                                      2043   2058   2096   2098   2104
                                      2139   2146   2159   2183   2186
                                      2217   2252   2254   2290   2295
                                      2300   2384   2405   2444   2493
                                      2533   2542   2562   2568   2582
                                      2601   2603   2661   2663   3313
                                      5158
X2L/X2H                        $0040   134D  1046   1066   1468   1573
                                      1583   1585   1602   1613   1668
                                      1692   1729   1740   1785   1809
                                      1858   1870   1889   1900   1939
                                      2045   2118   2138   2151   2171y
                                      2172   2188   2190   2197   2199y
                                      2228   2287   2340   2465   2489
                                      2561   2623   2667   2717y  2722y
                                      2750y  2821y  3456   3485   3490
                                      3933   3965    135D  1048   1068
                                      1470   1571   1587   1589   1599
                                      1610   1664   1730   1743   1861
                                      1873   1888   1901   1931   1941
                                      2047   2119   2140   2148   2165
                                      2167   2191   2194   2230   2233
                                      2492   2563   2668   2710   2712
                                      3961
X3L                            $0042   136D  1474   2027   2039   2105
                                      2121   2130   2131   2144   2173
                                      2181   2189   2200   2225   2235
                                      2261   2470   2480   2514   2610
X3H                            $0043   137D  1476   2025   2078   2081
                                      2122   2125   2133   2134   2147
                                      2184   2192   2262   2467   2511
X4L                            $0044   138D  1480   2033   2037   2040
                                      2060   2066   2628   2944   2952
                                      2953   2976
X4H                            $0045   139D  1482   2630   2942   2945
                                      2947   2955   2956
X5L                            $0046   140D  2734   2770   2778   2783
                                      2791   2797   2836   2841
X5H                            $0047   141D  2737   2745   2755   2760
                                      2787   2790   2796   2801   2808
                                      2840
X6L                            $0048   142D  2736   2741   2806
X6H                            $0049   143D  2723   2742
X7L                            $004a   144D  2771   2803   2812   2820
                                      2961   2981
X7H                            $004b   145D  2813   2959   2980
X8L                            $004c   146
X8H                            $004d   147
Cursor_Col                     $004e   149D  3580   4515   4526   4912
                                      4921   5034   5063   5096   5099
                                      5101   5126   5142   5145   5221
Cursor_Row                     $004f   150D  4477   4514   4525   5035
                                      5064   5070   5283
COLS                           $0050   164D  3535   3581   3808   3823
                                      4405   4406   4407   4408   4409
                                      4410   4411   4412   4413   4414
                                      4415   4416   4417   4418   4419
                                      4420   4421   4422   4423   4424
                                      4425   4426   4427   4428   4431
                                      4432   4433   4434   4435   4436
                                      4437   4438   4439   4440   4441
                                      4442   4443   4444   4445   4446
                                      4447   4448   4449   4450   4451
                                      4452   4453   4454   4510   4512
                                      4672   4691   4873   4981   4993
                                      5004   5019   5127   5223   5381
Cursor_Vis                     $0050   151D  4915   4925
Scr_Adr                        $0051   152D  4484   4487   4914y  4923y
                                      4980   4984   4995   5002   5008
                                      5021   5098y  5144y  5382
Z_Mem_Ptr                      $0053   153D  3545y  3546   3964   3968
                                      3970   3982   3983
Col_Adr                        $0055   154D  4485   4489   4574   4576
                                      4997   5003   5010   5023   5131
DICT_WORD                      $0059   155D  2635   2965   3174   3200
                                      3210   3219   3233   3238   3240
                                      3241   3243   3244   3246   3254
                                      3256
ZP_END                         $005f   157D  4615
KEY_F1                         $0085    12
KEY_F3                         $0086    13
KEY_F5                         $0087    14
KEY_F7                         $0088    15
KEY_F2                         $0089    16
KEY_F4                         $008a    17
KEY_F6                         $008b    18
KEY_F8                         $008c    19
IO_STATUS                      $0090   167D  4139   4141   4195   4217
                                      4228   4237   4255   4389   4729
                                      5427   5430   5451   5538   5551
                                      5557   5587
CURSOR_UP                      $0091    56
REVERSE_OFF                    $0092    57D  3825   5118   5641
CLEAR                          $0093    55D  4009   5112   5646
CURSOR_LEFT                    $009d    58
SAP                            $00ac   168D  4982   4986   4994   5001
                                      5005   5007   5011   5013
TAP                            $00ae   169D  4983   4988   4990   4992
                                      4996   5006   5015
FNLEN                          $00b7   170D  5512   5513   5542   5591
FA                             $00ba   171D   378   4134   4197   4220
                                      4294   4313   4377   5306   5422
                                      5465   5477   5533   5545   5568
                                      5582   5597   5613
FNADR                          $00bb   172D  5539y  5588
MEMUSS                         $00c3   173D  5261   5262   5264
RVS                            $00c7   174D  3886   3890   5080   5089
                                      5143
BLNSW                          $00cc   175D   375
BLNCT                          $00cd   176
BLNON                          $00cf   177
Charbuf                        $0200   178D  3576   3590   3604   3605
                                      3641   3651   4290   4327
COLOR                          $0286   179D   386   3819   3828   3841
                                      5130   5162   5184   5244
SCNMPG                         $0288   180D   371
CINV                           $0314   181D   421
DSTATUS                        $033c   182D  4143   4151   4153   4156
                                      4246   4246   4246
SCREEN                         $0800   183D  4404   4405   4406   4407
                                      4408   4409   4410   4411   4412
                                      4413   4414   4415   4416   4417
                                      4418   4419   4420   4421   4422
                                      4423   4424   4425   4426   4427
                                      4428   4430   4431   4432   4433
                                      4434   4435   4436   4437   4438
                                      4439   4440   4441   4442   4443
                                      4444   4445   4446   4447   4448
                                      4449   4450   4451   4452   4453
                                      4454
Z_STATUS                       $1f00   215D  3534   3776   3806   3821
                                      3822   4871
START                          $2001   292D   294    297    297   4705
                                      4707
Link                           $203b   320D   303
ReLoop                         $2052   339D   342    347
MEGA_Setup                     $2066   352D   324    348
Set_Mode_80                    $20b6   397D   383   4742
Set_Kernal_Vectors             $20cb   416D   369
Set_Kernal_Vectors_loop        $20cd   420D   423
PC_LOOP                        $20d7   428D   531   4748
opvar_10                       $20f9   460D   457
opvar_20                       $20fc   461D   459
z_op_zero                      $2109   470D   443
z_op_one                       $210d   479D   441
z_op_two                       $211b   497D   439
z_exe_1f                       $212f   516D   463
z_execute                      $2131   519D   467    476    494
JSRMOD                         $213f   530D   527    529   4029   4031
                                      4032
z_error_2                      $2145   534D   624
z_error_4                      $214a   535D   547    575    576    577
                                       578
z_opcode                       $214f   538D   466    475    493    526
                                       528
opcodes_1op                    $218f   581D   493
ZV8F                           $21ad   603D  4653   4655
opcodes_0op                    $21af   606D   475
ZVB9                           $21c1   618D  4657   4659
opcodes_var                    $21cf   627D   466
z_error_1                      $220f   663D   642    644    646    650
opcodes_ext                    $2214   666D  4028   4030
Get_Operand                    $2228   702D   489    509    514    749
                                       775
geop_01                        $2235   721D   719
geop_02                        $223f   725D   718
geop_03                        $2244   727D   724
geop_04                        $2253   736D   725
Load_4_Operands                $2254   739D   460    756   4021
L4OP_20                        $2263   757D   750
Load_8_Operands                $2266   761D   458
L8OP_10                        $226d   775D   784
L8OP_20                        $2280   785D   776
Get_Var_X1L                    $2283   789D  1216   1224   1440
Get_Var_A                      $228d   798D   726
GeVa_10                        $2295   805D   793    802
Get_Global_Var                 $22a5   815D   806   3736   3756   3765
                                      4865
Put_Var                        $22b2   827D  1218   1226   1650   2589
Push_X0                        $22b8   835D   795    890
Push_AY                        $22bc   842D  2392   2396   2400   2422
                                      2452   2583
z_error_6                      $22cc   859D   856
Store_Zero                     $22d1   862D  1766   1817   2084   2326
Store_Byte                     $22d3   868D  1721   1812   1816   1844
                                      1848   2389   2648   2674   4165
                                      4277
Store_AX                       $22d5   874D  1192   1209   1404   1603
                                      1614   1799   2301   4043
Store_A_X0H                    $22d7   880D  1714
Store_X0                       $22d9   886D  1441   1458   2087   2575
stx0_01                        $22de   892D   831
Put_Global_Var                 $22ee   902D   893
Get_Global_Var_Addr            $22fb   914D   818    905
GGVA_Ret                       $2313   935D   954
Main_False                     $2314   948D  1170   1197   1485   1499
                                      1512   1525   1539   1576   1592
                                      1623   2085   2274   4332
Bran_01                        $2319   953D   962
Main_True                      $2320   958D   622   1171   1196   1484
                                      1498   1511   1524   1538   1575
                                      1591   1624   2088   2275   4171
                                      4269
Bran_10                        $2325   963D   952
Bran_11                        $2331   970D   965
Bran_12                        $233b   976D   972
Bran_13                        $233e   978D   975
Bran_14                        $2347   982D   969
Branch_XA                      $234d   988D   981   1413
Bran_20                        $2355   999D   997
Bran_21                        $2367  1009D  1007
z_rtrue                        $236c  1014D   609    985   1114
z_rfalse                       $2376  1024D   610    983
X1_TO_X0                       $237f  1033D  1494
X2_TO_X0                       $2388  1043D  1508   1535   1649
X1_TO_A0                       $2391  1053D  1507
X2_TO_A0                       $239a  1063D  1495   1521
X0_TO_A0                       $23a3  1073D  1534
z_print                        $23ac  1083D   611   1112
z_prin_1                       $23ae  1089D  1092
zprin_2                        $23ba  1095D  1098
z_nop                          $23c1  1101D   613
z_print_ret                    $23c2  1107D   612
z_ret_popped                   $23cb  1117D   617
z_pop                          $23d5  1126D   794    803   1120   1377
                                      1382   1389   1393   1397   2588
                                      4656   4658
z_error_5                      $23e9  1145D  1134
z_quit                         $23ee  1148D   619   3528
quit_20                        $23fa  1154D  1155   4663
z_catch                        $2402  1159D   618
z_jz                           $2403  1164D   588
z_jz_t                         $240c  1171D  1169
z_get_sibling                  $240f  1174D   589
z_get_child                    $2419  1184D   590
zg_chi_1                       $2421  1191D  1179   1181   1189
zg_chi_f                       $2430  1197D  1195
z_get_parent                   $2433  1201D   591
z_get_parent_get               $243b  1208D  1206
z_inc                          $2441  1213D   593   1533
z_dec                          $2449  1221D   594   1520
z_print_addr                   $2451  1229D   595
z_remove_obj                   $2458  1237D   597   1658
z_remove_obj_ro_10             $248e  1283D  1261   1263   1286   1288
z_remove_obj_ro_20             $24a4  1300D  1278
z_remove_obj_ro_30             $24a8  1302D  1305
z_remove_obj_ret40             $24af  1306D  1253
z_remove_obj_V3                $24b0  1308D  1243
z_remove_obj_ro_50             $24d3  1326D  1319   1329
z_remove_obj_ro_60             $24e2  1334D  1324
z_remove_obj_ret70             $24eb  1339D  1315
z_print_obj                    $24ec  1343D   598
z_print_obj_A                  $24f0  1350D  4868
z_print_obj_prio_1             $24f8  1357D  1355
z_print_obj_V4                 $2503  1363D  1359
z_print_obj_decode             $2508  1367D  1365
z_ret                          $250b  1371D   599   1021   1030   1123
zret_10                        $2518  1382D  1387
zret_20                        $2525  1389D  1380
zret_30                        $2545  1405D  1401
z_jump                         $2546  1408D   600
z_print_paddr                  $254d  1416D   601
z_print_paddr_label            $2566  1433D  1429
z_load                         $2569  1437D   602
z_not                          $256f  1444D   654   4652   4654
Store_XA                       $2578  1453D  1765   1862   1874   1902
                                      1911   1920
z_je                           $257f  1461D   548
z_je_1                         $258f  1472D  1469
z_je_2                         $259b  1478D  1475
z_je_t                         $25a7  1484D  1471   1477
z_je_f                         $25aa  1485D  1473   1479   1481   1483
z_error_9                      $25ad  1486D  1465
z_jl                           $25b2  1489D   549
z_jl_f                         $25c0  1499D  1497
z_jg                           $25c3  1502D   550
z_jg_f                         $25d1  1512D  1510
z_dec_chk                      $25d4  1515D   551
z_dec_cf                       $25e2  1525D  1523
z_inc_chk                      $25e5  1528D   552
z_inc_cf                       $25f6  1539D  1537
CMP_A0_X0                      $25f9  1542D  1496   1509   1522   1536
cmpax_1                        $2604  1555D  1551
cmpax_2                        $260e  1560D  1557
z_jin                          $260f  1563D   553
z_jin_get                      $2617  1570D  1568
z_jin_false                    $2625  1576D  1572   1574
z_test                         $2628  1580D   554
z_test_f                       $263b  1592D  1586   1590
z_or                           $263e  1595D   555
z_and                          $264a  1606D   556
z_test_attr                    $2656  1617D   557
z_teat_t                       $2660  1624D  1622
z_set_attr                     $2663  1627D   558
z_clear_attr                   $266b  1636D   559
z_store                        $2675  1646D   560
z_insert_obj                   $267b  1653D   561
z_insert_obj_V3                $26ad  1692D  1661
z_insert_obj_return            $26c4  1704D  1682   1701
z_loadw                        $26c5  1708D   562
z_loadb                        $26d0  1717D   563
Word_Array                     $26d6  1724D  1711
Byte_Array                     $26da  1733D  1720
z_get_prop_addr                $26ef  1751D   565
gepa_10                        $2700  1766D  1759
z_get_prop                     $2703  1770D   564
zgp_10                         $271c  1791D  1778
zgp_20                         $2722  1795D  1789
zgp_30                         $2726  1798D  1793
z_get_next_prop                $272b  1803D   566
zgnp_10                        $2735  1813D  1810
zgnp_20                        $2740  1817D  1814
z_get_prop_len                 $2743  1821D   592
z_get_prop_len_mask            $275f  1843D  1838
z_get_prop_len_V3              $2764  1846D  1836
z_add                          $276b  1853D   567
z_sub                          $2778  1865D   568
z_mul                          $2785  1877D   569
z_mul_1                        $2788  1886D  1899
z_mul_2                        $279f  1898D  1890
z_div                          $27a9  1905D   570
z_mod                          $27b3  1914D   571
Divide_Signed                  $27bd  1923D  1908   1917   2569
Divi_01                        $27d2  1939D  1937
Divi_02                        $27df  1945D  1943
Divi_03                        $27e9  1949D  1947
Divi_04                        $27ed  1951D  1944
Divi_05                        $27fa  1958D  1950
Negate_Quot                    $27fb  1961D  1938   1948
Divide_Unsigned                $2809  1974D  1945
DiUn_01                        $2812  1981D  1995
DiUn_02                        $282a  1994D  1991
z_error_8                      $283a  2003D  1979
Prep_Mult_Div                  $283f  2006D  1885   1980
z_scan_table                   $2849  2017D   653
zst_10                         $285b  2036D  2032
zst_20                         $285f  2039D  2034
zst_30                         $2869  2045D  2041
zst_40                         $2875  2052D  2082
zst_50                         $288f  2066D  2059
zst_60                         $28a0  2076D  2071
zst_70                         $28a5  2079D  2077
zst_fa                         $28ab  2084D  2026   2028
zst_tr                         $28b1  2087D  2061   2064
Clear_Table                    $28b7  2092D  2120
ClTa_10                        $28c0  2100D  2106
ClTa_20                        $28c9  2105D  2103
z_copy_table                   $28ce  2111D   659
cota_20                        $28ee  2137D  2126
cota_30                        $290d  2157D  2135   2141   2149   2152
cota_35                        $2920  2169D  2174
cota_ret                       $292d  2175D  2123
cota_45                        $292e  2179D  2150   2153
cota_50                        $294e  2196D  2201
z_print_table                  $295b  2206D   660
zpt_10                         $2974  2226D  2223
zpt_20                         $2977  2227D  2238
zpt_30                         $2980  2231D  2234
zpt_40                         $2993  2239D  2229   2236
z_tokenize                     $2994  2243D   657
z_tokenize_standard            $29ac  2264D  2258
z_check_argc                   $29af  2268D   661
zca_10                         $29b9  2275D  2273
z_log_shift                    $29bd  2280D   671
z_log_shift_left               $29c3  2289D  2292
z_log_shift_right              $29cb  2295D  2288   2298
z_log_shift_store              $29d1  2300D  2293
z_set_font                     $29d6  2305D   673
z_set_color                    $29d9  2329D   574
BG_CODE                        $29ed  2346D  2338   2341
z_call_n                       $29f7  2358D   573    603    655    656
z_call_s                       $29fb  2366D   572    596    630
call_00                        $29fd  2382D  2362
call_10                        $2a0c  2389D  2387
call_20                        $2a0f  2391D  2385
call_25                        $2a3b  2415D  2412
call_30                        $2a44  2420D  2448
call_32                        $2a5b  2431D  2425
call_36                        $2a67  2436D  2429
call_40                        $2a7a  2446D  2437
call_50                        $2a7f  2450D  2417
z_storew                       $2a92  2462D   631
z_storeb                       $2aa2  2476D   632
X1_PLUS_X2_TO_A0               $2aaa  2485D  2466   2479
z_put_prop                     $2abc  2500D   633
zpupr_3                        $2acf  2514D  2508
z_error10                      $2ad4  2518D  2506
z_error11                      $2ad9  2519D  2510
z_print_char                   $2ade  2522D   635
z_print_num                    $2ae3  2529D   636
zprnu_1                        $2af8  2543D  2534
zprnu_2                        $2afd  2545D  2553
zprnu_3                        $2b0a  2551D  2547
z_random                       $2b10  2557D   637
z_push                         $2b34  2578D   638
z_pull                         $2b3b  2586D   639
z_encode_text                  $2b41  2593D   658
zet_10                         $2b4c  2606D  2608
zet_20                         $2b54  2611D  2624
zet_30                         $2b6c  2626D  2617   2622
zet_40                         $2b7d  2635D  2638
z_read_char                    $2b86  2642D   652
z_read                         $2b93  2651D   634
z_read_V4                      $2b9a  2657D  2655
z_read_no_parse                $2bb9  2671D  2666   2669
z_read_return                  $2bc2  2675D  2672
Parse_Input                    $2bc3  2679D  2264   2670
Parse_AY_Dict                  $2bc9  2704D  2263
Parse_10                       $2bde  2721D  2718
Parse_15                       $2be2  2723D  2720
Parse_17                       $2bed  2729D  2725
Parse_18                       $2bf6  2734D  2732
Parse_20                       $2bfe  2741D  2779   2792   2802   2827
Parse_25                       $2c0a  2748D  2743
Parse_30                       $2c10  2755D  2746
Parse_35                       $2c19  2760D  2757
Parse_40                       $2c1f  2764D  2766
Parse_45                       $2c3b  2781D  2761   2776
Parse_50                       $2c55  2794D  2774
Parse_55                       $2c5e  2801D  2782   2786
Parse_60                       $2c83  2820D  2811   2814   2825
Parse_70                       $2c8d  2826D  2819
Skip_Surplus                   $2c92  2831D  2758
SkSu_10                        $2c96  2836D  2843
SkSu_Ret                       $2ca7  2844D  2835   2839
Sep_All                        $2ca8  2847D  2614   2785   2838
Sep_Dict                       $2cad  2859D  2773
SeDi_10                        $2cbe  2874D  2868   2878
SeDi_20                        $2cc9  2880D  2876
SeDi_Ret                       $2cca  2881D  2856
Sep_Std                        $2ccb  2884D  2775   2855
SeSt_10                        $2ccd  2893D  2896
SeSt_Ret                       $2cd6  2898D  2894
Skip_Data                      $2cd7  2901D  2938
SkDa_Ret                       $2ce4  2914D  2910   2912
Set_Data_AY                    $2ce5  2917D  2871   2935
Dictionary_Search              $2cee  2927D  2805
DiSe_20                        $2d1f  2958D  2948   2977
DiSe_30                        $2d29  2963D  2968
DiSe_50                        $2d36  2971D  2966   2974
DiSe_70                        $2d44  2980D  2946
DiSe_Ret                       $2d48  2982D  3011
ZSCII_2                        $2d49  2989D  3025   3204
Decode_YX                      $2d63  2992D  1234   1367
Decode_Text                    $2d6b  3003D  1093   1433   3094
DeTe_10                        $2d6f  3008D  3035   3104
DeTe_15                        $2d73  3010D  3020
DeTe_20                        $2d7e  3015D  3012
DeTe_25                        $2d8a  3021D  3018
DeTe_30                        $2d98  3029D  3023
DeTe_35                        $2da0  3033D  3030
DeTe_40                        $2da2  3034D  3014   3026   3032   3046
DeTe_50                        $2da8  3037D  3027
DeTe_55                        $2dba  3050D  3016
DeTe_60                        $2dce  3067D  3070
DeTe_65                        $2df7  3099D  3103
Get_Packed_Char                $2e02  3108D  3010   3037   3044   3058
GPC_10                         $2e18  3124D  3116
GPC_20                         $2e22  3131D  3112
GPC_Ret                        $2e47  3154D  3114
Encode                         $2e48  3157D  2626   2804
Enco_10                        $2e4e  3173D  3181
Enco_20                        $2e50  3174D  3188   3195   3224   3229
Enco_30                        $2e58  3180D  3171
Enco_35                        $2e69  3190D  3184   3186
Enco_40                        $2e75  3197D  3191   3193
Enco_50                        $2e85  3204D  3207
Enco_60                        $2eaa  3226D  3205
Enco_70                        $2eb2  3231D  3177
Enco_80                        $2eb6  3233D  3253
A0_x_8                         $2edf  3260D  3283   3293
Object_Offset                  $2eed  3275D  3329
Object_Offset_label            $2efd  3288D  3285
Object_Offset_V4               $2f00  3293D  3281
Get_Object_X1                  $2f16  3309D  1191   1208   1246   1309
                                      1570   3364   3484
Get_Object_Reg                 $2f1a  3316D  1259   1284   1317   1327
                                      1357   1672   1696
Get_Object_X1_label            $2f22  3333D  3330
Get_Object_X1_objlow           $2f3a  3345D  3341
First_Property                 $2f3d  3350D  1811   3455
First_Property_fips_1          $2f45  3364D  3362
First_Property_fips_2          $2f50  3370D  3366
FiPr_10                        $2f65  3382D  3380
Property_Size                  $2f6a  3388D  1791   1846   2507   3428
Property_Size_one              $2f79  3401D  3394
Property_Size_V3               $2f80  3408D  3392
Next_Property                  $2f89  3419D  1815   3459
NePr_20                        $2f97  3435D  3433
Find_Property                  $2f9e  3441D  1758   1777   1813   2505
Find_Property_loop             $2fa1  3456D  3460
Find_Property_match            $2fac  3461D  3457
Find_Property_ok               $2fb4  3466D  3463
Find_Property_return           $2fb6  3467D  3458
Get_Attr_Addr                  $2fb7  3471D  1620   1630   1639
gaa_01                         $2fc9  3495D  3497
gaa_02                         $2fca  3496D  3494
Dump_Code                      $2fce  3501D  3521
INTERNAL_ERROR                 $2fdc  3514D   534    535    663    859
                                      1145   1486   2003   2518   2519
                                      4034
INER_10                        $2ff6  3524D  3527
Print_To_Status                $3001  3531D  3570
PTS_01                         $300a  3538D  3536
Print_Mem                      $300b  3541D  3563
Print_Unbuffered               $3012  3551D  3565   3567
Print_Formatted                $3015  3557D  2526   2536   2549   3034
PrFo_10                        $302a  3569D  3561
PrFo_20                        $302e  3571D  3568
PrFo_25                        $3046  3586D  3574
PrFo_30                        $3047  3588D  3582
PrFo_35                        $304b  3590D  3593
PrFo_40                        $3055  3595D  3591
PrFo_45                        $3062  3604D  3609
PrFo_50                        $3069  3607D  3602
z_new_line                     $3071  3615D   620   1113   3520   3572
                                      3598
znl_10                         $308f  3628D  3630
Terminate_Buffer               $30a4  3636D  3621
Print_Buffer                   $30ad  3645D  2214   2335   2644   2657
                                      3835   3904   3915   3929   3952
                                      4001   5275
PrBu_10                        $30b3  3651D  3655
PrBu_Ret                       $30c2  3658D  3649
Format_Integer                 $30c3  3661D  3737   3757   3766   4557
Format_XA                      $30c7  3666D  2543
FORINT_01                      $30ca  3668D  3676
FORINT_02                      $30e2  3682D  3690
FORINT_03                      $30fa  3696D  3704
FORINT_04                      $3110  3709D  3711
FORINT_05                      $311f  3717D  3723
FORINT_06                      $312c  3724D  3719
Status_Number                  $312d  3727D  3794   3802
StNu_10                        $3137  3740D  3747
StNu_20                        $3141  3745D  3742
Print_Time                     $3147  3752D  4883
Print_Time_loop                $3173  3775D  3779
Print_Score                    $317f  3784D  4881
Print_Score_clr_sc             $3183  3789D  3792
Print_Score_clr_mv             $3194  3797D  3800
Print_Score_loop               $31a3  3805D  3809
Print_Status                   $31af  3814D  4884
z_set_window                   $31d6  3833D   641
z_set_window_return            $31fa  3854D  3838
z_set_window_lower             $31fb  3858D  3843
Set_Underline                  $320c  3868D  3910
Sund_10                        $3210  3875D  3873
Set_Reverse                    $3214  3879D  3907
Srev_10                        $321b  3889D  3884
z_set_text_style               $3220  3894D   647
z_buffer_mode                  $3231  3913D   648
z_set_cursor                   $323a  3921D   645
z_output_stream                $324f  3945D   649
zos_10                         $3278  3971D  3957   3969
zos_20                         $3279  3976D  3955
zos_30                         $3290  3988D  3985
z_erase_window                 $329e  3999D   643
zew_10                         $32b5  4011D  4004
z_extension                    $32b8  4014D   623
z_error12                      $32de  4034D   672    674    675    676
                                       677   4025
z_save_undo                    $32e3  4038D   678
z_sound_effect                 $32e9  4046D   651
Error_Beep                     $32f2  4057D  4053
Click                          $32f7  4064D  4051
Empty_Keyboard_Queue           $32f8  4072D  3625   4076   4114
Decode_Unit                    $32fe  4080D  4102
DeUn_10                        $3305  4086D  4083
DeUn_20                        $330b  4089D  4085   4087
Unit_Dialog                    $330e  4094D  4177   4284
Wait_for_Return                $3321  4107D  4741
wfret_10                       $332d  4115D  4118
wfret_99                       $3335  4119D  4116
File_Dialog                    $3336  4122D  4179   4286
Read_Disk_Status               $333d  4130D  4245
RDS_10                         $334d  4140D  4148
RDS_20                         $3360  4149D  4145
RDS_30                         $3363  4150D  4142
z_ext_save                     $3375  4161D   669
z_save                         $337d  4167D   614
Save_Game                      $3383  4174D  4163   4170
WG_10                          $33b3  4190D  4193
WG_20                          $33cc  4202D  4210
WG_25                          $33d9  4208D  4206
WG_30                          $33df  4212D  4204
WG_40                          $3400  4227D  4231
WG_50                          $3412  4236D  4240
WG_Err                         $3422  4244D  4218   4229   4238
Write_Block                    $3434  4250D  4227   4236
WrBl_10                        $343a  4256D  4259
z_restore                      $3449  4265D   615
z_ext_restore                  $344f  4272D   670
Restore_Game                   $3457  4280D  4268   4275
RG_02                          $3471  4289D  4292
RG_10                          $3488  4299D  4307
RG_15                          $3495  4305D  4303
RG_20                          $349b  4308D  4301
RG_03                          $34c1  4326D  4322
RG_04                          $34c3  4327D  4330
RG_05                          $34d2  4334D  4325
RG_77                          $34de  4341D  4343
RG_06                          $34ef  4350D  4352
RG_07                          $350a  4364D  4367
Close_Save_File                $3518  4373D  4242   4247   4369
Read_Block                     $3527  4384D  4319   4341   4350
ReBl_10                        $352d  4390D  4393
Row_Lo                         $353c  4404D  4483
Row_Hi                         $3555  4430D  4486
L_Encode_A                     $356e  4456D  3198   3202   3212   3221
L_Encode_Y                     $356f  4457D  3197   3223   3227
Sep_Std_List                   $3570  4461D  2892   2893
Z_Arg_Count                    $3576  4462D  1378   2271   2450   2455
Z_Buffer_Mode                  $3577  4463D  3564   3917
Z_Call_Type                    $3578  4464D  1390   1400   2382   2386
                                      2399
Z_Monospace                    $3579  4465D  3850   3863
Z_Underline                    $357a  4466D  3875
Z_Active_Window                $357b  4467D  3566   3837   3839   4008
Set_Screen_Pointer             $357c  4474D  4516   5287
Set_Screen_Pointer_X           $357e  4480D  4978   5036   5071   5355
                                      5379
Window_Home                    $358f  4494D  5286
Set_Row_Col                    $3593  4501D  3864   3942   5373
SRC_10                         $3599  4510D  4508
SRC_20                         $359f  4514D  4511
Get_Row_Col                    $35a6  4519D  5361
Info_Print                     $35ab  4530D  4710   4717
Info_Size                      $35ca  4553D  4720
InSi_10                        $35d3  4561D  4566
Screen_Setup                   $35df  4570D   384   4619
Story_Pages                    $35e8  4580D  4718
STTS_05                        $3602  4598D  4594
STTS_10                        $3608  4601D  4599
z_restart                      $3609  4605D   393    616
Start_10                       $3611  4613D  4616
Start_15                       $364e  4645D  4632
Start_20                       $3672  4662D  4629   4631
Start_22                       $367e  4664D  4641   4660
Start_30                       $36f3  4728D  4738
Start_40                       $3705  4736D  4733
Start_50                       $370b  4740D  4730
Next_Datum                     $3724  4751D  1713   1748   2057   2062
                                      2169   2231   2872   2874   2937
                                      2939   2941   2943   2963   2971
                                      3131   3135
NEDA_10                        $373b  4780D  4769   4772
NEDA_50                        $374a  4788D  4775
NEDA_80                        $3757  4794D  4790   4792
Next_Instruction               $375a  4798D   436    445    720    722
                                       772    801    889    951    955
                                       961    979   2415   2431   2433
                                      4018   4020
NEIN_10                        $3771  4828D  4817   4820
NEIN_50                        $3780  4836D  4823
NEIN_80                        $378d  4842D  4838   4840
z_show_status                  $3790  4847D   621   2656   3622
zss_10                         $3795  4857D  4860
zss_20                         $37ae  4871D  4874
zss_30                         $37c7  4883D  4880
zss_40                         $37ca  4884D  4882
zss_90                         $37cf  4889D  4893
Fix_Colors                     $37da  4898
FiCo_10                        $37dc  4902D  4906
Cursor_On                      $37e8  4910D  4939
Cursor_Off                     $37f1  4919D  4967
Get_Character                  $37fc  4929D  2647   4115   5196
GeCh_10                        $3801  4940D  4941   4964
GeCh_22                        $381a  4953D  4949
GeCh_24                        $3826  4960D  4956
GeCh_30                        $382a  4963D  4947   4954
GeCh_40                        $382d  4966D  4943   4945   4951   4958
                                      4961
Scroll_Main_Window             $3836  4974D  5068
SMW_10                         $3856  4993D  5018
SMW_20                         $3858  4994D  4999
SMW_30                         $388b  5020D  5025
Home_Screen                    $3898  5029D  5051   5111
Clear_Screen                   $38a4  5042D   391   5113   5295
Clear_Screen_loop              $38a8  5048D  5050
Return_Screen                  $38b4  5058D  5115   5129   5296
ReSc_10                        $38c6  5070D  5067
Screen_Reverse_Off             $38cd  5076D  5119
Screen_Reverse_On              $38d2  5085D  5117
Screen_Del                     $38d7  5093D  5121   5213
Screen_Del_exit                $38e4  5102D  5100
CHROUT                         $38e6  5107D  2232   3508   3510   3554
                                      3652   3826   4010   4061   4262
                                      4396   4735   5169   5236   5243
                                      5266   5457
CHRO_10                        $390b  5130D  5128
CHRO_20                        $391c  5138D  5135
CHRO_80                        $3922  5142D  5137   5139
Got_Line                       $392d  5152D  4099   4127
Got_Line_loop                  $393c  5163D  5170
Got_Line_set                   $394a  5171D  5168
Get_Line_X1                    $3953  5179D  2664
GLX_10                         $3966  5190D  5188
GLX_20                         $396b  5196D  5172   5175   5191   5209
                                      5214   5227   5237
Get_Line_X1_del_err            $397f  5207D  5201
GLX_30                         $3983  5213D  5203   5205
GLX_40                         $3989  5218D  5199
GLX_45                         $398f  5221D  5219
GLX_50                         $3996  5226D  5220
GLX_70                         $3999  5229D  5224
GLX_80                         $39a4  5235D  5231   5233
GLX_90                         $39ab  5241D  5197
Get_Line_X1_return             $39c5  5254D  5248
PrintText                      $39c6  5258D  1152   3522   3627   3632
                                      3820   3824   4113   4176   4178
                                      4246   4283   4285   4662   4721
                                      4726
PrTe_A                         $39cc  5264D  5269
PrTe_B                         $39d7  5270D  5265
z_split_window                 $39d8  5273D   640
split_10                       $39e1  5279D  5277
split_20                       $39f2  5287D  5285
split_err                      $39f6  5289D  5280
Reset_Screen                   $39f7  5292D  4331   4747
Open_Story                     $3a02  5302D  4623
ASCII_Hex                      $3a1c  5317D  3505   4538   4543
Hex_11                         $3a29  5330D  5328
Hex_12                         $3a35  5337D  5335
Select_Text_Window             $3a36  5340D  3829   4722
Select_Status_Window           $3a40  5350D  3817
Save_Cursor                    $3a47  5358D  2226   3626   4852
Restore_Cursor                 $3a4f  5368D  2227   3631   3633   4895
Erase_Row                      $3a56  5376D  5048   5392
ClRo_10                        $3a5d  5382D  5384
Erase_Upper_Window             $3a63  5388D  4011
EUW_10                         $3a65  5391D  5395
ASCII_TS                       $3a70  5399D  3517
asts_01                        $3a73  5407D  5409
Load_Page                      $3a7b  5414D  4626   4728   5450
Load_Page_loop                 $3a89  5428D  5433
Load_Page_eof                  $3a96  5434D  5431
Load_Story                     $3a9e  5441D  4740
Load_Story_loop                $3aa6  5450D  5459   5463
Load_Story_prog                $3ab8  5458D  5455
Load_Story_eof                 $3ac4  5464D  5452
Delete_Config                  $3ad4  5473D  5510
DeCo_10                        $3ae3  5482D  5486
Prep_Config                    $3af1  5490D  5511   5520
Save_Config                    $3b0a  5507D  1151
Load_Config                    $3b17  5517D   382
Load_File                      $3b1e  5526D  5521
LoFi_10                        $3b2c  5539D  5543
LoFi_20                        $3b4e  5555D  5562   5565
LoFi_30                        $3b51  5556D  5552
LoFi_60                        $3b65  5567D  5553   5558
Save_File                      $3b75  5575D  5514
SaFi_10                        $3b83  5588D  5592
SaFi_20                        $3b9c  5602D  5607   5610
TEXT_WORD                      $3bbf  5619D  2606   2618   2764   2788
                                      2794   3180
Tokenizer_Flag                 $3bc8  5621D  2260   2659   2810
E_Attribute                    $3bc9  5622
Z_Mem_Flag                     $3bca  5623D  3562   3959   3991
Z_Mem_Base                     $3bcb  5624D  3963   3966   3977   3979
Unit_Buf                       $3bcd  5627D  4097   4098
Unit_Text                      $3bcf  5628D  4100   4101
File_Buf                       $3bd2  5630D  4125   4126
File_Text                      $3bd4  5631D  4202   4299
Game_Unit                      $3be9  5634D   379   5305   5464   5476
PRESSRET                       $3bea  5636D  4110   4111   4112
SAVEUNIT                       $3c06  5637D  4112   4176   4176   4176
SAVEFILE                       $3c13  5638D  4178   4178   4178
LOADUNIT                       $3c20  5639D  4283   4283   4283
LOADFILE                       $3c32  5640D  4285   4285   4285
MORE                           $3c44  5641D  3627   3627   3627
EOS                            $3c4c  5642D  1152   1152   1152
NOSTORY                        $3c6a  5643D  4662   4662   4662
BITSHIFTER                     $3c75  5646D  4721   4721   4721
InfoClr                        $3c8e  5647D  4723   4724   4725
InfoPro                        $3c8f  5648D  4539   4541   4544   4546
                                      4562   4716   4719
InfoSta                        $3caf  5649D  4716
InfoSto                        $3ccf  5650D  4719
BLANKS                         $3cf0  5653D  3632   3632   3632
InfoEnd                        $3cf0  5651D  4725
PRE_STATUS                     $3cfc  5655D  3820   3820   3820
SCORE                          $3cff  5659D  3743   3789   3797   3805
STIME                          $3d1b  5660D  3760   3762   3770   3772
                                      3775
Win_Bot                        $3d27  5664D  3853   3861   5346
INTERR                         $3d28  5665D  3518   3519   3522   3522
                                      3522
ConfigDel                      $3d32  5667D  5482   5485
Configname                     $3d35  5668D  5485   5501   5502   5503
FG_Color                       $3d3d  5672D   385   2339   3840   4902
                                      4904
CONFIG_START                   $3d3d  5671D  5493   5494
TI_Color                       $3d3e  5673
BO_Color                       $3d3f  5674D   389
BG_Color                       $3d40  5675D   387   2342
TB_Color                       $3d41  5676
EOP                            $3d44  5682D   216    297    334    336
                                      4705   4708
CONFIG_END                     $3d44  5679D  5497   5498
Z_VAR                          $3e00   216D   217    220    221   4182
                                      4184   4186   4188   4191   4224
                                      4289   4317   4320   4323   4328
                                      4359   4361   4364
Lvar_Lo                        $3e00   220D   810    896   1383   2421
                                      2428   2434   2443
Lvar_Hi                        $3e10   221D   808    898   1385   2420
                                      2427   2432   2445
Z_STACK_LO                     $3f00   217D   218    854   1136
Z_STACK_HI                     $4000   218D   219    852   1138
Z_HEADER                       $4100   219D   228    229    230    231
                                       232    233    234    235    236
                                       237    238    239    240    241
                                       242    243    244    245    246
                                       247    248    249    250    251
                                       252    253    254    255    256
                                       257    258    259    260    261
                                       262    263    264    265    266
                                       268    269    933   1761   1764
                                      1783   1829   1832   2097   2166
                                      2185   2193   2253   2494   2602
                                      2631   2662   2711   3078   3337
                                      3372   3962   4181   4183   4232
                                      4321   4324   4345   4624   4670
                                      4714   4715   4773   4821
h_version                      $4100   228D  4627
h_config                       $4101   229D  4675   4684   4878
h_resident_size_hi             $4104   230
h_resident_size_lo             $4105   231
h_start_pc_hi                  $4106   232D  4743
h_start_pc_lo                  $4107   233D  4745
h_dictionary_hi                $4108   234D  2701   2870
h_dictionary_lo                $4109   235D  2700   2869
h_objects_hi                   $410a   236D  1782   3336
h_objects_lo                   $410b   237D  1780   3333
h_globals_hi                   $410c   238D   932
h_globals_lo                   $410d   239D   929
h_dynamic_size_hi              $410e   240D  4234   4347
h_dynamic_size_lo              $410f   241
h_flags_hi                     $4110   242D  4334   4357
h_flags_lo                     $4111   243D  4336   4355   4686   4687
h_serial                       $4112   244
h_abbreviations_hi             $4118   245D  3077
h_abbreviations_lo             $4119   246D  3075
h_file_size_hi                 $411a   247D  4587
h_file_size_lo                 $411b   248D  4589
h_checksum_hi                  $411c   249
h_checksum_lo                  $411d   250
h_interpreter_number           $411e   251D  4699
h_interpreter_version          $411f   252D  4701
h_screen_rows                  $4120   253
h_screen_cols                  $4121   254D  4673
h_screen_width_hi              $4122   255D  4689
h_screen_width_lo              $4123   256D  4692
h_screen_height_hi             $4124   257D  4690
h_screen_height_lo             $4125   258D  4694
h_font_width                   $4126   259D  4696
h_font_height                  $4127   260D  4697
h_functions_offset_hi          $4128   261
h_functions_offset_lo          $4129   262
h_strings_offset_hi            $412a   263
h_strings_offset_lo            $412b   264
h_default_bg_color             $412c   265
h_default_fg_color             $412d   266
h_Alphabet_hi                  $4134   268
h_Alphabet_lo                  $4135   269
Raster                         $d012   185D  2565
BorderCol                      $d020   186D   390
BackgCol0                      $d021   187D   388
Random                         $d41b   188D  2564
COLRAM                         $d800   184
ROM_Vectors                    $fd30   189D   420
Init_IO                        $fda3   190D   368
Init_Editor                    $ff5b   191D   372
SETMSG                         $ff90   197D   392
SECOND                         $ff93   198D  4200   4223   4297   4380
                                      5309   5468   5480   5536   5571
                                      5585   5600   5616
TKSA                           $ff96   199D  4137   4316   5425   5548
ACPTR                          $ffa5   200D  4140   4390   5428   5550
                                      5555
CIOUT                          $ffa8   201D  4208   4213   4215   4257
                                      4305   5311   5313   5483   5540
                                      5589   5603
UNTLK                          $ffab   202D  4149   4368   5434   5567
UNLSN                          $ffae   203D  4216   4241   4244   4308
                                      4381   5314   5469   5487   5544
                                      5572   5593   5612   5617
LISTEN                         $ffb1   204D  4198   4221   4295   4378
                                      5307   5466   5478   5534   5569
                                      5583   5598   5614
TALK                           $ffb4   205D  4135   4314   5423   5546
SETNAM                         $ffbd   206D  5504
GETIN                          $ffe4   207D  1154   3628   4075   4940
PLOT                           $fff0   208
RESET                          $fffc   209D  1156
X1L/X1H                        $003e   132D   792    830   1018   1028
                                      1036   1056   1121   1167   1232
                                      1260   1285   1318   1328   1346
                                      1402   1411   1419   1446   1466
                                      1584   1601   1612   1674   1698
                                      1739   1828   1857   1869   1892
                                      1933   2042   2063   2101y  2137
                                      2143   2161   2180   2182   2196
                                      2198y  2215   2272   2286   2337
                                      2383   2402   2442   2490   2525
                                      2532   2539   2560   2566   2581
                                      2611y  2727y  2772y  2784y  2837y
                                      3312   3836   3905   3908   3916
                                      3931   3953   4002   4049   5157
                                      5160y  5165y  5173   5186y  5235y
                                      5242y  5252y  5276    133D  1020
                                      1029   1038   1058   1122   1168
                                      1233   1262   1287   1347   1403
                                      1412   1422   1449   1467   1588
                                      1598   1609   1677   1742   1831
                                      1860   1872   1895   1929   1935
                                      2043   2058   2096   2098   2104
                                      2139   2146   2159   2183   2186
                                      2217   2252   2254   2290   2295
                                      2300   2384   2405   2444   2493
                                      2533   2542   2562   2568   2582
                                      2601   2603   2661   2663   3313
                                      5158
A0L/A0H                        $0038   126D   332    339y   819y   822y
                                       907y   910y   930   1057   1067
                                      1077   1247   1252y  1257y  1272y
                                      1277y  1293y  1296y  1310   1314y
                                      1323y  1332y  1362y  1559   1621y
                                      1631y  1632y  1641y  1642y  1675y
                                      1678y  1699y  1760   1781   1795y
                                      1798y  1830   1837y  2468y  2471y
                                      2481y  2491   2512y  2515y  2629
                                      2636y  3076   3081y  3085y  3263
                                      3284   3295   3334   3342y  3345y
                                      3369y  3370   3375y  3378   3379
                                      3382y  3393y  3396y  3408y  3431
                                      3432   3436y  3464y  3978   3988
                                      3989y  3994y  4340   4342   4349
                                      4351   5495   5556y  5559   5563
                                      5602y  5604   5608    127D   335
                                       343    926    928    931    934
                                      1059   1069   1079   1249   1312
                                      1549   1552   1556   1763   1784
                                      1833   2495   2632   3079   3264
                                      3266   3268   3270   3286   3297
                                      3298   3299   3300   3303   3331
                                      3335   3338   3373   3381   3434
                                      3980   3993   5496   5560   5605
X2L/X2H                        $0040   134D  1046   1066   1468   1573
                                      1583   1585   1602   1613   1668
                                      1692   1729   1740   1785   1809
                                      1858   1870   1889   1900   1939
                                      2045   2118   2138   2151   2171y
                                      2172   2188   2190   2197   2199y
                                      2228   2287   2340   2465   2489
                                      2561   2623   2667   2717y  2722y
                                      2750y  2821y  3456   3485   3490
                                      3933   3965    135D  1048   1068
                                      1470   1571   1587   1589   1599
                                      1610   1664   1730   1743   1861
                                      1873   1888   1901   1931   1941
                                      2047   2119   2140   2148   2165
                                      2167   2191   2194   2230   2233
                                      2492   2563   2668   2710   2712
                                      3961
COLS                           $0050   164D  3535   3581   3808   3823
                                      4405   4406   4407   4408   4409
                                      4410   4411   4412   4413   4414
                                      4415   4416   4417   4418   4419
                                      4420   4421   4422   4423   4424
                                      4425   4426   4427   4428   4431
                                      4432   4433   4434   4435   4436
                                      4437   4438   4439   4440   4441
                                      4442   4443   4444   4445   4446
                                      4447   4448   4449   4450   4451
                                      4452   4453   4454   4510   4512
                                      4672   4691   4873   4981   4993
                                      5004   5019   5127   5223   5381
A1L/A1H                        $003a   128D   333    340y  1248   1269y
                                      1274y  1292y  1295y  1302y  1311
                                      1321y  1331y  1336y  1338y  1665y
                                      1669y  1686y  1689y  1694y  1703y
                                      5499   5564   5609    129D   337
                                       344    345   1250   1313   2416
                                      2446   2451   5500   5561   5606
X0H                            $003d   131D   721    733    734    809
                                       820    839    877    897    906
                                       978    980    994   1006   1039
                                      1049   1078   1141   1194   1457
                                      1550   1553   1555   1712   2055
                                      2073   2571   3665   4548   4586
                                      4592   4597   4867
X0L                            $003c   130D   723    731    732    811
                                       823    838    883    895    909
                                      1037   1047   1076   1142   1193
                                      1217   1225   1456   1558   2053
                                      2069   2573   2574   3664   4254
                                      4388   4550   4588   4591   4596
                                      4600   4866
Version                        $002f   117D  1178   1188   1205   1242
                                      1354   1358   1428   1567   1660
                                      1835   2411   2424   2654   2671
                                      2724   2731   3280   3340   3361
                                      3365   3391   3462   3560   4593
                                      4634   4645   5171   5190   5202
                                      5247
RAM_LO/RAM_HI                  $000b    83D  4256y  4391y  4788   4836
                                      5429     84D  4225   4233   4260
                                      4318   4346   4394   4625   4774
                                      4783   4822   4831   5436   5447
                                      5458
X3L                            $0042   136D  1474   2027   2039   2105
                                      2121   2130   2131   2144   2173
                                      2181   2189   2200   2225   2235
                                      2261   2470   2480   2514   2610
LV0                            $000f    89D  1673   1681   1685   1887
                                      1893   1894   1983   1985   1992
                                      1998   2011   3043   3045   3669
                                      3678   3683   3692   3697   3706
QD0                            $0008    77D  1090   1095   1421   1430
                                      1741   2046   2052   2070   2162
                                      2216   2908   2909   2920   2958
                                      2997   3083   4767   4789
FA                             $00ba   171D   378   4134   4197   4220
                                      4294   4313   4377   5306   5422
                                      5465   5477   5533   5545   5568
                                      5582   5597   5613
IO_STATUS                      $0090   167D  4139   4141   4195   4217
                                      4228   4237   4255   4389   4729
                                      5427   5430   5451   5538   5551
                                      5557   5587
LV1                            $0010    90D  1886   1896   1897   1984
                                      1989   1993   2000   2012   3670
                                      3674   3679   3684   3688   3693
                                      3698   3702
QD1                            $0009    78D  1424   1431   1744   2048
                                      2054   2074   2160   2218   2911
                                      2921   2960   2998   3087   4770
                                      4781   4791
DICT_WORD                      $0059   155D  2635   2965   3174   3200
                                      3210   3219   3233   3238   3240
                                      3241   3243   3244   3246   3254
                                      3256
Cursor_Col                     $004e   149D  3580   4515   4526   4912
                                      4921   5034   5063   5096   5099
                                      5101   5126   5142   5145   5221
X3H                            $0043   137D  1476   2025   2078   2081
                                      2122   2125   2133   2134   2147
                                      2184   2192   2262   2467   2511
Upper_Size                     $002e   116D  2645   3623   3851   3858
                                      3927   4006   4497   4618   4977
                                      5182   5281   5284   5297   5394
ParNum                         $0024   106D   435    727    728    754
                                       782   1464   1472   1478   2030
                                      2221   2255   2436   2453   2665
NUMBER                         $001d   104D  2545   3677   3691   3705
                                      3712   3714   3717   3720   3740
                                      3759   3761   3768   3771   4561
Chars_Left                     $001a   101D  2728   2744   2777   2781
                                      2789   2795   2834   2842   5161
                                      5187   5189   5218   5246   5253
Scr_Adr                        $0051   152D  4484   4487   4914y  4923y
                                      4980   4984   4995   5002   5008
                                      5021   5098y  5144y  5382
QD2                            $000a    79D  1427   1432   1747   2050
                                      2158   2220   2913   2923   3000
                                      3090   4768   4784   4793
QI0                            $0003    69D  1000   1001   1089   1096
                                      1391   2398   2404   2413   4190
                                      4365   4746   4815   4837
Z_Code                         $0002    68D   437    455    461    490
                                       510    515    757    785   3504
                                      4019   4022   4612
X4L                            $0044   138D  1480   2033   2037   2040
                                      2060   2066   2628   2944   2952
                                      2953   2976
ROWS                           $0019   165D  3620   3860   4507   4509
                                      4693   5017   5047   5066   5069
                                      5279   5345
QDH                            $0007    76D  3007   3111   3115   3119
                                      3125   3134   3138   3140   3142
                                      3146   3147
X5H                            $0047   141D  2737   2745   2755   2760
                                      2787   2790   2796   2801   2808
                                      2840
z_stack_ptr                    $0033   121D   832    851    855   1133
                                      1135   1375   2456   4185   4360
                                      4620
QI1                            $0004    70D  1003   1004   1394   2395
                                      2407   2414   4744   4818   4829
                                      4839
Col_Adr                        $0055   154D  4485   4489   4574   4576
                                      4997   5003   5010   5023   5131
Charbuf_Ptr                    $0018    99D  3575   3585   3595   3610
                                      3639   3642   3648   3654   3657
SAP                            $00ac   168D  4982   4986   4994   5001
                                      5005   5007   5011   5013
X5L                            $0046   140D  2734   2770   2778   2783
                                      2791   2797   2836   2841
RemH                           $002a   112D  1919   1942   1956   1957
                                      1978   1990   2001   2570
RemL                           $0029   111D  1918   1940   1953   1954
                                      1977   1987   1999   2572
CR                             $000d    48D  2673   3571   3640   4150
                                      4942   4970   5114   5647
QI2                            $0005    71D  1009   1010   1395   2394
                                      2410   4816   4832   4841
TAP                            $00ae   169D  4983   4988   4990   4992
                                      4996   5006   5015
Z_Mem_Ptr                      $0053   153D  3545y  3546   3964   3968
                                      3970   3982   3983
Cursor_Row                     $004f   150D  4477   4514   4525   5035
                                      5064   5070   5283
X4H                            $0045   139D  1482   2630   2942   2945
                                      2947   2955   2956
z_frame_ptr                    $0034   122D  1374   1398   2391   2457
                                      4187   4362   4621
Win_Top                        $0031   119D  3848   3859   3940   4007
                                      5282   5344   5354
Resident_Pages                 $002b   113D  4671   4711   4737   4771
                                      4782   4819   4830
OP_Type                        $0022   105D   715    717    751    773
                                       777    778    780
MORE_Counter                   $001c   103D  2646   3618   3619   3624
                                      3928   5183   5298
RAM_BA                         $000d    85D  4766   4787   4814   4835
                                      5449   5460   5461
X7L                            $004a   144D  2771   2803   2812   2820
                                      2961   2981
Word_Length                    $0032   120D  2621   2756   3176   3252
                                      4636   4647
Status_Col                     $002d   115D  3537   3569   4622   4863
                                      4870   4877
Save_Unit                      $002c   114D   380   4103   4196   4293
                                      4312   4376
QuotH                          $0028   110D  1910   1936   1969   1970
                                      1982   1997
QuotL                          $0027   109D  1909   1934   1966   1967
                                      1981   1996
LV2                            $0011    91D  1930   1949   2548   2550
                                      3057   3061
QDL                            $0006    75D  3067   3100   3126   3136
                                      4857   4890
RVS                            $00c7   174D  3886   3890   5080   5089
                                      5143
Prop_Mask                      $0026   108D  3383   3398   3437   4640
                                      4651
FNLEN                          $00b7   170D  5512   5513   5542   5591
Vocab_Length                   $0030   118D  2633   2967   4638   4649
Block_Lo                       $0014    95D  4731   4736   5435   5453
MEMUSS                         $00c3   173D  5261   5262   5264
CLEAR                          $0093    55D  4009   5112   5646
REVERSE_OFF                    $0092    57D  3825   5118   5641
X7H                            $004b   145D  2813   2959   2980
X6L                            $0048   142D  2736   2741   2806
Parse_Index                    $0025   107D  2730   2809   2826
Info_Pages                     $001b   102D  4549   4706   4712
Charbuf_End                    $0019   100D  3589   3594   3607
C_Save_Row                     $0017    98D  2237   5362   5371
DEL                            $0014    52D  4944   5120   5198
Alphabet                       $0013    94D  3009   3019   3021
REVERSE_ON                     $0012    50D  5116   5641   5655
WHITE                          $0001    26D  3827   5244   5672
FNADR                          $00bb   172D  5539y  5588
Cursor_Vis                     $0050   151D  4915   4925
X6H                            $0049   143D  2723   2742
DPI                            $0037   125D  2940   2973
DPH                            $0036   124D  2708   2934
DPL                            $0035   123D  2707   2933
STAT_SCORE                     $0034  5656D  3806   3808
C_Save_Col                     $0016    97D  5363   5372
MOVES_COL                      $0016  5657D  3796   3799
HOME                           $0013    51D  5110   5655
LV3                            $0012    92D  1932   1946
YELLOW                         $0007    32D  3818   5673
SCORE_COL                      $0007  5661D  3788   3791
STIME_COL                      $0006  5662D  3758   3767
BLUE                           $0006    31D  5674   5675
CYAN                           $0003    28D  5162   5184
BLNSW                          $00cc   175D   375
ZP_END                         $005f   157D  4615
RED                            $0002    27D  5676
R6510                          $0001   166D   364
BLNON                          $00cf   177
BLNCT                          $00cd   176
CURSOR_LEFT                    $009d    58
CURSOR_UP                      $0091    56
KEY_F8                         $008c    19
KEY_F6                         $008b    18
KEY_F4                         $008a    17
KEY_F2                         $0089    16
KEY_F7                         $0088    15
KEY_F5                         $0087    14
KEY_F3                         $0086    13
KEY_F1                         $0085    12
X8H                            $004d   147
X8L                            $004c   146
CURSOR_RIGHT                   $001d    54
ESC                            $001b    53
Block_Hi                       $0015    96
CURSOR_DOWN                    $0011    49
LT_GREY                        $000f    40
LT_BLUE                        $000e    39
LT_GREEN                       $000d    38
GREY                           $000c    37
DARKGREY                       $000b    36
PINK                           $000a    35
BROWN                          $0009    34
TAB                            $0009    47
BACKSPACE                      $0008    46
ORANGE                         $0008    33
GREEN                          $0005    30
PURPLE                         $0004    29
BLACK                          $0000    25
X1L/X1H                        $003e   132D   792    830   1018   1028
                                      1036   1056   1121   1167   1232
                                      1260   1285   1318   1328   1346
                                      1402   1411   1419   1446   1466
                                      1584   1601   1612   1674   1698
                                      1739   1828   1857   1869   1892
                                      1933   2042   2063   2101y  2137
                                      2143   2161   2180   2182   2196
                                      2198y  2215   2272   2286   2337
                                      2383   2402   2442   2490   2525
                                      2532   2539   2560   2566   2581
                                      2611y  2727y  2772y  2784y  2837y
                                      3312   3836   3905   3908   3916
                                      3931   3953   4002   4049   5157
                                      5160y  5165y  5173   5186y  5235y
                                      5242y  5252y  5276    133D  1020
                                      1029   1038   1058   1122   1168
                                      1233   1262   1287   1347   1403
                                      1412   1422   1449   1467   1588
                                      1598   1609   1677   1742   1831
                                      1860   1872   1895   1929   1935
                                      2043   2058   2096   2098   2104
                                      2139   2146   2159   2183   2186
                                      2217   2252   2254   2290   2295
                                      2300   2384   2405   2444   2493
                                      2533   2542   2562   2568   2582
                                      2601   2603   2661   2663   3313
                                      5158
A0L/A0H                        $0038   126D   332    339y   819y   822y
                                       907y   910y   930   1057   1067
                                      1077   1247   1252y  1257y  1272y
                                      1277y  1293y  1296y  1310   1314y
                                      1323y  1332y  1362y  1559   1621y
                                      1631y  1632y  1641y  1642y  1675y
                                      1678y  1699y  1760   1781   1795y
                                      1798y  1830   1837y  2468y  2471y
                                      2481y  2491   2512y  2515y  2629
                                      2636y  3076   3081y  3085y  3263
                                      3284   3295   3334   3342y  3345y
                                      3369y  3370   3375y  3378   3379
                                      3382y  3393y  3396y  3408y  3431
                                      3432   3436y  3464y  3978   3988
                                      3989y  3994y  4340   4342   4349
                                      4351   5495   5556y  5559   5563
                                      5602y  5604   5608    127D   335
                                       343    926    928    931    934
                                      1059   1069   1079   1249   1312
                                      1549   1552   1556   1763   1784
                                      1833   2495   2632   3079   3264
                                      3266   3268   3270   3286   3297
                                      3298   3299   3300   3303   3331
                                      3335   3338   3373   3381   3434
                                      3980   3993   5496   5560   5605
X2L/X2H                        $0040   134D  1046   1066   1468   1573
                                      1583   1585   1602   1613   1668
                                      1692   1729   1740   1785   1809
                                      1858   1870   1889   1900   1939
                                      2045   2118   2138   2151   2171y
                                      2172   2188   2190   2197   2199y
                                      2228   2287   2340   2465   2489
                                      2561   2623   2667   2717y  2722y
                                      2750y  2821y  3456   3485   3490
                                      3933   3965    135D  1048   1068
                                      1470   1571   1587   1589   1599
                                      1610   1664   1730   1743   1861
                                      1873   1888   1901   1931   1941
                                      2047   2119   2140   2148   2165
                                      2167   2191   2194   2230   2233
                                      2492   2563   2668   2710   2712
                                      3961
COLS                           $0050   164D  3535   3581   3808   3823
                                      4405   4406   4407   4408   4409
                                      4410   4411   4412   4413   4414
                                      4415   4416   4417   4418   4419
                                      4420   4421   4422   4423   4424
                                      4425   4426   4427   4428   4431
                                      4432   4433   4434   4435   4436
                                      4437   4438   4439   4440   4441
                                      4442   4443   4444   4445   4446
                                      4447   4448   4449   4450   4451
                                      4452   4453   4454   4510   4512
                                      4672   4691   4873   4981   4993
                                      5004   5019   5127   5223   5381
SCREEN                         $0800   183D  4404   4405   4406   4407
                                      4408   4409   4410   4411   4412
                                      4413   4414   4415   4416   4417
                                      4418   4419   4420   4421   4422
                                      4423   4424   4425   4426   4427
                                      4428   4430   4431   4432   4433
                                      4434   4435   4436   4437   4438
                                      4439   4440   4441   4442   4443
                                      4444   4445   4446   4447   4448
                                      4449   4450   4451   4452   4453
                                      4454
A1L/A1H                        $003a   128D   333    340y  1248   1269y
                                      1274y  1292y  1295y  1302y  1311
                                      1321y  1331y  1336y  1338y  1665y
                                      1669y  1686y  1689y  1694y  1703y
                                      5499   5564   5609    129D   337
                                       344    345   1250   1313   2416
                                      2446   2451   5500   5561   5606
X0H                            $003d   131D   721    733    734    809
                                       820    839    877    897    906
                                       978    980    994   1006   1039
                                      1049   1078   1141   1194   1457
                                      1550   1553   1555   1712   2055
                                      2073   2571   3665   4548   4586
                                      4592   4597   4867
X0L                            $003c   130D   723    731    732    811
                                       823    838    883    895    909
                                      1037   1047   1076   1142   1193
                                      1217   1225   1456   1558   2053
                                      2069   2573   2574   3664   4254
                                      4388   4550   4588   4591   4596
                                      4600   4866
Version                        $002f   117D  1178   1188   1205   1242
                                      1354   1358   1428   1567   1660
                                      1835   2411   2424   2654   2671
                                      2724   2731   3280   3340   3361
                                      3365   3391   3462   3560   4593
                                      4634   4645   5171   5190   5202
                                      5247
RAM_LO/RAM_HI                  $000b    83D  4256y  4391y  4788   4836
                                      5429     84D  4225   4233   4260
                                      4318   4346   4394   4625   4774
                                      4783   4822   4831   5436   5447
                                      5458
X3L                            $0042   136D  1474   2027   2039   2105
                                      2121   2130   2131   2144   2173
                                      2181   2189   2200   2225   2235
                                      2261   2470   2480   2514   2610
LV0                            $000f    89D  1673   1681   1685   1887
                                      1893   1894   1983   1985   1992
                                      1998   2011   3043   3045   3669
                                      3678   3683   3692   3697   3706
QD0                            $0008    77D  1090   1095   1421   1430
                                      1741   2046   2052   2070   2162
                                      2216   2908   2909   2920   2958
                                      2997   3083   4767   4789
Z_VAR                          $3e00   216D   217    220    221   4182
                                      4184   4186   4188   4191   4224
                                      4289   4317   4320   4323   4328
                                      4359   4361   4364
FA                             $00ba   171D   378   4134   4197   4220
                                      4294   4313   4377   5306   5422
                                      5465   5477   5533   5545   5568
                                      5582   5597   5613
CHROUT                         $38e6  5107D  2232   3508   3510   3554
                                      3652   3826   4010   4061   4262
                                      4396   4735   5169   5236   5243
                                      5266   5457
Next_Instruction               $375a  4798D   436    445    720    722
                                       772    801    889    951    955
                                       961    979   2415   2431   2433
                                      4018   4020
Next_Datum                     $3724  4751D  1713   1748   2057   2062
                                      2169   2231   2872   2874   2937
                                      2939   2941   2943   2963   2971
                                      3131   3135
IO_STATUS                      $0090   167D  4139   4141   4195   4217
                                      4228   4237   4255   4389   4729
                                      5427   5430   5451   5538   5551
                                      5557   5587
LV1                            $0010    90D  1886   1896   1897   1984
                                      1989   1993   2000   2012   3670
                                      3674   3679   3684   3688   3693
                                      3698   3702
QD1                            $0009    78D  1424   1431   1744   2048
                                      2054   2074   2160   2218   2911
                                      2921   2960   2998   3087   4770
                                      4781   4791
PrintText                      $39c6  5258D  1152   3522   3627   3632
                                      3820   3824   4113   4176   4178
                                      4246   4283   4285   4662   4721
                                      4726
Main_True                      $2320   958D   622   1171   1196   1484
                                      1498   1511   1524   1538   1575
                                      1591   1624   2088   2275   4171
                                      4269
DICT_WORD                      $0059   155D  2635   2965   3174   3200
                                      3210   3219   3233   3238   3240
                                      3241   3243   3244   3246   3254
                                      3256
Cursor_Col                     $004e   149D  3580   4515   4526   4912
                                      4921   5034   5063   5096   5099
                                      5101   5126   5142   5145   5221
X3H                            $0043   137D  1476   2025   2078   2081
                                      2122   2125   2133   2134   2147
                                      2184   2192   2262   2467   2511
Upper_Size                     $002e   116D  2645   3623   3851   3858
                                      3927   4006   4497   4618   4977
                                      5182   5281   5284   5297   5394
ParNum                         $0024   106D   435    727    728    754
                                       782   1464   1472   1478   2030
                                      2221   2255   2436   2453   2665
NUMBER                         $001d   104D  2545   3677   3691   3705
                                      3712   3714   3717   3720   3740
                                      3759   3761   3768   3771   4561
Chars_Left                     $001a   101D  2728   2744   2777   2781
                                      2789   2795   2834   2842   5161
                                      5187   5189   5218   5246   5253
Main_False                     $2314   948D  1170   1197   1485   1499
                                      1512   1525   1539   1576   1592
                                      1623   2085   2274   4332
Scr_Adr                        $0051   152D  4484   4487   4914y  4923y
                                      4980   4984   4995   5002   5008
                                      5021   5098y  5144y  5382
QD2                            $000a    79D  1427   1432   1747   2050
                                      2158   2220   2913   2923   3000
                                      3090   4768   4784   4793
QI0                            $0003    69D  1000   1001   1089   1096
                                      1391   2398   2404   2413   4190
                                      4365   4746   4815   4837
Z_Code                         $0002    68D   437    455    461    490
                                       510    515    757    785   3504
                                      4019   4022   4612
Print_Buffer                   $30ad  3645D  2214   2335   2644   2657
                                      3835   3904   3915   3929   3952
                                      4001   5275
z_pop                          $23d5  1126D   794    803   1120   1377
                                      1382   1389   1393   1397   2588
                                      4656   4658
X4L                            $0044   138D  1480   2033   2037   2040
                                      2060   2066   2628   2944   2952
                                      2953   2976
ROWS                           $0019   165D  3620   3860   4507   4509
                                      4693   5017   5047   5066   5069
                                      5279   5345
QDH                            $0007    76D  3007   3111   3115   3119
                                      3125   3134   3138   3140   3142
                                      3146   3147
INTERNAL_ERROR                 $2fdc  3514D   534    535    663    859
                                      1145   1486   2003   2518   2519
                                      4034
Store_Byte                     $22d3   868D  1721   1812   1816   1844
                                      1848   2389   2648   2674   4165
                                      4277
X5H                            $0047   141D  2737   2745   2755   2760
                                      2787   2790   2796   2801   2808
                                      2840
z_stack_ptr                    $0033   121D   832    851    855   1133
                                      1135   1375   2456   4185   4360
                                      4620
QI1                            $0004    70D  1003   1004   1394   2395
                                      2407   2414   4744   4818   4829
                                      4839
Col_Adr                        $0055   154D  4485   4489   4574   4576
                                      4997   5003   5010   5023   5131
Charbuf_Ptr                    $0018    99D  3575   3585   3595   3610
                                      3639   3642   3648   3654   3657
Store_AX                       $22d5   874D  1192   1209   1404   1603
                                      1614   1799   2301   4043
COLOR                          $0286   179D   386   3819   3828   3841
                                      5130   5162   5184   5244
Charbuf                        $0200   178D  3576   3590   3604   3605
                                      3641   3651   4290   4327
SAP                            $00ac   168D  4982   4986   4994   5001
                                      5005   5007   5011   5013
X5L                            $0046   140D  2734   2770   2778   2783
                                      2791   2797   2836   2841
RemH                           $002a   112D  1919   1942   1956   1957
                                      1978   1990   2001   2570
RemL                           $0029   111D  1918   1940   1953   1954
                                      1977   1987   1999   2572
CR                             $000d    48D  2673   3571   3640   4150
                                      4942   4970   5114   5647
QI2                            $0005    71D  1009   1010   1395   2394
                                      2410   4816   4832   4841
Lvar_Hi                        $3e10   221D   808    898   1385   2420
                                      2427   2432   2445
Lvar_Lo                        $3e00   220D   810    896   1383   2421
                                      2428   2434   2443
InfoPro                        $3c8f  5648D  4539   4541   4544   4546
                                      4562   4716   4719
GLX_20                         $396b  5196D  5172   5175   5191   5209
                                      5214   5227   5237
Get_Object_Reg                 $2f1a  3316D  1259   1284   1317   1327
                                      1357   1672   1696
Get_Object_X1                  $2f16  3309D  1191   1208   1246   1309
                                      1570   3364   3484
DSTATUS                        $033c   182D  4143   4151   4153   4156
                                      4246   4246   4246
TAP                            $00ae   169D  4983   4988   4990   4992
                                      4996   5006   5015
Z_Mem_Ptr                      $0053   153D  3545y  3546   3964   3968
                                      3970   3982   3983
Cursor_Row                     $004f   150D  4477   4514   4525   5035
                                      5064   5070   5283
X4H                            $0045   139D  1482   2630   2942   2945
                                      2947   2955   2956
z_frame_ptr                    $0034   122D  1374   1398   2391   2457
                                      4187   4362   4621
Win_Top                        $0031   119D  3848   3859   3940   4007
                                      5282   5344   5354
Resident_Pages                 $002b   113D  4671   4711   4737   4771
                                      4782   4819   4830
OP_Type                        $0022   105D   715    717    751    773
                                       777    778    780
MORE_Counter                   $001c   103D  2646   3618   3619   3624
                                      3928   5183   5298
RAM_BA                         $000d    85D  4766   4787   4814   4835
                                      5449   5460   5461
EOP                            $3d44  5682D   216    297    334    336
                                      4705   4708
TEXT_WORD                      $3bbf  5619D  2606   2618   2764   2788
                                      2794   3180
z_error12                      $32de  4034D   672    674    675    676
                                       677   4025
Store_XA                       $2578  1453D  1765   1862   1874   1902
                                      1911   1920
Push_AY                        $22bc   842D  2392   2396   2400   2422
                                      2452   2583
Z_STATUS                       $1f00   215D  3534   3776   3806   3821
                                      3822   4871
X7L                            $004a   144D  2771   2803   2812   2820
                                      2961   2981
Word_Length                    $0032   120D  2621   2756   3176   3252
                                      4636   4647
Status_Col                     $002d   115D  3537   3569   4622   4863
                                      4870   4877
Save_Unit                      $002c   114D   380   4103   4196   4293
                                      4312   4376
QuotH                          $0028   110D  1910   1936   1969   1970
                                      1982   1997
QuotL                          $0027   109D  1909   1934   1966   1967
                                      1981   1996
LV2                            $0011    91D  1930   1949   2548   2550
                                      3057   3061
QDL                            $0006    75D  3067   3100   3126   3136
                                      4857   4890
FG_Color                       $3d3d  5672D   385   2339   3840   4902
                                      4904
INTERR                         $3d28  5665D  3518   3519   3522   3522
                                      3522
STIME                          $3d1b  5660D  3760   3762   3770   3772
                                      3775
GeCh_40                        $382d  4966D  4943   4945   4951   4958
                                      4961
Set_Screen_Pointer_X           $357e  4480D  4978   5036   5071   5355
                                      5379
Z_Call_Type                    $3578  4464D  1390   1400   2382   2386
                                      2399
z_new_line                     $3071  3615D   620   1113   3520   3572
                                      3598
Get_Global_Var                 $22a5   815D   806   3736   3756   3765
                                      4865
Get_Operand                    $2228   702D   489    509    514    749
                                       775
z_opcode                       $214f   538D   466    475    493    526
                                       528
z_error_4                      $214a   535D   547    575    576    577
                                       578
JSRMOD                         $213f   530D   527    529   4029   4031
                                      4032
START                          $2001   292D   294    297    297   4705
                                      4707
RVS                            $00c7   174D  3886   3890   5080   5089
                                      5143
Prop_Mask                      $0026   108D  3383   3398   3437   4640
                                      4651
Configname                     $3d35  5668D  5485   5501   5502   5503
SCORE                          $3cff  5659D  3743   3789   3797   3805
SAVEUNIT                       $3c06  5637D  4112   4176   4176   4176
Game_Unit                      $3be9  5634D   379   5305   5464   5476
Z_Mem_Base                     $3bcb  5624D  3963   3966   3977   3979
Restore_Cursor                 $3a4f  5368D  2227   3631   3633   4895
Z_Active_Window                $357b  4467D  3566   3837   3839   4008
Z_Arg_Count                    $3576  4462D  1378   2271   2450   2455
L_Encode_A                     $356e  4456D  3198   3202   3212   3221
Format_Integer                 $30c3  3661D  3737   3757   3766   4557
Print_Formatted                $3015  3557D  2526   2536   2549   3034
Find_Property                  $2f9e  3441D  1758   1777   1813   2505
Property_Size                  $2f6a  3388D  1791   1846   2507   3428
Enco_20                        $2e50  3174D  3188   3195   3224   3229
Get_Packed_Char                $2e02  3108D  3010   3037   3044   3058
DeTe_40                        $2da2  3034D  3014   3026   3032   3046
Parse_20                       $2bfe  2741D  2779   2792   2802   2827
z_call_n                       $29f7  2358D   573    603    655    656
cota_30                        $290d  2157D  2135   2141   2149   2152
CMP_A0_X0                      $25f9  1542D  1496   1509   1522   1536
z_je_f                         $25aa  1485D  1473   1479   1481   1483
z_ret                          $250b  1371D   599   1021   1030   1123
z_remove_obj_ro_10             $248e  1283D  1261   1263   1286   1288
Store_X0                       $22d9   886D  1441   1458   2087   2575
Store_Zero                     $22d1   862D  1766   1817   2084   2326
Put_Var                        $22b2   827D  1218   1226   1650   2589
z_error_1                      $220f   663D   642    644    646    650
FNLEN                          $00b7   170D  5512   5513   5542   5591
Vocab_Length                   $0030   118D  2633   2967   4638   4649
Block_Lo                       $0014    95D  4731   4736   5435   5453
Z_STACK_HI                     $4000   218D   219    852   1138
Z_STACK_LO                     $3f00   217D   218    854   1136
Win_Bot                        $3d27  5664D  3853   3861   5346
PRE_STATUS                     $3cfc  5655D  3820   3820   3820
BLANKS                         $3cf0  5653D  3632   3632   3632
InfoClr                        $3c8e  5647D  4723   4724   4725
BITSHIFTER                     $3c75  5646D  4721   4721   4721
NOSTORY                        $3c6a  5643D  4662   4662   4662
EOS                            $3c4c  5642D  1152   1152   1152
MORE                           $3c44  5641D  3627   3627   3627
LOADFILE                       $3c32  5640D  4285   4285   4285
LOADUNIT                       $3c20  5639D  4283   4283   4283
SAVEFILE                       $3c13  5638D  4178   4178   4178
PRESSRET                       $3bea  5636D  4110   4111   4112
Z_Mem_Flag                     $3bca  5623D  3562   3959   3991
Tokenizer_Flag                 $3bc8  5621D  2260   2659   2810
Load_Page                      $3a7b  5414D  4626   4728   5450
Save_Cursor                    $3a47  5358D  2226   3626   4852
ASCII_Hex                      $3a1c  5317D  3505   4538   4543
Return_Screen                  $38b4  5058D  5115   5129   5296
Clear_Screen                   $38a4  5042D   391   5113   5295
Get_Character                  $37fc  4929D  2647   4115   5196
z_show_status                  $3790  4847D   621   2656   3622
Set_Row_Col                    $3593  4501D  3864   3942   5373
L_Encode_Y                     $356f  4457D  3197   3223   3227
Read_Block                     $3527  4384D  4319   4341   4350
Close_Save_File                $3518  4373D  4242   4247   4369
WG_Err                         $3422  4244D  4218   4229   4238
Empty_Keyboard_Queue           $32f8  4072D  3625   4076   4114
Get_Attr_Addr                  $2fb7  3471D  1620   1630   1639
Decode_Text                    $2d6b  3003D  1093   1433   3094
Sep_All                        $2ca8  2847D  2614   2785   2838
Parse_60                       $2c83  2820D  2811   2814   2825
z_call_s                       $29fb  2366D   572    596    630
Divide_Signed                  $27bd  1923D  1908   1917   2569
z_not                          $256f  1444D   654   4652   4654
zg_chi_1                       $2421  1191D  1179   1181   1189
X2_TO_X0                       $2388  1043D  1508   1535   1649
z_rtrue                        $236c  1014D   609    985   1114
Get_Var_X1L                    $2283   789D  1216   1224   1440
Load_4_Operands                $2254   739D   460    756   4021
z_execute                      $2131   519D   467    476    494
MEMUSS                         $00c3   173D  5261   5262   5264
CLEAR                          $0093    55D  4009   5112   5646
REVERSE_OFF                    $0092    57D  3825   5118   5641
X7H                            $004b   145D  2813   2959   2980
X6L                            $0048   142D  2736   2741   2806
Parse_Index                    $0025   107D  2730   2809   2826
Info_Pages                     $001b   102D  4549   4706   4712
Charbuf_End                    $0019   100D  3589   3594   3607
C_Save_Row                     $0017    98D  2237   5362   5371
DEL                            $0014    52D  4944   5120   5198
Alphabet                       $0013    94D  3009   3019   3021
REVERSE_ON                     $0012    50D  5116   5641   5655
WHITE                          $0001    26D  3827   5244   5672
CONFIG_END                     $3d44  5679D  5497   5498
BG_Color                       $3d40  5675D   387   2342
CONFIG_START                   $3d3d  5671D  5493   5494
ConfigDel                      $3d32  5667D  5482   5485
File_Text                      $3bd4  5631D  4202   4299
File_Buf                       $3bd2  5630D  4125   4126
Unit_Text                      $3bcf  5628D  4100   4101
Unit_Buf                       $3bcd  5627D  4097   4098
SaFi_20                        $3b9c  5602D  5607   5610
LoFi_60                        $3b65  5567D  5553   5558
LoFi_20                        $3b4e  5555D  5562   5565
Prep_Config                    $3af1  5490D  5511   5520
Load_Story_loop                $3aa6  5450D  5459   5463
Erase_Row                      $3a56  5376D  5048   5392
Select_Text_Window             $3a36  5340D  3829   4722
Reset_Screen                   $39f7  5292D  4331   4747
GLX_80                         $39a4  5235D  5231   5233
GLX_30                         $3983  5213D  5203   5205
Got_Line                       $392d  5152D  4099   4127
CHRO_80                        $3922  5142D  5137   5139
Screen_Del                     $38d7  5093D  5121   5213
Home_Screen                    $3898  5029D  5051   5111
GeCh_30                        $382a  4963D  4947   4954
GeCh_10                        $3801  4940D  4941   4964
NEIN_80                        $378d  4842D  4838   4840
NEIN_10                        $3771  4828D  4817   4820
NEDA_80                        $3757  4794D  4790   4792
NEDA_10                        $373b  4780D  4769   4772
Start_22                       $367e  4664D  4641   4660
Start_20                       $3672  4662D  4629   4631
z_restart                      $3609  4605D   393    616
Screen_Setup                   $35df  4570D   384   4619
Info_Print                     $35ab  4530D  4710   4717
Set_Screen_Pointer             $357c  4474D  4516   5287
Z_Monospace                    $3579  4465D  3850   3863
Z_Buffer_Mode                  $3577  4463D  3564   3917
Sep_Std_List                   $3570  4461D  2892   2893
Restore_Game                   $3457  4280D  4268   4275
Write_Block                    $3434  4250D  4227   4236
Save_Game                      $3383  4174D  4163   4170
File_Dialog                    $3336  4122D  4179   4286
Unit_Dialog                    $330e  4094D  4177   4284
DeUn_20                        $330b  4089D  4085   4087
zos_10                         $3278  3971D  3957   3969
Status_Number                  $312d  3727D  3794   3802
Print_Unbuffered               $3012  3551D  3565   3567
Next_Property                  $2f89  3419D  1815   3459
First_Property                 $2f3d  3350D  1811   3455
A0_x_8                         $2edf  3260D  3283   3293
Enco_40                        $2e75  3197D  3191   3193
Enco_35                        $2e69  3190D  3184   3186
Encode                         $2e48  3157D  2626   2804
DeTe_10                        $2d6f  3008D  3035   3104
Decode_YX                      $2d63  2992D  1234   1367
ZSCII_2                        $2d49  2989D  3025   3204
DiSe_50                        $2d36  2971D  2966   2974
DiSe_20                        $2d1f  2958D  2948   2977
Set_Data_AY                    $2ce5  2917D  2871   2935
SkDa_Ret                       $2ce4  2914D  2910   2912
Sep_Std                        $2ccb  2884D  2775   2855
SeDi_10                        $2cbe  2874D  2868   2878
SkSu_Ret                       $2ca7  2844D  2835   2839
Parse_55                       $2c5e  2801D  2782   2786
Parse_45                       $2c3b  2781D  2761   2776
Parse_Input                    $2bc3  2679D  2264   2670
z_read_no_parse                $2bb9  2671D  2666   2669
zet_30                         $2b6c  2626D  2617   2622
X1_PLUS_X2_TO_A0               $2aaa  2485D  2466   2479
BG_CODE                        $29ed  2346D  2338   2341
z_log_shift_right              $29cb  2295D  2288   2298
zpt_40                         $2993  2239D  2229   2236
cota_45                        $292e  2179D  2150   2153
zst_tr                         $28b1  2087D  2061   2064
zst_fa                         $28ab  2084D  2026   2028
Prep_Mult_Div                  $283f  2006D  1885   1980
Negate_Quot                    $27fb  1961D  1938   1948
z_insert_obj_return            $26c4  1704D  1682   1701
z_test_f                       $263b  1592D  1586   1590
z_jin_false                    $2625  1576D  1572   1574
z_je_t                         $25a7  1484D  1471   1477
z_remove_obj_ro_50             $24d3  1326D  1319   1329
z_remove_obj                   $2458  1237D   597   1658
z_dec                          $2449  1221D   594   1520
z_inc                          $2441  1213D   593   1533
quit_20                        $23fa  1154D  1155   4663
z_quit                         $23ee  1148D   619   3528
z_print                        $23ac  1083D   611   1112
X2_TO_A0                       $239a  1063D  1495   1521
z_rfalse                       $2376  1024D   610    983
Branch_XA                      $234d   988D   981   1413
Get_Global_Var_Addr            $22fb   914D   818    905
Push_X0                        $22b8   835D   795    890
GeVa_10                        $2295   805D   793    802
opcodes_ext                    $2214   666D  4028   4030
ZVB9                           $21c1   618D  4657   4659
ZV8F                           $21ad   603D  4653   4655
PC_LOOP                        $20d7   428D   531   4748
Set_Mode_80                    $20b6   397D   383   4742
MEGA_Setup                     $2066   352D   324    348
ReLoop                         $2052   339D   342    347
FNADR                          $00bb   172D  5539y  5588
Cursor_Vis                     $0050   151D  4915   4925
X6H                            $0049   143D  2723   2742
DPI                            $0037   125D  2940   2973
DPH                            $0036   124D  2708   2934
DPL                            $0035   123D  2707   2933
STAT_SCORE                     $0034  5656D  3806   3808
C_Save_Col                     $0016    97D  5363   5372
MOVES_COL                      $0016  5657D  3796   3799
HOME                           $0013    51D  5110   5655
LV3                            $0012    92D  1932   1946
YELLOW                         $0007    32D  3818   5673
SCORE_COL                      $0007  5661D  3788   3791
STIME_COL                      $0006  5662D  3758   3767
BLUE                           $0006    31D  5674   5675
CYAN                           $0003    28D  5162   5184
BO_Color                       $3d3f  5674D   389
InfoEnd                        $3cf0  5651D  4725
InfoSto                        $3ccf  5650D  4719
InfoSta                        $3caf  5649D  4716
SaFi_10                        $3b83  5588D  5592
Save_File                      $3b75  5575D  5514
LoFi_30                        $3b51  5556D  5552
LoFi_10                        $3b2c  5539D  5543
Load_File                      $3b1e  5526D  5521
Load_Config                    $3b17  5517D   382
Save_Config                    $3b0a  5507D  1151
DeCo_10                        $3ae3  5482D  5486
Delete_Config                  $3ad4  5473D  5510
Load_Story_eof                 $3ac4  5464D  5452
Load_Story_prog                $3ab8  5458D  5455
Load_Story                     $3a9e  5441D  4740
Load_Page_eof                  $3a96  5434D  5431
Load_Page_loop                 $3a89  5428D  5433
asts_01                        $3a73  5407D  5409
ASCII_TS                       $3a70  5399D  3517
EUW_10                         $3a65  5391D  5395
Erase_Upper_Window             $3a63  5388D  4011
ClRo_10                        $3a5d  5382D  5384
Select_Status_Window           $3a40  5350D  3817
Hex_12                         $3a35  5337D  5335
Hex_11                         $3a29  5330D  5328
Open_Story                     $3a02  5302D  4623
split_err                      $39f6  5289D  5280
split_20                       $39f2  5287D  5285
split_10                       $39e1  5279D  5277
z_split_window                 $39d8  5273D   640
PrTe_B                         $39d7  5270D  5265
PrTe_A                         $39cc  5264D  5269
Get_Line_X1_return             $39c5  5254D  5248
GLX_90                         $39ab  5241D  5197
GLX_70                         $3999  5229D  5224
GLX_50                         $3996  5226D  5220
GLX_45                         $398f  5221D  5219
GLX_40                         $3989  5218D  5199
Get_Line_X1_del_err            $397f  5207D  5201
GLX_10                         $3966  5190D  5188
Get_Line_X1                    $3953  5179D  2664
Got_Line_set                   $394a  5171D  5168
Got_Line_loop                  $393c  5163D  5170
CHRO_20                        $391c  5138D  5135
CHRO_10                        $390b  5130D  5128
Screen_Del_exit                $38e4  5102D  5100
Screen_Reverse_On              $38d2  5085D  5117
Screen_Reverse_Off             $38cd  5076D  5119
ReSc_10                        $38c6  5070D  5067
Clear_Screen_loop              $38a8  5048D  5050
SMW_30                         $388b  5020D  5025
SMW_20                         $3858  4994D  4999
SMW_10                         $3856  4993D  5018
Scroll_Main_Window             $3836  4974D  5068
GeCh_24                        $3826  4960D  4956
GeCh_22                        $381a  4953D  4949
Cursor_Off                     $37f1  4919D  4967
Cursor_On                      $37e8  4910D  4939
FiCo_10                        $37dc  4902D  4906
zss_90                         $37cf  4889D  4893
zss_40                         $37ca  4884D  4882
zss_30                         $37c7  4883D  4880
zss_20                         $37ae  4871D  4874
zss_10                         $3795  4857D  4860
NEIN_50                        $3780  4836D  4823
NEDA_50                        $374a  4788D  4775
Start_50                       $370b  4740D  4730
Start_40                       $3705  4736D  4733
Start_30                       $36f3  4728D  4738
Start_15                       $364e  4645D  4632
Start_10                       $3611  4613D  4616
STTS_10                        $3608  4601D  4599
STTS_05                        $3602  4598D  4594
Story_Pages                    $35e8  4580D  4718
InSi_10                        $35d3  4561D  4566
Info_Size                      $35ca  4553D  4720
Get_Row_Col                    $35a6  4519D  5361
SRC_20                         $359f  4514D  4511
SRC_10                         $3599  4510D  4508
Window_Home                    $358f  4494D  5286
Z_Underline                    $357a  4466D  3875
Row_Hi                         $3555  4430D  4486
Row_Lo                         $353c  4404D  4483
ReBl_10                        $352d  4390D  4393
RG_07                          $350a  4364D  4367
RG_06                          $34ef  4350D  4352
RG_77                          $34de  4341D  4343
RG_05                          $34d2  4334D  4325
RG_04                          $34c3  4327D  4330
RG_03                          $34c1  4326D  4322
RG_20                          $349b  4308D  4301
RG_15                          $3495  4305D  4303
RG_10                          $3488  4299D  4307
RG_02                          $3471  4289D  4292
z_ext_restore                  $344f  4272D   670
z_restore                      $3449  4265D   615
WrBl_10                        $343a  4256D  4259
WG_50                          $3412  4236D  4240
WG_40                          $3400  4227D  4231
WG_30                          $33df  4212D  4204
WG_25                          $33d9  4208D  4206
WG_20                          $33cc  4202D  4210
WG_10                          $33b3  4190D  4193
z_save                         $337d  4167D   614
z_ext_save                     $3375  4161D   669
RDS_30                         $3363  4150D  4142
RDS_20                         $3360  4149D  4145
RDS_10                         $334d  4140D  4148
Read_Disk_Status               $333d  4130D  4245
wfret_99                       $3335  4119D  4116
wfret_10                       $332d  4115D  4118
Wait_for_Return                $3321  4107D  4741
DeUn_10                        $3305  4086D  4083
Decode_Unit                    $32fe  4080D  4102
Click                          $32f7  4064D  4051
Error_Beep                     $32f2  4057D  4053
z_sound_effect                 $32e9  4046D   651
z_save_undo                    $32e3  4038D   678
z_extension                    $32b8  4014D   623
zew_10                         $32b5  4011D  4004
z_erase_window                 $329e  3999D   643
zos_30                         $3290  3988D  3985
zos_20                         $3279  3976D  3955
z_output_stream                $324f  3945D   649
z_set_cursor                   $323a  3921D   645
z_buffer_mode                  $3231  3913D   648
z_set_text_style               $3220  3894D   647
Srev_10                        $321b  3889D  3884
Set_Reverse                    $3214  3879D  3907
Sund_10                        $3210  3875D  3873
Set_Underline                  $320c  3868D  3910
z_set_window_lower             $31fb  3858D  3843
z_set_window_return            $31fa  3854D  3838
z_set_window                   $31d6  3833D   641
Print_Status                   $31af  3814D  4884
Print_Score_loop               $31a3  3805D  3809
Print_Score_clr_mv             $3194  3797D  3800
Print_Score_clr_sc             $3183  3789D  3792
Print_Score                    $317f  3784D  4881
Print_Time_loop                $3173  3775D  3779
Print_Time                     $3147  3752D  4883
StNu_20                        $3141  3745D  3742
StNu_10                        $3137  3740D  3747
FORINT_06                      $312c  3724D  3719
FORINT_05                      $311f  3717D  3723
FORINT_04                      $3110  3709D  3711
FORINT_03                      $30fa  3696D  3704
FORINT_02                      $30e2  3682D  3690
FORINT_01                      $30ca  3668D  3676
Format_XA                      $30c7  3666D  2543
PrBu_Ret                       $30c2  3658D  3649
PrBu_10                        $30b3  3651D  3655
Terminate_Buffer               $30a4  3636D  3621
znl_10                         $308f  3628D  3630
PrFo_50                        $3069  3607D  3602
PrFo_45                        $3062  3604D  3609
PrFo_40                        $3055  3595D  3591
PrFo_35                        $304b  3590D  3593
PrFo_30                        $3047  3588D  3582
PrFo_25                        $3046  3586D  3574
PrFo_20                        $302e  3571D  3568
PrFo_10                        $302a  3569D  3561
Print_Mem                      $300b  3541D  3563
PTS_01                         $300a  3538D  3536
Print_To_Status                $3001  3531D  3570
INER_10                        $2ff6  3524D  3527
Dump_Code                      $2fce  3501D  3521
gaa_02                         $2fca  3496D  3494
gaa_01                         $2fc9  3495D  3497
Find_Property_return           $2fb6  3467D  3458
Find_Property_ok               $2fb4  3466D  3463
Find_Property_match            $2fac  3461D  3457
Find_Property_loop             $2fa1  3456D  3460
NePr_20                        $2f97  3435D  3433
Property_Size_V3               $2f80  3408D  3392
Property_Size_one              $2f79  3401D  3394
FiPr_10                        $2f65  3382D  3380
First_Property_fips_2          $2f50  3370D  3366
First_Property_fips_1          $2f45  3364D  3362
Get_Object_X1_objlow           $2f3a  3345D  3341
Get_Object_X1_label            $2f22  3333D  3330
Object_Offset_V4               $2f00  3293D  3281
Object_Offset_label            $2efd  3288D  3285
Object_Offset                  $2eed  3275D  3329
Enco_80                        $2eb6  3233D  3253
Enco_70                        $2eb2  3231D  3177
Enco_60                        $2eaa  3226D  3205
Enco_50                        $2e85  3204D  3207
Enco_30                        $2e58  3180D  3171
Enco_10                        $2e4e  3173D  3181
GPC_Ret                        $2e47  3154D  3114
GPC_20                         $2e22  3131D  3112
GPC_10                         $2e18  3124D  3116
DeTe_65                        $2df7  3099D  3103
DeTe_60                        $2dce  3067D  3070
DeTe_55                        $2dba  3050D  3016
DeTe_50                        $2da8  3037D  3027
DeTe_35                        $2da0  3033D  3030
DeTe_30                        $2d98  3029D  3023
DeTe_25                        $2d8a  3021D  3018
DeTe_20                        $2d7e  3015D  3012
DeTe_15                        $2d73  3010D  3020
DiSe_Ret                       $2d48  2982D  3011
DiSe_70                        $2d44  2980D  2946
DiSe_30                        $2d29  2963D  2968
Dictionary_Search              $2cee  2927D  2805
Skip_Data                      $2cd7  2901D  2938
SeSt_Ret                       $2cd6  2898D  2894
SeSt_10                        $2ccd  2893D  2896
SeDi_Ret                       $2cca  2881D  2856
SeDi_20                        $2cc9  2880D  2876
Sep_Dict                       $2cad  2859D  2773
SkSu_10                        $2c96  2836D  2843
Skip_Surplus                   $2c92  2831D  2758
Parse_70                       $2c8d  2826D  2819
Parse_50                       $2c55  2794D  2774
Parse_40                       $2c1f  2764D  2766
Parse_35                       $2c19  2760D  2757
Parse_30                       $2c10  2755D  2746
Parse_25                       $2c0a  2748D  2743
Parse_18                       $2bf6  2734D  2732
Parse_17                       $2bed  2729D  2725
Parse_15                       $2be2  2723D  2720
Parse_10                       $2bde  2721D  2718
Parse_AY_Dict                  $2bc9  2704D  2263
z_read_return                  $2bc2  2675D  2672
z_read_V4                      $2b9a  2657D  2655
z_read                         $2b93  2651D   634
z_read_char                    $2b86  2642D   652
zet_40                         $2b7d  2635D  2638
zet_20                         $2b54  2611D  2624
zet_10                         $2b4c  2606D  2608
z_encode_text                  $2b41  2593D   658
z_pull                         $2b3b  2586D   639
z_push                         $2b34  2578D   638
z_random                       $2b10  2557D   637
zprnu_3                        $2b0a  2551D  2547
zprnu_2                        $2afd  2545D  2553
zprnu_1                        $2af8  2543D  2534
z_print_num                    $2ae3  2529D   636
z_print_char                   $2ade  2522D   635
z_error11                      $2ad9  2519D  2510
z_error10                      $2ad4  2518D  2506
zpupr_3                        $2acf  2514D  2508
z_put_prop                     $2abc  2500D   633
z_storeb                       $2aa2  2476D   632
z_storew                       $2a92  2462D   631
call_50                        $2a7f  2450D  2417
call_40                        $2a7a  2446D  2437
call_36                        $2a67  2436D  2429
call_32                        $2a5b  2431D  2425
call_30                        $2a44  2420D  2448
call_25                        $2a3b  2415D  2412
call_20                        $2a0f  2391D  2385
call_10                        $2a0c  2389D  2387
call_00                        $29fd  2382D  2362
z_set_color                    $29d9  2329D   574
z_set_font                     $29d6  2305D   673
z_log_shift_store              $29d1  2300D  2293
z_log_shift_left               $29c3  2289D  2292
z_log_shift                    $29bd  2280D   671
zca_10                         $29b9  2275D  2273
z_check_argc                   $29af  2268D   661
z_tokenize_standard            $29ac  2264D  2258
z_tokenize                     $2994  2243D   657
zpt_30                         $2980  2231D  2234
zpt_20                         $2977  2227D  2238
zpt_10                         $2974  2226D  2223
z_print_table                  $295b  2206D   660
cota_50                        $294e  2196D  2201
cota_ret                       $292d  2175D  2123
cota_35                        $2920  2169D  2174
cota_20                        $28ee  2137D  2126
z_copy_table                   $28ce  2111D   659
ClTa_20                        $28c9  2105D  2103
ClTa_10                        $28c0  2100D  2106
Clear_Table                    $28b7  2092D  2120
zst_70                         $28a5  2079D  2077
zst_60                         $28a0  2076D  2071
zst_50                         $288f  2066D  2059
zst_40                         $2875  2052D  2082
zst_30                         $2869  2045D  2041
zst_20                         $285f  2039D  2034
zst_10                         $285b  2036D  2032
z_scan_table                   $2849  2017D   653
z_error_8                      $283a  2003D  1979
DiUn_02                        $282a  1994D  1991
DiUn_01                        $2812  1981D  1995
Divide_Unsigned                $2809  1974D  1945
Divi_05                        $27fa  1958D  1950
Divi_04                        $27ed  1951D  1944
Divi_03                        $27e9  1949D  1947
Divi_02                        $27df  1945D  1943
Divi_01                        $27d2  1939D  1937
z_mod                          $27b3  1914D   571
z_div                          $27a9  1905D   570
z_mul_2                        $279f  1898D  1890
z_mul_1                        $2788  1886D  1899
z_mul                          $2785  1877D   569
z_sub                          $2778  1865D   568
z_add                          $276b  1853D   567
z_get_prop_len_V3              $2764  1846D  1836
z_get_prop_len_mask            $275f  1843D  1838
z_get_prop_len                 $2743  1821D   592
zgnp_20                        $2740  1817D  1814
zgnp_10                        $2735  1813D  1810
z_get_next_prop                $272b  1803D   566
zgp_30                         $2726  1798D  1793
zgp_20                         $2722  1795D  1789
zgp_10                         $271c  1791D  1778
z_get_prop                     $2703  1770D   564
gepa_10                        $2700  1766D  1759
z_get_prop_addr                $26ef  1751D   565
Byte_Array                     $26da  1733D  1720
Word_Array                     $26d6  1724D  1711
z_loadb                        $26d0  1717D   563
z_loadw                        $26c5  1708D   562
z_insert_obj_V3                $26ad  1692D  1661
z_insert_obj                   $267b  1653D   561
z_store                        $2675  1646D   560
z_clear_attr                   $266b  1636D   559
z_set_attr                     $2663  1627D   558
z_teat_t                       $2660  1624D  1622
z_test_attr                    $2656  1617D   557
z_and                          $264a  1606D   556
z_or                           $263e  1595D   555
z_test                         $2628  1580D   554
z_jin_get                      $2617  1570D  1568
z_jin                          $260f  1563D   553
cmpax_2                        $260e  1560D  1557
cmpax_1                        $2604  1555D  1551
z_inc_cf                       $25f6  1539D  1537
z_inc_chk                      $25e5  1528D   552
z_dec_cf                       $25e2  1525D  1523
z_dec_chk                      $25d4  1515D   551
z_jg_f                         $25d1  1512D  1510
z_jg                           $25c3  1502D   550
z_jl_f                         $25c0  1499D  1497
z_jl                           $25b2  1489D   549
z_error_9                      $25ad  1486D  1465
z_je_2                         $259b  1478D  1475
z_je_1                         $258f  1472D  1469
z_je                           $257f  1461D   548
z_load                         $2569  1437D   602
z_print_paddr_label            $2566  1433D  1429
z_print_paddr                  $254d  1416D   601
z_jump                         $2546  1408D   600
zret_30                        $2545  1405D  1401
zret_20                        $2525  1389D  1380
zret_10                        $2518  1382D  1387
z_print_obj_decode             $2508  1367D  1365
z_print_obj_V4                 $2503  1363D  1359
z_print_obj_prio_1             $24f8  1357D  1355
z_print_obj_A                  $24f0  1350D  4868
z_print_obj                    $24ec  1343D   598
z_remove_obj_ret70             $24eb  1339D  1315
z_remove_obj_ro_60             $24e2  1334D  1324
z_remove_obj_V3                $24b0  1308D  1243
z_remove_obj_ret40             $24af  1306D  1253
z_remove_obj_ro_30             $24a8  1302D  1305
z_remove_obj_ro_20             $24a4  1300D  1278
z_print_addr                   $2451  1229D   595
z_get_parent_get               $243b  1208D  1206
z_get_parent                   $2433  1201D   591
zg_chi_f                       $2430  1197D  1195
z_get_child                    $2419  1184D   590
z_get_sibling                  $240f  1174D   589
z_jz_t                         $240c  1171D  1169
z_jz                           $2403  1164D   588
z_catch                        $2402  1159D   618
z_error_5                      $23e9  1145D  1134
z_ret_popped                   $23cb  1117D   617
z_print_ret                    $23c2  1107D   612
z_nop                          $23c1  1101D   613
zprin_2                        $23ba  1095D  1098
z_prin_1                       $23ae  1089D  1092
X0_TO_A0                       $23a3  1073D  1534
X1_TO_A0                       $2391  1053D  1507
X1_TO_X0                       $237f  1033D  1494
Bran_21                        $2367  1009D  1007
Bran_20                        $2355   999D   997
Bran_14                        $2347   982D   969
Bran_13                        $233e   978D   975
Bran_12                        $233b   976D   972
Bran_11                        $2331   970D   965
Bran_10                        $2325   963D   952
Bran_01                        $2319   953D   962
GGVA_Ret                       $2313   935D   954
Put_Global_Var                 $22ee   902D   893
stx0_01                        $22de   892D   831
Store_A_X0H                    $22d7   880D  1714
z_error_6                      $22cc   859D   856
Get_Var_A                      $228d   798D   726
L8OP_20                        $2280   785D   776
L8OP_10                        $226d   775D   784
Load_8_Operands                $2266   761D   458
L4OP_20                        $2263   757D   750
geop_04                        $2253   736D   725
geop_03                        $2244   727D   724
geop_02                        $223f   725D   718
geop_01                        $2235   721D   719
opcodes_var                    $21cf   627D   466
opcodes_0op                    $21af   606D   475
opcodes_1op                    $218f   581D   493
z_error_2                      $2145   534D   624
z_exe_1f                       $212f   516D   463
z_op_two                       $211b   497D   439
z_op_one                       $210d   479D   441
z_op_zero                      $2109   470D   443
opvar_20                       $20fc   461D   459
opvar_10                       $20f9   460D   457
Set_Kernal_Vectors_loop        $20cd   420D   423
Set_Kernal_Vectors             $20cb   416D   369
Link                           $203b   320D   303
CINV                           $0314   181D   421
SCNMPG                         $0288   180D   371
BLNSW                          $00cc   175D   375
ZP_END                         $005f   157D  4615
RED                            $0002    27D  5676
R6510                          $0001   166D   364
TB_Color                       $3d41  5676
TI_Color                       $3d3e  5673
E_Attribute                    $3bc9  5622
Fix_Colors                     $37da  4898
BLNON                          $00cf   177
BLNCT                          $00cd   176
CURSOR_LEFT                    $009d    58
CURSOR_UP                      $0091    56
KEY_F8                         $008c    19
KEY_F6                         $008b    18
KEY_F4                         $008a    17
KEY_F2                         $0089    16
KEY_F7                         $0088    15
KEY_F5                         $0087    14
KEY_F3                         $0086    13
KEY_F1                         $0085    12
X8H                            $004d   147
X8L                            $004c   146
CURSOR_RIGHT                   $001d    54
ESC                            $001b    53
Block_Hi                       $0015    96
CURSOR_DOWN                    $0011    49
LT_GREY                        $000f    40
LT_BLUE                        $000e    39
LT_GREEN                       $000d    38
GREY                           $000c    37
DARKGREY                       $000b    36
PINK                           $000a    35
BROWN                          $0009    34
TAB                            $0009    47
BACKSPACE                      $0008    46
ORANGE                         $0008    33
GREEN                          $0005    30
PURPLE                         $0004    29
BLACK                          $0000    25
