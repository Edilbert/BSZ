              *************************************
              * BSZ = Bit Shifter's Z interpreter *
              *       for MEGA65      26-Oct-2020 *
              *************************************

              .CPU 45GS02

              ***********************
              * Commodore KEY codes *
              ***********************

0085          KEY_F1       = 133
0086          KEY_F3       = 134
0087          KEY_F5       = 135
0088          KEY_F7       = 136
0089          KEY_F2       = 137
008a          KEY_F4       = 138
008b          KEY_F6       = 139
008c          KEY_F8       = 140

0011          CURSOR_DOWN  = $11
001d          CURSOR_RIGHT = $1d
0091          CURSOR_UP    = $91
009d          CURSOR_LEFT  = $9d

              *************************
              * Commodore Color Codes *
              *************************

0000          BLACK    =  0
0001          WHITE    =  1
0002          RED      =  2
0003          CYAN     =  3
0004          PURPLE   =  4
0005          GREEN    =  5
0006          BLUE     =  6
0007          YELLOW   =  7
0008          ORANGE   =  8
0009          BROWN    =  9
000a          PINK     = 10
000b          DARKGREY = 11
000c          GREY     = 12
000d          LT_GREEN = 13
000e          LT_BLUE  = 14
000f          LT_GREY  = 15

              *************************
              * display control codes *
              *************************

000d          CR       = $0d
0014          DEL      = $14
0094          INS      = $94

              **************
              * attributes *
              **************

0000          NORMAL    = $00
0010          BLINK     = $10
0020          REVERSE   = $20
0040          BOLD      = $40
0080          UNDERLINE = $80

              **********
              * Z keys *
              **********

0081          KEY_UP    = $81
0082          KEY_DOWN  = $82
0083          KEY_LEFT  = $83
0084          KEY_RIGHT = $84

              ********************************************************
              * Interpreter Zero page variables (occupy BASIC space) *
              ********************************************************

0002          & = $02

              ; Instruction pointer     LDZ QI0  ->  LDA [RAMD],Z

0002          Z_Code         .BSS 2           ; current code byte & previous
0004          QI0            .BSS 1           ; Byte 0  pc = (QI0/QI1/QI2)
0005          QI1            .BSS 1           ; Byte 1  Floppy block low
0006          QI2            .BSS 1           ; Byte 2  Floppy block high

              ; Data pointer            LDZ QD0  ->  LDA [RAMD],Z

0007          QDL            .BSS 1           ; current packed data low
0008          QDH            .BSS 1           ; current packed data high
0009          QD0            .BSS 1           ; Byte 0  pc = (QD0/QD1/QD2)
000a          QD1            .BSS 1           ; Byte 1  Floppy block low
000b          QD2            .BSS 1           ; Byte 2  Floppy block high

              ; keep above variables together (block push/pull)

000c          RAMD           .BSS 4           ; 32 bit RAM address for story data

              ; Multi purpose local variables

0010          LV0            .BSS 1
0011          LV1            .BSS 1
0012          LV2            .BSS 1

0013          Alphabet       .BSS 1
0014          Attribute      .BSS 1
0015          Block_Lo       .BSS 1
0016          Block_Hi       .BSS 1
0017          Call_Type      .BSS 1
0018          Charbuf_Ptr    .BSS 1
0019          Charbuf_End    .BSS 1
001a          Chars_Left     .BSS 1
001b          Colour         .BSS 1
001c          C_Save_Col     .BSS 1           ; save column
001d          C_Save_Row     .BSS 1           ; save row
001e          Info_Pages     .BSS 1
001f          Left_Margin    .BSS 1
0020          Log            .BSS 1
0021          MORE_Counter   .BSS 1
0022          NUMBER         .BSS 5
0027          OP_Type        .BSS 2
0029          ParNum         .BSS 1
002a          Parse_Index    .BSS 1
002b          Prop_Mask      .BSS 1
002c          Resident_Pages .BSS 1
002d          Right_Margin   .BSS 1
002e          Save_Unit      .BSS 1
002f          Status_Col     .BSS 1
0030          Timeout        .BSS 2           ; timeout [jiffies]
0032          Tok_Flag       .BSS 1           ; tokeniser flag
0033          TO_Flag        .BSS 1           ; timeout flag
0034          Upper_Size     .BSS 1           ; rows of upper window
0035          Version        .BSS 1           ; $80 = version > 3
0036          Vocab_Length   .BSS 1           ; length of packed vocab
0037          Win_Bot        .BSS 1
0038          Win_Top        .BSS 1           ; upper row of active window
0039          Word_Length    .BSS 1           ; length of dictionary words
003a          z_stack_ptr    .BSS 2           ; Z_STACK_LO -> Z_STACK_HI
003c          z_frame_ptr    .BSS 2           ; save stack pointer
003e          DPL            .BSS 1           ; dictionary pointer
003f          DPH            .BSS 1
0040          DPI            .BSS 1
0041          A0L            .BSS 1           ; primary   address register
0042          A0H            .BSS 1
0043          A1L            .BSS 1           ; secondary address register
0044          A1H            .BSS 1
0045          X0L            .BSS 1           ; primary value   register
0046          X0H            .BSS 1
0047          X1L            .BSS 1           ; parameter register
0048          X1H            .BSS 1           ; X1L - X4H must be contiguous
0049          X2L            .BSS 1
004a          X2H            .BSS 1
004b          X3L            .BSS 1
004c          X3H            .BSS 1
004d          X4L            .BSS 1
004e          X4H            .BSS 1
004f          X5L            .BSS 1
0050          X5H            .BSS 1
0051          X6L            .BSS 1
0052          X6H            .BSS 1
0053          X7L            .BSS 1
0054          X7H            .BSS 1
0055          X8L            .BSS 1
0056          X8H            .BSS 1
0057          GLL            .BSS 1           ; Get_Line pointer
0058          GLH            .BSS 1

0059          Font_Sel       .BSS 1           ; font selector normal - graphics
005a          Cursor_Col     .BSS 1
005b          Cursor_Row     .BSS 1
005c          Z_Mem_Base     .BSS 2           ; stream address
005e          Z_Mem_Ptr      .BSS 2           ; Z memory pointer
0060          ZP_CLEAR       .BSS 1

              ; following variables are NOT cleared at restart

0061          Segment        .BSS 1
0062          Scr_Adr        .BSS 2           ; screen RAM 16 bit address
0064          Col_Adr        .BSS 4           ; colour RAM 32 bit address
0068          DICT_WORD      .BSS 6           ; packed ZSCII dictionary word
006e          TEXT_WORD      .BSS 9           ; unpacked     dictionary word



              ********************
              * system variables *
              ********************

0050          COLS        =  80
0019          ROWS        =  25
0001          R6510       = $01               ; C64 bank switching CPU port
0090          IO_STATUS   = $90               ; used by I/O routines
00a0          Jiffy       = $a0               ; jiffy clock
00ac          Scr_Row     = $ac               ; used in screen scrolling
00ae          Col_Row     = $ae               ; used in screen scrolling
00b7          FNLEN       = $b7
00ba          FA          = $ba
00bb          FNADR       = $bb
00c3          MEMUSS      = $c3               ; string address
00cc          BLNSW       = $cc               ; cursor blink flag
00cd          BLNCT       = $cd
00cf          BLNON       = $cf
0200          Charbuf     = $200
0288          SCNMPG      = $288              ; screen memory page for C64 mode
0314          CINV        = $314              ; kernal vector table
033c          DSTATUS     = $33c              ; 40 bytes disk status
0800          SCREEN      = $0800             ; character RAM in 80 column mode
d800          COLRAM      = $d800             ; color     RAM
d012          Raster      = $d012
d020          BorderCol   = $d020
d021          BackgCol0   = $d021
d400          Voc1FreqLo  = $d400
d401          Voc1FreqHi  = $d401
d404          Voc1Control = $d404
d406          Voc1SusRel  = $d406
d418          FiltMode    = $d418
d41b          Random      = $d41b
fd30          ROM_Vectors = $fd30
fda3          Init_IO     = $fda3
ff5b          Init_Editor = $ff5b

              **********
              * Kernal *
              ******** *

ff90          SETMSG = $ff90
ff93          SECOND = $ff93
ff96          TKSA   = $ff96
ffa5          ACPTR  = $ffa5
ffa8          CIOUT  = $ffa8
ffab          UNTLK  = $ffab
ffae          UNLSN  = $ffae
ffb1          LISTEN = $ffb1
ffb4          TALK   = $ffb4
ffbd          SETNAM = $ffbd
ffe4          GETIN  = $ffe4
fff0          PLOT   = $fff0
fffc          RESET  = $fffc

              ************
              * Z arrays *
              ************

0400          Z_VAR       = $0400             ; variables
0500          Z_STACK_LO  = $0500             ; stack bottom
0800          Z_STACK_HI  = $0800             ; stack top
033c          Z_STATUS    = $033c             ; version 3
0400          Lvar_Lo     = Z_VAR
0410          Lvar_Hi     = Z_VAR + $10
2f00          Z_HEADER    = [EOP + $ff] & $ff00

              ****************
              * STORY HEADER *
              ****************

2f00          h_version             = Z_HEADER
2f01          h_config              = Z_HEADER +   1
2f04          h_resident_size_hi    = Z_HEADER +   4
2f05          h_resident_size_lo    = Z_HEADER +   5
2f06          h_start_pc_hi         = Z_HEADER +   6
2f07          h_start_pc_lo         = Z_HEADER +   7
2f08          h_dictionary_hi       = Z_HEADER +   8
2f09          h_dictionary_lo       = Z_HEADER +   9
2f0a          h_objects_hi          = Z_HEADER +  10
2f0b          h_objects_lo          = Z_HEADER +  11
2f0c          h_globals_hi          = Z_HEADER +  12
2f0d          h_globals_lo          = Z_HEADER +  13
2f0e          h_dynamic_size_hi     = Z_HEADER +  14
2f0f          h_dynamic_size_lo     = Z_HEADER +  15
2f10          h_flags_hi            = Z_HEADER +  16
2f11          h_flags_lo            = Z_HEADER +  17
2f12          h_serial              = Z_HEADER +  18
2f18          h_abbreviations_hi    = Z_HEADER +  24
2f19          h_abbreviations_lo    = Z_HEADER +  25
2f1a          h_file_size_hi        = Z_HEADER +  26; in words for version 1-3
2f1b          h_file_size_lo        = Z_HEADER +  27; in words for version 1-3
2f1c          h_checksum_hi         = Z_HEADER +  28
2f1d          h_checksum_lo         = Z_HEADER +  29
2f1e          h_interpreter_number  = Z_HEADER +  30
2f1f          h_interpreter_version = Z_HEADER +  31
2f20          h_screen_rows         = Z_HEADER +  32
2f21          h_screen_cols         = Z_HEADER +  33
2f22          h_screen_width_hi     = Z_HEADER +  34
2f23          h_screen_width_lo     = Z_HEADER +  35
2f24          h_screen_height_hi    = Z_HEADER +  36
2f25          h_screen_height_lo    = Z_HEADER +  37
2f26          h_font_width          = Z_HEADER +  38
2f27          h_font_height         = Z_HEADER +  39
2f28          h_functions_offset_hi = Z_HEADER +  40
2f29          h_functions_offset_lo = Z_HEADER +  41
2f2a          h_strings_offset_hi   = Z_HEADER +  42
2f2b          h_strings_offset_lo   = Z_HEADER +  43
2f2c          h_default_bg_color    = Z_HEADER +  44
2f2d          h_default_fg_color    = Z_HEADER +  45

2f34          h_Alphabet_hi         = Z_HEADER +  52
2f35          h_Alphabet_lo         = Z_HEADER +  53

              ***************
              * Print Macro *
              ***************

            MACRO Print(lab)
                    LDA  #<lab
                    LDY  #>lab
                    LDX  #?lab
                    JSR  PrintText
            ENDMAC

            MACRO ERROR(num)
                    LDA  #num
                    JMP  INTERNAL_ERROR
            ENDMAC

1001          START = $1001                   ; *** BASIC ***

1001          * = START

                      .STORE START,EOC-START,"bsz-mega65"

              ****************
              * BASIC header *
              ****************

1001 3b 10            .WORD Link
1003 e4 07            .WORD 2020              ; line number
1005 8b               .BYTE $8b               ; IF   token
1006 c2               .BYTE $c2               ; PEEK token
1007 28 34 34         .BYTE "(44)"
100b b2               .BYTE $b2               ; =    token
100c 38               .BYTE "8"
100d a7               .BYTE $a7               ; THEN token
100e 9e               .BYTE $9e               ; SYS  token
100f 28 32 31         .BYTE "(2113):"         ; C64  start
1016 d5               .BYTE $d5               ; ELSE token
1017 fe 02            .BYTE $fe,$02           ; BANK token
1019 30 3a            .BYTE "0:"              ; BANK argument
101b 9e               .BYTE $9e               ; SYS  token
101c 28 38 32         .BYTE "(8253):"         ; C65  start
1023 8f               .BYTE $8f               ; REM  token
1024 20 42 49         .BYTE " BIT SHIFTER 26-OCT-20",0
103b 00 00    Link    .WORD 0                 ; BASIC end marker

103d 78               SEI
103e 4c d7 46         JMP  Mode_65 + $1000    ; relocate for 65 mode

              **************
              Module Mode_64
              **************

1041 a9 41            lDA  #65                ; 40MHz CPU
1043 85 00            STA  0

1045 a0 00            LDY  #0
1047 84 41            STY  A0L
1049 84 43            STY  A1L
104b a9 2e            LDA  #>[EOC - $0800]
104d 85 42            STA  A0H
104f a9 36            LDA  #>EOC
1051 85 44            STA  A1H

1053 b1 41    _loop   LDA  (A0L),Y
1055 91 43            STA  (A1L),Y
1057 c8               INY
1058 d0 f9            BNE  _loop
105a c6 42            DEC  A0H
105c c6 44            DEC  A1H
105e a5 44            LDA  A1H
1060 c9 10            CMP  #>START
1062 b0 ef            BCS  _loop
1064 4c 67 10         JMP  MEGA_Setup
1067          EndMod [Mode_64] Size = 38 [$26]

              *****************
              Module MEGA_Setup
              *****************

1067 78               SEI
1068 a9 00            LDA  #0                 ; Configure MEGA65 memory
106a aa               TAX
106b a8               TAY
106c 4b               TAZ
106d 5c               MAP
106e ea               EOM

106f a9 36            LDA  #$36               ; I/O & kernal
1071 85 01            STA  R6510
1073 a9 41            LDA  #65                ; 40 MHz
1075 85 00            STA  0

1077 20 a3 fd         JSR  Init_IO
107a 20 f9 10         JSR  Set_Kernal_Vectors
107d a9 04            LDA  #$04               ; C64 default value
107f 8d 88 02         STA  SCNMPG             ; set screen memory page
1082 20 5b ff         JSR  Init_Editor
1085 a9 ff            LDA  #-1                ; cursor off
1087 85 cc            STA  BLNSW
1089 58               CLI
108a a2 08            LDX  #8
108c 86 ba            STX  FA
108e 8e 1d 2d         STX  Game_Unit
1091 86 2e            STX  Save_Unit          ; default SAVE unit = GAME unit

1093 20 b7 10         JSR  Set_Mode_80
1096 20 ab 2e         JSR  Load_Charset
1099 20 32 26         JSR  Screen_Setup
109c 20 05 11         JSR  Set_Attic_RAM
109f ad a7 2e         LDA  BG_Color
10a2 8d 21 d0         STA  BackgCol0
10a5 ad a6 2e         LDA  BO_Color
10a8 8d 20 d0         STA  BorderCol
10ab 20 59 29         JSR  Clear_Screen
10ae 20 a5 2c         JSR  Load_Config
10b1 20 90 ff         JSR  SETMSG             ; disable kernal messages
10b4 4c 8c 26         JMP  z_restart
10b7          EndMod [MEGA_Setup] Size = 80 [$50]

              ******************
              Module Set_Mode_80
              ******************

              *       make VIC IV registers visible
              *       by using the knock sequence $47 $53

10b7 a9 47            LDA  #$47
10b9 8d 2f d0         STA  $d02f
10bc a9 53            LDA  #$53
10be 8d 2f d0         STA  $d02f

              *       test, whether bank 3 is write protected

10c1 a3 00            LDZ  #0                 ; address = $030000
10c3 a9 03            LDA  #3
10c5 64 53            STZ  X7L
10c7 64 54            STZ  X7H
10c9 85 55            STA  X8L
10cb 64 56            STZ  X8H
10cd ea b2 53         LDA  [X7L],Z
10d0 49 ff            EOR  #$ff
10d2 ea 92 53         STA  [X7L],Z
10d5 ea d2 53         CMP  [X7L],Z
10d8 f0 06            BEQ  BATE_20            ; -> is writable

              *       remove write protection from bank 2 & 3
              *       bank 3 will be used for data storage

10da a9 70            LDA  #$70
10dc 8d 40 d6         STA  $D640              ; toggle write protection
10df ea               NOP

10e0          BATE_20
10e0 a9 47            LDA  #$47
10e2 8d 2f d0         STA  $d02f
10e5 a9 53            LDA  #$53
10e7 8d 2f d0         STA  $d02f
10ea a9 e0            LDA  #$e0               ; H640, DAFAST, ATTR
10ec 8d 31 d0         STA  $d031
10ef a9 24            LDA  #$24               ; SCR = $0800,  CHB = $0000
10f1 8d 18 d0         STA  $d018
10f4 a9 41            LDA  #65
10f6 85 00            STA  0
10f8 60               RTS
10f9          EndMod [Set_Mode_80] Size = 66 [$42]

              *************************
              Module Set_Kernal_Vectors
              *************************

10f9 a0 1f            LDY  #$1F               ; 16 vectors
10fb b9 30 fd _loop   LDA  ROM_Vectors,Y
10fe 99 14 03         STA  CINV,Y
1101 88               DEY
1102 10 f7            BPL  _loop
1104 60               RTS
1105          EndMod [Set_Kernal_Vectors] Size = 12 [$c]

              ********************
              Module Set_Attic_RAM
              ********************
1105 a2 08            LDX  #$08               ; RAMD = $0800 0000
1107 a3 00            LDZ  #0                 ; aka Attic RAM
1109 64 0c            STZ  RAMD
110b 64 0d            STZ  RAMD+1
110d 64 0e            STZ  RAMD+2
110f 86 0f            STX  RAMD+3
1111 ea b2 0c         LDA  [RAMD],Z
1114 49 ff            EOR  #$ff
1116 ea 92 0c         STA  [RAMD],Z
1119 ea d2 0c         CMP  [RAMD],Z
111c f0 03            BEQ  _attic
111e 64 61            STZ  Segment            ; use Chip  RAM
1120 60               RTS
1121 86 61    _attic  STX  Segment            ; use Attic RAM
                      Print(Msg_Attic)
1123 a9 a2            LDA  #<Msg_Attic
1125 a0 2d            LDY  #>Msg_Attic
1127 a2 1f            LDX  #?Msg_Attic
1129 20 3f 2b         JSR  PrintText

112c 60               RTS
112d          EndMod [Set_Attic_RAM] Size = 40 [$28]

              ****************
              Module Header_X1
              ****************

112d 18               CLC
112e a5 48            LDA  X1H
1130 69 2f            ADC  #>Z_HEADER
1132 85 48            STA  X1H
1134 60               RTS
1135          EndMod [Header_X1] Size = 8 [$8]

              **************
              Module PC_LOOP
              **************

              * read next instruction byte from Z-program counter
              * read optional operand bytes and call operator subroutine

1135 a0 04       LDY #QI0
1137 20 5b 1d    JSR Dump_Word
113a a5 06       LDA QI2
113c 20 4f 1d    JSR Dump_A
113f a9 00            LDA  #0
1141 85 29            STA  ParNum             ; reset # of operands
1143 a5 02            LDA  Z_Code
1145 85 03            STA  Z_Code+1           ; for debugging
1147 20 0e 28         JSR  Next_Instruction
114a 85 02            STA  Z_Code             ; remember op code
114c 24 20            BIT  Log
114e 10 03            BPL  _nolog
1150 20 26 1d         JSR  Log_A
1153 a5 02    _nolog  LDA  Z_Code
1155 10 3c            BPL  z_op_two           ; [$00 - $7f] -> codes with  2 operands
1157 c9 b0            CMP  #$b0
1159 90 2a            BCC  z_op_one           ; [$80 - $af] -> codes with  1 operand
115b c9 c0            CMP  #$c0
115d 90 22            BCC  z_op_zero          ; [$b0 - $bf] -> codes with no operand

115f 20 0e 28         JSR  Next_Instruction   ; [$c0 - $ff] -> codes with 0-4 operands

              ; max 4 operands (11223344) for version 3
              ;  or 8 operands for version > 3
              ; ---------------------------------------
              ; 00 = 16 bit constant
              ; 01 =  8 bit constant
              ; 10 = 16 bit variable
              ; 11 = no operand (end marker)

1162 a6 02            LDX  Z_Code
1164 e0 ec            CPX  #$ec               ; call with 8 arguments
1166 f0 04            BEQ  _var_10
1168 e0 fa            CPX  #$fa               ; call with 8 arguments
116a d0 05            BNE  _var_20
116c 20 cd 12 _var_10 JSR Load_8_Operands
116f 80 03            BRA  _var_30
1171 20 bb 12 _var_20 JSR Load_4_Operands
1174 a5 02    _var_30 LDA Z_Code
1176 c9 e0            CMP  #$e0
1178 90 2d            BCC  _twop           ; [$c0 - $df] -> use 2 operand table
117a 29 1f            AND  #$1f               ; [$e0 - $ff] -> use variable operands
117c 18               CLC
117d 69 40            ADC  #[opcodes_var - z_opcode] >> 1
117f d0 28            BNE  z_execute          ; always

              *********
1181          z_op_zero
              *********

              ; opcodes with no operand, opcode = $b0 - $bf

1181 e9 7f            SBC  #$af - [[opcodes_0op - z_opcode] >> 1] ; carry is clear
1183 d0 24            BNE  z_execute          ; always

              ********
1185          z_op_one
              ********

              ; opcode = 10tt cccc  opcodes with 1 operand
              ;     tt = 00 : 16 bit constant $8x
              ;     tt = 01 :  8 bit constant $9x
              ;     tt = 10 :    variable     $ax

1185 0a               ASL  A
1186 0a               ASL  A
1187 20 90 12         JSR  Get_Operand
118a a5 02            LDA  Z_Code
118c 29 0f            AND  #15
118e 18               CLC
118f 69 20            ADC  #[opcodes_1op - z_opcode] >> 1
1191 d0 16            BNE  z_execute

              ********
1193          z_op_two
              ********

              ; opcode = 0fsc cccc  opcodes with 2 operands
              ;      f = 0 : 1st. op = short constant
              ;      f = 1 : 1st. op = variable
              ;      s = 0 : 2nd. op = short constant
              ;      s = 1 : 2nd. op = variable

1193 18               CLC
1194 29 40            AND  #$40               ; $40 if 1st. op variable
1196 69 40            ADC  #$40               ; $80 if 1st. op variable
1198 20 90 12         JSR  Get_Operand        ; $80 variable, $40 8 bit constant
119b a5 02            LDA  Z_Code
119d 0a               ASL  A                  ; C=0
119e 29 40            AND  #$40
11a0 69 40            ADC  #$40
11a2 20 90 12         JSR  Get_Operand
11a5 a5 02            LDA  Z_Code
11a7 29 1f    _twop   AND  #$1f               ; fall through

              *********
11a9          z_execute
              *********

              ; Input : A = index to opcode table

11a9 0a               ASL  A                  ; convert to word index
11aa aa               TAX
11ab 23 b5 11         JSR  (z_opcode,X)
11ae 80 85            BRA  PC_LOOP
11b0          EndMod [PC_LOOP] Size = 123 [$7b]

              z_error_4 ERROR(4)
11b0 a9 04            LDA  #4
11b2 4c 7e 21         JMP  INTERNAL_ERROR


              ********
11b5          z_opcode
              ********

              ; $00-$1f : byte const + short const
              ; $20-$3f : byte const + variable
              ; $40-$5f : variable   + byte const
              ; $60-$7f : variable   + variable
              ; $c0-$df : 0-4 arguments defined in follow up byte

11b5 b0 11            .WORD z_error_4         ; 00 20 40 60   c0
11b7 dc 15            .WORD z_je              ; 01 21 41 61   c1
11b9 f6 15            .WORD z_jl              ; 02 22 42 62   c2
11bb 08 16            .WORD z_jg              ; 03 23 43 63   c3
11bd 1a 16            .WORD z_dec_chk         ; 04 24 44 64   c4
11bf 2f 16            .WORD z_inc_chk         ; 05 25 45 65   c5
11c1 44 16            .WORD z_jin             ; 06 26 46 66   c6
11c3 5a 16            .WORD z_test            ; 07 27 47 67   c7
11c5 6b 16            .WORD z_or              ; 08 28 48 68   c8
11c7 77 16            .WORD z_and             ; 09 29 49 69   c9
11c9 83 16            .WORD z_test_attr       ; 0a 2a 4a 6a   ca
11cb 8e 16            .WORD z_set_attr        ; 0b 2b 4b 6b   cb
11cd 96 16            .WORD z_clear_attr      ; 0c 2c 4c 6c   cc
11cf a0 16            .WORD z_store           ; 0d 2d 4d 6d   cd
11d1 ab 16            .WORD z_insert_obj      ; 0e 2e 4e 6e   ce
11d3 0c 17            .WORD z_loadw           ; 0f 2f 4f 6f   cf
11d5 17 17            .WORD z_loadb           ; 10 30 50 70   d0
11d7 1d 17            .WORD z_get_prop        ; 11 31 51 71   d1
11d9 45 17            .WORD z_get_prop_addr   ; 12 32 52 72   d2
11db 57 17            .WORD z_get_next_prop   ; 13 33 53 73   d3
11dd 6f 17            .WORD z_add             ; 14 34 54 74   d4
11df 7c 17            .WORD z_sub             ; 15 35 55 75   d5
11e1 89 17            .WORD z_mul             ; 16 36 56 76   d6
11e3 17 18            .WORD z_div             ; 17 37 57 77   d7
11e5 21 18            .WORD z_mod             ; 18 38 58 78   d8
11e7 27 18            .WORD z_call_s          ; 19 39 59 79   d9
11e9 2b 18            .WORD z_call_n          ; 1a 3a 5a 7a   da
11eb c6 18            .WORD z_set_colour      ; 1b 3b 5b 7b   db
11ed b0 11            .WORD z_error_4         ; 1c 3c 5c 7c   dc
11ef b0 11            .WORD z_error_4         ; 1d 3d 5d 7d   dd
11f1 b0 11            .WORD z_error_4         ; 1e 3e 5e 7e   de
11f3 b0 11            .WORD z_error_4         ; 1f 3f 5f 7f   df

              ***********
11f5          opcodes_1op
              ***********

              ; $80-$8f : word constant
              ; $90-$9f : byte constant
              ; $a0-$af : variable

11f5 40 14            .WORD z_jz              ; 80 90 a0
11f7 4a 14            .WORD z_get_sibling     ; 81 91 a1
11f9 53 14            .WORD z_get_child       ; 82 92 a2
11fb 6a 14            .WORD z_get_parent      ; 83 93 a3
11fd 77 14            .WORD z_get_prop_len    ; 84 94 a4
11ff 9e 14            .WORD z_inc             ; 85 95 a5
1201 a6 14            .WORD z_dec             ; 86 96 a6
1203 ae 14            .WORD z_print_addr      ; 87 97 a7
1205 27 18            .WORD z_call_s          ; 88 98 a8
1207 b5 14            .WORD z_remove_obj      ; 89 99 a9
1209 48 15            .WORD z_print_obj       ; 8a 9a aa
120b 65 15            .WORD z_ret             ; 8b 9b ab
120d a8 15            .WORD z_jump            ; 8c 9c ac
120f af 15            .WORD z_print_paddr     ; 8d 9d ad
1211 c6 15            .WORD z_load            ; 8e 9e ae
1213 2b 18    ZV8F    .WORD z_call_n          ; 8f 9f af  V3/4 = z_not

              ***********
1215          opcodes_0op
              ***********

1215 d5 13            .WORD z_rtrue           ; b0
1217 df 13            .WORD z_rfalse          ; b1
1219 e8 13            .WORD z_print           ; b2
121b fe 13            .WORD z_print_ret       ; b3
121d 06 14            .WORD z_nop             ; b4
121f 0c 24            .WORD z_save            ; b5
1221 d8 24            .WORD z_restore         ; b6
1223 8c 26            .WORD z_restart         ; b7
1225 07 14            .WORD z_ret_popped      ; b8
1227 2d 14    ZVB9    .WORD z_catch           ; b9 V3 = z_pop
1229 32 14            .WORD z_quit            ; ba
122b 12 22            .WORD z_new_line        ; bb
122d 4a 28            .WORD z_show_status     ; bc
122f 89 13            .WORD Main_True         ; bd z_verify
1231 58 23            .WORD z_extension       ; be
1233 89 13            .WORD Main_True         ; bf z_piracy

              ***********
1235          opcodes_var
              ***********

1235 27 18            .WORD z_call_s          ; e0 V3 call with 0-3 args
1237 56 19            .WORD z_storew          ; e1
1239 66 19            .WORD z_storeb          ; e2
123b 6e 19            .WORD z_put_prop        ; e3
123d 90 19            .WORD z_read            ; e4
123f c4 19            .WORD z_print_char      ; e5
1241 c9 19            .WORD z_print_num       ; e6
1243 f2 19            .WORD z_random          ; e7
1245 0e 1a            .WORD z_push            ; e8
1247 15 1a            .WORD z_pull            ; e9
1249 1b 1a            .WORD z_split_window    ; ea
124b 35 1a            .WORD z_set_window      ; eb
124d 27 18            .WORD z_call_s          ; ec z_call_s 0-7 args
124f 66 1a            .WORD z_erase_window    ; ed
1251 9b 1a            .WORD z_erase_line      ; ee
1253 ad 1a            .WORD z_set_cursor      ; ef
1255 c1 1a            .WORD z_get_cursor      ; f0
1257 e7 1a            .WORD z_set_text_style  ; f1
1259 fa 1a            .WORD z_buffer_mode     ; f2
125b 03 1b            .WORD z_output_stream   ; f3
125d 75 12            .WORD z_error_1         ; f4 z_input_stream
125f 63 1b            .WORD z_sound_effect    ; f5
1261 6c 1b            .WORD z_read_char       ; f6
1263 95 1b            .WORD z_scan_table      ; f7
1265 cc 15            .WORD z_not             ; f8
1267 2b 18            .WORD z_call_n          ; f9 z_call_n 0-3 args
1269 2b 18            .WORD z_call_n          ; fa z_call_n 0-7 args
126b ed 1b            .WORD z_tokenise        ; fb
126d 01 1c            .WORD z_encode_text     ; fc
126f 4f 1c            .WORD z_copy_table      ; fd
1271 b9 1c            .WORD z_print_table     ; fe
1273 e5 1c            .WORD z_check_argc      ; ff

              z_error_1 ERROR(1)
1275 a9 01            LDA  #1
1277 4c 7e 21         JMP  INTERNAL_ERROR


              ***********
127a          opcodes_ext
              ***********

127a 04 24            .WORD z_ext_save        ; 00
127c de 24            .WORD z_ext_restore     ; 01
127e f1 18            .WORD z_log_shift       ; 02
1280 0a 19            .WORD z_art_shift       ; 03
1282 29 19            .WORD z_set_font        ; 04
1284 75 23            .WORD z_error12         ; 05 z_draw_picture,
1286 75 23            .WORD z_error12         ; 06 z_picture_data,
1288 75 23            .WORD z_error12         ; 07 z_erase_picture,
128a 75 23            .WORD z_error12         ; 08 z_set_margins,
128c 7a 23            .WORD z_save_undo       ; 09
128e 80 23            .WORD z_restore_undo    ; 0a

              ;    0b z_print_unicode,
              ;    0c z_check_unicode,
              ;    0d __illegal__,
              ;    0e __illegal__,
              ;    0f __illegal__,
              ;    10 z_move_window,
              ;    11 z_window_size,
              ;    12 z_window_style,
              ;    13 z_get_wind_prop,
              ;    14 z_scroll_window,
              ;    15 z_pop_stack,
              ;    16 z_read_mouse,
              ;    17 z_mouse_window,
              ;    18 z_push_stack,
              ;    19 z_put_wind_prop,
              ;    1a z_print_form,
              ;    1b z_make_menu,
              ;    1c z_picture_table


              ******************
              Module Get_Operand
              ******************

              ; Input: (A) = tt00 0000
              ; ----------------------
              ; tt = 00 : 16 bit constant
              ; tt = 01 :  8 bit constant
              ; tt = 10 :    variable
              ; tt = 11 :    none

              ; Output: Store 1st. in X1, 2nd. in X2, etc. until X8
              ;         Overflow set if none

1290 85 27            STA  OP_Type
1292 a9 00            LDA  #0                 ; preset high byte
1294 24 27            BIT  OP_Type
1296 30 0e            BMI  _check             ; 1x -> var or end
1298 70 03            BVS  _const             ; 01 -> byte constant
129a 20 0e 28         JSR  Next_Instruction   ; get constant high
129d 85 46    _const  STA  X0H
129f 20 0e 28         JSR  Next_Instruction   ; get constant low
12a2 85 45            STA  X0L
12a4 80 05            BRA  _store
12a6 70 12    _check  BVS  _return            ; 11 -> end
12a8 20 f3 12         JSR  Get_Var_A          ; 10 -> variable
12ab e6 29    _store  INC  ParNum             ; parameter count
12ad a5 29            LDA  ParNum
12af 0a               ASL  A
12b0 aa               TAX
12b1 a5 45            LDA  X0L
12b3 95 45            STA  X0L,X
12b5 a5 46            LDA  X0H
12b7 95 46            STA  X0H,X
12b9 b8               CLV                     ; not at end
12ba 60       _return RTS
12bb          EndMod [Get_Operand] Size = 43 [$2b]

              **********************
              Module Load_4_Operands
              **********************

              ; max 4 operands (2 type bits)
              ; ----------------------------
              ; 00 = 16 bit constant
              ; 01 =  8 bit constant
              ; 10 = 16 bit variable
              ; 11 = no operand (end marker)

12bb 20 90 12         JSR  Get_Operand
12be 70 0a            BVS  _return            ; V=1 -> end of args
12c0 a5 27            LDA  OP_Type
12c2 0a               ASL  A
12c3 0a               ASL  A                  ; shift next 2 type bits to 7 and 6
12c4 a6 29            LDX  ParNum
12c6 e0 04            CPX  #4
12c8 90 f1            BCC  Load_4_Operands
12ca a5 02    _return LDA  Z_Code
12cc 60               RTS
12cd          EndMod [Load_4_Operands] Size = 18 [$12]

              **********************
              Module Load_8_Operands
              **********************

              ; max 8 operands (2 type bits)
              ; ----------------------------
              ; 00 = 16 bit constant
              ; 01 =  8 bit constant
              ; 10 = 16 bit variable
              ; 11 = no operand (end marker)

12cd 48               PHA                     ; 1st. type byte
12ce 20 0e 28         JSR  Next_Instruction   ; 2nd. type byte
12d1 85 28            STA  OP_Type+1
12d3 68               PLA
12d4 20 90 12 _loop   JSR  Get_Operand
12d7 70 0e            BVS  _return            ; V=1 -> end of args
12d9 a5 27            LDA  OP_Type
12db 06 28            ASL  OP_Type+1
12dd 2a               ROL  A
12de 06 28            ASL  OP_Type+1
12e0 2a               ROL  A
12e1 a6 29            LDX  ParNum
12e3 e0 08            CPX  #8
12e5 90 ed            BCC  _loop
12e7 a5 02    _return LDA  Z_Code
12e9 60               RTS
12ea          EndMod [Load_8_Operands] Size = 29 [$1d]

              ******************
              Module Get_Var_X1L
              ******************

12ea a5 47            LDA  X1L
12ec d0 0b            BNE  GeVa_10
12ee 20 11 14         JSR  z_pop
12f1 80 2b            BRA  Push_X0

              *********
12f3          Get_Var_A
              *********

12f3 20 0e 28         JSR  Next_Instruction
12f6 f3 19 01         LBEQ z_pop

12f9 c9 10    GeVa_10 CMP  #16
12fb b0 0c            BCS  Get_Global_Var
12fd aa               TAX
12fe bd 10 04         LDA  Lvar_Hi,X
1301 85 46            STA  X0H
1303 bd 00 04         LDA  Lvar_Lo,X
1306 85 45            STA  X0L
1308 60               RTS
1309          EndMod [Get_Var_X1L] Size = 31 [$1f]

              *********************
              Module Get_Global_Var
              *********************

1309 20 64 13         JSR  Get_Global_Var_Addr
130c b1 41            LDA  (A0L),Y
130e 85 46            STA  X0H
1310 c8               INY
1311 b1 41            LDA  (A0L),Y
1313 85 45            STA  X0L
1315 60               RTS
1316          EndMod [Get_Global_Var] Size = 13 [$d]

              **************
              Module Put_Var
              **************

1316 a5 47            LDA  X1L                ; X1L == 0 : push  X0
1318 d0 2d            BNE  Store_Var          ; X1L != 0 : store X0
131a c3 3a            DEW  z_stack_ptr        ; X0 replaces top of stack
131c c3 3a            DEW  z_stack_ptr
131e          EndMod [Put_Var] Size = 8 [$8]

              **************
              Module Push_X0
              **************

131e a5 45            LDA  X0L
1320 a4 46            LDY  X0H
1322          EndMod [Push_X0] Size = 4 [$4]

              **************
              Module Push_AY
              **************

              ; Input : A = low  byte
              ;         Y = high byte
              ; X register is preserved

1322 a3 00            LDZ  #0
1324 92 3a            STA  (z_stack_ptr),Z
1326 e3 3a            INW  z_stack_ptr
1328 98               TYA
1329 92 3a            STA  (z_stack_ptr),Z
132b e3 3a            INW  z_stack_ptr
132d ab 3b 00         LDZ  z_stack_ptr+1
1330 c2 08            CPZ  #>Z_STACK_HI
1332 b0 01            BCS  z_error_6
1334 60               RTS
              z_error_6 ERROR(6)
1335 a9 06            LDA  #6
1337 4c 7e 21         JMP  INTERNAL_ERROR

133a          EndMod [Push_AY] Size = 24 [$18]


              **********
133a          Store_Zero
              **********

133a a9 00            LDA  #0

              **********
133c          Store_Byte
              **********

133c a2 00            LDX  #0

              ********
133e          Store_AX
              ********

133e 86 46            STX  X0H

              ***********
1340          Store_A_X0H
              ***********

1340 85 45            STA  X0L

              ********
1342          Store_X0
              ********

1342 20 0e 28         JSR  Next_Instruction
1345 f0 d7            BEQ  Push_X0            ;    0: push   value

              *********
1347          Store_Var
              *********

1347 c9 10            CMP  #16                ; 1-15: local  variable
1349 b0 0c            BCS  Put_Global_Var     ; > 15: global variable
134b aa               TAX
134c a5 45            LDA  X0L
134e 9d 00 04         STA  Lvar_Lo,X
1351 a5 46            LDA  X0H
1353 9d 10 04         STA  Lvar_Hi,X
1356 60               RTS

              *********************
              Module Put_Global_Var
              *********************

1357 20 64 13         JSR  Get_Global_Var_Addr
135a a5 46            LDA  X0H                ; store in big endian order
135c 91 41            STA  (A0L),Y
135e c8               INY
135f a5 45            LDA  X0L
1361 91 41            STA  (A0L),Y
1363 60               RTS
1364          EndMod [Put_Global_Var] Size = 13 [$d]

              **************************
              Module Get_Global_Var_Addr
              **************************

              ;  Input: (A)  = Variable # ( 16 - 255)
              ; Output: (A0) = Address of Variable
              ;         (Y)  = 0  IMPORTANT: used by callers

              ; A0 = Z_HEADER + h_globals + 2 * (A)

1364 38               SEC
1365 e9 10            SBC  #16                ; variable index = number - 16
1367 a0 00            LDY  #0
1369 84 42            STY  A0H
136b 0a               ASL  A
136c 26 42            ROL  A0H                ; (A/A0H) = index * 2 (C=0)
136e 6d 0d 2f         ADC  h_globals_lo
1371 85 41            STA  A0L
1373 a5 42            LDA  A0H                ; 0 or 1
1375 6d 0c 2f         ADC  h_globals_hi
1378 69 2f            ADC  #>Z_HEADER
137a 85 42            STA  A0H
137c 60               RTS
137d          EndMod [Get_Global_Var_Addr] Size = 25 [$19]

              ; Take a jump after an instruction based on the flag, either true or
              ; false. The branch can be short or long; it is encoded in one or two
              ; bytes respectively. When bit 7 of the first byte is set, the jump
              ; takes place if the flag is true; otherwise it is taken if the flag
              ; is false. When bit 6 of the first byte is set, the branch is short;
              ; otherwise it is long. The offset occupies the bottom 6 bits of the
              ; first byte plus all the bits in the second byte for long branches.
              ; Uniquely, an offset of 0 means return false, and an offset of 1 is
              ; return true. The branch distance is offset - 2.

              *****************
              Module Main_False
              *****************

137d 20 0e 28         JSR  Next_Instruction
1380 10 0c            BPL  _mft_20
1382 29 40    _mft_10 AND  #$40
1384 d0 4e            BNE  _return
1386 4c 0e 28         JMP  Next_Instruction

              *********
1389          Main_True
              *********

1389 20 0e 28         JSR  Next_Instruction   ; A = specifier
138c 10 f4            BPL  _mft_10
138e aa       _mft_20 TAX                     ; X = specifier
138f 29 40            AND  #$40               ; bit 6: 1=short 0=long
1391 f0 07            BEQ  _mft_30            ; ---------------------
1393 8a               TXA                     ; short forward branch
1394 29 3f            AND  #$3f               ; A = offset (6 bits)
1396 a2 00            LDX  #0                 ; X = 0 (high offset)
1398 f0 16            BEQ  _mft_60            ; ---------------------
139a 8a       _mft_30 TXA                     ; long branch
139b 29 20            AND  #$20               ; sign bit of offset
139d f0 05            BEQ  _mft_40            ; -> positive offset
139f 8a               TXA
13a0 09 c0            ORA  #$c0               ; negative offset
13a2 d0 03            BNE  _mft_50            ; -> always
13a4 8a       _mft_40 TXA
13a5 29 3f            AND  #$3f               ; positive offset
13a7 85 46    _mft_50 STA  X0H                ; high byte offset (6 bits)
13a9 20 0e 28         JSR  Next_Instruction   ; A = low  byte of long offset
13ac a6 46            LDX  X0H                ; X = high byte of long offset
13ae d0 06            BNE  Branch_XA          ; -> long branch
13b0 a8       _mft_60 TAY                     ; Y = offset
13b1 f0 2c            BEQ  z_rfalse           ; Offset 0: return false
13b3 88               DEY                     ; Y = offset - 1
13b4 f0 1f            BEQ  z_rtrue            ; Offset 1: return true

              *********
13b6          Branch_XA
              *********

              ; branch to IP + (A/X) - 2
              ; Input : (A/X) = signed word with 14 significant bits

13b6 86 46            STX  X0H                ; offset high
13b8 38               SEC
13b9 e9 02            SBC  #2
13bb b0 01            BCS  _mft_70
13bd ca               DEX
13be 18       _mft_70 CLC                     ; (A/X) = offset - 2
13bf 65 04            ADC  QI0
13c1 85 04            STA  QI0
13c3 8a               TXA
13c4 65 05            ADC  QI1
13c6 85 05            STA  QI1
13c8 a9 00            LDA  #0                 ; A = 0
13ca 24 46            BIT  X0H                ; check sign of offset
13cc 10 02            BPL  _mft_80            ; -> positive
13ce a9 ff            LDA  #-1                ; A = -1
13d0 65 06    _mft_80 ADC  QI2                ; add carry and sign
13d2 85 06            STA  QI2
13d4 60       _return RTS
13d5          EndMod [Main_False] Size = 88 [$58]

              ****************************
              Module z_rtrue ; opcode # b0
              ****************************

13d5 a2 01            LDX  #1
13d7 86 47            STX  X1L
13d9 ca               DEX
13da 86 48            STX  X1H
13dc 4c 65 15         JMP  z_ret
13df          EndMod [z_rtrue] Size = 10 [$a]

              *****************************
              Module z_rfalse ; opcode # b1
              *****************************

13df a2 00            LDX  #0
13e1 86 47            STX  X1L
13e3 86 48            STX  X1H
13e5 4c 65 15         JMP  z_ret
13e8          EndMod [z_rfalse] Size = 9 [$9]

              ****************************
              Module z_print ; opcode # b2
              ****************************

              ; print text from instruction pointer (QI).

13e8 a2 02            LDX  #2
13ea b5 04    _id     LDA  QI0,X              ; copy QI -> QD
13ec 95 09            STA  QD0,X
13ee ca               DEX
13ef 10 f9            BPL  _id
13f1 20 07 1f         JSR  Decode_Text        ; print text from (QD)
13f4 a2 02            LDX  #2
13f6 b5 09    _di     LDA  QD0,X              ; copy QD -> QI
13f8 95 04            STA  QI0,X
13fa ca               DEX
13fb 10 f9            BPL  _di
13fd 60               RTS
13fe          EndMod [z_print] Size = 22 [$16]

              ********************************
              Module z_print_ret ; opcode # b3
              ********************************

              ; print text from instruction pointer (QI) add a new line and return true.

13fe 20 e8 13         JSR  z_print
1401 20 12 22         JSR  z_new_line
1404 80 cf            BRA  z_rtrue
1406          EndMod [z_print_ret] Size = 8 [$8]

              **************************
              Module z_nop ; opcode # b4
              **************************

1406 60               RTS
1407          EndMod [z_nop] Size = 1 [$1]

              *********************************
              Module z_ret_popped ; opcode # b8
              *********************************

1407 20 11 14         JSR  z_pop
140a 85 47            STA  X1L
140c 84 48            STY  X1H
140e 4c 65 15         JMP  z_ret
1411          EndMod [z_ret_popped] Size = 10 [$a]

              **************************
              Module z_pop ; opcode # b9
              **************************

              ; pop 16 bit word from Z stack
              ; Output: (X0) = (A/Y)  = value
              ; X register preserved

1411 a3 00            LDZ  #0
1413 c3 3a            DEW  z_stack_ptr
1415 b2 3a            LDA  (z_stack_ptr),Z
1417 a8               TAY
1418 c3 3a            DEW  z_stack_ptr
141a b2 3a            LDA  (z_stack_ptr),Z
141c 84 46            STY  X0H
141e 85 45            STA  X0L
1420 ab 3b 00         LDZ  z_stack_ptr+1
1423 c2 05            CPZ  #>Z_STACK_LO
1425 90 01            BCC  z_error_5
1427 60               RTS
              z_error_5 ERROR(5)
1428 a9 05            LDA  #5
142a 4c 7e 21         JMP  INTERNAL_ERROR

142d          EndMod [z_pop] Size = 28 [$1c]

              ****************************
              Module z_catch ; opcode # b9
              ****************************
                      ERROR(7)
142d a9 07            LDA  #7
142f 4c 7e 21         JMP  INTERNAL_ERROR

1432          EndMod [z_catch] Size = 5 [$5]

              ***************************
              Module z_quit ; opcode # ba
              ***************************

1432 20 7d 2c         JSR  Save_Config
              quit_20 Print(EOS)
1435 a9 7e            LDA  #<EOS
1437 a0 2d            LDY  #>EOS
1439 a2 1a            LDX  #?EOS
143b 20 3f 2b         JSR  PrintText

143e 80 fe    quit_30 BRA  quit_30
1440          EndMod [z_quit] Size = 14 [$e]




              *******************************
              Module z_jz ; opcode # 80 90 a0
              *******************************

              ; jump if (X1 == 0)

1440 a5 47            LDA  X1L
1442 05 48            ORA  X1H
1444 f3 43 ff         LBEQ Main_True
1447 4c 7d 13         JMP  Main_False
144a          EndMod [z_jz] Size = 10 [$a]

              ****************************************
              Module z_get_sibling ; opcode # 81 91 a1
              ****************************************

144a a0 05            LDY  #5                 ; version = 3 sibling
144c 7f 35 0b         BBR7 Version,_get
144f a0 08            LDY  #8                 ; version > 3 sibling
1451 80 07            BRA  _get

              *******************************
1453          z_get_child ; opcode # 82 92 a2
              *******************************

1453 a0 06            LDY  #6                 ; version = 3 child
1455 7f 35 02         BBR7 Version,_get
1458 a0 0a            LDY  #10                ; version > 3 child

145a 20 b1 20 _get    JSR Get_Object_X1       ; X1 object's address -> A0
145d 20 3e 13         JSR  Store_AX           ; (A/X) -> (X0) -> Store
1460 a5 45            LDA  X0L
1462 05 46            ORA  X0H
1464 f3 17 ff         LBEQ Main_False         ; there is no object
1467 4c 89 13         JMP  Main_True          ; there is an object
146a          EndMod [z_get_sibling] Size = 32 [$20]

              ***************************************
              Module z_get_parent ; opcode # 83 93 a3
              ***************************************

146a a0 04            LDY  #4                 ; version = 3 parent
146c 7f 35 02         BBR7 Version,_get
146f a0 06            LDY  #6                 ; version > 3 parent
1471 20 b1 20 _get    JSR  Get_Object_X1      ; (A/X) = parent object
1474 4c 3e 13         JMP  Store_AX
1477          EndMod [z_get_parent] Size = 13 [$d]

              *****************************************
              Module z_get_prop_len ; opcode # 84 94 a4
              *****************************************

              ; get length of property, which address is in X1
              ; The length info is stored one byte before (X1)

1477 18               CLC
1478 a5 47            LDA  X1L
147a 69 ff            ADC  #<[Z_HEADER-1]
147c 85 41            STA  A0L
147e a5 48            LDA  X1H
1480 69 2e            ADC  #>[Z_HEADER-1]
1482 85 42            STA  A0H                ; (A0) = (X1) + Header - 1
1484 a0 00            LDY  #0
1486 7f 35 0e         BBR7 Version,_V3
1489 b1 41            LDA  (A0L),Y
148b 30 05            BMI  _mask              ; -> length = lower 6 bits
148d 0a               ASL  A                  ; bit 7 = length info
148e 0a               ASL  A                  ; carry = length info
148f 98               TYA                     ; A = 0
1490 69 01            ADC  #1                 ; A = 1 or 2
1492 29 3f    _mask   AND  #$3f               ; version > 3 mask
1494 4c 3c 13         JMP  Store_Byte

1497 20 02 21 _V3     JSR  Property_Size
149a 1a               INC  A
149b 4c 3c 13         JMP  Store_Byte
149e          EndMod [z_get_prop_len] Size = 39 [$27]

              ********************************
              Module z_inc ; opcode # 85 95 a5
              ********************************

149e 20 ea 12         JSR  Get_Var_X1L
14a1 e3 45            INW  X0L
14a3 4c 16 13         JMP  Put_Var
14a6          EndMod [z_inc] Size = 8 [$8]

              ********************************
              Module z_dec ; opcode # 86 96 a6
              ********************************

14a6 20 ea 12         JSR  Get_Var_X1L
14a9 c3 45            DEW  X0L
14ab 4c 16 13         JMP  Put_Var
14ae          EndMod [z_dec] Size = 8 [$8]

              ***************************************
              Module z_print_addr ; opcode # 87 97 a7
              ***************************************

14ae a4 47            LDY  X1L
14b0 a6 48            LDX  X1H
14b2 4c ff 1e         JMP  Decode_YX
14b5          EndMod [z_print_addr] Size = 7 [$7]

              ***************************************
              Module z_remove_obj ; opcode # 89 99 a9
              ***************************************

              ; Remove (unlink) object (X1)

14b5 7f 35 54         BBR7 Version, _V3
14b8 a0 06            LDY  #6                 ; parent offset
14ba 20 b1 20         JSR  Get_Object_X1      ; object's address -> A0
14bd a5 41            LDA  A0L                ; object's address -> A1
14bf 85 43            STA  A1L
14c1 a5 42            LDA  A0H
14c3 85 44            STA  A1H
14c5 8a               TXA                     ; parent high
14c6 11 41            ORA  (A0L),Y            ; parent low
14c8 f0 41            BEQ  _ret40             ; return if no parent

              ; Get parent's 1st. child

14ca b1 41            LDA  (A0L),Y            ; parent low (X = high)
14cc a0 0a            LDY  #10                ; child offset
14ce 20 b5 20         JSR  Get_Object_Reg     ; parent's address -> A0
14d1 c5 47            CMP  X1L                ; object == parent's 1st. Child ?
14d3 d0 15            BNE  _ro_10             ; -> no
14d5 e4 48            CPX  X1H                ; object == parent's 1st. Child ?
14d7 d0 11            BNE  _ro_10             ; -> no

              ; Parent's 1st. child is this object, so
              ; make object's sibling the 1st. child of parent

14d9 a0 08            LDY  #8                 ; sibling offset
14db b1 43            LDA  (A1L),Y            ; object's sibling high
14dd c8               INY
14de c8               INY                     ; Y = 10
14df 91 41            STA  (A0L),Y            ; parent's child high
14e1 88               DEY                     ; Y =  9
14e2 b1 43            LDA  (A1L),Y            ; object's sibling low
14e4 c8               INY
14e5 c8               INY                     ; Y = 11
14e6 91 41            STA  (A0L),Y            ; parent's child low
14e8 d0 16            BNE  _ro_20             ; always (INY)

              ; Parent's 1st. child is not this object
              ; Loop through siblings until found

14ea a0 08    _ro_10  LDY  #8                 ; sibling offset
14ec 20 b5 20         JSR  Get_Object_Reg     ; parent's child -> A0
14ef c5 47            CMP  X1L                ; object == parent's child's sibling ?
14f1 d0 f7            BNE  _ro_10             ; -> no
14f3 e4 48            CPX  X1H                ; object == parent's child's sibling ?
14f5 d0 f3            BNE  _ro_10             ; -> no, try next sibling (A/X)

              ; Link younger sibling to older sibling

14f7 b1 43            LDA  (A1L),Y            ; younger sibling low
14f9 91 41            STA  (A0L),Y            ; older   sibling low
14fb 88               DEY                     ; Y = 8
14fc b1 43            LDA  (A1L),Y            ; younger sibling high
14fe 91 41            STA  (A0L),Y            ; older   sibling high

              ; clear object's parent & sibling (Y=6 .. 9)

1500 a9 00    _ro_20  LDA  #0
1502 a0 06            LDY  #6                 ; parent offset
1504 91 43    _ro_30  STA  (A1L),Y            ; clear parent & sibling
1506 c8               INY
1507 c0 0a            CPY  #10                ; after sibling
1509 90 f9            BCC  _ro_30
150b 60       _ret40  RTS

150c a0 04    _V3     LDY  #4                 ; parent offset
150e 20 b1 20         JSR  Get_Object_X1
1511 a5 41            LDA  A0L
1513 85 43            STA  A1L
1515 a5 42            LDA  A0H
1517 85 44            STA  A1H
1519 b1 41            LDA  (A0L),Y            ; A = parent object
151b f0 2a            BEQ  _ret70             ; -> has no parent
151d a0 06            LDY  #6                 ; child offset
151f 20 b5 20         JSR  Get_Object_Reg     ; A = child of parent
1522 c5 47            CMP  X1L                ; is it me ?
1524 d0 09            BNE  _ro_50             ; -> no
1526 a0 05            LDY  #5                 ; sibling offset
1528 b1 43            LDA  (A1L),Y            ; my sibling
152a c8               INY                     ; Y = child offset
152b 91 41            STA  (A0L),Y            ; is parent's cild
152d d0 0f            BNE  _ro_60             ; always

152f a0 05    _ro_50  LDY  #5                 ; A = sibling of parnent's
1531 20 b5 20         JSR  Get_Object_Reg     ; child
1534 c5 47            CMP  X1L                ; me ?
1536 d0 f7            BNE  _ro_50             ; -> no
1538 a0 05            LDY  #5                 ; sibling offset
153a b1 43            LDA  (A1L),Y            ; my sibling is
153c 91 41            STA  (A0L),Y            ; parent's child sibling

153e a9 00    _ro_60  LDA  #0
1540 a0 04            LDY  #4                 ; parent offset
1542 91 43            STA  (A1L),Y            ; I have no parnet
1544 c8               INY                     ; Y = sibling offset
1545 91 43            STA  (A1L),Y            ; I have no sibling
1547 60       _ret70  RTS
1548          EndMod [z_remove_obj] Size = 147 [$93]

              **************************************
              Module z_print_obj ; opcode # 8a 9a aa
              **************************************

1548 a5 47            LDA  X1L
154a a6 48            LDX  X1H

              *************
154c          z_print_obj_A
              *************

154c a0 0c            LDY  #12                ; version > 3 offset
154e ff 35 02         BBS7 Version,_prio_1
1551 a0 07            LDY  #7                 ; version = 3 offset
1553 20 b5 20 _prio_1 JSR  Get_Object_Reg
1556 ff 35 04         BBS7 Version,_V4
1559 aa               TAX                     ; object prop high
155a c8               INY
155b b1 41            LDA  (A0L),Y
155d a8       _V4     TAY                     ; object prop low
155e c8               INY
155f d0 01            BNE  _decode
1561 e8               INX                     ; object prop high
1562 4c ff 1e _decode JMP  Decode_YX
1565          EndMod [z_print_obj] Size = 29 [$1d]

              ********************************
              Module z_ret ; opcode # 8b 9b ab
              ********************************

1565 a5 3c            LDA  z_frame_ptr        ; stack ptr = frame ptr
1567 85 3a            STA  z_stack_ptr
1569 a5 3d            LDA  z_frame_ptr+1      ; stack ptr = frame ptr
156b 85 3b            STA  z_stack_ptr+1

156d 20 11 14         JSR  z_pop
1570 8c eb 25         STY  Z_Arg_Count        ; # of args
1573 aa               TAX                     ; # of local vars
1574 f0 0d            BEQ  _noloc             ; -> no locals vars

1576 20 11 14 _loop   JSR  z_pop              ; pop next local var
1579 9d 00 04         STA  Lvar_Lo,X          ; and restore it
157c 98               TYA
157d 9d 10 04         STA  Lvar_Hi,X
1580 ca               DEX
1581 d0 f3            BNE  _loop              ; -> loop

1583 20 11 14 _noloc  JSR  z_pop
1586 85 17            STA  Call_Type
1588 84 04            STY  QI0                ; restore instruction pointer L

158a 20 11 14         JSR  z_pop
158d 85 05            STA  QI1                ; restore instruction pointer M
158f 84 06            STY  QI2                ; restore instruction pointer H

1591 20 11 14         JSR  z_pop
1594 85 3c            STA  z_frame_ptr
1596 84 3d            STY  z_frame_ptr+1

1598 a5 17            LDA  Call_Type
159a 30 09            BMI  _irqret            ; -> return from IRQ
159c d0 09            BNE  _return            ; -> no return value
159e a5 47            LDA  X1L
15a0 a6 48            LDX  X1H
15a2 4c 3e 13         JMP  Store_AX
15a5 68       _irqret PLA
15a6 68               PLA
15a7 60       _return RTS
15a8          EndMod [z_ret] Size = 67 [$43]

              *********************************
              Module z_jump ; opcode # 8c 9c ac
              *********************************

15a8 a5 47            LDA  X1L
15aa a6 48            LDX  X1H
15ac 4c b6 13         JMP  Branch_XA
15af          EndMod [z_jump] Size = 7 [$7]

              ****************************************
              Module z_print_paddr ; opcode # 8d 9d ad
              ****************************************

15af a4 47            LDY  X1L
15b1 a5 48            LDA  X1H
15b3 20 8c 1b         JSR  Set_Data_YA
15b6 06 09            ASL  QD0
15b8 eb 0a 00         ROW  QD1
15bb 7f 35 05         BBR7 Version,_label
15be 06 09            ASL  QD0
15c0 eb 0a 00         ROW  QD1
15c3 4c 07 1f _label  JMP  Decode_Text
15c6          EndMod [z_print_paddr] Size = 23 [$17]

              *********************************
              Module z_load ; opcode # 8e 9e ae
              *********************************

15c6 20 ea 12         JSR  Get_Var_X1L
15c9 4c 42 13         JMP  Store_X0
15cc          EndMod [z_load] Size = 6 [$6]

              *********************************
              Module z_not ; opcode #  8f 9f af
              *********************************
15cc a5 47            LDA  X1L
15ce 49 ff            EOR  #$ff
15d0 aa               TAX
15d1 a5 48            LDA  X1H
15d3 49 ff            EOR  #$ff               ; fall through
15d5          EndMod [z_not] Size = 9 [$9]

              ***************
              Module Store_XA
              ***************

15d5 86 45            STX  X0L
15d7 85 46            STA  X0H
15d9 4c 42 13         JMP  Store_X0
15dc          EndMod [Store_XA] Size = 7 [$7]

              *************************************
              Module z_je ; opcode # 01 21 41 61 c1
              *************************************

              ; jump if (X1 == X2 || X1 == X3 || X1 == X4)

15dc a5 29            LDA  ParNum
15de 0a               ASL  A
15df aa               TAX
15e0 e0 04    _loop   CPX  #4
15e2 93 99 fd         LBCC Main_False
15e5 ca               DEX
15e6 ca               DEX
15e7 a5 47            LDA  X1L
15e9 d5 47            CMP  X1L,X
15eb d0 f3            BNE  _loop
15ed a5 48            LDA  X1H
15ef d5 48            CMP  X1H,X
15f1 d0 ed            BNE  _loop
15f3 4c 89 13         JMP  Main_True
15f6          EndMod [z_je] Size = 26 [$1a]

              *************************************
              Module z_jl ; opcode # 02 22 42 62 c2
              *************************************

              ; jump if (X1 < X2) signed 16 bit

15f6 a5 47            LDA  X1L
15f8 c5 49            CMP  X2L
15fa a5 48            LDA  X1H
15fc e5 4a            SBC  X2H
15fe 50 02            BVC  _sig
1600 49 80            EOR  #$80
1602 33 85 fd _sig    LBMI Main_True
1605 4c 7d 13         JMP  Main_False
1608          EndMod [z_jl] Size = 18 [$12]

              *************************************
              Module z_jg ; opcode # 03 23 43 63 c3
              *************************************

              ; jump if (X1 > X2) signed 16 bit

1608 a5 49            LDA  X2L
160a c5 47            CMP  X1L
160c a5 4a            LDA  X2H
160e e5 48            SBC  X1H
1610 50 02            BVC  _sig
1612 49 80            EOR  #$80
1614 33 73 fd _sig    LBMI Main_True
1617 4c 7d 13         JMP  Main_False
161a          EndMod [z_jg] Size = 18 [$12]

              ******************************************
              Module z_dec_chk ; opcode # 04 24 44 64 c4
              ******************************************

              ; jump if ((X0 = --Var[X1]) < X2)

161a 20 a6 14         JSR  z_dec
161d a5 45            LDA  X0L
161f c5 49            CMP  X2L
1621 a5 46            LDA  X0H
1623 e5 4a            SBC  X2H
1625 50 02            BVC  _sig
1627 49 80            EOR  #$80
1629 33 5e fd _sig    LBMI Main_True
162c 4c 7d 13         JMP  Main_False
162f          EndMod [z_dec_chk] Size = 21 [$15]

              ******************************************
              Module z_inc_chk ; opcode # 05 25 45 65 c5
              ******************************************

              ; jump if ((X0 = ++Var[X1]) > X2)

162f 20 9e 14         JSR  z_inc
1632 a5 49            LDA  X2L
1634 c5 45            CMP  X0L
1636 a5 4a            LDA  X2H
1638 e5 46            SBC  X0H
163a 50 02            BVC  _sig
163c 49 80            EOR  #$80
163e 33 49 fd _sig    LBMI Main_True
1641 4c 7d 13         JMP  Main_False
1644          EndMod [z_inc_chk] Size = 21 [$15]

              **************************************
              Module z_jin ; opcode # 06 26 46 66 c6
              **************************************

              ; jump if (X1 is child of X2)

1644 a0 04            LDY  #4                 ; version = 3 parent
1646 7f 35 02         BBR7 Version,_get
1649 a0 06            LDY  #6                 ; version > 3 parent
164b 20 b1 20 _get    JSR  Get_Object_X1
164e e4 4a            CPX  X2H
1650 d0 05            BNE  _false
1652 c5 49            CMP  X2L
1654 f3 33 fd         LBEQ Main_True
1657 4c 7d 13 _false  JMP  Main_False
165a          EndMod [z_jin] Size = 22 [$16]

              ***************************************
              Module z_test ; opcode # 07 27 47 67 c7
              ***************************************

              ; jump if ((X1 & X2) == X2)

165a a2 01            LDX  #1
165c b5 47    _loop   LDA  X1L,X
165e 35 49            AND  X2L,X
1660 d5 49            CMP  X2L,X
1662 d3 19 fd         LBNE Main_False
1665 ca               DEX
1666 10 f4            BPL  _loop
1668 4c 89 13         JMP  Main_True
166b          EndMod [z_test] Size = 17 [$11]

              *************************************
              Module z_or ; opcode # 08 28 48 68 c8
              *************************************

              ; (X1 | X2)

166b a5 48            LDA  X1H
166d 05 4a            ORA  X2H
166f aa               TAX
1670 a5 47            LDA  X1L
1672 05 49            ORA  X2L
1674 4c 3e 13         JMP  Store_AX
1677          EndMod [z_or] Size = 12 [$c]

              **************************************
              Module z_and ; opcode # 09 29 49 69 c9
              **************************************

              ; (X1 & X2)

1677 a5 48            LDA  X1H
1679 25 4a            AND  X2H
167b aa               TAX
167c a5 47            LDA  X1L
167e 25 49            AND  X2L
1680 4c 3e 13         JMP  Store_AX
1683          EndMod [z_and] Size = 12 [$c]

              ********************************************
              Module z_test_attr ; opcode # 0a 2a 4a 6a ca
              ********************************************

              ; jump if attribute X2 of object X1 is set

1683 20 4d 21         JSR  Get_Attr_Addr
1686 31 41            AND  (A0L),Y
1688 d3 ff fc         LBNE Main_True
168b 4c 7d 13         JMP  Main_False
168e          EndMod [z_test_attr] Size = 11 [$b]

              *******************************************
              Module z_set_attr ; opcode # 0b 2b 4b 6b cb
              *******************************************

              ; set attribute X2 of object X1

168e 20 4d 21         JSR  Get_Attr_Addr
1691 11 41            ORA  (A0L),Y
1693 91 41            STA  (A0L),Y
1695 60               RTS
1696          EndMod [z_set_attr] Size = 8 [$8]

              *********************************************
              Module z_clear_attr ; opcode # 0c 2c 4c 6c cc
              *********************************************

              ; clear attribute X2 of object X1

1696 20 4d 21         JSR  Get_Attr_Addr
1699 49 ff            EOR  #$ff
169b 31 41            AND  (A0L),Y
169d 91 41            STA  (A0L),Y
169f 60               RTS
16a0          EndMod [z_clear_attr] Size = 10 [$a]

              ****************************************
              Module z_store ; opcode # 0d 2d 4d 6d cd
              ****************************************

              ; Var[X1] = X2

16a0 a5 49            LDA  X2L
16a2 85 45            STA  X0L
16a4 a5 4a            LDA  X2H
16a6 85 46            STA  X0H
16a8 4c 16 13         JMP  Put_Var
16ab          EndMod [z_store] Size = 11 [$b]

              *********************************************
              Module z_insert_obj ; opcode # 0e 2e 4e 6e ce
              *********************************************

              ; insert object (X1) as 1st. child of object (X2)

16ab 20 b5 14         JSR  z_remove_obj       ; unlink object (X1)
16ae 7f 35 2b         BBR7 Version,_V3
16b1 a0 06            LDY  #6                 ; parent offset
16b3 a5 4a            LDA  X2H
16b5 91 43            STA  (A1L),Y            ; X1's parent = X2 high
16b7 aa               TAX
16b8 c8               INY                     ; Y = 7
16b9 a5 49            LDA  X2L
16bb 91 43            STA  (A1L),Y            ; X1's parent = X2 low

16bd a0 0a            LDY  #10                ; child offset
16bf 20 b5 20         JSR  Get_Object_Reg     ; X2 object's address -> A0
16c2 85 10            STA  LV0                ; old child of X2 low
16c4 a5 47            LDA  X1L                ; Y = 11
16c6 91 41            STA  (A0L),Y            ; new child low  = X1L
16c8 88               DEY                     ; Y = 10
16c9 a5 48            LDA  X1H
16cb 91 41            STA  (A0L),Y            ; new child high = X1H

16cd 8a               TXA                     ; X2's old child high
16ce 05 10            ORA  LV0                ; X2's old child low
16d0 f0 21            BEQ  _return            ; -> old child was zero

16d2 88               DEY                     ; Y =  9
16d3 a5 10            LDA  LV0                ; X2's old child   low
16d5 91 43            STA  (A1L),Y            ; X1's new sibling low
16d7 88               DEY                     ; Y =  8
16d8 8a               TXA                     ; X2's old child   high
16d9 91 43            STA  (A1L),Y            ; X1's new sibling high
16db 60               RTS

16dc a5 49    _V3     LDA  X2L
16de a0 04            LDY  #4                 ; parent offset
16e0 91 43            STA  (A1L),Y            ; object's new parent
16e2 a0 06            LDY  #6                 ; child offset
16e4 20 b5 20         JSR  Get_Object_Reg     ; get new parent's child
16e7 aa               TAX                     ; X = parent's first child
16e8 a5 47            LDA  X1L
16ea 91 41            STA  (A0L),Y            ; object becomes parent's first child
16ec 8a               TXA
16ed f0 04            BEQ  _return            ; parent had no child before
16ef a0 05            LDY  #5                 ; sibling offset
16f1 91 43            STA  (A1L),Y            ; old child becommes sibling
16f3 60       _return RTS
16f4          EndMod [z_insert_obj] Size = 73 [$49]

              *****************
              Module Word_Array
              *****************

              ; called from z_loadw
              ; address QD = base (X1) + index (X2 * 2)

16f4 cb 49 00         ASW  X2L                ; fall through
16f7          EndMod [Word_Array] Size = 3 [$3]

              *****************
              Module Byte_Array
              *****************

              ; called from z_loadb
              ; address QD = base (X1) + index (X2)

16f7 18               CLC
16f8 a5 47            LDA  X1L
16fa 65 49            ADC  X2L
16fc 85 09            STA  QD0
16fe a5 48            LDA  X1H
1700 65 4a            ADC  X2H
1702 85 0a            STA  QD1
1704 a9 00            LDA  #0
1706 2a               ROL  A                  ; add carry for address > 64K
1707 85 0b            STA  QD2
1709 4c d4 27         JMP  Next_Datum         ; get next byte
170c          EndMod [Byte_Array] Size = 21 [$15]

              ****************************************
              Module z_loadw ; opcode # 0f 2f 4f 6f cf
              ****************************************

              ; load word value from array X1[X2]

170c 20 f4 16         JSR  Word_Array         ; set &X1[X2]
170f 85 46            STA  X0H                ; put high byte
1711 20 d4 27         JSR  Next_Datum         ; get low  byte
1714 4c 40 13         JMP  Store_A_X0H        ; return word
1717          EndMod [z_loadw] Size = 11 [$b]

              ****************************************
              Module z_loadb ; opcode # 10 30 50 70 d0
              ****************************************

              ; load byte value from array X1[X2]

1717 20 f7 16         JSR  Byte_Array         ; set &X1[X2]
171a 4c 3c 13         JMP  Store_Byte         ; return byte
171d          EndMod [z_loadb] Size = 6 [$6]

              *******************************************
              Module z_get_prop ; opcode # 11 31 51 71 d1
              *******************************************

              ; get property X2 of object X1
              ; if X1 has no property X2 use default value
              ; the routine must access properties of size byte or word only

171d 20 35 21         JSR  Find_Property
1720 f0 14            BEQ  _found             ; -> found property

1722 ad 0b 2f         LDA  h_objects_lo       ; use default
1725 85 41            STA  A0L
1727 ad 0a 2f         LDA  h_objects_hi
172a 69 2f            ADC  #>Z_HEADER         ; carry is clear
172c 85 42            STA  A0H                ; A0 = address of default properties
172e a5 49            LDA  X2L                ; property #
1730 e9 00            SBC  #0                 ; (C=0) : minus 1
1732 0a               ASL  A                  ; default properties have word size
1733 a8               TAY
1734 80 06            BRA  _read

1736 20 02 21 _found  JSR  Property_Size      ; get size
1739 aa               TAX                     ; 1: word
173a f0 04            BEQ  _low               ; 0: byte (X=0)

173c b1 41    _read   LDA  (A0L),Y            ; property value high
173e aa               TAX
173f c8               INY
1740 b1 41    _low    LDA  (A0L),Y            ; property value low
1742 4c 3e 13         JMP  Store_AX
1745          EndMod [z_get_prop] Size = 40 [$28]

              ************************************************
              Module z_get_prop_addr ; opcode # 12 32 52 72 d2
              ************************************************

              ; get address of property X2 of object X1
              ; store address of property if found
              ; else store zero

1745 20 35 21         JSR  Find_Property
1748 d3 f0 fb         LBNE Store_Zero
174b a5 41            LDA  A0L
174d e9 fe            SBC  #<[Z_HEADER-2]     ; carry from Find_Property
174f aa               TAX                     ; set address after ID/size info
1750 a5 42            LDA  A0H
1752 e9 2e            SBC  #>[Z_HEADER-2]
1754 4c d5 15         JMP  Store_XA
1757          EndMod [z_get_prop_addr] Size = 18 [$12]

              ************************************************
              Module z_get_next_prop ; opcode # 13 33 53 73 d3
              ************************************************

              ; for X2L == 0 find first property of object X1
              ; otherwise find next property after property X2L

1757 a5 49            LDA  X2L
1759 d0 06            BNE  _next              ; -> next prop after X2
175b 20 d7 20         JSR  First_Property
175e 4c 3c 13         JMP  Store_Byte
1761 20 35 21 _next   JSR  Find_Property
1764 d0 06            BNE  _zero              ; -> prop X2 was not found
1766 20 20 21         JSR  Next_Property
1769 4c 3c 13         JMP  Store_Byte
176c 4c 3a 13 _zero   JMP  Store_Zero
176f          EndMod [z_get_next_prop] Size = 24 [$18]

              **************************************
              Module z_add ; opcode # 14 34 54 74 d4
              **************************************

              ; (X1 + X2)

176f 18               CLC
1770 a5 47            LDA  X1L
1772 65 49            ADC  X2L
1774 aa               TAX
1775 a5 48            LDA  X1H
1777 65 4a            ADC  X2H
1779 4c d5 15         JMP  Store_XA
177c          EndMod [z_add] Size = 13 [$d]

              **************************************
              Module z_sub ; opcode # 15 35 55 75 d5
              **************************************

              ; (X1 - X2)

177c 38               SEC
177d a5 47            LDA  X1L
177f e5 49            SBC  X2L
1781 aa               TAX
1782 a5 48            LDA  X1H
1784 e5 4a            SBC  X2H
1786 4c d5 15         JMP  Store_XA
1789          EndMod [z_sub] Size = 13 [$d]

              **************************************
              Module z_mul ; opcode # 16 36 56 76 d6
              **************************************

              ; (X1 * X2) signed 16 bit

1789 a2 10            LDX  #16
178b a9 00            LDA  #0
178d 85 45            STA  X0L
178f 85 46            STA  X0H
1791 18               CLC
1792 66 46    _loop   ROR  X0H
1794 66 45            ROR  X0L
1796 66 4a            ROR  X2H
1798 66 49            ROR  X2L
179a 90 0d            BCC  _zero
179c 18               CLC
179d a5 47            LDA  X1L
179f 65 45            ADC  X0L
17a1 85 45            STA  X0L
17a3 a5 48            LDA  X1H
17a5 65 46            ADC  X0H
17a7 85 46            STA  X0H
17a9 ca       _zero   DEX
17aa 10 e6            BPL  _loop
17ac a6 49            LDX  X2L
17ae a5 4a            LDA  X2H
17b0 4c d5 15         JMP  Store_XA
17b3          EndMod [z_mul] Size = 42 [$2a]

              **********************
              Module Divide_Unsigned
              **********************

              ; Quotient : X1 = X1 / X2
              ; Remainder: X0 = X1 % X2

17b3 a5 49            LDA  X2L
17b5 05 4a            ORA  X2H
17b7 f0 29            BEQ  z_error_8          ; Divisor is zero
17b9 a2 10            LDX  #16
17bb a9 00            LDA  #0
17bd 85 45            STA  X0L
17bf 85 46            STA  X0H
17c1 18               CLC
17c2 26 47    _loop   ROL  X1L
17c4 26 48            ROL  X1H
17c6 26 45            ROL  X0L
17c8 26 46            ROL  X0H
17ca a5 45            LDA  X0L
17cc 38               SEC
17cd e5 49            SBC  X2L
17cf a8               TAY
17d0 a5 46            LDA  X0H
17d2 e5 4a            SBC  X2H
17d4 90 04            BCC  _next
17d6 84 45            STY  X0L
17d8 85 46            STA  X0H
17da ca       _next   DEX
17db d0 e5            BNE  _loop
17dd 26 47            ROL  X1L
17df 26 48            ROL  X1H
17e1 60               RTS
              z_error_8 ERROR(8)              ; Divide by zero
17e2 a9 08            LDA  #8
17e4 4c 7e 21         JMP  INTERNAL_ERROR

17e7          EndMod [Divide_Unsigned] Size = 52 [$34]

              ********************
              Module Divide_Signed
              ********************

              ; (X1) = (X1) / (X2)
              ; (X0) = (X1) % (X2)

17e7 a5 48            LDA  X1H
17e9 48               PHA                     ; sign of remainder
17ea 45 4a            EOR  X2H
17ec 48               PHA                     ; sign of quotient
17ed a2 47            LDX  #X1L
17ef a5 48            LDA  X1H
17f1 20 07 18         JSR  Sign_ZPX           ; make dividend positive
17f4 a2 49            LDX  #X2L
17f6 a5 4a            LDA  X2H
17f8 20 07 18         JSR  Sign_ZPX           ; make divisor positive
17fb 20 b3 17         JSR  Divide_Unsigned
17fe a2 47            LDX  #X1L
1800 68               PLA                     ; sign of quotient
1801 20 07 18         JSR  Sign_ZPX
1804 a2 45            LDX  #X0L
1806 68               PLA                     ; sign of remainder
1807          EndMod                          ; fall through [Divide_Signed] Size = 32 [$20]

              ***************
              Module Sign_ZPX
              ***************

              ; negate word at (0,X) if N flag is set

1807 10 0d            BPL  _return
1809 38               SEC
180a a9 00            LDA  #0
180c f5 00            SBC  0,X
180e 95 00            STA  0,X
1810 a9 00            LDA  #0
1812 f5 01            SBC  1,X
1814 95 01            STA  1,X
1816 60       _return RTS
1817          EndMod [Sign_ZPX] Size = 16 [$10]

              **************************************
              Module z_div ; opcode # 17 37 57 77 d7
              **************************************

1817 20 e7 17         JSR  Divide_Signed      ; X1 = X1 / X2
181a a6 47            LDX  X1L
181c a5 48            LDA  X1H
181e 4c d5 15         JMP  Store_XA
1821          EndMod [z_div] Size = 10 [$a]

              **************************************
              Module z_mod ; opcode # 18 38 58 78 d8
              **************************************

1821 20 e7 17         JSR  Divide_Signed      ; X0 = X1 % X2
1824 4c 42 13         JMP  Store_X0
1827          EndMod [z_mod] Size = 6 [$6]

              *****************************************
              Module z_call_s ; opcode # 19 39 59 79 d9
              *****************************************

1827 a9 00            LDA  #0
1829 80 02            BRA  call_00            ; always
182b          EndMod [z_call_s] Size = 4 [$4]

              *****************************************
              Module z_call_n ; opcode # 1a 3a 5a 7a da
              *****************************************

              ; call subroutine (X1) with 0 - 3 arguments
              ; X1 = subroutine address / 2 (word count)
              ; X2 - X4 arguments
              ; If (X1 == 0) push zero and return
              ; Push saved stack pointer & QI0
              ; Push QI1 & QI2
              ; For # of args do:
              ;     Push local variable
              ;     Set default from instruction stream
              ;     Replace from argument if set
              ; Push argument count & count eor'd with $ff

182b a9 01            LDA  #1
182d 85 17    call_00 STA  Call_Type
182f a5 47            LDA  X1L
1831 05 48            ORA  X1H
1833 d0 08            BNE  call_20
1835 a5 17            LDA  Call_Type
1837 f0 01            BEQ  call_10
1839 60               RTS
183a 4c 3c 13 call_10 JMP  Store_Byte

183d a5 3c    call_20 LDA  z_frame_ptr        ; push frame pointer
183f a4 3d            LDY  z_frame_ptr+1
1841 20 22 13         JSR  Push_AY

1844 a4 06            LDY  QI2                ; push instruction pointer H
1846 a5 05            LDA  QI1                ; push instruction pointer M
1848 20 22 13         JSR  Push_AY

184b a4 04            LDY  QI0                ; push instruction pointer L
184d a5 17            LDA  Call_Type          ; push call type
184f 20 22 13         JSR  Push_AY

1852 a5 47            LDA  X1L                ; compute call address
1854 0a               ASL  A
1855 85 04            STA  QI0
1857 a5 48            LDA  X1H
1859 2a               ROL  A
185a 85 05            STA  QI1
185c a9 00            LDA  #0
185e 2a               ROL  A
185f 85 06            STA  QI2                ; IP = (X1) * 2
1861 7f 35 05         BBR7 Version,call_25
1864 06 04            ASL  QI0
1866 eb 05 00         ROW  QI1                ; IP = (X1) * 4
1869 20 0e 28 call_25 JSR  Next_Instruction
186c 85 44            STA  A1H                ; number of local variables
186e f0 3f            BEQ  call_50            ; no local variables
1870 a2 01            LDX  #1

1872 bc 10 04 call_30 LDY  Lvar_Hi,X
1875 bd 00 04         LDA  Lvar_Lo,X
1878 20 22 13         JSR  Push_AY            ; push local var of caller
              ;-----------------------------
187b a5 35            LDA  Version
187d c9 85            CMP  #$85               ; version 5
187f 90 0a            BCC  call_32
1881 a9 00            LDA  #0                 ; initialize with zero
1883 9d 10 04         STA  Lvar_Hi,X
1886 9d 00 04         STA  Lvar_Lo,X
1889 80 0c            BRA  call_36
              ;-----------------------------
188b 20 0e 28 call_32 JSR  Next_Instruction   ; initialize with default value
188e 9d 10 04         STA  Lvar_Hi,X
1891 20 0e 28         JSR  Next_Instruction   ; from instruction stream
1894 9d 00 04         STA  Lvar_Lo,X
              ;-----------------------------
1897 e4 29    call_36 CPX  ParNum             ; index > # of args ?
1899 b0 0f            BCS  call_40            ; -> stay with default value

189b 8a               TXA
189c 0a               ASL  A                  ; or replace with arg value
189d a8               TAY
189e b9 47 00         LDA  X1L,Y
18a1 9d 00 04         STA  Lvar_Lo,X
18a4 b9 48 00         LDA  X1H,Y
18a7 9d 10 04         STA  Lvar_Hi,X
18aa e4 44    call_40 CPX  A1H                ; # of vars to process
18ac e8               INX
18ad 90 c3            BCC  call_30

18af ac eb 25 call_50 LDY  Z_Arg_Count
18b2 a5 44            LDA  A1H                ; push # of local vars
18b4 20 22 13         JSR  Push_AY
18b7 a4 29            LDY  ParNum
18b9 88               DEY
18ba 8c eb 25         STY  Z_Arg_Count
18bd a5 3a            LDA  z_stack_ptr
18bf 85 3c            STA  z_frame_ptr        ; set new frame pointer
18c1 a5 3b            LDA  z_stack_ptr+1
18c3 85 3d            STA  z_frame_ptr+1      ; set new frame pointer
18c5 60               RTS
18c6          EndMod [z_call_n] Size = 155 [$9b]

              *********************************************
              Module z_set_colour ; opcode # 1b 3b 5b 7b db
              *********************************************

              ; Input : X1 = foreground colour
              ;         X2 = background colour

18c6 20 65 22         JSR  Print_Buffer
18c9 a6 47            LDX  X1L
18cb e0 0d            CPX  #13
18cd b0 14            BCS  _ret
18cf bd e4 18         LDA  _coltab,X
18d2 85 1b            STA  Colour
18d4 a6 49            LDX  X2L
18d6 e0 0d            CPX  #13
18d8 b0 09            BCS  _ret
18da bd e4 18         LDA  _coltab,X
18dd 8d 20 d0         STA  BorderCol
18e0 8d 21 d0         STA  BackgCol0
18e3 60       _ret    RTS

18e4 00       _coltab .BYTE $00               ;  0 current
18e5 00               .BYTE $00               ;  1 default
18e6 00               .BYTE $00               ;  2 black
18e7 02               .BYTE $02               ;  3 red
18e8 05               .BYTE $05               ;  4 green
18e9 07               .BYTE $07               ;  5 yellow
18ea 06               .BYTE $06               ;  6 blue
18eb 04               .BYTE $04               ;  7 magenta
18ec 03               .BYTE $03               ;  8 cyan
18ed 01               .BYTE $01               ;  9 white
18ee 0f               .BYTE $0f               ; 10 light  grey
18ef 0c               .BYTE $0c               ; 11 medium grey
18f0 0b               .BYTE $0b               ; 12 dark   grey
18f1          EndMod [z_set_colour] Size = 43 [$2b]

              ***********************
              Module z_log_shift ; 02
              ***********************

              ; Input : X1 = number
              ;         X2 = shifts

18f1 a5 47            LDA  X1L
18f3 a4 49            LDY  X2L
18f5 30 08            BMI  _right
18f7 0a       _left   ASL  A
18f8 26 48            ROL  X1H
18fa 88               DEY
18fb d0 fa            BNE  _left
18fd f0 06            BEQ  _store

18ff 46 48    _right  LSR  X1H
1901 6a               ROR  A
1902 c8               INY
1903 d0 fa            BNE  _right

1905 a6 48    _store  LDX  X1H
1907 4c 3e 13         JMP  Store_AX
190a          EndMod [z_log_shift] Size = 25 [$19]

              ***********************
              Module z_art_shift ; 03
              ***********************

              ; Input : X1 = number
              ;         X2 = shifts

190a a5 47            LDA  X1L
190c a4 49            LDY  X2L
190e 30 08            BMI  _right
1910 0a       _left   ASL  A
1911 26 48            ROL  X1H
1913 88               DEY
1914 d0 fa            BNE  _left
1916 f0 0c            BEQ  _store

1918 a5 48    _right  LDA  X1H
191a 0a               ASL  A
191b 66 48            ROR  X1H
191d 66 47            ROR  X1L
191f c8               INY
1920 d0 f6            BNE  _right
1922 a5 47            LDA  X1L

1924 a6 48    _store  LDX  X1H
1926 4c 3e 13         JMP  Store_AX
1929          EndMod [z_art_shift] Size = 31 [$1f]

              *****************
              Module z_set_font
              *****************

              ; 0 : previous font
              ; 1 : normal   font
              ; 2 : picture  font
              ; 3 : character graphics
              ; 4 : fixed pitch

1929 20 65 22         JSR  Print_Buffer
192c ae ed 25         LDX  Z_Active_Window    ; 0 = main, 1 = upper
192f a9 00            LDA  #0                 ; default font
1931 a4 47            LDY  X1L                ; new font
1933 c0 03            CPY  #3                 ; graphics ?
1935 d0 02            BNE  _offset            ; -> no
1937 a9 80            LDA  #$80               ; graphics offset
1939 85 59    _offset STA  Font_Sel           ; graphics font
193b bd ee 25         LDA  Z_Active_Font,X    ; old font
193e 8b ee 25         STY  Z_Active_Font,X    ; new font
1941 4c 3c 13         JMP  Store_Byte
1944          EndMod [z_set_font] Size = 27 [$1b]

              ***********************
              Module X1_PLUS_X2_TO_A0
              ***********************

1944 18               CLC
1945 a5 49            LDA  X2L
1947 65 47            ADC  X1L
1949 85 41            STA  A0L
194b a5 4a            LDA  X2H
194d 65 48            ADC  X1H
194f 69 2f            ADC  #>Z_HEADER
1951 85 42            STA  A0H
1953 a0 00            LDY  #0
1955 60               RTS
1956          EndMod [X1_PLUS_X2_TO_A0] Size = 18 [$12]

              ********************
              Module z_storew ; e1
              ********************

              ; X1[X2] = X3

1956 cb 49 00         ASW  X2L
1959 20 44 19         JSR  X1_PLUS_X2_TO_A0
195c a5 4c            LDA  X3H
195e 91 41            STA  (A0L),Y
1960 c8               INY
1961 a5 4b            LDA  X3L
1963 91 41            STA  (A0L),Y
1965 60               RTS
1966          EndMod [z_storew] Size = 16 [$10]

              ********************
              Module z_storeb ; e2
              ********************

              ; X1[X2] = X3

1966 20 44 19         JSR  X1_PLUS_X2_TO_A0
1969 a5 4b            LDA  X3L
196b 91 41            STA  (A0L),Y
196d 60               RTS
196e          EndMod [z_storeb] Size = 8 [$8]

              **********************
              Module z_put_prop ; e3
              **********************

              ; object (X1) property (X2) = X3

196e 20 35 21         JSR  Find_Property
1971 d0 13            BNE  z_error10
1973 20 02 21         JSR  Property_Size
1976 f0 09            BEQ  _byte              ; 0: byte
1978 c9 01            CMP  #1                 ; 1: word
197a d0 0f            BNE  z_error11
197c a5 4c            LDA  X3H
197e 91 41            STA  (A0L),Y
1980 c8               INY
1981 a5 4b    _byte   LDA  X3L
1983 91 41            STA  (A0L),Y
1985 60               RTS
              z_error10 ERROR(10)
1986 a9 0a            LDA  #10
1988 4c 7e 21         JMP  INTERNAL_ERROR

              z_error11 ERROR(11)
198b a9 0b            LDA  #11
198d 4c 7e 21         JMP  INTERNAL_ERROR

1990          EndMod [z_put_prop] Size = 34 [$22]

              ******************
              Module z_read ; e4
              ******************

              ; read an input line and call parser

              ; X1 = text  buffer
              ; X2 = parse buffer
              ; X3 = timeout interval [1/10 seconds]
              ; X4 = timeout interrupt routine

1990 20 f0 1c         JSR  Set_Timeout        ; for Borderzone
1993 ff 35 03         BBS7 Version,_V4
1996 20 4a 28         JSR  z_show_status      ; only in version 3
1999 20 65 22 _V4     JSR  Print_Buffer       ; print prompt
199c a2 00            LDX  #0
199e 86 32            STX  Tok_Flag
19a0 20 2d 11         JSR  Header_X1
19a3 20 65 2a         JSR  Get_Line_X1        ; read input from user
19a6 a5 33            LDA  TO_Flag            ; timeout ?
19a8 d3 90 f9         LBNE Store_Zero
19ab c6 29            DEC  ParNum
19ad f0 09            BEQ  _skip              ; -> no parse buffer
19af a5 49            LDA  X2L
19b1 05 4a            ORA  X2H
19b3 f0 03            BEQ  _skip              ; -> no parse buffer
19b5 20 72 1d         JSR  Parse_Input
19b8 a5 35    _skip   LDA  Version
19ba c9 85            CMP  #$85
19bc 90 05            BCC  _return
19be a9 0d            LDA  #CR
19c0 4c 3c 13         JMP  Store_Byte
19c3 60       _return RTS
19c4          EndMod [z_read] Size = 52 [$34]

              ************************
              Module z_print_char ; e5
              ************************

19c4 a5 47            LDA  X1L
19c6 4c b7 21         JMP  Print_Formatted
19c9          EndMod [z_print_char] Size = 5 [$5]

              ***********************
              Module z_print_num ; e6
              ***********************

19c9 a2 47            LDX  #X1L
19cb a5 48            LDA  X1H
19cd 10 08            BPL  _pos
19cf 20 07 18         JSR  Sign_ZPX
19d2 a9 2d            LDA  #'-'
19d4 20 b7 21         JSR  Print_Formatted
19d7 a4 47    _pos    LDY  X1L
19d9 ab 48 00         LDZ  X1H
19dc 20 80 22         JSR  Format_YZ
19df a2 00            LDX  #0
19e1 b5 22    _loop   LDA  NUMBER,X
19e3 c9 20            CMP  #' '
19e5 f0 05            BEQ  _next
19e7 da               PHX
19e8 20 b7 21         JSR  Print_Formatted
19eb fa               PLX
19ec e8       _next   INX
19ed e0 05            CPX  #5
19ef 90 f0            BCC  _loop
19f1 60               RTS
19f2          EndMod [z_print_num] Size = 41 [$29]

              ********************
              Module z_random ; e7
              ********************

19f2 a5 47            LDA  X1L
19f4 85 49            STA  X2L
19f6 a5 48            LDA  X1H
19f8 85 4a            STA  X2H
19fa ad 1b d4         LDA  Random
19fd ae 12 d0         LDX  Raster
1a00 86 47            STX  X1L
1a02 29 7f            AND  #$7f
1a04 85 48            STA  X1H
1a06 20 e7 17         JSR  Divide_Signed
1a09 e3 45            INW  X0L
1a0b 4c 42 13         JMP  Store_X0
1a0e          EndMod [z_random] Size = 28 [$1c]

              ******************
              Module z_push ; e8
              ******************

1a0e a5 47            LDA  X1L
1a10 a4 48            LDY  X1H
1a12 4c 22 13         JMP  Push_AY
1a15          EndMod [z_push] Size = 7 [$7]

              ******************
              Module z_pull ; e9
              ******************

1a15 20 11 14         JSR  z_pop
1a18 4c 16 13         JMP  Put_Var
1a1b          EndMod [z_pull] Size = 6 [$6]

              **************************
              Module z_split_window ; ea
              **************************

1a1b 20 65 22         JSR  Print_Buffer
1a1e a6 47            LDX  X1L                ; new size
1a20 e0 19            CPX  #ROWS
1a22 b0 10            BCS  _return
1a24 86 34            STX  Upper_Size         ; update size
1a26 86 38            STX  Win_Top
1a28 a6 5b            LDX  Cursor_Row
1a2a e4 34            CPX  Upper_Size
1a2c b0 03            BCS  _set
1a2e 20 03 26         JSR  Window_Home
1a31 20 f0 25 _set    JSR Set_Screen_Pointer
1a34 60       _return RTS
1a35          EndMod [z_split_window] Size = 26 [$1a]

              ************************
              Module z_set_window ; eb
              ************************

1a35 20 65 22         JSR  Print_Buffer
1a38 a6 47            LDX  X1L                ; new active window
1a3a 8e ed 25         STX  Z_Active_Window
1a3d bd a4 2e         LDA  FG_Color,X
1a40 85 1b            STA  Colour
1a42 a9 00            LDA  #0
1a44 bc ee 25         LDY  Z_Active_Font,X
1a47 c0 03            CPY  #3
1a49 d0 02            BNE  _font
1a4b a9 80            LDA  #$80
1a4d 85 59    _font   STA Font_Sel
1a4f 8a               TXA
1a50 f0 07            BEQ  _lower

1a52 a9 00            LDA  #0                 ; window 1: upper
1a54 a6 34            LDX  Upper_Size
1a56 ca               DEX
1a57 80 04            BRA  _set

1a59 a5 34    _lower  LDA  Upper_Size         ; window 0: lower
1a5b a2 18            LDX  #ROWS-1

1a5d 85 38    _set    STA  Win_Top
1a5f 86 37            STX  Win_Bot
1a61 a0 00            LDY  #0
1a63 4c 07 26         JMP  Set_Row_Col
1a66          EndMod [z_set_window] Size = 49 [$31]

              **************************
              Module z_erase_window ; ed
              **************************

1a66 20 65 22         JSR  Print_Buffer
1a69 a6 47            LDX  X1L
1a6b f0 13            BEQ  _lower             ;  0: erase lower window
1a6d e0 ff            CPX  #-1                ; -1: unsplit
1a6f f0 1a            BEQ  _unspl
1a71 e0 fe            CPX  #-2                ; -2: clear screen
1a73 f0 23            BEQ  _clear
1a75 a2 00            LDX  #0                 ;  1: erase upper window
1a77 20 bf 2b _uloop  JSR  Erase_Row
1a7a e8               INX
1a7b e4 34            CPX Upper_Size
1a7d 90 f8            BCC  _uloop
1a7f 60               RTS

1a80 a6 34    _lower  LDX  Upper_Size
1a82 20 bf 2b _lloop  JSR  Erase_Row
1a85 e8               INX
1a86 e0 19            CPX  #ROWS
1a88 90 f8            BCC  _lloop
1a8a 60               RTS

1a8b a9 00    _unspl  LDA  #0
1a8d 85 34            STA  Upper_Size
1a8f 85 38            STA  Win_Top
1a91 8d ed 25         STA  Z_Active_Window
1a94 a9 18            LDA  #ROWS-1
1a96 85 37            STA  Win_Bot
1a98 4c 59 29 _clear  JMP  Clear_Screen

1a9b          EndMod [z_erase_window] Size = 53 [$35]

              ************************
              Module z_erase_line ; ee
              ************************

1a9b a6 47            LDX  X1L
1a9d e0 01            CPX  #1
1a9f d0 0b            BNE  _return
1aa1 a4 5a            LDY  Cursor_Col
1aa3 a9 20            LDA  #' '
1aa5 91 62    _loop   STA  (Scr_Adr),Y
1aa7 c8               INY
1aa8 c0 50            CPY  #COLS
1aaa 90 f9            BCC  _loop
1aac 60       _return RTS
1aad          EndMod [z_erase_line] Size = 18 [$12]

              ************************
              Module z_set_cursor ; ef
              ************************

              ; Input : X1 = new row position relative to window top
              ;         X2 = new column position
              ;         X3 = window (version>= 6)
              ;         the Z  cursor home is [1:1]
              ;         the OS cursor home is [0:0]

1aad a5 34            LDA  Upper_Size
1aaf 85 21            STA  MORE_Counter
1ab1 20 65 22         JSR  Print_Buffer
1ab4 a5 47            LDA  X1L
1ab6 3a               DEC  A
1ab7 18               CLC
1ab8 65 38            ADC  Win_Top
1aba aa               TAX
1abb a4 49            LDY  X2L
1abd 88               DEY
1abe 4c 07 26         JMP  Set_Row_Col
1ac1          EndMod [z_set_cursor] Size = 20 [$14]

              ************************
              Module z_get_cursor ; f0
              ************************

              ; Input : X1 = receiving word array
              ;         the Z  cursor home is [1:1]
              ;         the OS cursor home is [0:0]

1ac1 a9 00            LDA  #0
1ac3 a8               TAY
1ac4 91 47            STA  (X1L),Y            ; row high
1ac6 a5 5b            LDA  Cursor_Row
1ac8 1a               INC  A
1ac9 c8               INY                     ; Y = 1
1aca 91 47            STA  (X1L),Y            ; row low
1acc a9 00            LDA  #0
1ace c8               INY
1acf 91 47            STA  (X1L),Y            ; col high
1ad1 a5 5a            LDA  Cursor_Col
1ad3 1a               INC  A
1ad4 c8               INY                     ; Y = 1
1ad5 91 47            STA  (X1L),Y            ; col low
1ad7 60               RTS
1ad8          EndMod [z_get_cursor] Size = 23 [$17]

              *****************
              Module Reverse_On
              *****************

1ad8 a9 20            LDA  #REVERSE
1ada 85 14            STA  Attribute
1adc 60               RTS
1add          EndMod [Reverse_On] Size = 5 [$5]

              *******************
              Module Underline_On
              *******************

1add a9 80            LDA  #UNDERLINE
1adf 85 14            STA  Attribute
1ae1 60               RTS
1ae2          EndMod [Underline_On] Size = 5 [$5]

              **************
              Module Bold_On
              **************

1ae2 a9 40            LDA  #BOLD
1ae4 85 14            STA  Attribute
1ae6 60               RTS
1ae7          EndMod [Bold_On] Size = 5 [$5]

              ****************************
              Module z_set_text_style ; f1
              ****************************

              ; % 76543210 Z                C128
              ;       ^--- 8: fixed pitch   ignore (font is fixed anyway)
              ;        ^-- 4: Italic        Attribute = UNDERLINE
              ;         ^- 2: Bold          Attribute = BOLD
              ;          ^ 1: Reverse       Attribute = REVERSE
              ;            0: Normal        Attribute = 0

              ;       JSR Print_Buffer
              ;       LDA #'{'
              ;       JSR CHROUT
              ;       LDA X1L
              ;       ORA #'0'
              ;       JSR CHROUT
              ;       LDA #'}'
              ;       JSR CHROUT

1ae7 20 65 22         JSR  Print_Buffer
1aea a5 47            LDA  X1L
1aec 4a               LSR  A
1aed b0 e9            BCS  Reverse_On
1aef 4a               LSR  A
1af0 b0 f0            BCS  Bold_On
1af2 4a               LSR  A
1af3 b0 e8            BCS  Underline_On
1af5 a9 00            LDA  #0
1af7 85 14            STA  Attribute
1af9 60               RTS
1afa          EndMod [z_set_text_style] Size = 19 [$13]

              *************************
              Module z_buffer_mode ; f2
              *************************

1afa 20 65 22         JSR  Print_Buffer
1afd a5 47            LDA  X1L
1aff 8d ec 25         STA  Z_Buffer_Mode
1b02 60               RTS
1b03          EndMod [z_buffer_mode] Size = 9 [$9]

              ***************************
              Module z_output_stream ; f3
              ***************************

              ; X1 = stream number  3:  select memory
              ;                    -3:deselect memory
              ; X2 = table address
              ; X3 = width

1b03 20 65 22         JSR  Print_Buffer       ; flush buffer
1b06 a5 47            LDA  X1L                ; stream number
1b08 c9 fd            CMP  #-3                ; deselect memory stream ?
1b0a f0 19            BEQ  _close             ; -> do
1b0c c9 03            CMP  #3                 ; select memory stream ?
1b0e d0 14            BNE  _return             ; no -> return
1b10 a9 ff            LDA  #-1
1b12 8d 00 2d         STA  Z_Mem_Flag         ; open memory channel
1b15 18               CLC
1b16 a5 4a            LDA  X2H
1b18 69 2f            ADC  #>Z_HEADER
1b1a 85 5d            STA  Z_Mem_Base+1       ; Z_Mem_Base = TABLE
1b1c 85 5f            STA  Z_Mem_Ptr+1
1b1e a5 49            LDA  X2L
1b20 85 5c            STA  Z_Mem_Base
1b22 85 5e            STA  Z_Mem_Ptr          ; Z_Mem_Ptr = TABLE
1b24 60       _return RTS

              ; close memory channel
              ; store length of TABLE in first word of (Z_Mem_Base)

1b25 a0 01    _close  LDY  #1
1b27 38               SEC
1b28 a5 5e            LDA  Z_Mem_Ptr
1b2a e5 5c            SBC  Z_Mem_Base
1b2c 91 5c            STA  (Z_Mem_Base),Y
1b2e 88               DEY                     ; Y = 0
1b2f 8c 00 2d         STY  Z_Mem_Flag         ; close channel
1b32 a5 5f            LDA  Z_Mem_Ptr+1
1b34 e5 5d            SBC  Z_Mem_Base+1
1b36 91 5c            STA  (Z_Mem_Base),Y
1b38 60               RTS
1b39          EndMod [z_output_stream] Size = 54 [$36]

              **********
1b39          Error_Beep
              **********


              ************
              Module Click
              ************

1b39 a9 3c            LDA  #$3c
1b3b 8d 00 d4         STA  Voc1FreqLo
1b3e a9 32            LDA  #$32
1b40 8d 01 d4         STA  Voc1FreqHi
1b43 a9 fc            LDA  #$fc
1b45 85 a2            STA  Jiffy+2
1b47 a9 f0            LDA  #$f0
1b49 8d 06 d4         STA  Voc1SusRel
1b4c a9 8f            LDA  #$8f
1b4e 8d 18 d4         STA  FiltMode
1b51 a9 41            LDA  #$41
1b53 8d 04 d4         STA  Voc1Control
1b56 a5 a2    _wait   LDA  Jiffy+2
1b58 d0 fc            BNE  _wait
1b5a 8d 04 d4         STA  Voc1Control
1b5d a9 80            LDA  #$80
1b5f 8d 18 d4         STA  FiltMode
1b62 60               RTS
1b63          EndMod [Error_Beep] Size = 42 [$2a]

              **************************
              Module z_sound_effect ; f5
              **************************

              ; X1  = sound effect number
              ;       1: high pitched beep
              ;       2: low  pitched beep
              ; X2L = volume
              ; X2H = repeats
              ; X3  = routine to be called after finish

1b63 a6 47            LDX  X1L
1b65 ca               DEX
1b66 f0 d1            BEQ  Click
1b68 ca               DEX
1b69 f0 ce            BEQ  Error_Beep
1b6b 60               RTS
1b6c          EndMod [z_sound_effect] Size = 9 [$9]

              ***********************
              Module z_read_char ; f6
              ***********************

1b6c 20 f0 1c         JSR  Set_Timeout
1b6f 20 65 22         JSR  Print_Buffer
1b72 a5 34            LDA  Upper_Size
1b74 85 21            STA  MORE_Counter
1b76 20 94 28         JSR  Cursor_On
1b79 20 cb 28 _loop   JSR  Get_Character
1b7c c9 00            CMP  #0
1b7e f0 f9            BEQ  _loop
1b80 20 a4 28         JSR  Cursor_Off
1b83 c9 14            CMP  #DEL
1b85 d0 02            BNE  _exit
1b87 a9 08            LDA  #8
1b89 4c 3c 13 _exit   JMP  Store_Byte
1b8c          EndMod [z_read_char] Size = 32 [$20]

              ******************
              Module Set_Data_YA
              ******************

1b8c 84 09            STY  QD0
1b8e 85 0a            STA  QD1
1b90 a0 00            LDY  #0
1b92 84 0b            STY  QD2
1b94 60               RTS

              ************************
              Module z_scan_table ; f7
              ************************

              ; Input : X1 = search value
              ;         X2 = address of table
              ;         X3 = number of table entries
              ;         X4 = type (default = $82)

1b95 a5 4c            LDA  X3H
1b97 30 48            BMI  zst_fa             ; length  < 0 : false
1b99 05 4b            ORA  X3L
1b9b f0 44            BEQ  zst_fa             ; length == 0 : false

1b9d a5 29            LDA  ParNum
1b9f c9 04            CMP  #4                 ; type parameter given ?
1ba1 f0 04            BEQ  _all               ; -> yes
1ba3 a9 82            LDA  #$82               ; default: word table, size=2
1ba5 85 4d            STA  X4L                ; word/byte flag

1ba7 ff 4d 04 _all    BBS7 X4L,_addr          ; -> word
1baa a5 47            LDA  X1L
1bac 85 48            STA  X1H                ; byte to search

1bae a4 49    _addr   LDY  X2L                ; setup table address
1bb0 a5 4a            LDA  X2H
1bb2 20 8c 1b         JSR  Set_Data_YA

1bb5 a5 09    _loop   LDA  QD0                ; remember address
1bb7 85 45            STA  X0L
1bb9 a5 0a            LDA  QD1
1bbb 85 46            STA  X0H

1bbd 20 d4 27         JSR  Next_Datum         ; next table item high (or byte)
1bc0 c5 48            CMP  X1H                ; compare
1bc2 d0 0a            BNE  _next              ; -> no match
1bc4 7f 4d 20         BBR7 X4L,zst_tr         ; -> compare bytes
1bc7 20 d4 27         JSR  Next_Datum         ; next table item low
1bca c5 47            CMP  X1L                ; compare
1bcc f0 19            BEQ  zst_tr             ; -> match

1bce a5 4d    _next   LDA  X4L
1bd0 29 7f            AND  #$7f               ; length
1bd2 18               CLC
1bd3 65 45            ADC  X0L                ; QD = X0 + item length
1bd5 85 09            STA  QD0
1bd7 a9 00            LDA  #0
1bd9 65 46            ADC  X0H
1bdb 85 0a            STA  QD1
1bdd c3 4b            DEW  X3L                ; countdown
1bdf d0 d4            BNE  _loop

1be1 20 3a 13 zst_fa  JSR  Store_Zero         ; Store 0 and return false
1be4 4c 7d 13         JMP  Main_False

1be7 20 42 13 zst_tr  JSR  Store_X0           ; store X and return true
1bea 4c 89 13         JMP  Main_True
1bed          EndMod [z_scan_table] Size = 88 [$58]

              **********************
              Module z_tokenise ; fb
              **********************

              ;         X1 = text input buffer
              ;         X2 = parse buffer
              ;         X3 = dictionary
              ;         X4 = flag

1bed 20 2d 11         JSR  Header_X1
1bf0 a6 29            LDX  ParNum
1bf2 ca               DEX
1bf3 ca               DEX
1bf4 f3 7c 01         LBEQ  Parse_Input       ; standard dictionary
1bf7 ca               DEX
1bf8 86 32            STX  Tok_Flag     ; 0 or 1
1bfa a5 4b            LDA  X3L
1bfc a4 4c            LDY  X3H
1bfe 4c 78 1d         JMP  Parse_AY_Dict
1c01          EndMod [z_tokenise] Size = 20 [$14]

              *************************
              Module z_encode_text ; fc
              *************************

              ; Input : X1 = text buffer
              ;         X2 = length of word
              ;         X3 = start index
              ;         X4 = encoded text

1c01 20 2d 11         JSR  Header_X1
1c04 a9 00            LDA  #0
1c06 a2 09            LDX  #9                 ; word length
1c08 95 6d    _clear  STA  TEXT_WORD-1,X
1c0a ca               DEX
1c0b d0 fb            BNE  _clear

1c0d a4 4b            LDY  X3L                ; copy word from buffer
1c0f b1 47    _loop   LDA  (X1L),Y            ; to TEXT_WORD
1c11 da               PHX
1c12 5a               PHY
1c13 20 51 1e         JSR  Sep_All
1c16 7a               PLY
1c17 fa               PLX
1c18 b0 0c            BCS  _next
1c1a 95 6e            STA  TEXT_WORD,X
1c1c c8               INY
1c1d e8               INX
1c1e e4 39            CPX  Word_Length
1c20 b0 04            BCS  _next
1c22 e4 49            CPX  X2L
1c24 90 e9            BCC  _loop

1c26 20 e4 1f _next   JSR  Encode
1c29 18               CLC
1c2a a5 4e            LDA  X4H
1c2c 69 2f            ADC  #>Z_HEADER
1c2e 85 4e            STA  X4H
1c30 a4 36            LDY  Vocab_Length
1c32 88               DEY
1c33 b9 68 00 _copy   LDA  DICT_WORD,Y
1c36 91 4d            STA  (X4L),Y
1c38 88               DEY
1c39 10 f8            BPL  _copy
1c3b 60               RTS
1c3c          EndMod [z_encode_text] Size = 59 [$3b]

              ******************
              Module Clear_Table
              ******************

1c3c 20 2d 11         JSR  Header_X1
1c3f a0 00            LDY  #0                 ; Y = 0
1c41 a9 00    ClTa_10 LDA  #0                 ; A = 0
1c43 91 47            STA  (X1L),Y
1c45 c8               INY
1c46 d0 02            BNE  ClTa_20
1c48 e6 48            INC  X1H
1c4a c3 4b    ClTa_20 DEW  X3L
1c4c d0 f3            BNE  ClTa_10
1c4e 60               RTS
1c4f          EndMod [Clear_Table] Size = 19 [$13]

              ************************
              Module z_copy_table ; fd
              ************************

              ; Input : X1 = source
              ;         X2 = target
              ;         X3 = size

1c4f a5 49            LDA  X2L
1c51 05 4a            ORA  X2H
1c53 f0 e7            BEQ  Clear_Table        ; no copy
1c55 a5 4b            LDA  X3L
1c57 05 4c            ORA  X3H
1c59 f0 30            BEQ  _return            ; size = 0

1c5b a2 4b            LDX  #X3L
1c5d a5 4c            LDA  X3H
1c5f 10 05            BPL  _safe              ; -> safe copy
1c61 20 07 18         JSR  Sign_ZPX           ; make size positive
1c64 80 0a            BRA  _fwd               ; -> forced forward

1c66 a5 47    _safe   LDA  X1L
1c68 c5 49            CMP  X2L
1c6a a5 48            LDA  X1H
1c6c e5 4a            SBC  X2H
1c6e 90 1c            BCC  _bwd               ; -> (X1 < X2) backward

              ; forward copy (X1 may point to high memory)

1c70 a4 47    _fwd    LDY  X1L                ; data pointer = source
1c72 a5 48            LDA  X1H
1c74 20 8c 1b         JSR  Set_Data_YA

1c77 18               CLC
1c78 a5 4a            LDA  X2H
1c7a 69 2f            ADC  #>Z_HEADER
1c7c 85 4a            STA  X2H

1c7e 20 d4 27 _floop  JSR  Next_Datum         ; LDA (source)
1c81 a0 00            LDY  #0
1c83 91 49            STA  (X2L),Y            ; STA (target)
1c85 e3 49            INW  X2L                ; ++X2
1c87 c3 4b            DEW  X3L                ; --X3 (counter)
1c89 d0 f3            BNE  _floop             ; -> loop
1c8b 60       _return RTS

              ; backward copy

1c8c 18       _bwd    CLC                     ; set source end
1c8d a5 47            LDA  X1L
1c8f 65 4b            ADC  X3L
1c91 85 47            STA  X1L
1c93 a5 48            LDA  X1H
1c95 65 4c            ADC  X3H
1c97 69 2f            ADC  #>Z_HEADER
1c99 85 48            STA  X1H
1c9b 18               CLC                     ; set target end
1c9c a5 49            LDA  X2L
1c9e 65 4b            ADC  X3L
1ca0 85 49            STA  X2L
1ca2 a5 4a            LDA  X2H
1ca4 65 4c            ADC  X3H
1ca6 69 2f            ADC  #>Z_HEADER
1ca8 85 4a            STA  X2H
1caa a0 00            LDY  #0
1cac c3 47    _bloop  DEW  X1L                ; --X1
1cae c3 49            DEW  X2L                ; --X2
1cb0 b1 47            LDA  (X1L),Y
1cb2 91 49            STA  (X2L),Y            ; copy byte
1cb4 c3 4b            DEW  X3L                ; --X3
1cb6 d0 f4            BNE  _bloop             ; loop
1cb8 60               RTS
1cb9          EndMod [z_copy_table] Size = 106 [$6a]

              *************************
              Module z_print_table ; fe
              *************************

              ; Input : X1 = zscii text
              ;         X2 = width
              ;         X3 = height
              ;         X4 = skip

1cb9 20 65 22         JSR  Print_Buffer
1cbc a4 47            LDY  X1L                ; set text address
1cbe a5 48            LDA  X1H
1cc0 20 8c 1b         JSR  Set_Data_YA
1cc3 a5 29            LDA  ParNum
1cc5 c9 03            CMP  #3
1cc7 b0 04            BCS  _start
1cc9 a9 01            LDA  #1                 ; default height = 1
1ccb 85 4b            STA  X3L
1ccd 20 b0 2b _start  JSR  Save_Cursor
1cd0 20 b8 2b _rloop  JSR  Restore_Cursor
1cd3 a6 49            LDX  X2L                ; width
1cd5 20 d4 27 _cloop  JSR  Next_Datum
1cd8 20 bf 29         JSR  CHROUT
1cdb ca               DEX                     ; column countdown
1cdc d0 f7            BNE  _cloop
1cde e6 1d            INC  C_Save_Row         ; next row
1ce0 c6 4b            DEC  X3L                ; row countdown
1ce2 d0 ec            BNE  _rloop
1ce4 60               RTS
1ce5          EndMod [z_print_table] Size = 44 [$2c]

              *******************************
              Module z_check_argc ; opcode ff
              *******************************

1ce5 ad eb 25         LDA  Z_Arg_Count
1ce8 c5 47            CMP  X1L
1cea b3 9d f6         LBCS Main_True
1ced 4c 7d 13         JMP  Main_False
1cf0          EndMod [z_check_argc] Size = 11 [$b]

              ******************
              Module Set_Timeout
              ******************
1cf0 a0 00            LDY  #0
1cf2 84 30            STY  Timeout
1cf4 84 31            STY  Timeout+1
1cf6 a5 29            LDA  ParNum
1cf8 c9 03            CMP  #3
1cfa 90 29            BCC  _return
1cfc a5 4d            LDA  X4L                ; timeout routine
1cfe 8d 01 2d         STA  Z_Timeout
1d01 a5 4e            LDA  X4H
1d03 8d 02 2d         STA  Z_Timeout+1
1d06 a5 4b            LDA  X3L                ; timeout value
1d08 85 30            STA  Timeout            ; [1/10 seconds]
1d0a a6 4c            LDX  X3H
1d0c 86 31            STX  Timeout+1
1d0e eb 30 00         ROW  Timeout            ; * 2
1d11 65 30            ADC  Timeout
1d13 85 30            STA  Timeout
1d15 8a               TXA
1d16 65 31            ADC  Timeout+1
1d18 85 31            STA  Timeout+1          ; * 3
1d1a eb 30 00         ROW  Timeout            ; * 6 = Jiffies
1d1d 78               SEI
1d1e 84 a0            STY  Jiffy              ; reset clock
1d20 84 a1            STY  Jiffy+1
1d22 84 a2            STY  Jiffy+2
1d24 58               CLI
1d25 60       _return RTS
1d26          EndMod [Set_Timeout] Size = 54 [$36]

              ************
              Module Log_A
              ************
1d26 48               PHA
1d27 ad ed 25         LDA  Z_Active_Window
1d2a d0 21            BNE  _return
1d2c a9 7b            LDA  #'{'
1d2e 20 bf 29         JSR  CHROUT
1d31 68               PLA
1d32 48               PHA
1d33 20 80 2b         JSR  ASCII_Hex
1d36 48               PHA
1d37 8a               TXA
1d38 20 bf 29         JSR  CHROUT
1d3b 68               PLA
1d3c 20 bf 29         JSR  CHROUT
1d3f a9 7d            LDA  #'}'
1d41 20 bf 29         JSR  CHROUT
1d44 a5 5a            LDA  Cursor_Col
1d46 c9 4c            CMP  #76
1d48 90 03            BCC  _return
1d4a 20 67 29         JSR  Return_Screen
1d4d 68       _return PLA
1d4e 60               RTS
1d4f          EndMod [Log_A] Size = 41 [$29]

              *************
              Module Dump_A
              *************
1d4f 20 80 2b         JSR  ASCII_Hex
1d52 48               PHA
1d53 8a               TXA
1d54 20 bf 29         JSR  CHROUT
1d57 68               PLA
1d58 4c bf 29         JMP  CHROUT
1d5b          EndMod [Dump_A] Size = 12 [$c]

              ****************
              Module Dump_Word
              ****************
              ; Input: X = ZP address
1d5b a9 7b            LDA  #'{'
1d5d 20 bf 29         JSR  CHROUT
1d60 b9 01 00         LDA  1,Y
1d63 20 4f 1d         JSR  Dump_A
1d66 b9 00 00         LDA  0,Y
1d69 20 4f 1d         JSR  Dump_A
1d6c a9 7d            LDA  #'}'
1d6e 20 bf 29         JSR  CHROUT
1d71 60               RTS
1d72          EndMod [Dump_Word] Size = 23 [$17]

              ******************
              Module Parse_Input
              ******************

              ;         X1    = text input buffer
              ;         X1[0] = buffer size
              ;         X1[1] = string length (Version > 3)

              ;         X2    = parse buffer  (item size = 4)
              ;         X2[0] = buffer size   (max. 59 items)
              ;         X2[1] = buffer length (items)

              ;         X7L   = item[0] dictionary address high
              ;         X7H   = item[1] dictionary address low
              ;         X8L   = item[2] # of characters
              ;         X8H   = item[3] start of word in text buffer

              ;         X5L   = index to text buffer
              ;         X5H   = size of word (characters)
              ;         X6L   = X2[1] = items parsed
              ;         X6H   = X2[0] = parse buffer limit

1d72 ad 09 2f         LDA  h_dictionary_lo
1d75 ac 08 2f         LDY  h_dictionary_hi

              *************
1d78          Parse_AY_Dict
              *************

1d78 85 3e            STA  DPL
1d7a 84 3f            STY  DPH
1d7c 18               CLC
1d7d a5 4a            LDA  X2H                ; X2 += Header
1d7f 69 2f            ADC  #>Z_HEADER         ; parse buffer
1d81 85 4a            STA  X2H

              ; limit buffer capacity to 59 items

1d83 a0 00            LDY  #0
1d85 b1 49            LDA  (X2L),Y
1d87 f0 04            BEQ  Parse_10           ; -> use default
1d89 c9 3c            CMP  #60
1d8b 90 04            BCC  Parse_15           ; -> OK (1..59)
1d8d a9 3b    Parse_10  LDA #59
1d8f 91 49            STA  (X2L),Y            ; use default
1d91 85 52    Parse_15  STA X6H               ; copy of parse buffer limit
1d93 7f 35 05         BBR7 Version,Parse_17
1d96 c8               INY                     ; Y = 1
1d97 b1 47            LDA  (X1L),Y
1d99 85 1a            STA  Chars_Left         ; Version > 3
1d9b a0 02    Parse_17  LDY #2                ; Y = 2
1d9d 84 2a            STY  Parse_Index        ; start in parse buffer
1d9f ff 35 01         BBS7 Version,Parse_18
1da2 88               DEY                     ; start at 1 for Version = 3
1da3 84 4f    Parse_18  STY X5L               ; buffer index
1da5 a0 00            LDY  #0
1da7 84 51            STY  X6L                ; items parsed
1da9 84 50            STY  X5H                ; word size = 0

              ; parse loop for items (words or delimiters)

1dab a6 51    Parse_20  LDX X6L               ; items parsed
1dad e4 52            CPX  X6H                ; items max.
1daf b0 06            BCS  Parse_25           ; -> exceeded # of words
1db1 a5 1a            LDA  Chars_Left
1db3 05 50            ORA  X5H                ; word size
1db5 d0 06            BNE  Parse_30

1db7 a0 01    Parse_25  LDY #1                ; finish
1db9 8a               TXA
1dba 91 49            STA  (X2L),Y            ; items parsed
1dbc 60               RTS                     ; exit

              ; continue parsing word

1dbd a5 50    Parse_30  LDA X5H               ; word size
1dbf c5 39            CMP  Word_Length
1dc1 90 03            BCC  Parse_35           ; -> word length < max
1dc3 20 3b 1e         JSR  Skip_Surplus       ; skip to next delimiter

1dc6 a5 50    Parse_35  LDA X5H               ; word size
1dc8 d0 1d            BNE  Parse_45           ; -> search word in dictionary

1dca a2 08            LDX  #8                 ; clear Word buffer
1dcc 95 6e    Parse_40  STA TEXT_WORD,X
1dce ca               DEX
1dcf 10 fb            BPL  Parse_40

              ; not a word, is this character a delimiter ?

1dd1 a4 4f            LDY  X5L                ; buffer index
1dd3 84 56            STY  X7L+3              ; X8H = word position
1dd5 b1 47            LDA  (X1L),Y
1dd7 20 56 1e         JSR  Sep_Dict           ; dot, comma, quote
1dda b0 24            BCS  Parse_50           ; -> in dictionary
1ddc 20 74 1e         JSR  Sep_Std            ; standard separators
1ddf 90 06            BCC  Parse_45
1de1 c6 1a            DEC  Chars_Left         ; ignore ! or ?
1de3 e6 4f            INC  X5L                ; ++buffer index
1de5 d0 c4            BNE  Parse_20           ; always

1de7 a5 1a    Parse_45  LDA Chars_Left
1de9 f0 1d            BEQ  Parse_55
1deb a4 4f            LDY  X5L                ; buffer index
1ded b1 47            LDA  (X1L),Y
1def 20 51 1e         JSR  Sep_All            ; check all separators
1df2 b0 14            BCS  Parse_55
1df4 a6 50            LDX  X5H                ; word size
1df6 95 6e            STA  TEXT_WORD,X
1df8 c6 1a            DEC  Chars_Left
1dfa e6 50            INC  X5H                ; ++word size
1dfc e6 4f            INC  X5L                ; ++buffer index
1dfe 80 ab            BRA  Parse_20

1e00 85 6e    Parse_50  STA TEXT_WORD         ; word is a separator
1e02 c6 1a            DEC  Chars_Left
1e04 e6 50            INC  X5H                ; ++word size
1e06 e6 4f            INC  X5L                ; ++buffer index

              ; start parsing

1e08 a5 50    Parse_55  LDA X5H               ; word size
1e0a f0 9f            BEQ  Parse_20           ; -> nothing to parse
1e0c 85 55            STA  X7L+2              ; X8L = # of letters
1e0e 20 e4 1f         JSR  Encode             ; convert to packed format
1e11 20 8a 1e         JSR  Dictionary_Search  ; result -> X7
1e14 e6 51            INC  X6L                ; Inc # of items
1e16 a2 00            LDX  #0
1e18 86 50            STX  X5H                ; word size
1e1a a4 2a            LDY  Parse_Index
1e1c a5 32            LDA  Tok_Flag     ; 1 : store matches only
1e1e f0 0c            BEQ  Parse_60           ; -> store anyhow
1e20 a5 53            LDA  X7L
1e22 05 54            ORA  X7H
1e24 d0 06            BNE  Parse_60
1e26 c8               INY                     ; skip this entry
1e27 c8               INY                     ; no synonym replacement
1e28 c8               INY
1e29 c8               INY
1e2a d0 0a            BNE  Parse_70           ; 0 : Dict address hi
1e2c b5 53    Parse_60  LDA X7L,X             ; 1 : Dict address lo
1e2e 91 49            STA  (X2L),Y            ; 2 : # of letters
1e30 c8               INY                     ; 3 : text buffer position
1e31 e8               INX
1e32 e0 04            CPX  #4
1e34 90 f6            BCC  Parse_60
1e36 84 2a    Parse_70  STY Parse_Index       ; Parse_Index += 4
1e38 4c ab 1d         JMP  Parse_20
1e3b          EndMod [Parse_Input] Size = 201 [$c9]

              ************
1e3b          Skip_Surplus
              ************

1e3b a5 1a            LDA  Chars_Left
1e3d f0 11            BEQ  SkSu_Ret
1e3f a4 4f    SkSu_10 LDY  X5L                ; buffer index
1e41 b1 47            LDA  (X1L),Y
1e43 20 51 1e         JSR  Sep_All
1e46 b0 08            BCS  SkSu_Ret
1e48 e6 50            INC  X5H                ; word size
1e4a e6 4f            INC  X5L                ; buffer index
1e4c c6 1a            DEC  Chars_Left
1e4e d0 ef            BNE  SkSu_10
1e50 60       SkSu_Ret  RTS

              *******
1e51          Sep_All
              *******

              ; Input : (A) = character
              ; Output: C=1 is separator, C=0 is not

              ; check standard list and dictionary list

1e51 20 74 1e         JSR  Sep_Std
1e54 b0 1d            BCS  SeDi_Ret           ; -> is separator

              ********
1e56          Sep_Dict
              ********

              ; Input : (A) = character
              ; Output: C=1 is separator, C=0 is not

              ; typical list: , . "

1e56 48               PHA
1e57 8d 6b 1e         STA  SeDi_10+4          ; search character
1e5a ac 09 2f         LDY  h_dictionary_lo
1e5d ad 08 2f         LDA  h_dictionary_hi
1e60 20 8c 1b         JSR  Set_Data_YA
1e63 20 d4 27         JSR  Next_Datum
1e66 aa               TAX                     ; X = # of separators
1e67 20 d4 27 SeDi_10 JSR  Next_Datum
1e6a c9 20            CMP  #' '               ; modified !
1e6c f0 04            BEQ  SeDi_20            ; yes: return with C=1
1e6e ca               DEX
1e6f d0 f6            BNE  SeDi_10
1e71 18               CLC                     ; no : return with C=0
1e72 68       SeDi_20 PLA
1e73 60       SeDi_Ret  RTS

              *******
1e74          Sep_Std
              *******

              ; Input : (A) = character
              ; Output: C=1 is separator, C=0 is not

              ; standard list: ! ? , . CR SPACE

1e74 a2 05            LDX  #?Sep_Std_List-1   ; size of separator list
1e76 dd e5 25 SeSt_10 CMP  Sep_Std_List,X
1e79 f0 04            BEQ  SeSt_Ret           ; yes: return with C=1
1e7b ca               DEX
1e7c 10 f8            BPL  SeSt_10
1e7e 18               CLC                     ; no : return with C=0
1e7f 60       SeSt_Ret  RTS

              ****************
              Module Skip_Data
              ****************

              ; Input : A = # of bytes to skip
              ; Output: QD pointer updated

1e80 18               CLC
1e81 65 09            ADC  QD0
1e83 85 09            STA  QD0
1e85 90 02            BCC  _return
1e87 e3 0a            INW  QD1
1e89 60       _return RTS
1e8a          EndMod [Skip_Data] Size = 10 [$a]

              *****************
1e8a          Dictionary_Search
              *****************

              ; Input : DP = dictionary
              ;         RA = search token

1e8a a4 3e            LDY  DPL                ; start of dictionary
1e8c a5 3f            LDA  DPH
1e8e 20 8c 1b         JSR  Set_Data_YA

1e91 20 d4 27         JSR  Next_Datum         ; size of separator list
1e94 20 80 1e         JSR  Skip_Data          ; skip list
1e97 20 d4 27         JSR  Next_Datum         ; item size
1e9a 85 40            STA  DPI
1e9c 20 d4 27         JSR  Next_Datum         ; item count hi
1e9f 85 4e            STA  X4H
1ea1 20 d4 27         JSR  Next_Datum         ; item count lo
1ea4 85 4d            STA  X4L
1ea6 05 4e            ORA  X4H
1ea8 f0 36            BEQ  DiSe_70            ; -> empty dictionary
1eaa a5 4e            LDA  X4H
1eac 30 0d            BMI  DiSe_20            ; -> entries are unsorted

1eae 38               SEC
1eaf a9 00            LDA  #0                 ; positive countdown is sorted
1eb1 e5 4d            SBC  X4L                ; make count down negative
1eb3 85 4d            STA  X4L
1eb5 a9 00            LDA  #0
1eb7 e5 4e            SBC  X4H
1eb9 85 4e            STA  X4H

1ebb a5 09    DiSe_20 LDA  QD0                ; X7 = address of next item
1ebd 85 54            STA  X7H
1ebf a5 0a            LDA  QD1
1ec1 85 53            STA  X7L
1ec3 a2 00            LDX  #0                 ; X = token byte index
1ec5 20 d4 27 DiSe_30 JSR  Next_Datum
1ec8 e8               INX
1ec9 d5 67            CMP  DICT_WORD-1,X
1ecb d0 05            BNE  DiSe_50
1ecd e4 36            CPX  Vocab_Length
1ecf 90 f4            BCC  DiSe_30
1ed1 60               RTS                     ; -> match

1ed2 20 d4 27 DiSe_50 JSR  Next_Datum         ; skip to next item
1ed5 e8               INX
1ed6 e4 40            CPX  DPI                ; item_Size
1ed8 90 f8            BCC  DiSe_50

1eda e3 4d            INW  X4L                ; count up to zero
1edc d0 dd            BNE  DiSe_20

1ede a9 00            LDA  #0
1ee0 85 54    DiSe_70 STA  X7H                ; not found: return (X7) = 0
1ee2 85 53            STA  X7L
1ee4 60       DiSe_Ret  RTS


              ;                6789abcdef0123456789abcdef
              ;                --------------------------
              ;         .BYTE "abcdefghijklmnopqrstuvwxyz"
              ;         .BYTE "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
1ee5 00 0d 30 ZSCII_2 .BYTE "\0\r0123456789.,!?_#'\"/\\-:()"

              *********
1eff          Decode_YX
              *********

              ; print 5bit encoded text from address (Y/X)

1eff 84 09            STY  QD0
1f01 86 0a            STX  QD1
1f03 a9 00            LDA  #0
1f05 85 0b            STA  QD2

              ***********
1f07          Decode_Text
              ***********

              ;         LDA #'{'
              ;         JSR Print_Formatted
              ;         LDA QD2
              ;         JSR Dump_For
              ;         LDA QD1
              ;         JSR Dump_For
              ;         LDA QD0
              ;         JSR Dump_For
              ;         LDA #'}'
              ;         JSR Print_Formatted

1f07 a2 00            LDX  #0
1f09 86 08            STX  QDH
1f0b a2 00    DeTe_10 LDX  #0
1f0d 86 13            STX  Alphabet
1f0f 20 9e 1f DeTe_15 JSR  Get_Packed_Char
1f12 b0 d0            BCS  DiSe_Ret           ; return
1f14 d0 04            BNE  DeTe_20
1f16 a9 20            LDA  #' '               ; 0 : space
1f18 d0 24            BNE  DeTe_40
1f1a c9 04    DeTe_20 CMP  #4                 ; 1,2,3 : abbreviations
1f1c 90 38            BCC  DeTe_55
1f1e c9 06            CMP  #6                 ; shift 4:capital, 5:numeric
1f20 b0 04            BCS  DeTe_25
1f22 85 13            STA  Alphabet
1f24 90 e9            BCC  DeTe_15
1f26 a6 13    DeTe_25 LDX  Alphabet
1f28 e0 05            CPX  #5                 ; numeric
1f2a d0 08            BNE  DeTe_30
1f2c aa               TAX
1f2d bd df 1e         LDA  ZSCII_2-6,X
1f30 d0 0c            BNE  DeTe_40
1f32 f0 10            BEQ  DeTe_50

1f34 e0 04    DeTe_30 CPX  #4                 ; upper case
1f36 d0 04            BNE  DeTe_35
1f38 69 3a            ADC  #$3a               ; carry is set   from CPX
1f3a d0 02            BNE  DeTe_40
1f3c 69 5b    DeTe_35 ADC  #$5b               ; carry is clear from CPX
1f3e 20 b7 21 DeTe_40 JSR  Print_Formatted
1f41 4c 0b 1f         JMP  DeTe_10

1f44 20 9e 1f DeTe_50 JSR  Get_Packed_Char    ; 10 bit ZSCII
1f47 0a               ASL  A
1f48 0a               ASL  A
1f49 0a               ASL  A
1f4a 0a               ASL  A
1f4b 0a               ASL  A
1f4c 85 10            STA  LV0
1f4e 20 9e 1f         JSR  Get_Packed_Char
1f51 05 10            ORA  LV0
1f53 4c 3e 1f         JMP  DeTe_40

              ; process code for abbreviations (1,2,3) plus abbr. index

1f56 e9 00    DeTe_55 SBC  #0                 ; subtract 1 (C=0)
1f58 0a               ASL  A                  ; 0, 1, 2
1f59 0a               ASL  A
1f5a 0a               ASL  A
1f5b 0a               ASL  A
1f5c 0a               ASL  A
1f5d 0a               ASL  A
1f5e 85 12            STA  LV2                ; -> $00, $40, $80
1f60 20 9e 1f         JSR  Get_Packed_Char
1f63 0a               ASL  A
1f64 18               CLC
1f65 65 12            ADC  LV2                ; add offset
1f67 a8               TAY                     ; index to abbr. table

              ; push QD2, QD1, QD0, QDH, QDL for recursive call

1f68 a2 04            LDX  #4
1f6a b5 07    DeTe_60 LDA  QDL,X
1f6c 48               PHA
1f6d ca               DEX
1f6e 10 fa            BPL  DeTe_60

              ; recursive call of Decode_Text for abbreviation

1f70 18               CLC
1f71 ad 19 2f         LDA  h_abbreviations_lo
1f74 85 41            STA  A0L
1f76 ad 18 2f         LDA  h_abbreviations_hi
1f79 69 2f            ADC  #>Z_HEADER
1f7b 85 42            STA  A0H                ; (A0) = start of abbr. pointer
1f7d c8               INY
1f7e b1 41            LDA  (A0L),Y            ; address low
1f80 0a               ASL  A                  ; x 2
1f81 85 09            STA  QD0
1f83 88               DEY
1f84 b1 41            LDA  (A0L),Y            ; address high
1f86 2a               ROL  A                  ; x 2
1f87 85 0a            STA  QD1
1f89 a9 00            LDA  #0
1f8b 2a               ROL  A                  ; high mem
1f8c 85 0b            STA  QD2

              ; recursive call

1f8e 20 07 1f         JSR  Decode_Text

              ; pull QDL, QDH, QD0, QD1, QD2 after recursive call

1f91 a2 00            LDX  #0
1f93 68       DeTe_65 PLA
1f94 95 07            STA  QDL,X
1f96 e8               INX
1f97 e0 05            CPX  #5
1f99 90 f8            BCC  DeTe_65
1f9b 4c 0b 1f         JMP  DeTe_10
1f9e                  .SIZE [BLACK] Size = 8094 [$1f9e]
1f9e                  .SIZE [BLACK] Size = 8094 [$1f9e]

              ***************
1f9e          Get_Packed_Char
              ***************

1f9e a5 08            LDA  QDH
1fa0 f0 1c            BEQ  GPC_20             ; load next word
1fa2 c9 80            CMP  #%100 00000        ; EOS flag
1fa4 f0 3d            BEQ  GPC_Ret            ; return with C=1 : End-Of-String
1fa6 24 08            BIT  QDH                ; valid 2nd. char ?
1fa8 50 0a            BVC  GPC_10             ; goto  3rd. cahr
1faa 29 9f            AND  #%100 11111        ; save EOS clear bit 6
1fac 09 20            ORA  #%001 00000        ; make non zero
1fae 85 08            STA  QDH
1fb0 29 1f            AND  #%000 11111        ; extract data
1fb2 18               CLC
1fb3 60               RTS                     ; return with 2nd. char

1fb4 29 80    GPC_10  AND  #%100 00000        ; save EOS only
1fb6 85 08            STA  QDH
1fb8 a5 07            LDA  QDL
1fba 29 1f            AND  #%000 11111        ; extract 5 bit
1fbc 18               CLC
1fbd 60               RTS                     ; return with 3rd. char

1fbe 20 d4 27 GPC_20  JSR  Next_Datum
1fc1 aa               TAX                     ; x = first half
1fc2 29 03            AND  #%0000 0011        ; extract part of 2nd. char
1fc4 85 08            STA  QDH
1fc6 20 d4 27         JSR  Next_Datum
1fc9 85 07            STA  QDL
1fcb 0a               ASL  A
1fcc 26 08            ROL  QDH
1fce 0a               ASL  A
1fcf 26 08            ROL  QDH
1fd1 0a               ASL  A
1fd2 26 08            ROL  QDH
1fd4 8a               TXA
1fd5 29 80            AND  #%1000 0000        ; save EOS flag
1fd7 09 40            ORA  #%0100 0000        ; set valid 2nd. char flag
1fd9 05 08            ORA  QDH                ; add value
1fdb 85 08            STA  QDH                ; save 2nd. char

1fdd 8a               TXA
1fde 4a               LSR  A
1fdf 4a               LSR  A
1fe0 29 1f            AND  #%000 11111
1fe2 18               CLC
1fe3 60       GPC_Ret RTS                     ; return with 1st. char

              ******
1fe4          Encode
              ******

              ; The encode takes 9 ASCII characters (6 in version 3) and
              ; converts them to packed ZSCII. This routine is called from the parser
              ; only, which already converts uppercase to lowercase letters.
              ; Also the output length is restricted to 6 characters (4 in bersion 3)
              ; because this is the size of a dictionary entry.

              ; Input:  6-9 ASCII charcaters in TEXT_WORD
              ; Output: 4-6 Z     characters in DICT_WORD

1fe4 a0 00            LDY  #0                 ; TEXT_WORD[Y]
1fe6 a2 00            LDX  #0                 ; DICT_WORD[X]
1fe8 f0 0a            BEQ  Enco_30

1fea a9 05    Enco_10 LDA  #5                 ; void (numeric shift)
1fec 95 68    Enco_20 STA  DICT_WORD,X        ; store next ZSCII
1fee e8               INX
1fef e4 39            CPX  Word_Length
1ff1 b0 5b            BCS  Enco_70

1ff3 c8               INY
1ff4 b9 6e 00 Enco_30 LDA  TEXT_WORD,Y        ; get next ASCII char
1ff7 f0 f1            BEQ  Enco_10            ; insert void char

1ff9 c9 5b            CMP  #'Z'+1             ; (A-Z) upper range
1ffb b0 08            BCS  Enco_35
1ffd c9 41            CMP  #'A'               ; (A-Z) lower range
1fff 90 04            BCC  Enco_35
2001 e9 3b            SBC  #$3b               ; (A-Z) -> $06-$1f
2003 d0 e7            BNE  Enco_20            ; -> loop always

2005 c9 7b    Enco_35 CMP  #'z'+1             ; (a-z) upper range
2007 b0 08            BCS  Enco_40
2009 c9 61            CMP  #'a'               ; (a-z) lower range
200b 90 04            BCC  Enco_40
200d e9 5b            SBC  #$5b               ; (a-z) -> $06-$1f
200f d0 db            BNE  Enco_20            ; -> loop always

2011 8c e4 25 Enco_40 STY  L_Encode_Y
2014 8d e3 25         STA  L_Encode_A
2017 a9 05            LDA  #5
2019 95 68            STA  DICT_WORD,X
201b e8               INX
201c ad e3 25         LDA  L_Encode_A
201f a0 19            LDY  #25
2021 d9 e5 1e Enco_50 CMP  ZSCII_2,Y
2024 f0 20            BEQ  Enco_60            ; found ZSCII in table 3
2026 88               DEY
2027 d0 f8            BNE  Enco_50

2029 a9 06            LDA  #6                 ; shift to 10 bit char
202b 95 68            STA  DICT_WORD,X
202d e8               INX
202e ad e3 25         LDA  L_Encode_A
2031 4a               LSR  A
2032 4a               LSR  A
2033 4a               LSR  A
2034 4a               LSR  A
2035 4a               LSR  A
2036 29 03            AND  #3
2038 95 68            STA  DICT_WORD,X
203a e8               INX
203b ad e3 25         LDA  L_Encode_A
203e 29 1f            AND  #$1f
2040 ac e4 25         LDY  L_Encode_Y
2043 4c ec 1f         JMP  Enco_20

2046 98       Enco_60 TYA                     ; use index to table 3 as value
2047 ac e4 25         LDY  L_Encode_Y         ; restore read index
204a 69 05            ADC  #5                 ; add offset 6 (5 + carry)
204c d0 9e            BNE  Enco_20            ; loop always

204e a2 00    Enco_70 LDX  #0
2050 a0 00            LDY  #0
2052 b5 69    Enco_80 LDA  DICT_WORD+1,X
2054 0a               ASL  A
2055 0a               ASL  A
2056 0a               ASL  A
2057 0a               ASL  A
2058 36 68            ROL  DICT_WORD,X
205a 0a               ASL  A
205b 36 68            ROL  DICT_WORD,X
205d 15 6a            ORA  DICT_WORD+2,X
205f 48               PHA
2060 b5 68            LDA  DICT_WORD,X
2062 99 68 00         STA  DICT_WORD,Y
2065 68               PLA
2066 99 69 00         STA  DICT_WORD+1,Y
2069 e8               INX
206a e8               INX
206b e8               INX
206c c8               INY
206d c8               INY
206e e4 39            CPX  Word_Length
2070 90 e0            BCC  Enco_80
2072 b9 66 00         LDA  DICT_WORD-2,Y
2075 09 80            ORA  #$80               ; end of string flag
2077 99 66 00         STA  DICT_WORD-2,Y
207a 60               RTS

              *************
              Module A0_x_8
              *************

207b 85 41            STA  A0L
207d 86 42            STX  A0H                ; (A0) = object
207f 0a               ASL  A
2080 26 42            ROL  A0H                ; (A/A0H) = object *  2
2082 0a               ASL  A
2083 26 42            ROL  A0H                ; (A/A0H) = object *  4
2085 0a               ASL  A
2086 26 42            ROL  A0H                ; (A/A0H) = object *  8
2088 60               RTS
2089          EndMod [A0_x_8] Size = 14 [$e]

              ********************
              Module Object_Offset
              ********************

              ; V3 Address = (h_objects) + 53 + 9 * object

2089 ff 35 0f         BBS7 Version,_V4
208c a2 00            LDX  #0
208e 20 7b 20         JSR  A0_x_8
2091 65 41            ADC  A0L
2093 90 03            BCC  _label
2095 e6 42            INC  A0H                ; (A/A0H) = object *  9
2097 18               CLC
2098 69 35    _label  ADC  #53                ; V3 offset 53
209a 60               RTS

              ; V4 Address = (h_objects) + 112 + 14 * object

209b 20 7b 20 _V4     JSR  A0_x_8
209e 38               SEC
209f e5 41            SBC  A0L
20a1 48               PHA                     ; low  of  (object *  7)
20a2 a5 42            LDA  A0H
20a4 86 42            STX  A0H
20a6 e5 42            SBC  A0H
20a8 85 42            STA  A0H                ; high of  (object *  7)
20aa 68               PLA
20ab 0a               ASL  A
20ac 26 42            ROL  A0H                ; (A/A0H) = object * 14
20ae 69 70            ADC  #112               ; V4 offset 112
20b0 60               RTS
20b1          EndMod [Object_Offset] Size = 40 [$28]

              ********************
              Module Get_Object_X1
              ********************

20b1 a5 47            LDA  X1L
20b3 a6 48            LDX  X1H

              **************
20b5          Get_Object_Reg
              **************

              ; Compute address of object

              ; Version > 3:
              ; -----------------------------------------
              ; Address = (h_objects) + 112 + 14 * object
              ; Input : (A/X) = input  object id
              ;         Y     = object item
              ; Output: (A/X) = output object id
              ;         (A0L) = address

20b5 20 89 20         JSR  Object_Offset
20b8 90 03            BCC  _label
20ba e6 42            INC  A0H
20bc 18               CLC
20bd 6d 0b 2f _label  ADC  h_objects_lo
20c0 85 41            STA  A0L
20c2 a5 42            LDA  A0H
20c4 6d 0a 2f         ADC  h_objects_hi
20c7 69 2f            ADC  #>Z_HEADER
20c9 85 42            STA  A0H
20cb a2 00            LDX  #0                 ; object hi for V3
20cd 7f 35 04         BBR7 Version,_objlow
20d0 b1 41            LDA  (A0L),Y
20d2 aa               TAX                     ; object hi
20d3 c8               INY
20d4 b1 41    _objlow LDA  (A0L),Y            ; object lo
20d6 60               RTS
20d7          EndMod [Get_Object_X1] Size = 38 [$26]

              *********************
              Module First_Property
              *********************

              ; Find address of property table of object (X1)

              ; Input : (X1) = object ID
              ; Output: (A0) = pointer to property table after NAME
              ;          A   = ID of first property
              ;          Y   = 0

20d7 a0 07            LDY  #7                 ; version = 3 offset to property pointer
20d9 7f 35 02         BBR7 Version,_fips_1
20dc a0 0c            LDY  #12                ; version > 3 offset to property pointer
20de 20 b1 20 _fips_1 JSR  Get_Object_X1
20e1 ff 35 04         BBS7 Version,_fips_2
20e4 aa               TAX                     ; property pointer high
20e5 c8               INY
20e6 b1 41            LDA  (A0L),Y            ; property pointer low
20e8 85 41    _fips_2 STA  A0L                ; property table low
20ea 8a               TXA                     ; property table high
20eb 69 2f            ADC  #>Z_HEADER         ; C=0 from Get_Object
20ed 85 42            STA  A0H                ; (A0) = property table
20ef a0 00            LDY  #0                 ; offset to NAME property
20f1 b1 41            LDA  (A0L),Y            ; size of name (words)
20f3 0a               ASL  A                  ; size of name (bytes)
20f4 38               SEC                     ; add size + 1
20f5 65 41            ADC  A0L
20f7 85 41            STA  A0L
20f9 90 02            BCC  FiPr_10
20fb e6 42            INC  A0H
20fd b1 41    FiPr_10 LDA  (A0L),Y
20ff 25 2b            AND  Prop_Mask          ; A = property ID
2101 60               RTS
2102          EndMod [First_Property] Size = 43 [$2b]

              ********************
              Module Property_Size
              ********************

2102 7f 35 12         BBR7 Version,_V3
2105 b1 41            LDA  (A0L),Y
2107 10 07            BPL  _one
2109 c8               INY
210a b1 41            LDA  (A0L),Y            ; 2nd. size byte
210c c8               INY
210d 25 2b            AND  Prop_Mask
210f 60               RTS

2110 c8       _one    INY                     ; Y points after size
2111 0a               ASL  A                  ; bit 7 = length info
2112 0a               ASL  A                  ; carry = length info
2113 2a               ROL  A                  ; bit 0 = length info
2114 29 01            AND  #1
2116 60               RTS

2117 b1 41    _V3     LDA  (A0L),Y
2119 c8               INY
211a 4a               LSR  A
211b 4a               LSR  A
211c 4a               LSR  A
211d 4a               LSR  A
211e 4a               LSR  A
211f 60               RTS
2120          EndMod [Property_Size] Size = 30 [$1e]

              *************
2120          Next_Property
              *************

              ; use size info and point to next property (V3-V5)

              ; Input : (A0) = pointer to current property
              ; Output: (A0) = pointer to next property
              ;            Y = 0

2120 20 02 21         JSR  Property_Size
2123 18               CLC
2124 69 02            ADC  #2
2126 65 41            ADC  A0L
2128 85 41            STA  A0L
212a 90 02            BCC  NePr_20
212c e6 42            INC  A0H
212e a0 00    NePr_20 LDY  #0
2130 b1 41            LDA  (A0L),Y
2132 25 2b            AND  Prop_Mask
2134 60               RTS

              ********************
              Module Find_Property
              ********************

              ; search for property X2L of object X1

              ; Input : (X1)  = object   ID
              ;         (X2L) = property ID

              ; Output: Z=0 if property was not found
              ;         Z=1 if property was found
              ;             A = 0
              ;             Y = 0
              ;             C = 1 if separate length byte

2135 20 d7 20         JSR  First_Property     ; -> (A0) and Y = 0
2138 c5 49    _loop   CMP  X2L
213a f0 07            BEQ  _match
213c 90 0e            BCC  _return            ; -> not in table (Z=0)
213e 20 20 21         JSR  Next_Property
2141 80 f5            BRA  _loop
2143 18       _match  CLC
2144 7f 35 03         BBR7 Version,_ok
2147 b1 41            LDA  (A0L),Y            ; prepare pointer advancement
2149 0a               ASL  A                  ; C=1 for 2 byte header
214a a9 00    _ok     LDA  #0                 ; set zero flag
214c 60       _return RTS                     ; Z=1 success, Z=0 not found
214d          EndMod [Find_Property] Size = 24 [$18]

              *************
214d          Get_Attr_Addr
              *************

              ; Input
              ; -----
              ; X1L = object #
              ; X2L = flag   #
              ;
              ; Output
              ; ------
              ; (A0L),Y = Address of attribute
              ; (A)     = Attribute mask

214d 20 b1 20         JSR  Get_Object_X1
2150 a5 49            LDA  X2L                ; flag #
2152 4a               LSR  A
2153 4a               LSR  A
2154 4a               LSR  A
2155 a8               TAY                     ; offset = flag / 8
2156 a5 49            LDA  X2L
2158 29 07            AND  #7                 ; flag mod 8
215a aa               TAX
215b a9 80            LDA  #$80               ; flag 0
215d d0 01            BNE  gaa_02
215f 4a       gaa_01  LSR  A
2160 ca       gaa_02  DEX
2161 10 fc            BPL  gaa_01
2163 60               RTS

              ****************
              Module Dump_Code
              ****************

2164 a0 01            LDY  #1
2166 b9 02 00 _loop   LDA  Z_Code,Y
2169 20 80 2b         JSR  ASCII_Hex
216c 48               PHA
216d 8a               TXA
216e 20 bf 29         JSR  CHROUT
2171 68               PLA
2172 20 bf 29         JSR  CHROUT
2175 a9 20            LDA  #' '
2177 20 bf 29         JSR  CHROUT
217a 88               DEY
217b 10 e9            BPL  _loop
217d 60               RTS
217e          EndMod [Dump_Code] Size = 26 [$1a]


              **************
217e          INTERNAL_ERROR
              **************

217e 20 d3 2b         JSR  ASCII_TS
2181 8e 96 2e         STX  INTERR+7
2184 8d 97 2e         STA  INTERR+8
2187 20 12 22         JSR  z_new_line
218a 20 64 21         JSR  Dump_Code
                      Print(INTERR)
218d a9 8f            LDA  #<INTERR
218f a0 2e            LDY  #>INTERR
2191 a2 0a            LDX  #?INTERR
2193 20 3f 2b         JSR  PrintText

2196 a2 02            LDX  #2
2198 b5 00    INER_10 LDA  0,X
219a 9d 00 40         STA  $4000,X
219d e8               INX
219e d0 f8            BNE  INER_10
21a0 4c 32 14         JMP  z_quit

              ***************
21a3          Print_To_Status
              ***************

21a3 99 3c 03         STA  Z_STATUS,Y
21a6 c0 4f            CPY  #COLS-1
21a8 b0 02            BCS  PTS_01
21aa e6 2f            INC  Status_Col
21ac 60       PTS_01  RTS

              ****************
              Module Print_Mem
              ****************

21ad a0 02            LDY  #2
21af 91 5e            STA  (Z_Mem_Ptr),Y
21b1 e3 5e            INW  Z_Mem_Ptr
21b3 60               RTS
21b4          EndMod [Print_Mem] Size = 7 [$7]

              ****************
21b4          Print_Unbuffered
              ****************

21b4 4c bf 29         JMP  CHROUT

              **********************
              Module Print_Formatted
              **********************

21b7 7f 35 11         BBR7 Version,PrFo_10
21ba 2c 00 2d         BIT  Z_Mem_Flag
21bd 30 ee            BMI  Print_Mem          ; print to stream # 3
21bf ac ec 25         LDY  Z_Buffer_Mode
21c2 f0 f0            BEQ  Print_Unbuffered
21c4 ac ed 25         LDY  Z_Active_Window
21c7 d0 eb            BNE  Print_Unbuffered
21c9 f0 04            BEQ  PrFo_20
21cb a4 2f    PrFo_10 LDY  Status_Col         ; Version 3
21cd 10 d4            BPL  Print_To_Status
21cf c9 0d    PrFo_20 CMP  #CR
21d1 f0 3f            BEQ  z_new_line
21d3 c9 20            CMP  #' '               ; not printable ?
21d5 90 10            BCC  PrFo_25
21d7 a4 18            LDY  Charbuf_Ptr
21d9 99 00 02         STA  Charbuf,Y
21dc aa               TAX                     ; X = char
21dd 18               CLC
21de 98               TYA
21df 65 5a            ADC  Cursor_Col
21e1 c9 50            CMP  #COLS
21e3 b0 03            BCS  PrFo_30            ; -> buffer full: print row


21e5 e6 18            INC  Charbuf_Ptr
21e7 60       PrFo_25 RTS

21e8 a9 20    PrFo_30 LDA  #' '               ; scan backwards for blank
21ea 84 19            STY  Charbuf_End
21ec d9 00 02 PrFo_35 CMP  Charbuf,Y
21ef f0 05            BEQ  PrFo_40
21f1 88               DEY
21f2 d0 f8            BNE  PrFo_35
21f4 a4 19            LDY  Charbuf_End        ; no blanks found
21f6 84 18    PrFo_40 STY  Charbuf_Ptr        ; print line before Charbuf_Ptr
21f8 98               TYA
21f9 48               PHA                     ; save line break col
21fa 20 12 22         JSR  z_new_line         ; print line
21fd 68               PLA
21fe aa               TAX                     ; line break col
21ff a0 00            LDY  #0
2201 f0 07            BEQ  PrFo_50

2203 bd 00 02 PrFo_45 LDA  Charbuf,X          ; scroll rest of buffer
2206 99 00 02         STA  Charbuf,Y
2209 c8               INY
220a e4 19    PrFo_50 CPX  Charbuf_End
220c e8               INX
220d 90 f4            BCC  PrFo_45
220f 84 18            STY  Charbuf_Ptr
2211 60               RTS
2212          EndMod [Print_Formatted] Size = 91 [$5b]

              *******************************
              Module z_new_line ; opcode # bb
              *******************************

2212 e6 21            INC  MORE_Counter
2214 a6 21            LDX  MORE_Counter
2216 e0 19            CPX  #ROWS
2218 90 42            BCC  Terminate_Buffer
221a a5 34            LDA  Upper_Size
221c 85 21            STA  MORE_Counter
221e 20 83 23         JSR  Empty_Keyboard_Queue
2221 20 b0 2b         JSR  Save_Cursor
2224 a2 18            LDX  #ROWS-1
2226 a0 00            LDY  #0
2228 20 07 26         JSR  Set_Row_Col
222b a5 1b            LDA  Colour
222d 48               PHA
222e a5 14            LDA  Attribute
2230 48               PHA
2231 20 d8 1a         JSR  Reverse_On
2234 a9 07            LDA  #YELLOW
2236 85 1b            STA  Colour
                      Print(MORE)
2238 a9 78            LDA  #<MORE
223a a0 2d            LDY  #>MORE
223c a2 06            LDX  #?MORE
223e 20 3f 2b         JSR  PrintText

2241 68               PLA
2242 85 14            STA  Attribute
2244 68               PLA
2245 85 1b            STA  Colour
2247 20 e4 ff _wait   JSR  GETIN
224a aa               TAX
224b f0 fa            BEQ  _wait
224d 20 b8 2b         JSR  Restore_Cursor
                      Print(BLANKS)
2250 a9 5b            LDA  #<BLANKS
2252 a0 2e            LDY  #>BLANKS
2254 a2 0c            LDX  #?BLANKS
2256 20 3f 2b         JSR  PrintText

2259 20 b8 2b         JSR  Restore_Cursor
225c          EndMod [z_new_line] Size = 74 [$4a]

              ****************
225c          Terminate_Buffer
              ****************

225c a6 18            LDX  Charbuf_Ptr
225e a9 0d            LDA  #CR
2260 9d 00 02         STA  Charbuf,X
2263 e6 18            INC  Charbuf_Ptr

              ************
2265          Print_Buffer
              ************

2265 a5 18            LDA  Charbuf_Ptr
2267 f0 11            BEQ  PrBu_Ret           ; -> nothing to print
2269 a2 00            LDX  #0
226b bd 00 02 PrBu_10 LDA  Charbuf,X          ; flush buffer
226e 20 bf 29         JSR  CHROUT
2271 e8               INX
2272 e4 18            CPX  Charbuf_Ptr
2274 90 f5            BCC  PrBu_10
2276 a2 00            LDX  #0
2278 86 18            STX  Charbuf_Ptr
227a 60       PrBu_Ret  RTS

              *********************
              Module Format_Integer
              *********************

227b a4 45            LDY  X0L
227d ab 46 00         LDZ  X0H

              *********
2280          Format_YZ
              *********

2280 a2 00            LDX  #0
2282 a9 30    _loop   LDA  #'0'
2284 95 22            STA  NUMBER,X
2286 38       _sub    SEC
2287 98               TYA
2288 fd b5 22         SBC  FormLo,X
228b 48               PHA
228c 6b               TZA
228d fd b9 22         SBC  FormHi,X
2290 90 06            BCC  _next
2292 f6 22            INC  NUMBER,X
2294 4b               TAZ
2295 7a               PLY
2296 80 ee            BRA  _sub
2298 68       _next   PLA
2299 e8               INX
229a e0 04            CPX  #4
229c 90 e4            BCC  _loop
229e 98               TYA
229f 09 30            ORA  #'0'
22a1 85 26            STA  NUMBER+4
22a3 a0 20            LDY  #' '
22a5 a9 30            LDA  #'0'
22a7 a2 00            LDX  #0
22a9 d5 22    _blanks CMP  NUMBER,X
22ab d0 07            BNE  _return
22ad 94 22            STY  NUMBER,X
22af e8               INX
22b0 e0 04            CPX  #4
22b2 90 f5            BCC  _blanks
22b4 60       _return RTS

22b5 10       FormLo  .BYTE <10000
22b6 e8               .BYTE  <1000
22b7 64               .BYTE   <100
22b8 0a               .BYTE    <10
22b9 27       FormHi  .BYTE >10000
22ba 03               .BYTE  >1000
22bb 00               .BYTE   >100
22bc 00               .BYTE    >10
22bd          EndMod [Format_Integer] Size = 66 [$42]

              ********************
              Module Status_Number
              ********************

              ; This routine is used in version 3 stories
              ; Insert number (score, moves, time) into status line
              ; Imput : (A) = global variable
              ;         (Y) = status line column

22bd 5a               PHY
22be 20 09 13         JSR  Get_Global_Var
22c1 20 7b 22         JSR  Format_Integer
22c4 7a               PLY
22c5 a2 00            LDX  #0
22c7 b5 22    StNu_10 LDA  NUMBER,X
22c9 c9 20            CMP  #' '
22cb f0 04            BEQ  StNu_20
22cd 99 67 2e         STA  SCORE,Y
22d0 c8               INY
22d1 e8       StNu_20 INX
22d2 e0 05            CPX  #5
22d4 90 f1            BCC  StNu_10
22d6 60               RTS
22d7          EndMod [Status_Number] Size = 26 [$1a]

              *****************
              Module Print_Time
              *****************

22d7 a9 11            LDA  #$11               ; hours var
22d9 20 09 13         JSR  Get_Global_Var
22dc 20 7b 22         JSR  Format_Integer
22df a0 06            LDY  #STIME_COL
22e1 a5 25            LDA  NUMBER+3
22e3 99 83 2e         STA  STIME,Y
22e6 a5 26            LDA  NUMBER+4
22e8 99 84 2e         STA  STIME+1,Y

22eb a9 12            LDA  #$12               ; minutes var
22ed 20 09 13         JSR  Get_Global_Var
22f0 20 7b 22         JSR  Format_Integer
22f3 a0 06            LDY  #STIME_COL
22f5 a5 25            LDA  NUMBER+3
22f7 09 30            ORA  #'0'               ; blank -> '0'
22f9 99 86 2e         STA  STIME+3,Y
22fc a5 26            LDA  NUMBER+4
22fe 99 87 2e         STA  STIME+4,Y

2301 a2 00            LDX  #0
2303 bd 83 2e _loop   LDA  STIME,X
2306 9d 7f 03         STA  Z_STATUS+67,X
2309 e8               INX
230a e0 0c            CPX  #12
230c 90 f5            BCC  _loop
230e 60               RTS
230f          EndMod [Print_Time] Size = 56 [$38]

              ******************
              Module Print_Score
              ******************

230f a9 20            LDA  #' '
2311 a0 0b            LDY  #SCORE_COL+4
2313 99 67 2e _clr_sc STA  SCORE,Y            ; clear score
2316 88               DEY
2317 c0 07            CPY  #SCORE_COL
2319 d0 f8            BNE  _clr_sc
231b a9 11            LDA  #$11               ; score var
231d 20 bd 22         JSR  Status_Number      ; print score
2320 a9 20            LDA  #' '
2322 a0 1a            LDY  #MOVES_COL+4
2324 99 67 2e _clr_mv STA  SCORE,Y            ; clear score
2327 88               DEY
2328 c0 16            CPY  #MOVES_COL
232a d0 f8            BNE  _clr_mv
232c a9 12            LDA  #$12               ; moves var
232e 20 bd 22         JSR  Status_Number

2331 a2 00            LDX  #0
2333 bd 67 2e _loop   LDA  SCORE,X
2336 9d 70 03         STA  Z_STATUS+STAT_SCORE,X
2339 e8               INX
233a e0 1c            CPX  #COLS-STAT_SCORE
233c 90 f5            BCC  _loop
233e 60               RTS
233f          EndMod [Print_Score] Size = 48 [$30]

              *******************
              Module Print_Status
              *******************

233f 20 a9 2b         JSR  Select_Status_Window
2342 a9 07            LDA  #YELLOW
2344 85 1b            STA  Colour
2346 20 4d 29         JSR  Home_Screen
2349 20 d8 1a         JSR  Reverse_On
234c a9 3b            LDA  #<(Z_STATUS-1)
234e a0 03            LDY  #>(Z_STATUS-1)
2350 a2 50            LDX  #COLS
2352 20 3f 2b         JSR  PrintText
2355 4c 9a 2b         JMP  Select_Text_Window
2358          EndMod [Print_Status] Size = 25 [$19]

              ******************
              Module z_extension
              ******************
2358 68               PLA                     ; remove return address
2359 68               PLA
235a 20 0e 28         JSR  Next_Instruction   ; extendedcode
235d 85 02            STA  Z_Code
235f 20 0e 28         JSR  Next_Instruction   ; operand type
2362 20 bb 12         JSR  Load_4_Operands
2365 a5 02            LDA  Z_Code
2367 29 1f            AND  #$1f
2369 c9 0b            CMP  #$0b
236b b0 08            BCS  z_error12
236d 0a               ASL  A
236e aa               TAX
236f 23 7a 12         JSR  (opcodes_ext,X)
2372 4c 35 11         JMP  PC_LOOP
              z_error12 ERROR(12)
2375 a9 0c            LDA  #12
2377 4c 7e 21         JMP  INTERNAL_ERROR

237a          EndMod [z_extension] Size = 34 [$22]


              ******************
              Module z_save_undo
              ******************

237a a9 ff            LDA  #-1
237c aa               TAX
237d 4c 3e 13         JMP  Store_AX
2380          EndMod [z_save_undo] Size = 6 [$6]

              *********************
              Module z_restore_undo
              *********************

2380 4c 3a 13         JMP Store_Zero
2383          EndMod [z_restore_undo] Size = 3 [$3]

              ********************
2383          Empty_Keyboard_Queue
              ********************

2383 20 e4 ff         JSR  GETIN
2386 d0 fb            BNE  Empty_Keyboard_Queue
2388 60               RTS

              ***********
2389          Decode_Unit
              ***********
2389 c9 30            CMP  #'0'
238b b0 03            BCS  DeUn_10
238d 8a               TXA                     ; one digit
238e d0 06            BNE  DeUn_20
2390 e0 31    DeUn_10 CPX  #'1'
2392 d0 02            BNE  DeUn_20
2394 69 09            ADC  #9                 ; two digits 10 - 15
2396 29 0f    DeUn_20 AND  #15
2398 60               RTS


              ***********
2399          Unit_Dialog
              ***********

2399 a2 03            LDX  #<Unit_Buf
239b a0 2d            LDY  #>Unit_Buf
239d 20 3a 2a         JSR  Got_Line
23a0 ae 04 2d         LDX  Unit_Text          ; 10
23a3 ad 05 2d         LDA  Unit_Text+1        ;  1
23a6 20 89 23         JSR  Decode_Unit
23a9 85 2e            STA  Save_Unit
23ab 60               RTS

              ***************
23ac          Wait_for_Return
              ***************

23ac a9 1e            LDA  #<PRESSRET
23ae a0 2d            LDY  #>PRESSRET
23b0 a2 1c            LDX  #[SAVEUNIT-PRESSRET]
23b2 20 3f 2b         JSR  PrintText
23b5 20 83 23         JSR  Empty_Keyboard_Queue
23b8 20 cb 28 wfret_10  JSR Get_Character
23bb c9 0d            CMP  #CR
23bd f0 05            BEQ  wfret_99
23bf 20 39 1b         JSR  Error_Beep
23c2 80 f4            BRA  wfret_10
23c4 60       wfret_99  RTS

              ***********
23c5          File_Dialog
              ***********

23c5 a2 07            LDX  #<File_Buf
23c7 a0 2d            LDY  #>File_Buf
23c9 4c 3a 2a         JMP  Got_Line

              ****************
23cc          Read_Disk_Status
              ****************
23cc 8a               TXA
23cd 48               PHA
23ce a5 ba            LDA  FA
23d0 20 b4 ff         JSR  TALK
23d3 a9 6f            LDA  #$6f
23d5 20 96 ff         JSR  TKSA
23d8 a0 00            LDY  #0
23da 84 90            STY  IO_STATUS
23dc 20 a5 ff RDS_10  JSR  ACPTR              ; read status
23df a6 90            LDX  IO_STATUS
23e1 d0 0f            BNE  RDS_30
23e3 99 3c 03         STA  DSTATUS,Y
23e6 c9 20            CMP  #' '
23e8 90 05            BCC  RDS_20
23ea c8               INY
23eb c0 28            CPY  #40
23ed 90 ed            BCC  RDS_10
23ef 20 ab ff RDS_20  JSR  UNTLK              ; close channel
23f2 a9 0d    RDS_30  LDA  #CR
23f4 99 3c 03         STA  DSTATUS,Y
23f7 a9 00            LDA  #0
23f9 99 3d 03         STA  DSTATUS+1,Y
23fc 68               PLA
23fd aa               TAX
23fe ad 3c 03         LDA  DSTATUS
2401 29 0f            AND  #15                ; return with 1st. value
2403 60               RTS

              **********
2404          z_ext_save
              **********
2404 20 12 24         JSR  Save_Game
2407 a9 01            LDA  #1
2409 4c 3c 13         JMP  Store_Byte
              ******
240c          z_save
              ******

240c 20 12 24         JSR  Save_Game
240f 4c 89 13         JMP  Main_True

              ****************
              Module Save_Game
              ****************
                      Print(SAVEUNIT)
2412 a9 3a            LDA  #<SAVEUNIT
2414 a0 2d            LDY  #>SAVEUNIT
2416 a2 0d            LDX  #?SAVEUNIT
2418 20 3f 2b         JSR  PrintText

241b 20 99 23         JSR  Unit_Dialog
                      Print(SAVEFILE)
241e a9 47            LDA  #<SAVEFILE
2420 a0 2d            LDY  #>SAVEFILE
2422 a2 0d            LDX  #?SAVEFILE
2424 20 3f 2b         JSR  PrintText

2427 20 c5 23         JSR  File_Dialog

242a ad 02 2f         LDA  Z_HEADER+2         ; save config
242d 8d 20 04         STA  Z_VAR+$20
2430 ad 03 2f         LDA  Z_HEADER+3
2433 8d 21 04         STA  Z_VAR+$21
2436 a2 03            LDX  #3
2438 b5 3a    WG_05   LDA  z_stack_ptr,X      ; save stack pointer
243a 9d 22 04         STA  Z_VAR+$22,X        ; and  frame pointer
243d ca               DEX
243e 10 f8            BPL  WG_05
2440 a2 02            LDX  #2
2442 b5 04    WG_10   LDA  QI0,X              ; save IP
2444 9d 26 04         STA  Z_VAR+$26,X
2447 ca               DEX
2448 10 f8            BPL  WG_10
244a e8               INX                     ; X = 0
244b 86 90            STX  IO_STATUS          ; clear status
244d a5 2e            LDA  Save_Unit
244f 85 ba            STA  FA
2451 20 b1 ff         JSR  LISTEN             ; open Pos,Device,3
2454 a9 f3            LDA  #$f3
2456 20 93 ff         JSR  SECOND
2459 a0 00            LDY  #0
245b b9 08 2d WG_20   LDA  File_Text,Y
245e c9 20            CMP  #' '
2460 90 0c            BCC  WG_30
2462 c9 61            CMP  #'a'
2464 90 02            BCC  WG_25
2466 e9 20            SBC  #$20
2468 20 a8 ff WG_25   JSR  CIOUT
246b c8               INY
246c d0 ed            BNE  WG_20

246e a9 2c    WG_30   LDA  #','
2470 20 a8 ff         JSR  CIOUT
2473 a9 57            LDA  #'W'
2475 20 a8 ff         JSR  CIOUT
2478 20 ae ff         JSR  UNLSN
247b a5 90            LDA  IO_STATUS
247d d0 32            BNE  WG_Err

247f a5 ba            LDA  FA
2481 20 b1 ff         JSR  LISTEN
2484 a9 63            LDA  #$63
2486 20 93 ff         JSR  SECOND
2489 a9 04            LDA  #>Z_VAR            ; Save variables & stack
248b 85 0d            STA  RAMD+1
248d a2 04            LDX  #>[Z_STACK_HI - Z_VAR]; # of blocks
248f 20 c3 24 WG_40   JSR  Write_Block
2492 a5 90            LDA  IO_STATUS
2494 d0 1b            BNE  WG_Err
2496 ca               DEX
2497 d0 f6            BNE  WG_40
2499 a9 2f            LDA  #>Z_HEADER
249b 85 0d            STA  RAMD+1
249d ae 0e 2f         LDX  h_dynamic_size_hi
24a0 e8               INX                     ; # of blocks
24a1 20 c3 24 WG_50   JSR  Write_Block
24a4 a5 90            LDA  IO_STATUS
24a6 d0 09            BNE  WG_Err
24a8 ca               DEX
24a9 d0 f6            BNE  WG_50
24ab 20 ae ff         JSR  UNLSN
24ae 4c 3a 2c         JMP  Close_File

24b1 20 ae ff WG_Err  JSR  UNLSN
24b4 20 cc 23         JSR  Read_Disk_Status
                      Print(DSTATUS)
24b7 a9 3c            LDA  #<DSTATUS
24b9 a0 03            LDY  #>DSTATUS
24bb a2 00            LDX  #?DSTATUS
24bd 20 3f 2b         JSR  PrintText

24c0 4c 3a 2c         JMP  Close_File
24c3          EndMod [Save_Game] Size = 177 [$b1]

              ***********
24c3          Write_Block
              ***********

24c3 a0 00            LDY  #0
24c5 84 45            STY  X0L
24c7 84 90            STY  IO_STATUS
24c9 b1 0c    WrBl_10 LDA  (RAMD),Y
24cb 20 a8 ff         JSR  CIOUT
24ce c8               INY
24cf d0 f8            BNE  WrBl_10
24d1 e6 0d            INC  RAMD+1
24d3 a9 2e            LDA  #'.'
24d5 4c bf 29         JMP  CHROUT

              *********
24d8          z_restore
              *********

24d8 20 e6 24         JSR  Restore_Game
24db 4c 89 13         JMP  Main_True

              *************
24de          z_ext_restore
              *************

24de 20 e6 24         JSR  Restore_Game
24e1 a9 02            LDA  #2
24e3 4c 3c 13         JMP  Store_Byte

              *******************
              Module Restore_Game
              *******************

                      Print(LOADUNIT)
24e6 a9 54            LDA  #<LOADUNIT
24e8 a0 2d            LDY  #>LOADUNIT
24ea a2 12            LDX  #?LOADUNIT
24ec 20 3f 2b         JSR  PrintText

24ef 20 99 23         JSR  Unit_Dialog
                      Print(LOADFILE)
24f2 a9 66            LDA  #<LOADFILE
24f4 a0 2d            LDY  #>LOADFILE
24f6 a2 12            LDX  #?LOADFILE
24f8 20 3f 2b         JSR  PrintText

24fb 20 c5 23         JSR  File_Dialog

24fe a2 1f            LDX  #$1f               ; Save local variables
2500 bd 00 04 _saveloc  LDA Z_VAR,X           ; to stack bottom -
2503 9d 00 02         STA  Charbuf,X          ; if restoring fails
2506 ca               DEX                     ; we can retrieve them
2507 10 f7            BPL  _saveloc
2509 a5 2e            LDA  Save_Unit
250b 85 ba            STA  FA
250d 20 b1 ff         JSR  LISTEN             ; open Pos,Unit,3
2510 a9 f3            LDA  #$f3
2512 20 93 ff         JSR  SECOND
2515 a0 00            LDY  #0
2517 b9 08 2d _fn_loop  LDA File_Text,Y
251a c9 20            CMP  #' '
251c 90 0c            BCC  _fn_done
251e c9 61            CMP  #'a'
2520 90 02            BCC  _no_conv
2522 e9 20            SBC  #$20               ; convert to lower case
2524 20 a8 ff _no_conv  JSR CIOUT
2527 c8               INY
2528 10 ed            BPL  _fn_loop
252a 20 ae ff _fn_done  JSR UNLSN

              ; Check drive error channel

252d a5 2e            LDA  Save_Unit
252f 85 ba            STA  FA
2531 20 b4 ff         JSR  TALK
2534 a9 63            LDA  #$63
2536 20 96 ff         JSR  TKSA
2539 a9 04            LDA  #>Z_VAR
253b 85 0d            STA  RAMD+1
253d 20 9e 25         JSR  Read_Block         ; Read Z_VAR
2540 ad 20 04         LDA  Z_VAR+$20
2543 cd 02 2f         CMP  Z_HEADER+2         ; correct version ?
2546 d0 08            BNE  _cancel            ; -> nope
2548 ad 21 04         LDA  Z_VAR+$21
254b cd 03 2f         CMP  Z_HEADER+3
254e f0 11            BEQ  _ver_ok            ; OK -> continue restoring
2550 a2 1f    _cancel LDX  #$1f               ; Restore local variables
2552 bd 00 02 _resloop  LDA Charbuf,X         ; and abort restoring
2555 9d 00 04         STA  Z_VAR,X
2558 ca               DEX
2559 10 f7            BPL  _resloop
255b 20 51 2b         JSR  Reset_Screen
255e 4c 7d 13         JMP  Main_False

2561 ad 10 2f _ver_ok LDA  h_flags_hi         ; save flags
2564 48               PHA
2565 ad 11 2f         LDA  h_flags_lo
2568 48               PHA

2569 a3 03            LDZ  #>[Z_STACK_HI - Z_STACK_LO] ; stack pages
256b 20 9e 25 _st_loop  JSR Read_Block
256e 3b               DEZ
256f d0 fa            BNE  _st_loop

2571 a9 2f            LDA  #>Z_HEADER
2573 85 0d            STA  RAMD+1
2575 ab 0e 2f         LDZ  h_dynamic_size_hi
2578 1b               INZ                     ; # of blocks
2579 20 9e 25 _hd_loop  JSR Read_Block
257c 3b               DEZ
257d d0 fa            BNE  _hd_loop

257f 68               PLA                     ; restore flags
2580 8d 11 2f         STA  h_flags_lo
2583 68               PLA
2584 8d 10 2f         STA  h_flags_hi

2587 a2 03            LDX  #3
2589 bd 22 04 _stack  LDA  Z_VAR+$22,X
258c 95 3a            STA  z_stack_ptr,X
258e ca               DEX
258f 10 f8            BPL  _stack

2591 a2 02            LDX  #2
2593 bd 26 04 _PC     LDA  Z_VAR+$26,X
2596 95 04            STA  QI0,X
2598 ca               DEX
2599 10 f8            BPL  _PC
259b 20 ab ff         JSR  UNTLK              ; fall through
259e          EndMod [Restore_Game] Size = 184 [$b8]


              *****************
              Module Read_Block
              *****************

259e a0 00            LDY  #0
25a0 84 90            STY  IO_STATUS
25a2 20 a5 ff _loop   JSR  ACPTR
25a5 91 0c            STA  (RAMD),Y
25a7 c8               INY
25a8 d0 f8            BNE  _loop
25aa e6 0d            INC  RAMD+1
25ac a9 2e            LDA  #'.'
25ae 4c bf 29         JMP  CHROUT
25b1          EndMod [Read_Block] Size = 19 [$13]


              ********
              * DATA *
              ********

25b1 00       Row_Lo  .BYTE <[SCREEN]
25b2 50               .BYTE <[SCREEN +  1 * COLS]
25b3 a0               .BYTE <[SCREEN +  2 * COLS]
25b4 f0               .BYTE <[SCREEN +  3 * COLS]
25b5 40               .BYTE <[SCREEN +  4 * COLS]
25b6 90               .BYTE <[SCREEN +  5 * COLS]
25b7 e0               .BYTE <[SCREEN +  6 * COLS]
25b8 30               .BYTE <[SCREEN +  7 * COLS]
25b9 80               .BYTE <[SCREEN +  8 * COLS]
25ba d0               .BYTE <[SCREEN +  9 * COLS]
25bb 20               .BYTE <[SCREEN + 10 * COLS]
25bc 70               .BYTE <[SCREEN + 11 * COLS]
25bd c0               .BYTE <[SCREEN + 12 * COLS]
25be 10               .BYTE <[SCREEN + 13 * COLS]
25bf 60               .BYTE <[SCREEN + 14 * COLS]
25c0 b0               .BYTE <[SCREEN + 15 * COLS]
25c1 00               .BYTE <[SCREEN + 16 * COLS]
25c2 50               .BYTE <[SCREEN + 17 * COLS]
25c3 a0               .BYTE <[SCREEN + 18 * COLS]
25c4 f0               .BYTE <[SCREEN + 19 * COLS]
25c5 40               .BYTE <[SCREEN + 20 * COLS]
25c6 90               .BYTE <[SCREEN + 21 * COLS]
25c7 e0               .BYTE <[SCREEN + 22 * COLS]
25c8 30               .BYTE <[SCREEN + 23 * COLS]
25c9 80               .BYTE <[SCREEN + 24 * COLS]

25ca 08       Row_Hi  .BYTE >[SCREEN]
25cb 08               .BYTE >[SCREEN +  1 * COLS]
25cc 08               .BYTE >[SCREEN +  2 * COLS]
25cd 08               .BYTE >[SCREEN +  3 * COLS]
25ce 09               .BYTE >[SCREEN +  4 * COLS]
25cf 09               .BYTE >[SCREEN +  5 * COLS]
25d0 09               .BYTE >[SCREEN +  6 * COLS]
25d1 0a               .BYTE >[SCREEN +  7 * COLS]
25d2 0a               .BYTE >[SCREEN +  8 * COLS]
25d3 0a               .BYTE >[SCREEN +  9 * COLS]
25d4 0b               .BYTE >[SCREEN + 10 * COLS]
25d5 0b               .BYTE >[SCREEN + 11 * COLS]
25d6 0b               .BYTE >[SCREEN + 12 * COLS]
25d7 0c               .BYTE >[SCREEN + 13 * COLS]
25d8 0c               .BYTE >[SCREEN + 14 * COLS]
25d9 0c               .BYTE >[SCREEN + 15 * COLS]
25da 0d               .BYTE >[SCREEN + 16 * COLS]
25db 0d               .BYTE >[SCREEN + 17 * COLS]
25dc 0d               .BYTE >[SCREEN + 18 * COLS]
25dd 0d               .BYTE >[SCREEN + 19 * COLS]
25de 0e               .BYTE >[SCREEN + 20 * COLS]
25df 0e               .BYTE >[SCREEN + 21 * COLS]
25e0 0e               .BYTE >[SCREEN + 22 * COLS]
25e1 0f               .BYTE >[SCREEN + 23 * COLS]
25e2 0f               .BYTE >[SCREEN + 24 * COLS]

25e3 00       L_Encode_A  .BYTE 0             ;
25e4 00       L_Encode_Y  .BYTE 0             ;

              ; data for separators / delimiters in parsing

25e5 21 3f 2c Sep_Std_List    .BYTE "!?,.\r " ; built in standard
25eb 00       Z_Arg_Count     .BYTE 0         ; argument count
25ec 01       Z_Buffer_Mode   .BYTE 1         ; output buffering on or off
25ed 00       Z_Active_Window .BYTE 0
25ee 00 00    Z_Active_Font   .BYTE 0,0

              ******************************
              * Cursor, Windows and Screen *
              ******************************

              ******************
25f0          Set_Screen_Pointer
              ******************

25f0 a6 5b            LDX  Cursor_Row

              ********************
25f2          Set_Screen_Pointer_X
              ********************

25f2 bd b1 25         LDA  Row_Lo,X
25f5 85 62            STA  Scr_Adr
25f7 85 64            STA  Col_Adr
25f9 bd ca 25         LDA  Row_Hi,X
25fc 85 63            STA  Scr_Adr+1
25fe 29 07            AND  #7
2600 85 65            STA  Col_Adr+1
2602 60               RTS


              ***********
2603          Window_Home
              ***********

2603 a6 34            LDX  Upper_Size
2605 a0 00            LDY  #0

              ***********
2607          Set_Row_Col
              ***********

              ; Input : X = screen row    (0 .. 24)
              ;         Y = screen column (0 .. 79)

2607 e0 19            CPX  #ROWS
2609 90 02            BCC  SRC_10
260b a2 18            LDX  #ROWS-1
260d c0 50    SRC_10  CPY  #COLS
260f 90 02            BCC  SRC_20
2611 a0 4f            LDY  #COLS-1

2613 86 5b    SRC_20  STX  Cursor_Row
2615 84 5a            STY  Cursor_Col
2617 20 f0 25         JSR  Set_Screen_Pointer

              ***********
261a          Get_Row_Col
              ***********

              ; Output: X = screen row    (0 .. 24)
              ;         Y = screen column (0 .. 79)

261a a6 5b            LDX  Cursor_Row
261c a4 5a            LDY  Cursor_Col
261e 60               RTS

              *********
261f          Info_Size
              *********
261f 5a               PHY
2620 20 7b 22         JSR  Format_Integer
2623 7a               PLY
2624 a2 01            LDX  #1
2626 b5 22    InSi_10 LDA  NUMBER,X
2628 99 ef 2d         STA  InfoPro+21,Y
262b c8               INY
262c e8               INX
262d e0 05            CPX  #5
262f 90 f5            BCC  InSi_10
2631 60               RTS

              *******************
              Module Screen_Setup
              *******************

2632 a9 0f            LDA  #$0F               ; colour RAM: $FF80000
2634 85 67            STA  Col_Adr+3
2636 a9 f8            LDA  #$F8
2638 85 66            STA  Col_Adr+2
263a 60               RTS
263b          EndMod [Screen_Setup] Size = 9 [$9]

              ******************
              Module Story_Pages
              ******************

              ; Leave story size in X0L/X0H for printing

263b a9 00            LDA  #0
263d 85 46            STA  X0H
263f ad 1a 2f         LDA  h_file_size_hi     ; size in words high
2642 85 45            STA  X0L
2644 ad 1b 2f         LDA  h_file_size_lo     ; size in words low
2647 0a               ASL  A
2648 eb 45 00         ROW  X0L                ; size * 2 (version 3)
264b 7f 35 0e         BBR7 Version,_round
264e 0a               ASL  A
264f eb 45 00         ROW  X0L                ; size * 4 (version 4 and 5)
2652 a6 35            LDX  Version
2654 e0 86            CPX  #$86
2656 90 04            BCC  _round
2658 0a               ASL  A
2659 eb 45 00         ROW  X0L                ; size * 8 (version 6)
265c aa       _round  TAX
265d f0 02            BEQ  _return            ; at page boundary
265f e3 45            INW  X0L                ; add 1 to round up
2661 60       _return RTS
2662          EndMod [Story_Pages] Size = 39 [$27]

              ****************
              Module Modify_Op
              ****************
2662 a9 cc            LDA  #<z_not
2664 8d 13 12         STA  ZV8F
2667 a9 15            LDA  #>z_not
2669 8d 14 12         STA  ZV8F+1
266c a9 11            LDA  #<z_pop
266e 8d 27 12         STA  ZVB9
2671 a9 14            LDA  #>z_pop
2673 8d 28 12         STA  ZVB9+1
2676 60               RTS
2677          EndMod [Modify_Op] Size = 21 [$15]

              **********************
              Module Version_4_Setup
              **********************
2677 20 62 26         JSR  Modify_Op
267a 60               RTS
267b          EndMod [Version_4_Setup] Size = 4 [$4]

              **********************
              Module Version_5_Setup
              **********************
267b a9 09            LDA  #9
267d 85 39            STA  Word_Length
267f a9 06            LDA  #6
2681 85 36            STA  Vocab_Length
2683 a9 3f            LDA  #$3f
2685 85 2b            STA  Prop_Mask
2687 a9 18            LDA  #ROWS-1
2689 85 37            STA Win_Bot
268b 60               RTS
268c          EndMod [Version_5_Setup] Size = 17 [$11]

              ****************
              Module z_restart
              ****************

268c d8               CLD
268d a2 fb            LDX  #$fb               ; default stack initialisation
268f 9a               TXS
2690 a9 36            LDA  #$36
2692 85 01            STA  R6510
2694 a9 00            LDA  #0                 ; clear ZP variables
2696 a2 02            LDX  #Z_Code            ; start of interpreter variables
2698 95 00    _clear  STA  0,X
269a e8               INX
269b e0 60            CPX  #ZP_CLEAR
269d 90 f9            BCC  _clear
269f ad a4 2e         LDA  FG_Color
26a2 85 1b            STA  Colour
26a4 a9 01            LDA  #1
26a6 85 34            STA  Upper_Size         ; status line for version 3
26a8 a9 05            LDA  #>Z_STACK_LO
26aa 85 3b            STA  z_stack_ptr+1
26ac 85 3d            STA  z_frame_ptr+1
26ae c6 2f            DEC  Status_Col         ; -1
26b0 20 7b 26         JSR  Version_5_Setup    ; default settings
26b3 20 5c 2b         JSR  Open_Story         ; open  8,8,8,"z*"
26b6 a9 2f            LDA  #>Z_HEADER
26b8 85 0d            STA  RAMD+1
26ba 20 de 2b         JSR  Load_Page          ; load first block to Z_HEADER

              ; version dependant initialisation

26bd ad 00 2f         LDA  h_version          ; allow 3 >= version <= 5
26c0 c9 04            CMP  #4
26c2 90 02            BCC  _V3
26c4 09 80            ORA  #$80               ; version > 3
26c6 85 35    _V3     STA  Version
26c8 c9 85            CMP  #$85
26ca b0 2d            BCS  _config            ; version 5 = default
26cc c9 84            CMP  #$84
26ce d0 05            BNE  _check3
26d0 20 77 26         JSR  Version_4_Setup
26d3 80 24            BRA  _config
26d5 c9 03    _check3 CMP  #3
26d7 f0 0c            BEQ  _set3
                      Print(NOSTORY)
26d9 a9 98            LDA  #<NOSTORY
26db a0 2d            LDY  #>NOSTORY
26dd a2 0a            LDX  #?NOSTORY
26df 20 3f 2b         JSR  PrintText

26e2 4c 35 14         JMP  quit_20

              ; Version 3 initialisation

26e5 a9 06    _set3   LDA  #6
26e7 85 39            STA  Word_Length
26e9 a9 04            LDA  #4
26eb 85 36            STA  Vocab_Length
26ed a9 1f            LDA  #$1f
26ef 85 2b            STA  Prop_Mask
26f1 20 62 26         JSR  Modify_Op
26f4 a9 20            LDA  #' '
26f6 8d 3b 03         STA  Z_STATUS-1

26f9 a2 a1    _config LDX  #>[$D000 - Z_HEADER]
26fb 86 2c            STX  Resident_Pages     ; reserved
26fd a2 50            LDX  #COLS
26ff 8e 21 2f         STX  h_screen_cols
2702 8e 23 2f         STX  h_screen_width_lo
2705 a2 19            LDX  #ROWS
2707 8e 20 2f         STX  h_screen_rows
270a 8e 25 2f         STX  h_screen_height_lo
270d a9 00            LDA  #0
270f 8d 22 2f         STA  h_screen_width_hi
2712 8d 24 2f         STA  h_screen_height_hi

2715 ad 01 2f         LDA  h_config
2718 ff 35 04         BBS7 Version,_V4_Flags
271b 09 30            ORA  #%0011 0000
              ;               0--- ---- 7:unused
              ;                0-- ---- 6:prop font
              ;                 1- ---- 5:split screen
              ;                  1 ---- 4:status available
              ;                    0--- 3:unused
              ;                     0-- 2:file split(1)
              ;                      0- 1:score(0) or time(1)
              ;                       0 0:unused
271d 80 02            BRA  _setconf
271f 09 99    _V4_Flags ORA #%1001 1001
              ;               1--- ---- 7:timed input
              ;                0-- ---- 6:unused
              ;                 0- ---- 5:sound
              ;                  1 ---- 4:fixed  font
              ;                    0--- 3:italic font
              ;                     0-- 2:bold   font
              ;                      0- 1:pictures
              ;                       1 0:colors
2721 8d 01 2f _setconf  STA h_config
2724 a9 0c            LDA  #%0000 1100
2726 0d 11 2f         ORA  h_flags_lo
2729 8d 11 2f         STA  h_flags_lo
272c a9 01            LDA  #1
272e 8d 26 2f         STA  h_font_width
2731 8d 27 2f         STA  h_font_height
2734 a9 07            LDA  #7                 ; 6:PC 7:C128 8:C64
2736 8d 1e 2f         STA  h_interpreter_number
2739 a9 47            LDA  #'G'
273b 8d 1f 2f         STA  h_interpreter_version

              ; -------- compute story location and size -----

273e 20 3b 26         JSR  Story_Pages
2741 a0 60            LDY  #InfoSto-InfoPro
2743 20 1f 26         JSR  Info_Size
2746 20 59 29         JSR  Clear_Screen
                      Print(BITSHIFTER)
2749 a9 c1            LDA  #<BITSHIFTER
274b a0 2d            LDY  #>BITSHIFTER
274d a2 18            LDX  #?BITSHIFTER
274f 20 3f 2b         JSR  PrintText

2752 20 9a 2b         JSR  Select_Text_Window
2755 a9 d9            LDA  #<InfoClr
2757 a0 2d            LDY  #>InfoClr
2759 a2 82            LDX  #[InfoEnd - InfoClr]
275b 20 3f 2b         JSR  PrintText

275e 20 de 2b _res    JSR Load_Page           ; Load resident area
2761 a5 90            LDA  IO_STATUS
2763 d0 14            BNE  _story             ; EOF
2765 a5 15            LDA  Block_Lo
2767 29 0f            AND  #15
2769 d0 05            BNE  _dot
276b a9 2e            LDA  #'.'
276d 20 bf 29         JSR  CHROUT
2770 a5 15    _dot    LDA  Block_Lo
2772 c5 2c            CMP  Resident_Pages
2774 90 e8            BCC  _res

2776 20 05 11         JSR  Set_Attic_RAM
2779 20 f6 2b _story  JSR  Load_Story
277c 20 ac 23         JSR  Wait_for_Return
277f 20 b7 10         JSR  Set_Mode_80
2782 20 32 26         JSR  Screen_Setup
2785 ad 06 2f         LDA  h_start_pc_hi      ; Initialize pc
2788 85 05            STA  QI1
278a ad 07 2f         LDA  h_start_pc_lo
278d 85 04            STA  QI0
278f a5 35            LDA  Version
2791 c9 86            CMP  #$86
2793 90 2f            BCC  _cont
2795 ad 29 2f         LDA  h_functions_offset_lo
2798 85 45            STA  X0L
279a ad 28 2f         LDA  h_functions_offset_hi
279d 85 46            STA  X0H
279f cb 45 00         ASW  X0L
27a2 cb 45 00         ASW  X0L
27a5 cb 45 00         ASW  X0L

27a8 cb 04 00         ASW  QI0
27ab 26 06            ROL  QI2
27ad cb 04 00         ASW  QI0
27b0 26 06            ROL  QI2
27b2 a5 04            LDA  QI0
27b4 65 45            ADC  X0L
27b6 85 04            STA  QI0
27b8 a5 05            LDA  QI1
27ba 65 46            ADC  X0H
27bc 85 05            STA  QI1
27be a5 06            LDA  QI2
27c0 69 00            ADC  #0
27c2 85 06            STA  QI2
27c4 20 51 2b _cont   JSR  Reset_Screen

27c7 a0 04       LDY #QI0
27c9 20 5b 1d    JSR Dump_Word
27cc a5 06       LDA QI2
27ce 20 4f 1d    JSR Dump_A

27d1 4c 35 11         JMP  PC_LOOP
27d4          EndMod [z_restart] Size = 328 [$148]

              *****************
              Module Next_Datum
              *****************

              ; Input
              ; =====
              ; QD0 = Block pointer
              ; QD1 = Block # lo
              ; QD2 = Block # hi

              ; Output
              ; ======
              ; (A) = Byte from (Block),QD0
              ; 24 bit Pointer QD incremented

27d4 da               PHX
27d5 ab 09 00         LDZ  QD0                ; page index
27d8 a5 0a            LDA  QD1                ; page low
27da a6 0b            LDX  QD2                ; page high
27dc d0 0e            BNE  _banked            ; > 64 K
27de 86 0e            STX  RAMD+2             ; bank = 0
27e0 86 0f            STX  RAMD+3             ; segment = 0
27e2 c5 2c            CMP  Resident_Pages
27e4 b0 06            BCS  _banked            ; -> not resident
27e6 69 2f            ADC  #>Z_HEADER
27e8 85 0d            STA  RAMD+1
27ea 80 15            BRA  _get

              ; load if address is beyond resident part
              ; address = (QD1/2) - Resident + bank

27ec 85 0d    _banked STA  RAMD+1             ; page low
27ee a5 61            LDA  Segment
27f0 85 0f            STA  RAMD+3             ; segment
27f2 bd f8 2c         LDA  Bank_Order,X
27f5 85 0e            STA  RAMD+2
27f7 c9 01            CMP  #1
27f9 d0 06            BNE  _get
27fb a5 0d            LDA  RAMD+1
27fd e9 08            SBC  #8                 ; don't use $1F800 -> $1FFFF
27ff 85 0d            STA  RAMD+1
2801 ea b2 0c _get    LDA  [RAMD],Z
2804 e6 09            INC  QD0
2806 d0 02            BNE  _exit
2808 e3 0a            INW  QD1
280a fa       _exit   PLX
280b c9 00            CMP  #0                 ; set flags
280d 60               RTS

              ***********************
              Module Next_Instruction
              ***********************

              ; Input
              ; =====
              ; QI0 = pointer inside page
              ; QI1 = page # low
              ; QI2 = page # high

              ; Output
              ; ======
              ; (A) = Byte from 24 bit address (QI)
              ; 24 bit Pointer QI incremented

280e da               PHX
280f db               PHZ
2810 ab 04 00         LDZ  QI0                ; page index
2813 a5 05            LDA  QI1                ; page low
2815 a6 06            LDX  QI2                ; page high
2817 d0 0e            BNE  _banked            ; > 64 K
2819 86 0e            STX  RAMD+2             ; bank    = 0
281b 86 0f            STX  RAMD+3             ; segment = 0
281d c5 2c            CMP  Resident_Pages
281f b0 06            BCS  _banked            ; -> not resident
2821 69 2f            ADC  #>Z_HEADER
2823 85 0d            STA  RAMD+1
2825 80 15            BRA  _get

              ; load if address is beyond resident part
              ; address = (QI1/2) - Resident + bank

2827 85 0d    _banked STA  RAMD+1             ; page low
2829 a5 61            LDA  Segment
282b 85 0f            STA  RAMD+3             ; segment
282d bd f8 2c         LDA  Bank_Order,X
2830 85 0e            STA  RAMD+2
2832 c9 01            CMP  #1
2834 d0 06            BNE  _get
2836 a5 0d            LDA  RAMD+1
2838 e9 08            SBC  #8
283a 85 0d            STA  RAMD+1
283c ea b2 0c _get    LDA  [RAMD],Z
283f e6 04            INC  QI0
2841 d0 02            BNE  _exit
2843 e3 05            INW  QI1
2845 fb       _exit   PLZ
2846 fa               PLX
2847 c9 00            CMP  #0                 ; set flags
2849 60               RTS

              *************
284a          z_show_status
              *************

              ; save cursor coordinates, print to statusline

284a 20 b0 2b         JSR  Save_Cursor

              ; push QD2, QD1, QD0, QDH, QDL

284d a2 04            LDX  #4
284f b5 07    zss_10  LDA  QDL,X
2851 48               PHA
2852 ca               DEX
2853 10 fa            BPL  zss_10

2855 e8               INX                     ; X = 0
2856 86 2f            STX  Status_Col         ; switch decoder to status line
2858 a9 10            LDA  #$10               ; get location
285a 20 09 13         JSR  Get_Global_Var
285d a5 45            LDA  X0L
285f a6 46            LDX  X0H
2861 20 4c 15         JSR  z_print_obj_A
2864 a9 20            LDA  #' '               ; fill rest of line with blanks
2866 a6 2f            LDX  Status_Col
2868 9d 3c 03 zss_20  STA  Z_STATUS,X         ; erase rest of line
286b e8               INX
286c e0 50            CPX  #COLS
286e 90 f8            BCC  zss_20

2870 a2 ff            LDX  #$ff
2872 86 2f            STX  Status_Col         ; reset decoder
2874 ad 01 2f         LDA  h_config
2877 29 02            AND  #2                 ; Score_Time_Flag
2879 d0 06            BNE  zss_30
287b 20 0f 23         JSR  Print_Score
287e 4c 84 28         JMP  zss_40
2881 20 d7 22 zss_30  JSR  Print_Time
2884 20 3f 23 zss_40  JSR  Print_Status

              ; pull QDL, QDH, QD0, QD1, QD2 after recursive call

2887 a2 00            LDX  #0
2889 68       zss_90  PLA
288a 95 07            STA  QDL,X
288c e8               INX
288d e0 05            CPX  #5
288f 90 f8            BCC  zss_90

2891 4c b8 2b         JMP  Restore_Cursor

              ****************
              Module Cursor_On
              ****************
2894 48               PHA
2895 db               PHZ
2896 ab 5a 00         LDZ  Cursor_Col
2899 ea b2 64         LDA  [Col_Adr],Z
289c 09 80            ORA  #UNDERLINE
289e ea 92 64         STA  [Col_Adr],Z
28a1 fb               PLZ
28a2 68               PLA
28a3 60               RTS
28a4          EndMod [Cursor_On] Size = 16 [$10]

              *****************
              Module Cursor_Off
              *****************
28a4 08               PHP
28a5 48               PHA
28a6 db               PHZ
28a7 ab 5a 00         LDZ  Cursor_Col
28aa ea b2 64         LDA  [Col_Adr],Z
28ad 29 7f            AND  #$7f
28af ea 92 64         STA  [Col_Adr],Z
28b2 fb               PLZ
28b3 68               PLA
28b4 28               PLP
28b5 60               RTS
28b6          EndMod [Cursor_Off] Size = 18 [$12]

              ************
28b6          Special_Keys
              ************

28b6 91               .BYTE CURSOR_UP         ; $81
28b7 11               .BYTE CURSOR_DOWN       ; $82
28b8 9d               .BYTE CURSOR_LEFT       ; $83
28b9 1d               .BYTE CURSOR_RIGHT      ; $84

              *********************
              Module Translate_Keys
              *********************

28ba a0 03            LDY  #3
28bc d9 b6 28 CSK_10  CMP  Special_Keys,Y
28bf f0 05            BEQ  CSK_20
28c1 88               DEY
28c2 10 f8            BPL  CSK_10
28c4 18               CLC                     ; unchanged
28c5 60               RTS
28c6 98       CSK_20  TYA                     ; C=1
28c7 69 80            ADC  #$80               ; translate
28c9 38               SEC                     ; translated
28ca 60               RTS
28cb          EndMod [Translate_Keys] Size = 17 [$11]

              ********************
              Module Get_Character
              ********************

              ; get a character from keyboard
              ; allow all ASCII characters $20 - $7e
              ; allow control codes CR, INS,DEL and cursor keys
              ; return 0 for timeout (Timeout != 0)

28cb 5a               PHY                     ; save Y
28cc 20 e4 ff _loop   JSR  GETIN
28cf d0 14            BNE  _got               ; read a key
28d1 a5 30            LDA  Timeout
28d3 05 31            ORA  Timeout+1
28d5 f0 f5            BEQ  _loop
28d7 a5 30            LDA  Timeout
28d9 c5 a0            CMP  Jiffy
28db a5 31            LDA  Timeout+1
28dd e5 a1            SBC  Jiffy+1
28df b0 eb            BCS  _loop
28e1 a9 00            LDA  #0                 ; timeout
28e3 80 32            BRA  _exit

28e5 c9 0d    _got    CMP  #CR
28e7 f0 2e            BEQ  _exit              ; allow CR
28e9 c9 14            CMP  #DEL
28eb f0 2a            BEQ  _exit              ; allow DEL
28ed c9 94            CMP  #INS
28ef f0 26            BEQ  _exit              ; allow INS
28f1 20 ba 28         JSR  Translate_Keys
28f4 b0 21            BCS  _exit
28f6 c9 db            CMP  #'Z'+$81           ; CBM 'Z'+1
28f8 b0 18            BCS  _error             ; -> not ASCII
28fa c9 c1            CMP  #'A'+$80           ; CBM 'A'
28fc 90 04            BCC  _lower
28fe 29 7f            AND  #$7f               ; to ASCII
2900 80 15            BRA  _exit

2902 c9 5b    _lower  CMP  #'Z'+1             ; CBM 'z'+1
2904 b0 0c            BCS  _error             ; -> not ASCII
2906 c9 41            CMP  #'A'               ; CBM 'a'
2908 90 04            BCC  _ctrl
290a 69 1f            ADC  #$1f               ; to ASCII
290c 80 09            BRA  _exit

290e c9 20    _ctrl   CMP  #' '
2910 b0 05            BCS  _exit

2912 20 39 1b _error  JSR  Error_Beep         ; unacceptable
2915 80 b5            BRA  _loop

2917 7a       _exit   PLY                     ; restore Y
2918 60               RTS
2919          EndMod [Get_Character] Size = 78 [$4e]

              *************************
              Module Scroll_Main_Window
              *************************

2919 a9 f8            LDA  #$f8
291b 85 b0            STA  Col_Row+2          ; colour bank low
291d a9 0f            LDA  #$0f
291f 85 b1            STA  Col_Row+3          ; colour bank high
2921 a6 34            LDX  Upper_Size         ; top row

2923 20 f2 25 _row_loop JSR Set_Screen_Pointer_X
2926 e8               INX
2927 bd b1 25         LDA  Row_Lo,X
292a 85 ac            STA  Scr_Row
292c 85 ae            STA  Col_Row
292e bd ca 25         LDA  Row_Hi,X
2931 85 ad            STA  Scr_Row+1          ; screen high
2933 29 07            AND  #7
2935 85 af            STA  Col_Row+1          ; colour high
2937 a3 4f            LDZ  #COLS-1

2939 b2 ac    _col_loop LDA (Scr_Row),Z
293b 92 62            STA  (Scr_Adr),Z
293d ea b2 ae         LDA  [Col_Row],Z
2940 ea 92 64         STA  [Col_Adr],Z
2943 3b               DEZ
2944 10 f3            BPL  _col_loop

2946 e0 18            CPX  #ROWS-1
2948 90 d9            BCC  _row_loop
294a 4c bf 2b         JMP  Erase_Row
294d          EndMod [Scroll_Main_Window] Size = 52 [$34]

              ******************
              Module Home_Screen
              ******************

294d da               PHX
294e a2 00            LDX  #0
2950 86 5a            STX  Cursor_Col
2952 86 5b            STX  Cursor_Row
2954 20 f2 25         JSR  Set_Screen_Pointer_X
2957 fa               PLX
2958 60               RTS
2959          ENDMOD [Home_Screen] Size = 12 [$c]

              *******************
              Module Clear_Screen
              *******************

2959 da               PHX
295a a2 18            LDX  #ROWS-1
295c 20 bf 2b _loop   JSR  Erase_Row
295f ca               DEX
2960 10 fa            BPL  _loop
2962 20 4d 29         JSR  Home_Screen
2965 fa               PLX
2966 60               RTS
2967          ENDMOD [Clear_Screen] Size = 14 [$e]

              *************
2967          Return_Screen
              *************
2967 da               PHX
2968 5a               PHY
2969 a0 00            LDY  #0
296b 84 59            STY  Font_Sel
              ;         STY Attribute
296d 84 5a            STY  Cursor_Col
296f a6 5b            LDX  Cursor_Row
2971 e8               INX
2972 e0 19            CPX  #ROWS
2974 90 05            BCC  ReSc_10
2976 20 19 29         JSR  Scroll_Main_Window
2979 a2 18            LDX  #ROWS-1
297b 86 5b    ReSc_10 STX  Cursor_Row
297d 20 f2 25         JSR  Set_Screen_Pointer_X
2980 7a               PLY
2981 fa               PLX
2982 60               RTS

              ****************
              Module Edit_Left
              ****************
2983 88               DEY
2984 20 a4 28         JSR  Cursor_Off
2987 c6 5a            DEC  Cursor_Col
2989 4c 94 28         JMP  Cursor_On
298c          EndMod [Edit_Left] Size = 9 [$9]

              *****************
              Module Edit_Right
              *****************
298c c8               INY
298d 20 a4 28         JSR  Cursor_Off
2990 e6 5a            INC  Cursor_Col
2992 4c 94 28         JMP  Cursor_On
2995          EndMod [Edit_Right] Size = 9 [$9]

              ***************
              Module Edit_Del
              ***************
2995 ab 5a 00         LDZ  Cursor_Col
2998 20 83 29         JSR  Edit_Left

299b b2 62    _loop   LDA  (Scr_Adr),Z
299d 3b               DEZ
299e 92 62            STA  (Scr_Adr),Z
29a0 1b               INZ
29a1 1b               INZ
29a2 c2 50            CPZ  #COLS
29a4 90 f5            BCC  _loop
29a6 3b               DEZ
29a7 a9 20            LDA  #' '
29a9 92 62            STA  (Scr_Adr),Z
29ab 60               RTS
29ac          EndMod [Edit_Del] Size = 23 [$17]

              ***************
              Module Edit_Ins
              ***************
29ac ab 2d 00         LDZ  Right_Margin
29af 3b       _loop   DEZ
29b0 b2 62            LDA  (Scr_Adr),Z
29b2 1b               INZ
29b3 92 62            STA  (Scr_Adr),Z
29b5 3b               DEZ
29b6 d4 5a            CPZ  Cursor_Col
29b8 d0 f5            BNE  _loop
29ba a9 20            LDA  #' '
29bc 92 62            STA  (Scr_Adr),Z
29be 60               RTS
29bf          EndMod [Edit_Ins] Size = 19 [$13]

              *************
              Module CHROUT
              *************

29bf c9 0d            CMP  #CR
29c1 f0 a4            BEQ  Return_Screen

29c3 da               PHX
29c4 5a               PHY
29c5 db               PHZ
29c6 48               PHA
29c7 ab 5a 00         LDZ  Cursor_Col
29ca c2 50            CPZ  #COLS
29cc 90 04            BCC  CHRO_10
29ce a3 4f            LDZ  #COLS-1
29d0 64 5a            STZ  Cursor_Col
29d2 a5 1b    CHRO_10 LDA  Colour
29d4 05 14            ORA  Attribute
29d6 ea 92 64         STA  [Col_Adr],Z
29d9 68               PLA
29da 05 59            ORA  Font_Sel
29dc 92 62            STA  (Scr_Adr),Z
29de e6 5a            INC  Cursor_Col
29e0 fb               PLZ
29e1 7a               PLY
29e2 fa               PLX
29e3 60               RTS
29e4          ENDMOD [CHROUT] Size = 37 [$25]

              *******************
              Module Prompt_Color
              *******************
29e4 a9 03            LDA  #CYAN
29e6 80 02            BRA  Set_Colour
29e8          EndMod [Prompt_Color] Size = 4 [$4]

              *****************
              Module Text_Color
              *****************
29e8 a9 01            LDA  #WHITE
29ea          EndMod [Text_Color] Size = 2 [$2]

              *****************
              Module Set_Colour
              *****************
29ea ff 35 02         BBS7 Version,_return
29ed 85 1b            STA  Colour
29ef 60       _return RTS
29f0          EndMod [Set_Colour] Size = 6 [$6]

              **********************
              Module Timeout_Routine
              **********************
29f0 5a               PHY
29f1 db               PHZ
29f2 78               SEI
29f3 a2 00            LDX  #0
29f5 86 a0            STX  Jiffy
29f7 86 a1            STX  Jiffy+1
29f9 86 a2            STX  Jiffy+2
29fb 58               CLI
29fc b5 47    _save   LDA  X1L,X              ; push X1L,X1H,X2L,X2H
29fe 48               PHA
29ff e8               INX
2a00 e0 04            CPX  #4
2a02 90 f8            BCC  _save
2a04 a5 29            LDA  ParNum
2a06 48               PHA                     ; push ParNum
2a07 a9 01            LDA  #1
2a09 85 29            STA  ParNum
2a0b a5 5a            LDA  Cursor_Col
2a0d 48               PHA                     ; push Cursor_Col

2a0e 20 a4 28         JSR  Cursor_Off
2a11 ad 01 2d         LDA  Z_Timeout
2a14 85 47            STA  X1L
2a16 ad 02 2d         LDA  Z_Timeout+1
2a19 85 48            STA  X1H
2a1b a9 80            LDA  #$80               ; call type
2a1d 20 2d 18         JSR  call_00
2a20 20 35 11         JSR  PC_LOOP
2a23 a4 47            LDY  X1L                ; return value

2a25 68               PLA                     ; pull Cursor_Col
2a26 85 5a            STA  Cursor_Col
2a28 20 94 28         JSR  Cursor_On
2a2b 68               PLA                     ; pull ParNum
2a2c 85 29            STA  ParNum
2a2e a2 03            LDX  #3
2a30 68       _rest   PLA                     ; pull X2H,X2L,X1H,X1L
2a31 95 47            STA  X1L,X
2a33 ca               DEX
2a34 10 fa            BPL  _rest
2a36 98               TYA                     ; return value
2a37 fb               PLZ
2a38 7a               PLY
2a39 60               RTS
2a3a          EndMod [Timeout_Routine] Size = 74 [$4a]

              ***************
              Module Got_Line
              ***************

              ; Get line from keyboard with preset text

2a3a a9 00            LDA  #0
2a3c 85 30            STA  Timeout
2a3e 85 31            STA  Timeout+1
2a40 86 47            STX  X1L
2a42 84 48            STY  X1H
2a44 a5 35            LDA  Version
2a46 48               PHA
2a47 a4 5a            LDY  Cursor_Col
2a49 a3 01            LDZ  #1
2a4b 64 35            STZ  Version
2a4d 20 e4 29         JSR  Prompt_Color
2a50 b2 47    _loop   LDA  (X1L),Z
2a52 c9 20            CMP  #' '
2a54 90 06            BCC  _call
2a56 20 bf 29         JSR  CHROUT
2a59 1b               INZ
2a5a 10 f4            BPL  _loop
2a5c 84 5a    _call   STY  Cursor_Col
2a5e 20 65 2a         JSR  Get_Line_X1
2a61 68               PLA
2a62 85 35            STA  Version
2a64 60               RTS
2a65          EndMod [Got_Line] Size = 43 [$2b]

              ; Simple line editor, which gets a line and stores it in (X1)
              ; On entry byte 0 is expected to contain the maximum string length
              ; On exit byte 1 holds the actual string length for versions > 3
              ; The string is zero terminated.
              ; Chars_Left is set to the actual string length

              ; RETURN  : editing stops, the string is created from screen row
              ; DEL     : delete character under cursor and scroll remaining row
              ; INS     : insert blank at cursor
              ; LEFT    : move cursor left
              ; RIGHT   : move cursor right
              ; A - Z   : converted to a - z

              ******************
              Module Get_Line_X1
              ******************

2a65 a5 34            LDA  Upper_Size
2a67 85 21            STA  MORE_Counter
2a69 a5 47            LDA  X1L                ; buffer pointer
2a6b 85 57            STA  GLL
2a6d a5 48            LDA  X1H
2a6f 85 58            STA  GLH
2a71 e3 57            INW  GLL                ; point to content
2a73 20 e4 29         JSR  Prompt_Color
2a76 7f 35 02         BBR7 Version,_lm
2a79 e3 57            INW  GLL                ; point to content
2a7b a5 5a    _lm     LDA  Cursor_Col
2a7d 85 1f            STA  Left_Margin
2a7f a8               TAY                     ; Y = left margin
2a80 a3 00            LDZ  #0
2a82 64 33            STZ  TO_Flag
2a84 18               CLC
2a85 72 47            ADC  (X1L),Z            ; add maximum length
2a87 c5 1f            CMP  Left_Margin        ; added zero ?
2a89 f0 04            BEQ  _max
2a8b c9 4f            CMP  #COLS-1
2a8d 90 02            BCC  _rm
2a8f a9 4f    _max    LDA  #COLS-1
2a91 85 2d    _rm     STA  Right_Margin
2a93 80 03            BRA  _loop

2a95 20 39 1b _error  JSR  Error_Beep

              ; receive character from keyboard

2a98 20 94 28 _loop   JSR  Cursor_On
2a9b 20 cb 28         JSR  Get_Character
2a9e 20 a4 28         JSR  Cursor_Off
2aa1 c9 0d            CMP  #CR
2aa3 f0 67            BEQ  _end               ; -> CR = end of input
2aa5 c9 00            CMP  #0
2aa7 d0 17            BNE  _del

              ; timeout

2aa9 20 f0 29         JSR  Timeout_Routine
2aac c9 00            CMP  #0
2aae f0 e8            BEQ  _loop              ; carry on
2ab0 a9 00            LDA  #0
2ab2 85 1a            STA  Chars_Left
2ab4 20 e8 29         JSR  Text_Color
2ab7 a9 00            LDA  #0
2ab9 a0 01            LDY  #1
2abb 84 33            STY  TO_Flag
2abd 91 47            STA  (X1L),Y            ; length of string
2abf 60               RTS

              ; DEL key

2ac0 c9 14    _del    CMP  #DEL
2ac2 d0 09            BNE  _ins
2ac4 c4 1f            CPY  Left_Margin
2ac6 f0 cd            BEQ  _error
2ac8 20 95 29         JSR  Edit_Del
2acb 80 cb            BRA  _loop

              ; INS key

2acd c9 94    _ins    CMP  #INS
2acf d0 09            BNE  _left
2ad1 c4 2d            CPY  Right_Margin
2ad3 b0 c0            BCS  _error
2ad5 20 ac 29         JSR  Edit_Ins
2ad8 80 be            BRA  _loop

              ; cursor left

2ada c9 83    _left   CMP  #KEY_LEFT
2adc d0 09            BNE  _limit
2ade c4 1f            CPY  Left_Margin
2ae0 f0 b3            BEQ  _error
2ae2 20 83 29         JSR  Edit_Left
2ae5 80 b1            BRA  _loop

              ; check edit limit

2ae7 c4 2d    _limit  CPY  Right_Margin
2ae9 b0 aa            BCS  _error             ; -> at limit

              ; cursor right

2aeb c9 84            CMP  #KEY_RIGHT
2aed d0 05            BNE  _valid
2aef 20 8c 29         JSR  Edit_Right
2af2 80 a4            BRA  _loop

              ; unsupported keys

2af4 c9 20    _valid  CMP  #' '
2af6 90 9d            BCC  _error
2af8 c9 7f            CMP  #$7f
2afa b0 99            BCS  _error

              ; upper case to lower case

2afc c9 41            CMP  #'A'
2afe 90 06            BCC  _store
2b00 c9 5b            CMP  #'Z'+1
2b02 b0 02            BCS  _store
2b04 69 20            ADC  #$20               ; to lower case
2b06 20 bf 29 _store  JSR  CHROUT
2b09 c8               INY
2b0a 10 8c            BPL  _loop

              ; skip trailing blanks

2b0c a4 2d    _end    LDY  Right_Margin
2b0e a9 20            LDA  #' '
2b10 d1 62    _skip   CMP  (Scr_Adr),Y
2b12 d0 05            BNE  _buffer
2b14 88               DEY
2b15 c4 1f            CPY  Left_Margin
2b17 b0 f7            BCS  _skip

              ; copy screen row to buffer

2b19 98       _buffer TYA                     ; Y = last non blank
2b1a 1a               INC  A
2b1b 38               SEC
2b1c e5 1f            SBC  Left_Margin        ; A = string length
2b1e 85 1a            STA  Chars_Left
2b20 4b               TAZ                     ; Z = terminator pos
2b21 a9 00            LDA  #0
2b23 92 57            STA  (GLL),Z            ; terminator
2b25 3b               DEZ
2b26 30 08            BMI  _empty
2b28 b1 62    _copy   LDA  (Scr_Adr),Y
2b2a 92 57            STA  (GLL),Z
2b2c 88               DEY
2b2d 3b               DEZ
2b2e 10 f8            BPL  _copy

2b30 20 e8 29 _empty  JSR  Text_Color
2b33 7f 35 06         BBR7 Version,_return
2b36 a5 1a            LDA  Chars_Left
2b38 a0 01            LDY  #1
2b3a 91 47            STA  (X1L),Y            ; length of string
2b3c 4c 67 29 _return JMP  Return_Screen
2b3f          EndMod [Get_Line_X1] Size = 218 [$da]

              *********
2b3f          PrintText
              *********

2b3f 85 c3            STA  MEMUSS
2b41 84 c4            STY  MEMUSS+1
2b43 a0 00            LDY  #0
2b45 b1 c3    PrTe_A  LDA  (MEMUSS),Y
2b47 f0 07            BEQ  PrTe_B
2b49 20 bf 29         JSR  CHROUT
2b4c c8               INY
2b4d ca               DEX
2b4e d0 f5            BNE  PrTe_A
2b50 60       PrTe_B  RTS

              ************
2b51          Reset_Screen
              ************

2b51 20 59 29         JSR  Clear_Screen
2b54 20 67 29         JSR  Return_Screen
2b57 a5 34            LDA  Upper_Size
2b59 85 21            STA  MORE_Counter
2b5b 60               RTS

              *****************
              Module Open_Story
              *****************

2b5c ad 1d 2d         LDA  Game_Unit          ; open "Z*",FA,8
2b5f 85 ba            STA  FA
2b61 20 b1 ff         JSR  LISTEN
2b64 a9 f8            LDA  #$f8
2b66 20 93 ff         JSR  SECOND
2b69 a9 5a            LDA  #'Z'
2b6b 20 a8 ff         JSR  CIOUT
2b6e a9 2a            LDA  #'*'
2b70 20 a8 ff         JSR  CIOUT
2b73 20 ae ff         JSR  UNLSN
2b76 a5 ba            LDA  FA
2b78 20 b4 ff         JSR  TALK               ; open channel
2b7b a9 68            LDA  #$68               ; SA = 8
2b7d 4c 96 ff         JMP  TKSA               ; select channel to disk buffer
2b80          EndMod [Open_Story] Size = 36 [$24]

              **********
2b80          ASCII_Hex
              **********

              ; Output: (X) = High nibble (A) = Low nibble
2b80 48               PHA
2b81 4a               LSR  A
2b82 4a               LSR  A
2b83 4a               LSR  A
2b84 4a               LSR  A
2b85 09 30            ORA  #'0'
2b87 c9 3a            CMP  #$3a
2b89 90 02            BCC  Hex_11
2b8b 69 06            ADC  #6
2b8d aa       Hex_11  TAX
2b8e 68               PLA
2b8f 29 0f            AND  #15
2b91 09 30            ORA  #'0'
2b93 c9 3a            CMP  #$3a
2b95 90 02            BCC  Hex_12
2b97 69 06            ADC  #6
2b99 60       Hex_12  RTS

              *************************
              Module Select_Text_Window
              *************************

2b9a a9 01            LDA  #1
2b9c 85 38            STA  Win_Top
2b9e a9 18            LDA  #ROWS-1
2ba0 85 37            STA  Win_Bot
2ba2 a9 00            LDA  #0
2ba4 85 14            STA  Attribute
2ba6 4c e8 29         JMP  Text_Color
2ba9          EndMod [Select_Text_Window] Size = 15 [$f]

              ********************
2ba9          Select_Status_Window
              ********************

2ba9 a2 00            LDX  #0
2bab 86 38            STX  Win_Top
2bad 4c f2 25         JMP  Set_Screen_Pointer_X

              ***********
2bb0          Save_Cursor
              ***********

2bb0 20 1a 26         JSR  Get_Row_Col
2bb3 86 1d            STX  C_Save_Row
2bb5 84 1c            STY  C_Save_Col
2bb7 60               RTS


              **************
2bb8          Restore_Cursor
              **************

2bb8 a6 1d            LDX  C_Save_Row
2bba a4 1c            LDY  C_Save_Col
2bbc 4c 07 26         JMP  Set_Row_Col

              ****************
              Module Erase_Row
              ****************

2bbf db               PHZ
2bc0 20 f2 25         JSR  Set_Screen_Pointer_X
2bc3 a3 4f            LDZ  #COLS-1
2bc5 a9 20    _loop   LDA  #' '
2bc7 92 62            STA  (Scr_Adr),Z
2bc9 a9 01            LDA  #WHITE
2bcb ea 92 64         STA  [Col_Adr],Z
2bce 3b               DEZ
2bcf 10 f4            BPL  _loop
2bd1 fb               PLZ
2bd2 60               RTS
2bd3          EndMod [Erase_Row] Size = 20 [$14]

              ********
2bd3          ASCII_TS
              ********

              ; Convert binary number in (A) to
              ; two decimal digits in (X) and (A)

2bd3 a2 2f            LDX  #'0'-1
2bd5 38               SEC
2bd6 e8       asts_01 INX
2bd7 e9 0a            SBC  #10
2bd9 b0 fb            BCS  asts_01
2bdb 69 3a            ADC  #$3a
2bdd 60               RTS

              ****************
              Module Load_Page
              ****************

              ; Read 256 bytes of data from disk and store them in RAM
              ; at the address (RAMD) = 32 bit address.
              ; The I/O routines TALK, TKSA, ACPTR, and UNTLK are used
              ; ACPTR sets the STATUS bit 6 ($40) on error

2bde da               PHX
              ;  LDA RAMD+3
              ;  JSR Dump_A
              ;  LDA RAMD+2
              ;  JSR Dump_A
              ;  LDA RAMD+1
              ;  JSR Dump_A
              ;  LDA #' '
              ;  JSR CHROUT
              ;  LDA Cursor_Col
              ;  CMP #75
              ;  BCC _weiter
              ;  JSR Return_Screen
              ;_weiter
2bdf a3 00            LDZ  #0
2be1 64 90            STZ  IO_STATUS
2be3 20 a5 ff _loop   JSR  ACPTR
2be6 ea 92 0c         STA  [RAMD],Z
2be9 a5 90            LDA  IO_STATUS
2beb d0 03            BNE  _eof
2bed 1b               INZ
2bee d0 f3            BNE  _loop
2bf0 e3 15    _eof    INW  Block_Lo           ; increment block word Block_Lo/Hi
2bf2 e6 0d            INC  RAMD+1             ; advance RAM pointer page
2bf4 fa               PLX
2bf5 60               RTS                     ; return OK
2bf6          EndMod [Load_Page] Size = 24 [$18]

              *****************
              Module Load_Story
              *****************

              ; Continue story loading in banks

2bf6 a5 61            LDA  Segment
2bf8 85 0f            STA  RAMD+3
2bfa a5 15    _next   LDA  Block_Lo
2bfc 85 0d            STA  RAMD+1
2bfe a6 16            LDX  Block_Hi
2c00 bd f8 2c         LDA  Bank_Order,X
2c03 85 0e            STA  RAMD+2
2c05 c9 01            CMP  #1
2c07 d0 06            BNE  _loop
2c09 a5 0d            LDA  RAMD+1
2c0b e9 08            SBC  #8
2c0d 85 0d            STA  RAMD+1
2c0f 20 de 2b _loop   JSR  Load_Page
2c12 a5 90            LDA  IO_STATUS
2c14 d0 11            BNE  _eof
2c16 a5 15            LDA  Block_Lo
2c18 29 0f            AND  #15
2c1a d0 05            BNE  _prog
2c1c a9 2e            LDA  #'.'
2c1e 20 bf 29         JSR  CHROUT
2c21 a6 16    _prog   LDX  Block_Hi
2c23 e0 08            CPX  #8
2c25 90 d3            BCC  _next
2c27 20 ab ff _eof    JSR  UNTLK
2c2a ad 1d 2d         LDA  Game_Unit          ; close #8
2c2d 85 ba            STA  FA
2c2f 20 b1 ff         JSR  LISTEN
2c32 a9 e8            LDA  #$e8
2c34 20 93 ff         JSR  SECOND
2c37 4c ae ff         JMP  UNLSN
2c3a          EndMod [Load_Story] Size = 68 [$44]

              **********
2c3a          Close_File
              **********

2c3a a5 ba            LDA  FA
2c3c 20 b1 ff         JSR  LISTEN
2c3f a9 e3            LDA  #$e3
2c41 20 93 ff         JSR  SECOND
2c44 4c ae ff         JMP  UNLSN

              *************
2c47          Delete_Config
              *************

2c47 ad 1d 2d         LDA  Game_Unit
2c4a 85 ba            STA  FA
2c4c 20 b1 ff         JSR  LISTEN
2c4f a9 6f            LDA  #$6f
2c51 20 93 ff         JSR  SECOND
2c54 a0 00            LDY  #0
2c56 b9 99 2e DeCo_10 LDA  ConfigDel,Y
2c59 20 a8 ff         JSR  CIOUT
2c5c c8               INY
2c5d c0 09            CPY  #[?ConfigDel + ?Configname]
2c5f 90 f5            BCC  DeCo_10
2c61 4c ae ff         JMP  UNLSN

              ***********
2c64          Prep_Config
              ***********

2c64 a9 a4            LDA  #<CONFIG_START
2c66 a0 2e            LDY  #>CONFIG_START
2c68 85 41            STA  A0L
2c6a 84 42            STY  A0H
2c6c a9 ab            LDA  #<CONFIG_END
2c6e a0 2e            LDY  #>CONFIG_END
2c70 85 43            STA  A1L
2c72 84 44            STY  A1H
2c74 a9 06            LDA  #?Configname
2c76 a2 9c            LDX  #<Configname
2c78 a0 2e            LDY  #>Configname
2c7a 4c bd ff         JMP  SETNAM

              ***********
2c7d          Save_Config
              ***********

2c7d 20 47 2c         JSR  Delete_Config
2c80 20 64 2c         JSR  Prep_Config
2c83 e6 b7            INC  FNLEN              ; add ','
2c85 e6 b7            INC  FNLEN              ; add 'W'
2c87 4c d2 2c         JMP  Save_File

              ********************
              Module Send_Filename
              ********************

2c8a a5 ba            LDA  FA
2c8c 20 b1 ff         JSR  LISTEN
2c8f a9 f3            LDA  #$f3
2c91 20 93 ff         JSR  SECOND
2c94 a0 00            LDY  #0
2c96 84 90            STY  IO_STATUS
2c98 b1 bb    _fname  LDA  (FNADR),Y
2c9a 20 a8 ff         JSR  CIOUT
2c9d c8               INY
2c9e c4 b7            CPY  FNLEN
2ca0 90 f6            BCC  _fname
2ca2 4c ae ff         JMP  UNLSN
2ca5          EndMod [Send_Filename] Size = 27 [$1b]

              ******************
              Module Load_Config
              ******************

2ca5 20 64 2c         JSR  Prep_Config
2ca8          EndMod [Load_Config] Size = 3 [$3]

              ****************
              Module Load_File
              ****************

              ; Input : (A0) = start address
              ;       : (A1) = end   address
              ;       : SETNAM was called

2ca8 20 8a 2c         JSR  Send_Filename
2cab a5 ba            LDA  FA
2cad 20 b4 ff         JSR  TALK
2cb0 a9 63            LDA  #$63
2cb2 20 96 ff         JSR  TKSA
2cb5 a0 00            LDY  #0
2cb7 20 a5 ff _loop   JSR  ACPTR
2cba a6 90            LDX  IO_STATUS
2cbc d0 0e            BNE  _stop
2cbe 91 41            STA  (A0L),Y
2cc0 e3 41            INW  A0L
2cc2 a5 41            LDA  A0L
2cc4 c5 43            CMP  A1L
2cc6 a5 42            LDA  A0H
2cc8 e5 44            SBC  A1H
2cca 90 eb            BCC  _loop

2ccc 20 ab ff _stop   JSR  UNTLK
2ccf 4c 3a 2c         JMP  Close_File
2cd2          EndMod [Load_File] Size = 42 [$2a]

              ****************
              Module Save_File
              ****************

              ; Input : (A0) = start address
              ;       : (A1) = end   address
              ;       : SETNAM was called

2cd2 20 8a 2c         JSR  Send_Filename
2cd5 a5 ba            LDA  FA
2cd7 20 b1 ff         JSR  LISTEN
2cda a9 63            LDA  #$63
2cdc 20 93 ff         JSR  SECOND
2cdf a0 00            LDY  #0
2ce1 b1 41    _loop   LDA  (A0L),Y
2ce3 20 a8 ff         JSR  CIOUT
2ce6 e3 41            INW  A0L
2ce8 a5 41            LDA  A0L
2cea c5 43            CMP  A1L
2cec a5 42            LDA  A0H
2cee e5 44            SBC  A1H
2cf0 90 ef            BCC  _loop

2cf2 20 ae ff         JSR  UNLSN
2cf5 4c 3a 2c         JMP  Close_File
2cf8          EndMod [Save_File] Size = 38 [$26]

2cf8 01 04 05 Bank_Order .BYTE 1,4,5,3,6,7,8,9

2d00 00       Z_Mem_Flag      .BYTE 0
2d01 00 00    Z_Timeout       .WORD 0

              ; ------- data for unit dialog --------
2d03 02       Unit_Buf  .BYTE 2               ; input length
2d04 30 38 00 Unit_Text .BYTE "08",0
              ; ------- data for file name dialog----
2d07 14       File_Buf  .BYTE 20              ; input length
2d08 73 61 76 File_Text .BYTE "savename",0
2d11 00 00 00           .FILL 12 (0) ; 12 bytes
2d1d 08       Game_Unit .BYTE 8

2d1e 0d 50 72 PRESSRET  .BYTE "\rPress <RETURN> to continue."
2d3a 53 61 76 SAVEUNIT  .BYTE "Save to unit:"
2d47 53 61 76 SAVEFILE  .BYTE "Save to file:"
2d54 52 65 73 LOADUNIT  .BYTE "Restore from unit:"
2d66 52 65 73 LOADFILE  .BYTE "Restore from file:"
2d78 20 4d 4f MORE      .BYTE " MORE "
2d7e 45 6e 64 EOS       .BYTE "End of session - power off"
2d98 4e 4f 20 NOSTORY   .BYTE "NO Z STORY"
2da2 0d 55 73 Msg_Attic .BYTE "\rUsing attic RAM at $0800-0000\r"
2dc1 42 49 54 BITSHIFTER .BYTE "BIT SHIFTER 26-OCT-2020\r"
2dd9 0d       InfoClr .BYTE CR
2dda 50 72 6f InfoPro .BYTE 'Program: '
2de3 31 30 30          .HEX4 START
2de7 20 2d 20         .BYTE ' - '
2dea 32 45 41          .HEX4 EOP
2dee 20               .BYTE ' '
2def 20 20 33          .DEC4 [Z_HEADER - START + 1] >> 8
2df3 20 50 61         .BYTE ' Pages\r'

2dfa 42 61 6e Bank0   .BYTE 'Bank  0: '
2e03 32 46 30          .HEX4 Z_HEADER
2e07 20 2d 20         .BYTE ' - '
2e0a 43 46 46          .HEX4 $CFFF
2e0e 20               .BYTE ' '
2e0f 20 31 36          .DEC4 [$D000 -Z_HEADER] >> 8
2e13 20 50 61         .BYTE ' Pages\r'

2e1a 42 61 6e Bank1   .BYTE 'Bank  1: '
2e23 39 39 30          .HEX4 $C800 - Z_HEADER
2e27 20 2d 20         .BYTE ' - '
2e2a 46 37 46          .HEX4 $F7FF
2e2e 20               .BYTE ' '
2e2f 20 20 39          .DEC4 [Z_HEADER + $3000] >> 8
2e33 20 50 61         .BYTE ' Pages\r'

2e3a 53 74 6f InfoSto .BYTE 'Story  :        Size    0 Pages\r',0
2e5b          InfoEnd

2e5b 20 20 20 BLANKS  .BYTE "            "

0034          STAT_SCORE = 52
0016          MOVES_COL  = 22

2e67 53 63 6f SCORE   .BYTE "Score: 0       Moves: 0     "
2e83 54 69 6d STIME   .BYTE "Time: 00:00 "
0007          SCORE_COL  =  7
0006          STIME_COL  =  6

2e8f 20 45 72 INTERR  .BYTE " Error 00 "

2e99 53 30 3a ConfigDel  .BYTE "S0:"          ; prefix for scratch command
2e9c 43 4f 4e Configname .BYTE "CONFIG"
2ea2 2c 57            .BYTE ",W"              ; postfix for write command

2ea4          CONFIG_START
2ea4 01       FG_Color   .BYTE WHITE          ; f1 133
2ea5 07       TI_Color   .BYTE YELLOW         ; f3 134
2ea6 06       BO_Color   .BYTE BLUE           ; f5 135
2ea7 06       BG_Color   .BYTE BLUE           ; f2 137
2ea8 02       TB_Color   .BYTE RED            ; f4 138
2ea9 00               .BYTE 0                 ; f6 139
2eaa 00               .BYTE 0                 ; f8 140
2eab          CONFIG_END

              ***
2eab          EOP
              ***

              *******************
              Module Load_Charset
              *******************

              * Copy charset from program to $0FF7 E000

2eab a9 d7            LDA  #<Charset
2ead 85 10            STA  LV0
2eaf a9 2e            LDA  #>Charset
2eb1 85 11            STA  LV1
2eb3 a9 00            LDA  #$00
2eb5 85 53            STA  X7L
2eb7 a9 e0            LDA  #$E0
2eb9 85 54            STA  X7H
2ebb a9 f7            LDA  #$F7
2ebd 85 55            STA  X8L
2ebf a9 0f            LDA  #$0F
2ec1 85 56            STA  X8H
2ec3 a2 08            LDX  #8
2ec5 a3 00            LDZ  #0
2ec7 b2 10    _loop   LDA  (LV0),Z
2ec9 ea 92 53         STA  [X7L],Z
2ecc 1b               INZ
2ecd d0 f8            BNE  _loop
2ecf e6 11            INC  LV1
2ed1 e6 54            INC  X7H
2ed3 ca               DEX
2ed4 d0 f1            BNE  _loop
2ed6 60               RTS
2ed7          EndMod [EOP] Size = 44 [$2c]

              *******
2ed7          Charset
              *******
                      .INCLUDE "Zchar.asm"
2ed7 ff                 .BITS  * * * * * * * * ; $0000
2ed8 c3                 .BITS  * * . . . . * *
2ed9 c3                 .BITS  * * . . . . * *
2eda c3                 .BITS  * * . . . . * *
2edb c3                 .BITS  * * . . . . * *
2edc c3                 .BITS  * * . . . . * *
2edd c3                 .BITS  * * . . . . * *
2ede ff                 .BITS  * * * * * * * *

2edf ff                 .BITS  * * * * * * * * ; $0001
2ee0 c0                 .BITS  * * . . . . . .
2ee1 c0                 .BITS  * * . . . . . .
2ee2 c0                 .BITS  * * . . . . . .
2ee3 c0                 .BITS  * * . . . . . .
2ee4 c0                 .BITS  * * . . . . . .
2ee5 c0                 .BITS  * * . . . . . .
2ee6 c0                 .BITS  * * . . . . . .

2ee7 18                 .BITS  . . . * * . . . ; $0002
2ee8 18                 .BITS  . . . * * . . .
2ee9 18                 .BITS  . . . * * . . .
2eea 18                 .BITS  . . . * * . . .
2eeb 18                 .BITS  . . . * * . . .
2eec 18                 .BITS  . . . * * . . .
2eed 18                 .BITS  . . . * * . . .
2eee ff                 .BITS  * * * * * * * *

2eef 03                 .BITS  . . . . . . * * ; $0003
2ef0 03                 .BITS  . . . . . . * *
2ef1 03                 .BITS  . . . . . . * *
2ef2 03                 .BITS  . . . . . . * *
2ef3 03                 .BITS  . . . . . . * *
2ef4 03                 .BITS  . . . . . . * *
2ef5 03                 .BITS  . . . . . . * *
2ef6 ff                 .BITS  * * * * * * * *

2ef7 0c                 .BITS  . . . . * * . . ; $0004
2ef8 18                 .BITS  . . . * * . . .
2ef9 30                 .BITS  . . * * . . . .
2efa 7e                 .BITS  . * * * * * * .
2efb 0c                 .BITS  . . . . * * . .
2efc 18                 .BITS  . . . * * . . .
2efd 30                 .BITS  . . * * . . . .
2efe 00                 .BITS  . . . . . . . .

2eff ff                 .BITS  * * * * * * * * ; $0005
2f00 c3                 .BITS  * * . . . . * *
2f01 e7                 .BITS  * * * . . * * *
2f02 db                 .BITS  * * . * * . * *
2f03 db                 .BITS  * * . * * . * *
2f04 e7                 .BITS  * * * . . * * *
2f05 c3                 .BITS  * * . . . . * *
2f06 ff                 .BITS  * * * * * * * *

2f07 00                 .BITS  . . . . . . . . ; $0006
2f08 01                 .BITS  . . . . . . . *
2f09 03                 .BITS  . . . . . . * *
2f0a 06                 .BITS  . . . . . * * .
2f0b cc                 .BITS  * * . . * * . .
2f0c 78                 .BITS  . * * * * . . .
2f0d 30                 .BITS  . . * * . . . .
2f0e 00                 .BITS  . . . . . . . .

2f0f 3c                 .BITS  . . * * * * . . ; $0007
2f10 66                 .BITS  . * * . . * * .
2f11 c3                 .BITS  * * . . . . * *
2f12 c3                 .BITS  * * . . . . * *
2f13 ff                 .BITS  * * * * * * * *
2f14 24                 .BITS  . . * . . * . .
2f15 e7                 .BITS  * * * . . * * *
2f16 00                 .BITS  . . . . . . . .

2f17 00                 .BITS  . . . . . . . . ; $0008
2f18 00                 .BITS  . . . . . . . .
2f19 30                 .BITS  . . * * . . . .
2f1a 60                 .BITS  . * * . . . . .
2f1b ff                 .BITS  * * * * * * * *
2f1c 60                 .BITS  . * * . . . . .
2f1d 30                 .BITS  . . * * . . . .
2f1e 00                 .BITS  . . . . . . . .

2f1f 00                 .BITS  . . . . . . . . ; $0009
2f20 00                 .BITS  . . . . . . . .
2f21 0c                 .BITS  . . . . * * . .
2f22 06                 .BITS  . . . . . * * .
2f23 ff                 .BITS  * * * * * * * *
2f24 06                 .BITS  . . . . . * * .
2f25 0c                 .BITS  . . . . * * . .
2f26 00                 .BITS  . . . . . . . .

2f27 18                 .BITS  . . . * * . . . ; $000A
2f28 18                 .BITS  . . . * * . . .
2f29 18                 .BITS  . . . * * . . .
2f2a 18                 .BITS  . . . * * . . .
2f2b db                 .BITS  * * . * * . * *
2f2c 7e                 .BITS  . * * * * * * .
2f2d 3c                 .BITS  . . * * * * . .
2f2e 18                 .BITS  . . . * * . . .

2f2f 18                 .BITS  . . . * * . . . ; $000B
2f30 3c                 .BITS  . . * * * * . .
2f31 7e                 .BITS  . * * * * * * .
2f32 db                 .BITS  * * . * * . * *
2f33 18                 .BITS  . . . * * . . .
2f34 18                 .BITS  . . . * * . . .
2f35 18                 .BITS  . . . * * . . .
2f36 18                 .BITS  . . . * * . . .

2f37 18                 .BITS  . . . * * . . . ; $000C
2f38 5a                 .BITS  . * . * * . * .
2f39 3c                 .BITS  . . * * * * . .
2f3a 99                 .BITS  * . . * * . . *
2f3b db                 .BITS  * * . * * . * *
2f3c 7e                 .BITS  . * * * * * * .
2f3d 3c                 .BITS  . . * * * * . .
2f3e 18                 .BITS  . . . * * . . .

2f3f 00                 .BITS  . . . . . . . . ; $000D
2f40 03                 .BITS  . . . . . . * *
2f41 33                 .BITS  . . * * . . * *
2f42 63                 .BITS  . * * . . . * *
2f43 fe                 .BITS  * * * * * * * .
2f44 60                 .BITS  . * * . . . . .
2f45 30                 .BITS  . . * * . . . .
2f46 00                 .BITS  . . . . . . . .

2f47 3c                 .BITS  . . * * * * . . ; $000E
2f48 66                 .BITS  . * * . . * * .
2f49 ff                 .BITS  * * * * * * * *
2f4a db                 .BITS  * * . * * . * *
2f4b db                 .BITS  * * . * * . * *
2f4c ff                 .BITS  * * * * * * * *
2f4d 66                 .BITS  . * * . . * * .
2f4e 3c                 .BITS  . . * * * * . .

2f4f 3c                 .BITS  . . * * * * . . ; $000F
2f50 66                 .BITS  . * * . . * * .
2f51 c3                 .BITS  * * . . . . * *
2f52 db                 .BITS  * * . * * . * *
2f53 db                 .BITS  * * . * * . * *
2f54 c3                 .BITS  * * . . . . * *
2f55 66                 .BITS  . * * . . * * .
2f56 3c                 .BITS  . . * * * * . .

2f57 ff                 .BITS  * * * * * * * * ; $0010
2f58 c3                 .BITS  * * . . . . * *
2f59 c3                 .BITS  * * . . . . * *
2f5a ff                 .BITS  * * * * * * * *
2f5b c3                 .BITS  * * . . . . * *
2f5c c3                 .BITS  * * . . . . * *
2f5d c3                 .BITS  * * . . . . * *
2f5e ff                 .BITS  * * * * * * * *

2f5f 3c                 .BITS  . . * * * * . . ; $0011
2f60 7e                 .BITS  . * * * * * * .
2f61 db                 .BITS  * * . * * . * *
2f62 db                 .BITS  * * . * * . * *
2f63 df                 .BITS  * * . * * * * *
2f64 c3                 .BITS  * * . . . . * *
2f65 66                 .BITS  . * * . . * * .
2f66 3c                 .BITS  . . * * * * . .

2f67 3c                 .BITS  . . * * * * . . ; $0012
2f68 66                 .BITS  . * * . . * * .
2f69 c3                 .BITS  * * . . . . * *
2f6a df                 .BITS  * * . * * * * *
2f6b db                 .BITS  * * . * * . * *
2f6c db                 .BITS  * * . * * . * *
2f6d 7e                 .BITS  . * * * * * * .
2f6e 3c                 .BITS  . . * * * * . .

2f6f 3c                 .BITS  . . * * * * . . ; $0013
2f70 66                 .BITS  . * * . . * * .
2f71 c3                 .BITS  * * . . . . * *
2f72 fb                 .BITS  * * * * * . * *
2f73 db                 .BITS  * * . * * . * *
2f74 db                 .BITS  * * . * * . * *
2f75 7e                 .BITS  . * * * * * * .
2f76 3c                 .BITS  . . * * * * . .

2f77 3c                 .BITS  . . * * * * . . ; $0014
2f78 7e                 .BITS  . * * * * * * .
2f79 db                 .BITS  * * . * * . * *
2f7a db                 .BITS  * * . * * . * *
2f7b fb                 .BITS  * * * * * . * *
2f7c c3                 .BITS  * * . . . . * *
2f7d 66                 .BITS  . * * . . * * .
2f7e 3c                 .BITS  . . * * * * . .

2f7f 00                 .BITS  . . . . . . . . ; $0015
2f80 01                 .BITS  . . . . . . . *
2f81 33                 .BITS  . . * * . . * *
2f82 1e                 .BITS  . . . * * * * .
2f83 ce                 .BITS  * * . . * * * .
2f84 7b                 .BITS  . * * * * . * *
2f85 31                 .BITS  . . * * . . . *
2f86 00                 .BITS  . . . . . . . .

2f87 7e                 .BITS  . * * * * * * . ; $0016
2f88 66                 .BITS  . * * . . * * .
2f89 66                 .BITS  . * * . . * * .
2f8a 66                 .BITS  . * * . . * * .
2f8b 66                 .BITS  . * * . . * * .
2f8c 66                 .BITS  . * * . . * * .
2f8d 66                 .BITS  . * * . . * * .
2f8e e7                 .BITS  * * * . . * * *

2f8f 03                 .BITS  . . . . . . * * ; $0017
2f90 03                 .BITS  . . . . . . * *
2f91 03                 .BITS  . . . . . . * *
2f92 ff                 .BITS  * * * * * * * *
2f93 03                 .BITS  . . . . . . * *
2f94 03                 .BITS  . . . . . . * *
2f95 03                 .BITS  . . . . . . * *
2f96 00                 .BITS  . . . . . . . .

2f97 ff                 .BITS  * * * * * * * * ; $0018
2f98 66                 .BITS  . * * . . * * .
2f99 3c                 .BITS  . . * * * * . .
2f9a 18                 .BITS  . . . * * . . .
2f9b 18                 .BITS  . . . * * . . .
2f9c 3c                 .BITS  . . * * * * . .
2f9d 66                 .BITS  . * * . . * * .
2f9e ff                 .BITS  * * * * * * * *

2f9f 18                 .BITS  . . . * * . . . ; $0019
2fa0 18                 .BITS  . . . * * . . .
2fa1 3c                 .BITS  . . * * * * . .
2fa2 3c                 .BITS  . . * * * * . .
2fa3 3c                 .BITS  . . * * * * . .
2fa4 3c                 .BITS  . . * * * * . .
2fa5 18                 .BITS  . . . * * . . .
2fa6 18                 .BITS  . . . * * . . .

2fa7 3c                 .BITS  . . * * * * . . ; $001A
2fa8 66                 .BITS  . * * . . * * .
2fa9 66                 .BITS  . * * . . * * .
2faa 30                 .BITS  . . * * . . . .
2fab 18                 .BITS  . . . * * . . .
2fac 00                 .BITS  . . . . . . . .
2fad 18                 .BITS  . . . * * . . .
2fae 00                 .BITS  . . . . . . . .

2faf 3c                 .BITS  . . * * * * . . ; $001B
2fb0 66                 .BITS  . * * . . * * .
2fb1 c3                 .BITS  * * . . . . * *
2fb2 ff                 .BITS  * * * * * * * *
2fb3 c3                 .BITS  * * . . . . * *
2fb4 c3                 .BITS  * * . . . . * *
2fb5 66                 .BITS  . * * . . * * .
2fb6 3c                 .BITS  . . * * * * . .

2fb7 ff                 .BITS  * * * * * * * * ; $001C
2fb8 db                 .BITS  * * . * * . * *
2fb9 db                 .BITS  * * . * * . * *
2fba db                 .BITS  * * . * * . * *
2fbb fb                 .BITS  * * * * * . * *
2fbc c3                 .BITS  * * . . . . * *
2fbd c3                 .BITS  * * . . . . * *
2fbe ff                 .BITS  * * * * * * * *

2fbf ff                 .BITS  * * * * * * * * ; $001D
2fc0 c3                 .BITS  * * . . . . * *
2fc1 c3                 .BITS  * * . . . . * *
2fc2 fb                 .BITS  * * * * * . * *
2fc3 db                 .BITS  * * . * * . * *
2fc4 db                 .BITS  * * . * * . * *
2fc5 db                 .BITS  * * . * * . * *
2fc6 ff                 .BITS  * * * * * * * *

2fc7 ff                 .BITS  * * * * * * * * ; $001E
2fc8 c3                 .BITS  * * . . . . * *
2fc9 c3                 .BITS  * * . . . . * *
2fca df                 .BITS  * * . * * * * *
2fcb db                 .BITS  * * . * * . * *
2fcc db                 .BITS  * * . * * . * *
2fcd db                 .BITS  * * . * * . * *
2fce ff                 .BITS  * * * * * * * *

2fcf ff                 .BITS  * * * * * * * * ; $001F
2fd0 db                 .BITS  * * . * * . * *
2fd1 db                 .BITS  * * . * * . * *
2fd2 db                 .BITS  * * . * * . * *
2fd3 df                 .BITS  * * . * * * * *
2fd4 c3                 .BITS  * * . . . . * *
2fd5 c3                 .BITS  * * . . . . * *
2fd6 ff                 .BITS  * * * * * * * *

2fd7 00                 .BITS  . . . . . . . . ; $0020
2fd8 00                 .BITS  . . . . . . . .
2fd9 00                 .BITS  . . . . . . . .
2fda 00                 .BITS  . . . . . . . .
2fdb 00                 .BITS  . . . . . . . .
2fdc 00                 .BITS  . . . . . . . .
2fdd 00                 .BITS  . . . . . . . .
2fde 00                 .BITS  . . . . . . . .

2fdf 18                 .BITS  . . . * * . . . ; $0021
2fe0 18                 .BITS  . . . * * . . .
2fe1 18                 .BITS  . . . * * . . .
2fe2 18                 .BITS  . . . * * . . .
2fe3 18                 .BITS  . . . * * . . .
2fe4 00                 .BITS  . . . . . . . .
2fe5 18                 .BITS  . . . * * . . .
2fe6 00                 .BITS  . . . . . . . .

2fe7 6c                 .BITS  . * * . * * . . ; $0022
2fe8 6c                 .BITS  . * * . * * . .
2fe9 6c                 .BITS  . * * . * * . .
2fea 00                 .BITS  . . . . . . . .
2feb 00                 .BITS  . . . . . . . .
2fec 00                 .BITS  . . . . . . . .
2fed 00                 .BITS  . . . . . . . .
2fee 00                 .BITS  . . . . . . . .

2fef 6c                 .BITS  . * * . * * . . ; $0023
2ff0 6c                 .BITS  . * * . * * . .
2ff1 fe                 .BITS  * * * * * * * .
2ff2 6c                 .BITS  . * * . * * . .
2ff3 fe                 .BITS  * * * * * * * .
2ff4 6c                 .BITS  . * * . * * . .
2ff5 6c                 .BITS  . * * . * * . .
2ff6 00                 .BITS  . . . . . . . .

2ff7 18                 .BITS  . . . * * . . . ; $0024
2ff8 3e                 .BITS  . . * * * * * .
2ff9 58                 .BITS  . * . * * . . .
2ffa 3c                 .BITS  . . * * * * . .
2ffb 1a                 .BITS  . . . * * . * .
2ffc 7c                 .BITS  . * * * * * . .
2ffd 18                 .BITS  . . . * * . . .
2ffe 00                 .BITS  . . . . . . . .

2fff 00                 .BITS  . . . . . . . . ; $0025
3000 c6                 .BITS  * * . . . * * .
3001 cc                 .BITS  * * . . * * . .
3002 18                 .BITS  . . . * * . . .
3003 30                 .BITS  . . * * . . . .
3004 66                 .BITS  . * * . . * * .
3005 c6                 .BITS  * * . . . * * .
3006 00                 .BITS  . . . . . . . .

3007 38                 .BITS  . . * * * . . . ; $0026
3008 6c                 .BITS  . * * . * * . .
3009 38                 .BITS  . . * * * . . .
300a 76                 .BITS  . * * * . * * .
300b dc                 .BITS  * * . * * * . .
300c cc                 .BITS  * * . . * * . .
300d 76                 .BITS  . * * * . * * .
300e 00                 .BITS  . . . . . . . .

300f 18                 .BITS  . . . * * . . . ; $0027
3010 18                 .BITS  . . . * * . . .
3011 30                 .BITS  . . * * . . . .
3012 00                 .BITS  . . . . . . . .
3013 00                 .BITS  . . . . . . . .
3014 00                 .BITS  . . . . . . . .
3015 00                 .BITS  . . . . . . . .
3016 00                 .BITS  . . . . . . . .

3017 0c                 .BITS  . . . . * * . . ; $0028
3018 18                 .BITS  . . . * * . . .
3019 30                 .BITS  . . * * . . . .
301a 30                 .BITS  . . * * . . . .
301b 30                 .BITS  . . * * . . . .
301c 18                 .BITS  . . . * * . . .
301d 0c                 .BITS  . . . . * * . .
301e 00                 .BITS  . . . . . . . .

301f 30                 .BITS  . . * * . . . . ; $0029
3020 18                 .BITS  . . . * * . . .
3021 0c                 .BITS  . . . . * * . .
3022 0c                 .BITS  . . . . * * . .
3023 0c                 .BITS  . . . . * * . .
3024 18                 .BITS  . . . * * . . .
3025 30                 .BITS  . . * * . . . .
3026 00                 .BITS  . . . . . . . .

3027 00                 .BITS  . . . . . . . . ; $002A
3028 66                 .BITS  . * * . . * * .
3029 3c                 .BITS  . . * * * * . .
302a ff                 .BITS  * * * * * * * *
302b 3c                 .BITS  . . * * * * . .
302c 66                 .BITS  . * * . . * * .
302d 00                 .BITS  . . . . . . . .
302e 00                 .BITS  . . . . . . . .

302f 00                 .BITS  . . . . . . . . ; $002B
3030 18                 .BITS  . . . * * . . .
3031 18                 .BITS  . . . * * . . .
3032 7e                 .BITS  . * * * * * * .
3033 18                 .BITS  . . . * * . . .
3034 18                 .BITS  . . . * * . . .
3035 00                 .BITS  . . . . . . . .
3036 00                 .BITS  . . . . . . . .

3037 00                 .BITS  . . . . . . . . ; $002C
3038 00                 .BITS  . . . . . . . .
3039 00                 .BITS  . . . . . . . .
303a 00                 .BITS  . . . . . . . .
303b 00                 .BITS  . . . . . . . .
303c 18                 .BITS  . . . * * . . .
303d 18                 .BITS  . . . * * . . .
303e 30                 .BITS  . . * * . . . .

303f 00                 .BITS  . . . . . . . . ; $002D
3040 00                 .BITS  . . . . . . . .
3041 00                 .BITS  . . . . . . . .
3042 7e                 .BITS  . * * * * * * .
3043 00                 .BITS  . . . . . . . .
3044 00                 .BITS  . . . . . . . .
3045 00                 .BITS  . . . . . . . .
3046 00                 .BITS  . . . . . . . .

3047 00                 .BITS  . . . . . . . . ; $002E
3048 00                 .BITS  . . . . . . . .
3049 00                 .BITS  . . . . . . . .
304a 00                 .BITS  . . . . . . . .
304b 00                 .BITS  . . . . . . . .
304c 18                 .BITS  . . . * * . . .
304d 18                 .BITS  . . . * * . . .
304e 00                 .BITS  . . . . . . . .

304f 06                 .BITS  . . . . . * * . ; $002F
3050 0c                 .BITS  . . . . * * . .
3051 18                 .BITS  . . . * * . . .
3052 30                 .BITS  . . * * . . . .
3053 60                 .BITS  . * * . . . . .
3054 c0                 .BITS  * * . . . . . .
3055 80                 .BITS  * . . . . . . .
3056 00                 .BITS  . . . . . . . .

3057 7c                 .BITS  . * * * * * . . ; $0030
3058 c6                 .BITS  * * . . . * * .
3059 ce                 .BITS  * * . . * * * .
305a d6                 .BITS  * * . * . * * .
305b e6                 .BITS  * * * . . * * .
305c c6                 .BITS  * * . . . * * .
305d 7c                 .BITS  . * * * * * . .
305e 00                 .BITS  . . . . . . . .

305f 18                 .BITS  . . . * * . . . ; $0031
3060 38                 .BITS  . . * * * . . .
3061 18                 .BITS  . . . * * . . .
3062 18                 .BITS  . . . * * . . .
3063 18                 .BITS  . . . * * . . .
3064 18                 .BITS  . . . * * . . .
3065 7e                 .BITS  . * * * * * * .
3066 00                 .BITS  . . . . . . . .

3067 3c                 .BITS  . . * * * * . . ; $0032
3068 66                 .BITS  . * * . . * * .
3069 06                 .BITS  . . . . . * * .
306a 3c                 .BITS  . . * * * * . .
306b 60                 .BITS  . * * . . . . .
306c 66                 .BITS  . * * . . * * .
306d 7e                 .BITS  . * * * * * * .
306e 00                 .BITS  . . . . . . . .

306f 3c                 .BITS  . . * * * * . . ; $0033
3070 66                 .BITS  . * * . . * * .
3071 06                 .BITS  . . . . . * * .
3072 1c                 .BITS  . . . * * * . .
3073 06                 .BITS  . . . . . * * .
3074 66                 .BITS  . * * . . * * .
3075 3c                 .BITS  . . * * * * . .
3076 00                 .BITS  . . . . . . . .

3077 1c                 .BITS  . . . * * * . . ; $0034
3078 3c                 .BITS  . . * * * * . .
3079 6c                 .BITS  . * * . * * . .
307a cc                 .BITS  * * . . * * . .
307b fe                 .BITS  * * * * * * * .
307c 0c                 .BITS  . . . . * * . .
307d 1e                 .BITS  . . . * * * * .
307e 00                 .BITS  . . . . . . . .

307f 7e                 .BITS  . * * * * * * . ; $0035
3080 62                 .BITS  . * * . . . * .
3081 60                 .BITS  . * * . . . . .
3082 7c                 .BITS  . * * * * * . .
3083 06                 .BITS  . . . . . * * .
3084 66                 .BITS  . * * . . * * .
3085 3c                 .BITS  . . * * * * . .
3086 00                 .BITS  . . . . . . . .

3087 3c                 .BITS  . . * * * * . . ; $0036
3088 66                 .BITS  . * * . . * * .
3089 60                 .BITS  . * * . . . . .
308a 7c                 .BITS  . * * * * * . .
308b 66                 .BITS  . * * . . * * .
308c 66                 .BITS  . * * . . * * .
308d 3c                 .BITS  . . * * * * . .
308e 00                 .BITS  . . . . . . . .

308f 7e                 .BITS  . * * * * * * . ; $0037
3090 66                 .BITS  . * * . . * * .
3091 06                 .BITS  . . . . . * * .
3092 0c                 .BITS  . . . . * * . .
3093 18                 .BITS  . . . * * . . .
3094 18                 .BITS  . . . * * . . .
3095 18                 .BITS  . . . * * . . .
3096 00                 .BITS  . . . . . . . .

3097 3c                 .BITS  . . * * * * . . ; $0038
3098 66                 .BITS  . * * . . * * .
3099 66                 .BITS  . * * . . * * .
309a 3c                 .BITS  . . * * * * . .
309b 66                 .BITS  . * * . . * * .
309c 66                 .BITS  . * * . . * * .
309d 3c                 .BITS  . . * * * * . .
309e 00                 .BITS  . . . . . . . .

309f 3c                 .BITS  . . * * * * . . ; $0039
30a0 66                 .BITS  . * * . . * * .
30a1 66                 .BITS  . * * . . * * .
30a2 3e                 .BITS  . . * * * * * .
30a3 06                 .BITS  . . . . . * * .
30a4 66                 .BITS  . * * . . * * .
30a5 3c                 .BITS  . . * * * * . .
30a6 00                 .BITS  . . . . . . . .

30a7 00                 .BITS  . . . . . . . . ; $003A
30a8 00                 .BITS  . . . . . . . .
30a9 18                 .BITS  . . . * * . . .
30aa 18                 .BITS  . . . * * . . .
30ab 00                 .BITS  . . . . . . . .
30ac 18                 .BITS  . . . * * . . .
30ad 18                 .BITS  . . . * * . . .
30ae 00                 .BITS  . . . . . . . .

30af 00                 .BITS  . . . . . . . . ; $003B
30b0 00                 .BITS  . . . . . . . .
30b1 18                 .BITS  . . . * * . . .
30b2 18                 .BITS  . . . * * . . .
30b3 00                 .BITS  . . . . . . . .
30b4 18                 .BITS  . . . * * . . .
30b5 18                 .BITS  . . . * * . . .
30b6 30                 .BITS  . . * * . . . .

30b7 0c                 .BITS  . . . . * * . . ; $003C
30b8 18                 .BITS  . . . * * . . .
30b9 30                 .BITS  . . * * . . . .
30ba 60                 .BITS  . * * . . . . .
30bb 30                 .BITS  . . * * . . . .
30bc 18                 .BITS  . . . * * . . .
30bd 0c                 .BITS  . . . . * * . .
30be 00                 .BITS  . . . . . . . .

30bf 00                 .BITS  . . . . . . . . ; $003D
30c0 00                 .BITS  . . . . . . . .
30c1 7e                 .BITS  . * * * * * * .
30c2 00                 .BITS  . . . . . . . .
30c3 00                 .BITS  . . . . . . . .
30c4 7e                 .BITS  . * * * * * * .
30c5 00                 .BITS  . . . . . . . .
30c6 00                 .BITS  . . . . . . . .

30c7 60                 .BITS  . * * . . . . . ; $003E
30c8 30                 .BITS  . . * * . . . .
30c9 18                 .BITS  . . . * * . . .
30ca 0c                 .BITS  . . . . * * . .
30cb 18                 .BITS  . . . * * . . .
30cc 30                 .BITS  . . * * . . . .
30cd 60                 .BITS  . * * . . . . .
30ce 00                 .BITS  . . . . . . . .

30cf 3c                 .BITS  . . * * * * . . ; $003F
30d0 66                 .BITS  . * * . . * * .
30d1 66                 .BITS  . * * . . * * .
30d2 0c                 .BITS  . . . . * * . .
30d3 18                 .BITS  . . . * * . . .
30d4 00                 .BITS  . . . . . . . .
30d5 18                 .BITS  . . . * * . . .
30d6 00                 .BITS  . . . . . . . .

30d7 7c                 .BITS  . * * * * * . . ; $0040
30d8 c6                 .BITS  * * . . . * * .
30d9 de                 .BITS  * * . * * * * .
30da de                 .BITS  * * . * * * * .
30db de                 .BITS  * * . * * * * .
30dc c0                 .BITS  * * . . . . . .
30dd 7c                 .BITS  . * * * * * . .
30de 00                 .BITS  . . . . . . . .

30df 18                 .BITS  . . . * * . . . ; $0041
30e0 3c                 .BITS  . . * * * * . .
30e1 66                 .BITS  . * * . . * * .
30e2 66                 .BITS  . * * . . * * .
30e3 7e                 .BITS  . * * * * * * .
30e4 66                 .BITS  . * * . . * * .
30e5 66                 .BITS  . * * . . * * .
30e6 00                 .BITS  . . . . . . . .

30e7 fc                 .BITS  * * * * * * . . ; $0042
30e8 66                 .BITS  . * * . . * * .
30e9 66                 .BITS  . * * . . * * .
30ea 7c                 .BITS  . * * * * * . .
30eb 66                 .BITS  . * * . . * * .
30ec 66                 .BITS  . * * . . * * .
30ed fc                 .BITS  * * * * * * . .
30ee 00                 .BITS  . . . . . . . .

30ef 3c                 .BITS  . . * * * * . . ; $0043
30f0 66                 .BITS  . * * . . * * .
30f1 c0                 .BITS  * * . . . . . .
30f2 c0                 .BITS  * * . . . . . .
30f3 c0                 .BITS  * * . . . . . .
30f4 66                 .BITS  . * * . . * * .
30f5 3c                 .BITS  . . * * * * . .
30f6 00                 .BITS  . . . . . . . .

30f7 f8                 .BITS  * * * * * . . . ; $0044
30f8 6c                 .BITS  . * * . * * . .
30f9 66                 .BITS  . * * . . * * .
30fa 66                 .BITS  . * * . . * * .
30fb 66                 .BITS  . * * . . * * .
30fc 6c                 .BITS  . * * . * * . .
30fd f8                 .BITS  * * * * * . . .
30fe 00                 .BITS  . . . . . . . .

30ff fe                 .BITS  * * * * * * * . ; $0045
3100 62                 .BITS  . * * . . . * .
3101 68                 .BITS  . * * . * . . .
3102 78                 .BITS  . * * * * . . .
3103 68                 .BITS  . * * . * . . .
3104 62                 .BITS  . * * . . . * .
3105 fe                 .BITS  * * * * * * * .
3106 00                 .BITS  . . . . . . . .

3107 fe                 .BITS  * * * * * * * . ; $0046
3108 62                 .BITS  . * * . . . * .
3109 68                 .BITS  . * * . * . . .
310a 78                 .BITS  . * * * * . . .
310b 68                 .BITS  . * * . * . . .
310c 60                 .BITS  . * * . . . . .
310d f0                 .BITS  * * * * . . . .
310e 00                 .BITS  . . . . . . . .

310f 3c                 .BITS  . . * * * * . . ; $0047
3110 66                 .BITS  . * * . . * * .
3111 c0                 .BITS  * * . . . . . .
3112 c0                 .BITS  * * . . . . . .
3113 ce                 .BITS  * * . . * * * .
3114 66                 .BITS  . * * . . * * .
3115 3e                 .BITS  . . * * * * * .
3116 00                 .BITS  . . . . . . . .

3117 66                 .BITS  . * * . . * * . ; $0048
3118 66                 .BITS  . * * . . * * .
3119 66                 .BITS  . * * . . * * .
311a 7e                 .BITS  . * * * * * * .
311b 66                 .BITS  . * * . . * * .
311c 66                 .BITS  . * * . . * * .
311d 66                 .BITS  . * * . . * * .
311e 00                 .BITS  . . . . . . . .

311f 7e                 .BITS  . * * * * * * . ; $0049
3120 18                 .BITS  . . . * * . . .
3121 18                 .BITS  . . . * * . . .
3122 18                 .BITS  . . . * * . . .
3123 18                 .BITS  . . . * * . . .
3124 18                 .BITS  . . . * * . . .
3125 7e                 .BITS  . * * * * * * .
3126 00                 .BITS  . . . . . . . .

3127 1e                 .BITS  . . . * * * * . ; $004A
3128 0c                 .BITS  . . . . * * . .
3129 0c                 .BITS  . . . . * * . .
312a 0c                 .BITS  . . . . * * . .
312b cc                 .BITS  * * . . * * . .
312c cc                 .BITS  * * . . * * . .
312d 78                 .BITS  . * * * * . . .
312e 00                 .BITS  . . . . . . . .

312f e6                 .BITS  * * * . . * * . ; $004B
3130 66                 .BITS  . * * . . * * .
3131 6c                 .BITS  . * * . * * . .
3132 78                 .BITS  . * * * * . . .
3133 6c                 .BITS  . * * . * * . .
3134 66                 .BITS  . * * . . * * .
3135 e6                 .BITS  * * * . . * * .
3136 00                 .BITS  . . . . . . . .

3137 f0                 .BITS  * * * * . . . . ; $004C
3138 60                 .BITS  . * * . . . . .
3139 60                 .BITS  . * * . . . . .
313a 60                 .BITS  . * * . . . . .
313b 62                 .BITS  . * * . . . * .
313c 66                 .BITS  . * * . . * * .
313d fe                 .BITS  * * * * * * * .
313e 00                 .BITS  . . . . . . . .

313f c6                 .BITS  * * . . . * * . ; $004D
3140 ee                 .BITS  * * * . * * * .
3141 fe                 .BITS  * * * * * * * .
3142 fe                 .BITS  * * * * * * * .
3143 d6                 .BITS  * * . * . * * .
3144 c6                 .BITS  * * . . . * * .
3145 c6                 .BITS  * * . . . * * .
3146 00                 .BITS  . . . . . . . .

3147 c6                 .BITS  * * . . . * * . ; $004E
3148 e6                 .BITS  * * * . . * * .
3149 f6                 .BITS  * * * * . * * .
314a de                 .BITS  * * . * * * * .
314b ce                 .BITS  * * . . * * * .
314c c6                 .BITS  * * . . . * * .
314d c6                 .BITS  * * . . . * * .
314e 00                 .BITS  . . . . . . . .

314f 38                 .BITS  . . * * * . . . ; $004F
3150 6c                 .BITS  . * * . * * . .
3151 c6                 .BITS  * * . . . * * .
3152 c6                 .BITS  * * . . . * * .
3153 c6                 .BITS  * * . . . * * .
3154 6c                 .BITS  . * * . * * . .
3155 38                 .BITS  . . * * * . . .
3156 00                 .BITS  . . . . . . . .

3157 fc                 .BITS  * * * * * * . . ; $0050
3158 66                 .BITS  . * * . . * * .
3159 66                 .BITS  . * * . . * * .
315a 7c                 .BITS  . * * * * * . .
315b 60                 .BITS  . * * . . . . .
315c 60                 .BITS  . * * . . . . .
315d f0                 .BITS  * * * * . . . .
315e 00                 .BITS  . . . . . . . .

315f 38                 .BITS  . . * * * . . . ; $0051
3160 6c                 .BITS  . * * . * * . .
3161 c6                 .BITS  * * . . . * * .
3162 c6                 .BITS  * * . . . * * .
3163 da                 .BITS  * * . * * . * .
3164 cc                 .BITS  * * . . * * . .
3165 76                 .BITS  . * * * . * * .
3166 00                 .BITS  . . . . . . . .

3167 fc                 .BITS  * * * * * * . . ; $0052
3168 66                 .BITS  . * * . . * * .
3169 66                 .BITS  . * * . . * * .
316a 7c                 .BITS  . * * * * * . .
316b 6c                 .BITS  . * * . * * . .
316c 66                 .BITS  . * * . . * * .
316d e6                 .BITS  * * * . . * * .
316e 00                 .BITS  . . . . . . . .

316f 3c                 .BITS  . . * * * * . . ; $0053
3170 66                 .BITS  . * * . . * * .
3171 60                 .BITS  . * * . . . . .
3172 3c                 .BITS  . . * * * * . .
3173 06                 .BITS  . . . . . * * .
3174 66                 .BITS  . * * . . * * .
3175 3c                 .BITS  . . * * * * . .
3176 00                 .BITS  . . . . . . . .

3177 7e                 .BITS  . * * * * * * . ; $0054
3178 5a                 .BITS  . * . * * . * .
3179 18                 .BITS  . . . * * . . .
317a 18                 .BITS  . . . * * . . .
317b 18                 .BITS  . . . * * . . .
317c 18                 .BITS  . . . * * . . .
317d 3c                 .BITS  . . * * * * . .
317e 00                 .BITS  . . . . . . . .

317f 66                 .BITS  . * * . . * * . ; $0055
3180 66                 .BITS  . * * . . * * .
3181 66                 .BITS  . * * . . * * .
3182 66                 .BITS  . * * . . * * .
3183 66                 .BITS  . * * . . * * .
3184 66                 .BITS  . * * . . * * .
3185 3c                 .BITS  . . * * * * . .
3186 00                 .BITS  . . . . . . . .

3187 66                 .BITS  . * * . . * * . ; $0056
3188 66                 .BITS  . * * . . * * .
3189 66                 .BITS  . * * . . * * .
318a 66                 .BITS  . * * . . * * .
318b 66                 .BITS  . * * . . * * .
318c 3c                 .BITS  . . * * * * . .
318d 18                 .BITS  . . . * * . . .
318e 00                 .BITS  . . . . . . . .

318f c6                 .BITS  * * . . . * * . ; $0057
3190 c6                 .BITS  * * . . . * * .
3191 c6                 .BITS  * * . . . * * .
3192 d6                 .BITS  * * . * . * * .
3193 fe                 .BITS  * * * * * * * .
3194 ee                 .BITS  * * * . * * * .
3195 c6                 .BITS  * * . . . * * .
3196 00                 .BITS  . . . . . . . .

3197 c6                 .BITS  * * . . . * * . ; $0058
3198 6c                 .BITS  . * * . * * . .
3199 38                 .BITS  . . * * * . . .
319a 38                 .BITS  . . * * * . . .
319b 6c                 .BITS  . * * . * * . .
319c c6                 .BITS  * * . . . * * .
319d c6                 .BITS  * * . . . * * .
319e 00                 .BITS  . . . . . . . .

319f 66                 .BITS  . * * . . * * . ; $0059
31a0 66                 .BITS  . * * . . * * .
31a1 66                 .BITS  . * * . . * * .
31a2 3c                 .BITS  . . * * * * . .
31a3 18                 .BITS  . . . * * . . .
31a4 18                 .BITS  . . . * * . . .
31a5 3c                 .BITS  . . * * * * . .
31a6 00                 .BITS  . . . . . . . .

31a7 fe                 .BITS  * * * * * * * . ; $005A
31a8 c6                 .BITS  * * . . . * * .
31a9 8c                 .BITS  * . . . * * . .
31aa 18                 .BITS  . . . * * . . .
31ab 32                 .BITS  . . * * . . * .
31ac 66                 .BITS  . * * . . * * .
31ad fe                 .BITS  * * * * * * * .
31ae 00                 .BITS  . . . . . . . .

31af 3c                 .BITS  . . * * * * . . ; $005B
31b0 30                 .BITS  . . * * . . . .
31b1 30                 .BITS  . . * * . . . .
31b2 30                 .BITS  . . * * . . . .
31b3 30                 .BITS  . . * * . . . .
31b4 30                 .BITS  . . * * . . . .
31b5 3c                 .BITS  . . * * * * . .
31b6 00                 .BITS  . . . . . . . .

31b7 c0                 .BITS  * * . . . . . . ; $005C
31b8 60                 .BITS  . * * . . . . .
31b9 30                 .BITS  . . * * . . . .
31ba 18                 .BITS  . . . * * . . .
31bb 0c                 .BITS  . . . . * * . .
31bc 06                 .BITS  . . . . . * * .
31bd 02                 .BITS  . . . . . . * .
31be 00                 .BITS  . . . . . . . .

31bf 3c                 .BITS  . . * * * * . . ; $005D
31c0 0c                 .BITS  . . . . * * . .
31c1 0c                 .BITS  . . . . * * . .
31c2 0c                 .BITS  . . . . * * . .
31c3 0c                 .BITS  . . . . * * . .
31c4 0c                 .BITS  . . . . * * . .
31c5 3c                 .BITS  . . * * * * . .
31c6 00                 .BITS  . . . . . . . .

31c7 18                 .BITS  . . . * * . . . ; $005E
31c8 3c                 .BITS  . . * * * * . .
31c9 66                 .BITS  . * * . . * * .
31ca 00                 .BITS  . . . . . . . .
31cb 00                 .BITS  . . . . . . . .
31cc 00                 .BITS  . . . . . . . .
31cd 00                 .BITS  . . . . . . . .
31ce 00                 .BITS  . . . . . . . .

31cf 00                 .BITS  . . . . . . . . ; $005F
31d0 00                 .BITS  . . . . . . . .
31d1 00                 .BITS  . . . . . . . .
31d2 00                 .BITS  . . . . . . . .
31d3 00                 .BITS  . . . . . . . .
31d4 00                 .BITS  . . . . . . . .
31d5 00                 .BITS  . . . . . . . .
31d6 ff                 .BITS  * * * * * * * *

31d7 30                 .BITS  . . * * . . . . ; $0060
31d8 18                 .BITS  . . . * * . . .
31d9 0c                 .BITS  . . . . * * . .
31da 00                 .BITS  . . . . . . . .
31db 00                 .BITS  . . . . . . . .
31dc 00                 .BITS  . . . . . . . .
31dd 00                 .BITS  . . . . . . . .
31de 00                 .BITS  . . . . . . . .

31df 00                 .BITS  . . . . . . . . ; $0061
31e0 00                 .BITS  . . . . . . . .
31e1 78                 .BITS  . * * * * . . .
31e2 0c                 .BITS  . . . . * * . .
31e3 7c                 .BITS  . * * * * * . .
31e4 cc                 .BITS  * * . . * * . .
31e5 76                 .BITS  . * * * . * * .
31e6 00                 .BITS  . . . . . . . .

31e7 e0                 .BITS  * * * . . . . . ; $0062
31e8 60                 .BITS  . * * . . . . .
31e9 7c                 .BITS  . * * * * * . .
31ea 66                 .BITS  . * * . . * * .
31eb 66                 .BITS  . * * . . * * .
31ec 66                 .BITS  . * * . . * * .
31ed dc                 .BITS  * * . * * * . .
31ee 00                 .BITS  . . . . . . . .

31ef 00                 .BITS  . . . . . . . . ; $0063
31f0 00                 .BITS  . . . . . . . .
31f1 3c                 .BITS  . . * * * * . .
31f2 66                 .BITS  . * * . . * * .
31f3 60                 .BITS  . * * . . . . .
31f4 66                 .BITS  . * * . . * * .
31f5 3c                 .BITS  . . * * * * . .
31f6 00                 .BITS  . . . . . . . .

31f7 1c                 .BITS  . . . * * * . . ; $0064
31f8 0c                 .BITS  . . . . * * . .
31f9 7c                 .BITS  . * * * * * . .
31fa cc                 .BITS  * * . . * * . .
31fb cc                 .BITS  * * . . * * . .
31fc cc                 .BITS  * * . . * * . .
31fd 76                 .BITS  . * * * . * * .
31fe 00                 .BITS  . . . . . . . .

31ff 00                 .BITS  . . . . . . . . ; $0065
3200 00                 .BITS  . . . . . . . .
3201 3c                 .BITS  . . * * * * . .
3202 66                 .BITS  . * * . . * * .
3203 7e                 .BITS  . * * * * * * .
3204 60                 .BITS  . * * . . . . .
3205 3c                 .BITS  . . * * * * . .
3206 00                 .BITS  . . . . . . . .

3207 1c                 .BITS  . . . * * * . . ; $0066
3208 36                 .BITS  . . * * . * * .
3209 30                 .BITS  . . * * . . . .
320a 78                 .BITS  . * * * * . . .
320b 30                 .BITS  . . * * . . . .
320c 30                 .BITS  . . * * . . . .
320d 78                 .BITS  . * * * * . . .
320e 00                 .BITS  . . . . . . . .

320f 00                 .BITS  . . . . . . . . ; $0067
3210 00                 .BITS  . . . . . . . .
3211 3e                 .BITS  . . * * * * * .
3212 66                 .BITS  . * * . . * * .
3213 66                 .BITS  . * * . . * * .
3214 3e                 .BITS  . . * * * * * .
3215 06                 .BITS  . . . . . * * .
3216 7c                 .BITS  . * * * * * . .

3217 e0                 .BITS  * * * . . . . . ; $0068
3218 60                 .BITS  . * * . . . . .
3219 6c                 .BITS  . * * . * * . .
321a 76                 .BITS  . * * * . * * .
321b 66                 .BITS  . * * . . * * .
321c 66                 .BITS  . * * . . * * .
321d e6                 .BITS  * * * . . * * .
321e 00                 .BITS  . . . . . . . .

321f 18                 .BITS  . . . * * . . . ; $0069
3220 00                 .BITS  . . . . . . . .
3221 38                 .BITS  . . * * * . . .
3222 18                 .BITS  . . . * * . . .
3223 18                 .BITS  . . . * * . . .
3224 18                 .BITS  . . . * * . . .
3225 3c                 .BITS  . . * * * * . .
3226 00                 .BITS  . . . . . . . .

3227 06                 .BITS  . . . . . * * . ; $006A
3228 00                 .BITS  . . . . . . . .
3229 0e                 .BITS  . . . . * * * .
322a 06                 .BITS  . . . . . * * .
322b 06                 .BITS  . . . . . * * .
322c 66                 .BITS  . * * . . * * .
322d 66                 .BITS  . * * . . * * .
322e 3c                 .BITS  . . * * * * . .

322f e0                 .BITS  * * * . . . . . ; $006B
3230 60                 .BITS  . * * . . . . .
3231 66                 .BITS  . * * . . * * .
3232 6c                 .BITS  . * * . * * . .
3233 78                 .BITS  . * * * * . . .
3234 6c                 .BITS  . * * . * * . .
3235 e6                 .BITS  * * * . . * * .
3236 00                 .BITS  . . . . . . . .

3237 38                 .BITS  . . * * * . . . ; $006C
3238 18                 .BITS  . . . * * . . .
3239 18                 .BITS  . . . * * . . .
323a 18                 .BITS  . . . * * . . .
323b 18                 .BITS  . . . * * . . .
323c 18                 .BITS  . . . * * . . .
323d 3c                 .BITS  . . * * * * . .
323e 00                 .BITS  . . . . . . . .

323f 00                 .BITS  . . . . . . . . ; $006D
3240 00                 .BITS  . . . . . . . .
3241 6c                 .BITS  . * * . * * . .
3242 fe                 .BITS  * * * * * * * .
3243 d6                 .BITS  * * . * . * * .
3244 d6                 .BITS  * * . * . * * .
3245 c6                 .BITS  * * . . . * * .
3246 00                 .BITS  . . . . . . . .

3247 00                 .BITS  . . . . . . . . ; $006E
3248 00                 .BITS  . . . . . . . .
3249 dc                 .BITS  * * . * * * . .
324a 66                 .BITS  . * * . . * * .
324b 66                 .BITS  . * * . . * * .
324c 66                 .BITS  . * * . . * * .
324d 66                 .BITS  . * * . . * * .
324e 00                 .BITS  . . . . . . . .

324f 00                 .BITS  . . . . . . . . ; $006F
3250 00                 .BITS  . . . . . . . .
3251 3c                 .BITS  . . * * * * . .
3252 66                 .BITS  . * * . . * * .
3253 66                 .BITS  . * * . . * * .
3254 66                 .BITS  . * * . . * * .
3255 3c                 .BITS  . . * * * * . .
3256 00                 .BITS  . . . . . . . .

3257 00                 .BITS  . . . . . . . . ; $0070
3258 00                 .BITS  . . . . . . . .
3259 dc                 .BITS  * * . * * * . .
325a 66                 .BITS  . * * . . * * .
325b 66                 .BITS  . * * . . * * .
325c 7c                 .BITS  . * * * * * . .
325d 60                 .BITS  . * * . . . . .
325e f0                 .BITS  * * * * . . . .

325f 00                 .BITS  . . . . . . . . ; $0071
3260 00                 .BITS  . . . . . . . .
3261 76                 .BITS  . * * * . * * .
3262 cc                 .BITS  * * . . * * . .
3263 cc                 .BITS  * * . . * * . .
3264 7c                 .BITS  . * * * * * . .
3265 0c                 .BITS  . . . . * * . .
3266 1e                 .BITS  . . . * * * * .

3267 00                 .BITS  . . . . . . . . ; $0072
3268 00                 .BITS  . . . . . . . .
3269 dc                 .BITS  * * . * * * . .
326a 76                 .BITS  . * * * . * * .
326b 60                 .BITS  . * * . . . . .
326c 60                 .BITS  . * * . . . . .
326d f0                 .BITS  * * * * . . . .
326e 00                 .BITS  . . . . . . . .

326f 00                 .BITS  . . . . . . . . ; $0073
3270 00                 .BITS  . . . . . . . .
3271 3c                 .BITS  . . * * * * . .
3272 60                 .BITS  . * * . . . . .
3273 3c                 .BITS  . . * * * * . .
3274 06                 .BITS  . . . . . * * .
3275 7c                 .BITS  . * * * * * . .
3276 00                 .BITS  . . . . . . . .

3277 30                 .BITS  . . * * . . . . ; $0074
3278 30                 .BITS  . . * * . . . .
3279 7c                 .BITS  . * * * * * . .
327a 30                 .BITS  . . * * . . . .
327b 30                 .BITS  . . * * . . . .
327c 36                 .BITS  . . * * . * * .
327d 1c                 .BITS  . . . * * * . .
327e 00                 .BITS  . . . . . . . .

327f 00                 .BITS  . . . . . . . . ; $0075
3280 00                 .BITS  . . . . . . . .
3281 66                 .BITS  . * * . . * * .
3282 66                 .BITS  . * * . . * * .
3283 66                 .BITS  . * * . . * * .
3284 66                 .BITS  . * * . . * * .
3285 3e                 .BITS  . . * * * * * .
3286 00                 .BITS  . . . . . . . .

3287 00                 .BITS  . . . . . . . . ; $0076
3288 00                 .BITS  . . . . . . . .
3289 66                 .BITS  . * * . . * * .
328a 66                 .BITS  . * * . . * * .
328b 66                 .BITS  . * * . . * * .
328c 3c                 .BITS  . . * * * * . .
328d 18                 .BITS  . . . * * . . .
328e 00                 .BITS  . . . . . . . .

328f 00                 .BITS  . . . . . . . . ; $0077
3290 00                 .BITS  . . . . . . . .
3291 c6                 .BITS  * * . . . * * .
3292 d6                 .BITS  * * . * . * * .
3293 d6                 .BITS  * * . * . * * .
3294 fe                 .BITS  * * * * * * * .
3295 6c                 .BITS  . * * . * * . .
3296 00                 .BITS  . . . . . . . .

3297 00                 .BITS  . . . . . . . . ; $0078
3298 00                 .BITS  . . . . . . . .
3299 c6                 .BITS  * * . . . * * .
329a 6c                 .BITS  . * * . * * . .
329b 38                 .BITS  . . * * * . . .
329c 6c                 .BITS  . * * . * * . .
329d c6                 .BITS  * * . . . * * .
329e 00                 .BITS  . . . . . . . .

329f 00                 .BITS  . . . . . . . . ; $0079
32a0 00                 .BITS  . . . . . . . .
32a1 66                 .BITS  . * * . . * * .
32a2 66                 .BITS  . * * . . * * .
32a3 66                 .BITS  . * * . . * * .
32a4 3e                 .BITS  . . * * * * * .
32a5 06                 .BITS  . . . . . * * .
32a6 7c                 .BITS  . * * * * * . .

32a7 00                 .BITS  . . . . . . . . ; $007A
32a8 00                 .BITS  . . . . . . . .
32a9 7e                 .BITS  . * * * * * * .
32aa 4c                 .BITS  . * . . * * . .
32ab 18                 .BITS  . . . * * . . .
32ac 32                 .BITS  . . * * . . * .
32ad 7e                 .BITS  . * * * * * * .
32ae 00                 .BITS  . . . . . . . .

32af 0e                 .BITS  . . . . * * * . ; $007B
32b0 18                 .BITS  . . . * * . . .
32b1 18                 .BITS  . . . * * . . .
32b2 70                 .BITS  . * * * . . . .
32b3 18                 .BITS  . . . * * . . .
32b4 18                 .BITS  . . . * * . . .
32b5 0e                 .BITS  . . . . * * * .
32b6 00                 .BITS  . . . . . . . .

32b7 18                 .BITS  . . . * * . . . ; $007C
32b8 18                 .BITS  . . . * * . . .
32b9 18                 .BITS  . . . * * . . .
32ba 18                 .BITS  . . . * * . . .
32bb 18                 .BITS  . . . * * . . .
32bc 18                 .BITS  . . . * * . . .
32bd 18                 .BITS  . . . * * . . .
32be 00                 .BITS  . . . . . . . .

32bf 70                 .BITS  . * * * . . . . ; $007D
32c0 18                 .BITS  . . . * * . . .
32c1 18                 .BITS  . . . * * . . .
32c2 0e                 .BITS  . . . . * * * .
32c3 18                 .BITS  . . . * * . . .
32c4 18                 .BITS  . . . * * . . .
32c5 70                 .BITS  . * * * . . . .
32c6 00                 .BITS  . . . . . . . .

32c7 76                 .BITS  . * * * . * * . ; $007E
32c8 dc                 .BITS  * * . * * * . .
32c9 00                 .BITS  . . . . . . . .
32ca 00                 .BITS  . . . . . . . .
32cb 00                 .BITS  . . . . . . . .
32cc 00                 .BITS  . . . . . . . .
32cd 00                 .BITS  . . . . . . . .
32ce 00                 .BITS  . . . . . . . .

32cf cc                 .BITS  * * . . * * . . ; $007F
32d0 33                 .BITS  . . * * . . * *
32d1 cc                 .BITS  * * . . * * . .
32d2 33                 .BITS  . . * * . . * *
32d3 cc                 .BITS  * * . . * * . .
32d4 33                 .BITS  . . * * . . * *
32d5 cc                 .BITS  * * . . * * . .
32d6 33                 .BITS  . . * * . . * *

32d7 00                 .BITS  . . . . . . . . ; $0080
32d8 00                 .BITS  . . . . . . . .
32d9 00                 .BITS  . . . . . . . .
32da 00                 .BITS  . . . . . . . .
32db 00                 .BITS  . . . . . . . .
32dc 00                 .BITS  . . . . . . . .
32dd 00                 .BITS  . . . . . . . .
32de 00                 .BITS  . . . . . . . .

32df f0                 .BITS  * * * * . . . . ; $0081
32e0 f0                 .BITS  * * * * . . . .
32e1 f0                 .BITS  * * * * . . . .
32e2 f0                 .BITS  * * * * . . . .
32e3 00                 .BITS  . . . . . . . .
32e4 00                 .BITS  . . . . . . . .
32e5 00                 .BITS  . . . . . . . .
32e6 00                 .BITS  . . . . . . . .

32e7 0f                 .BITS  . . . . * * * * ; $0082
32e8 0f                 .BITS  . . . . * * * *
32e9 0f                 .BITS  . . . . * * * *
32ea 0f                 .BITS  . . . . * * * *
32eb 00                 .BITS  . . . . . . . .
32ec 00                 .BITS  . . . . . . . .
32ed 00                 .BITS  . . . . . . . .
32ee 00                 .BITS  . . . . . . . .

32ef ff                 .BITS  * * * * * * * * ; $0083
32f0 ff                 .BITS  * * * * * * * *
32f1 ff                 .BITS  * * * * * * * *
32f2 ff                 .BITS  * * * * * * * *
32f3 00                 .BITS  . . . . . . . .
32f4 00                 .BITS  . . . . . . . .
32f5 00                 .BITS  . . . . . . . .
32f6 00                 .BITS  . . . . . . . .

32f7 00                 .BITS  . . . . . . . . ; $0084
32f8 00                 .BITS  . . . . . . . .
32f9 00                 .BITS  . . . . . . . .
32fa 00                 .BITS  . . . . . . . .
32fb f0                 .BITS  * * * * . . . .
32fc f0                 .BITS  * * * * . . . .
32fd f0                 .BITS  * * * * . . . .
32fe f0                 .BITS  * * * * . . . .

32ff f0                 .BITS  * * * * . . . . ; $0085
3300 f0                 .BITS  * * * * . . . .
3301 f0                 .BITS  * * * * . . . .
3302 f0                 .BITS  * * * * . . . .
3303 f0                 .BITS  * * * * . . . .
3304 f0                 .BITS  * * * * . . . .
3305 f0                 .BITS  * * * * . . . .
3306 f0                 .BITS  * * * * . . . .

3307 0f                 .BITS  . . . . * * * * ; $0086
3308 0f                 .BITS  . . . . * * * *
3309 0f                 .BITS  . . . . * * * *
330a 0f                 .BITS  . . . . * * * *
330b f0                 .BITS  * * * * . . . .
330c f0                 .BITS  * * * * . . . .
330d f0                 .BITS  * * * * . . . .
330e f0                 .BITS  * * * * . . . .

330f ff                 .BITS  * * * * * * * * ; $0087
3310 ff                 .BITS  * * * * * * * *
3311 ff                 .BITS  * * * * * * * *
3312 ff                 .BITS  * * * * * * * *
3313 f0                 .BITS  * * * * . . . .
3314 f0                 .BITS  * * * * . . . .
3315 f0                 .BITS  * * * * . . . .
3316 f0                 .BITS  * * * * . . . .

3317 00                 .BITS  . . . . . . . . ; $0088
3318 00                 .BITS  . . . . . . . .
3319 00                 .BITS  . . . . . . . .
331a 00                 .BITS  . . . . . . . .
331b 0f                 .BITS  . . . . * * * *
331c 0f                 .BITS  . . . . * * * *
331d 0f                 .BITS  . . . . * * * *
331e 0f                 .BITS  . . . . * * * *

331f f0                 .BITS  * * * * . . . . ; $0089
3320 f0                 .BITS  * * * * . . . .
3321 f0                 .BITS  * * * * . . . .
3322 f0                 .BITS  * * * * . . . .
3323 0f                 .BITS  . . . . * * * *
3324 0f                 .BITS  . . . . * * * *
3325 0f                 .BITS  . . . . * * * *
3326 0f                 .BITS  . . . . * * * *

3327 0f                 .BITS  . . . . * * * * ; $008A
3328 0f                 .BITS  . . . . * * * *
3329 0f                 .BITS  . . . . * * * *
332a 0f                 .BITS  . . . . * * * *
332b 0f                 .BITS  . . . . * * * *
332c 0f                 .BITS  . . . . * * * *
332d 0f                 .BITS  . . . . * * * *
332e 0f                 .BITS  . . . . * * * *

332f ff                 .BITS  * * * * * * * * ; $008B
3330 ff                 .BITS  * * * * * * * *
3331 ff                 .BITS  * * * * * * * *
3332 ff                 .BITS  * * * * * * * *
3333 0f                 .BITS  . . . . * * * *
3334 0f                 .BITS  . . . . * * * *
3335 0f                 .BITS  . . . . * * * *
3336 0f                 .BITS  . . . . * * * *

3337 00                 .BITS  . . . . . . . . ; $008C
3338 00                 .BITS  . . . . . . . .
3339 00                 .BITS  . . . . . . . .
333a 00                 .BITS  . . . . . . . .
333b ff                 .BITS  * * * * * * * *
333c ff                 .BITS  * * * * * * * *
333d ff                 .BITS  * * * * * * * *
333e ff                 .BITS  * * * * * * * *

333f f0                 .BITS  * * * * . . . . ; $008D
3340 f0                 .BITS  * * * * . . . .
3341 f0                 .BITS  * * * * . . . .
3342 f0                 .BITS  * * * * . . . .
3343 ff                 .BITS  * * * * * * * *
3344 ff                 .BITS  * * * * * * * *
3345 ff                 .BITS  * * * * * * * *
3346 ff                 .BITS  * * * * * * * *

3347 0f                 .BITS  . . . . * * * * ; $008E
3348 0f                 .BITS  . . . . * * * *
3349 0f                 .BITS  . . . . * * * *
334a 0f                 .BITS  . . . . * * * *
334b ff                 .BITS  * * * * * * * *
334c ff                 .BITS  * * * * * * * *
334d ff                 .BITS  * * * * * * * *
334e ff                 .BITS  * * * * * * * *

334f ff                 .BITS  * * * * * * * * ; $008F
3350 ff                 .BITS  * * * * * * * *
3351 ff                 .BITS  * * * * * * * *
3352 ff                 .BITS  * * * * * * * *
3353 ff                 .BITS  * * * * * * * *
3354 ff                 .BITS  * * * * * * * *
3355 ff                 .BITS  * * * * * * * *
3356 ff                 .BITS  * * * * * * * *

3357 00                 .BITS  . . . . . . . . ; $0090
3358 00                 .BITS  . . . . . . . .
3359 00                 .BITS  . . . . . . . .
335a 18                 .BITS  . . . * * . . .
335b 18                 .BITS  . . . * * . . .
335c 00                 .BITS  . . . . . . . .
335d 00                 .BITS  . . . . . . . .
335e 00                 .BITS  . . . . . . . .

335f 18                 .BITS  . . . * * . . . ; $0091
3360 18                 .BITS  . . . * * . . .
3361 18                 .BITS  . . . * * . . .
3362 18                 .BITS  . . . * * . . .
3363 18                 .BITS  . . . * * . . .
3364 00                 .BITS  . . . . . . . .
3365 00                 .BITS  . . . . . . . .
3366 00                 .BITS  . . . . . . . .

3367 00                 .BITS  . . . . . . . . ; $0092
3368 00                 .BITS  . . . . . . . .
3369 00                 .BITS  . . . . . . . .
336a 1f                 .BITS  . . . * * * * *
336b 1f                 .BITS  . . . * * * * *
336c 00                 .BITS  . . . . . . . .
336d 00                 .BITS  . . . . . . . .
336e 00                 .BITS  . . . . . . . .

336f 18                 .BITS  . . . * * . . . ; $0093
3370 18                 .BITS  . . . * * . . .
3371 18                 .BITS  . . . * * . . .
3372 1f                 .BITS  . . . * * * * *
3373 0f                 .BITS  . . . . * * * *
3374 00                 .BITS  . . . . . . . .
3375 00                 .BITS  . . . . . . . .
3376 00                 .BITS  . . . . . . . .

3377 00                 .BITS  . . . . . . . . ; $0094
3378 00                 .BITS  . . . . . . . .
3379 00                 .BITS  . . . . . . . .
337a 18                 .BITS  . . . * * . . .
337b 18                 .BITS  . . . * * . . .
337c 18                 .BITS  . . . * * . . .
337d 18                 .BITS  . . . * * . . .
337e 18                 .BITS  . . . * * . . .

337f 18                 .BITS  . . . * * . . . ; $0095
3380 18                 .BITS  . . . * * . . .
3381 18                 .BITS  . . . * * . . .
3382 18                 .BITS  . . . * * . . .
3383 18                 .BITS  . . . * * . . .
3384 18                 .BITS  . . . * * . . .
3385 18                 .BITS  . . . * * . . .
3386 18                 .BITS  . . . * * . . .

3387 00                 .BITS  . . . . . . . . ; $0096
3388 00                 .BITS  . . . . . . . .
3389 00                 .BITS  . . . . . . . .
338a 0f                 .BITS  . . . . * * * *
338b 1f                 .BITS  . . . * * * * *
338c 18                 .BITS  . . . * * . . .
338d 18                 .BITS  . . . * * . . .
338e 18                 .BITS  . . . * * . . .

338f 18                 .BITS  . . . * * . . . ; $0097
3390 18                 .BITS  . . . * * . . .
3391 18                 .BITS  . . . * * . . .
3392 1f                 .BITS  . . . * * * * *
3393 1f                 .BITS  . . . * * * * *
3394 18                 .BITS  . . . * * . . .
3395 18                 .BITS  . . . * * . . .
3396 18                 .BITS  . . . * * . . .

3397 00                 .BITS  . . . . . . . . ; $0098
3398 00                 .BITS  . . . . . . . .
3399 00                 .BITS  . . . . . . . .
339a f8                 .BITS  * * * * * . . .
339b f8                 .BITS  * * * * * . . .
339c 00                 .BITS  . . . . . . . .
339d 00                 .BITS  . . . . . . . .
339e 00                 .BITS  . . . . . . . .

339f 18                 .BITS  . . . * * . . . ; $0099
33a0 18                 .BITS  . . . * * . . .
33a1 18                 .BITS  . . . * * . . .
33a2 f8                 .BITS  * * * * * . . .
33a3 f0                 .BITS  * * * * . . . .
33a4 00                 .BITS  . . . . . . . .
33a5 00                 .BITS  . . . . . . . .
33a6 00                 .BITS  . . . . . . . .

33a7 00                 .BITS  . . . . . . . . ; $009A
33a8 00                 .BITS  . . . . . . . .
33a9 00                 .BITS  . . . . . . . .
33aa ff                 .BITS  * * * * * * * *
33ab ff                 .BITS  * * * * * * * *
33ac 00                 .BITS  . . . . . . . .
33ad 00                 .BITS  . . . . . . . .
33ae 00                 .BITS  . . . . . . . .

33af 18                 .BITS  . . . * * . . . ; $009B
33b0 18                 .BITS  . . . * * . . .
33b1 18                 .BITS  . . . * * . . .
33b2 ff                 .BITS  * * * * * * * *
33b3 ff                 .BITS  * * * * * * * *
33b4 00                 .BITS  . . . . . . . .
33b5 00                 .BITS  . . . . . . . .
33b6 00                 .BITS  . . . . . . . .

33b7 00                 .BITS  . . . . . . . . ; $009C
33b8 00                 .BITS  . . . . . . . .
33b9 00                 .BITS  . . . . . . . .
33ba f0                 .BITS  * * * * . . . .
33bb f8                 .BITS  * * * * * . . .
33bc 18                 .BITS  . . . * * . . .
33bd 18                 .BITS  . . . * * . . .
33be 18                 .BITS  . . . * * . . .

33bf 18                 .BITS  . . . * * . . . ; $009D
33c0 18                 .BITS  . . . * * . . .
33c1 18                 .BITS  . . . * * . . .
33c2 f8                 .BITS  * * * * * . . .
33c3 f8                 .BITS  * * * * * . . .
33c4 18                 .BITS  . . . * * . . .
33c5 18                 .BITS  . . . * * . . .
33c6 18                 .BITS  . . . * * . . .

33c7 00                 .BITS  . . . . . . . . ; $009E
33c8 00                 .BITS  . . . . . . . .
33c9 00                 .BITS  . . . . . . . .
33ca ff                 .BITS  * * * * * * * *
33cb ff                 .BITS  * * * * * * * *
33cc 18                 .BITS  . . . * * . . .
33cd 18                 .BITS  . . . * * . . .
33ce 18                 .BITS  . . . * * . . .

33cf 18                 .BITS  . . . * * . . . ; $009F
33d0 18                 .BITS  . . . * * . . .
33d1 18                 .BITS  . . . * * . . .
33d2 ff                 .BITS  * * * * * * * *
33d3 ff                 .BITS  * * * * * * * *
33d4 18                 .BITS  . . . * * . . .
33d5 18                 .BITS  . . . * * . . .
33d6 18                 .BITS  . . . * * . . .
              ;         ======================
33d7 00                 .BITS  . . . . . . . . ; $20
33d8 00                 .BITS  . . . . . . . .
33d9 00                 .BITS  . . . . . . . .
33da 00                 .BITS  . . . . . . . .
33db 00                 .BITS  . . . . . . . .
33dc 00                 .BITS  . . . . . . . .
33dd 00                 .BITS  . . . . . . . .
33de 00                 .BITS  . . . . . . . .
              ;         ----------------------
33df 00                 .BITS  . . . . . . . . ; $21 !
33e0 20                 .BITS  . . * . . . . .
33e1 60                 .BITS  . * * . . . . .
33e2 fe                 .BITS  * * * * * * * .
33e3 60                 .BITS  . * * . . . . .
33e4 20                 .BITS  . . * . . . . .
33e5 00                 .BITS  . . . . . . . .
33e6 00                 .BITS  . . . . . . . .
              ;         ----------------------
33e7 00                 .BITS  . . . . . . . . ; $22
33e8 08                 .BITS  . . . . * . . .
33e9 0c                 .BITS  . . . . * * . .
33ea fe                 .BITS  * * * * * * * .
33eb 0c                 .BITS  . . . . * * . .
33ec 08                 .BITS  . . . . * . . .
33ed 00                 .BITS  . . . . . . . .
33ee 00                 .BITS  . . . . . . . .
              ;         ----------------------
33ef 01                 .BITS  . . . . . . . * ; $23 #
33f0 02                 .BITS  . . . . . . * .
33f1 04                 .BITS  . . . . . * . .
33f2 08                 .BITS  . . . . * . . .
33f3 10                 .BITS  . . . * . . . .
33f4 20                 .BITS  . . * . . . . .
33f5 40                 .BITS  . * . . . . . .
33f6 80                 .BITS  * . . . . . . .
              ;         ----------------------
33f7 80                 .BITS  * . . . . . . . ; $24 $
33f8 40                 .BITS  . * . . . . . .
33f9 20                 .BITS  . . * . . . . .
33fa 10                 .BITS  . . . * . . . .
33fb 08                 .BITS  . . . . * . . .
33fc 04                 .BITS  . . . . . * . .
33fd 02                 .BITS  . . . . . . * .
33fe 01                 .BITS  . . . . . . . *
              ;         ----------------------
33ff 00                 .BITS  . . . . . . . . ; $25 %
3400 00                 .BITS  . . . . . . . .
3401 00                 .BITS  . . . . . . . .
3402 00                 .BITS  . . . . . . . .
3403 00                 .BITS  . . . . . . . .
3404 00                 .BITS  . . . . . . . .
3405 00                 .BITS  . . . . . . . .
3406 00                 .BITS  . . . . . . . .
              ;         ----------------------
3407 00                 .BITS  . . . . . . . . ; $26 &
3408 00                 .BITS  . . . . . . . .
3409 00                 .BITS  . . . . . . . .
340a 00                 .BITS  . . . . . . . .
340b ff                 .BITS  * * * * * * * *
340c 00                 .BITS  . . . . . . . .
340d 00                 .BITS  . . . . . . . .
340e 00                 .BITS  . . . . . . . .
              ;         ----------------------
340f 00                 .BITS  . . . . . . . . ; $27
3410 00                 .BITS  . . . . . . . .
3411 00                 .BITS  . . . . . . . .
3412 ff                 .BITS  * * * * * * * *
3413 00                 .BITS  . . . . . . . .
3414 00                 .BITS  . . . . . . . .
3415 00                 .BITS  . . . . . . . .
3416 00                 .BITS  . . . . . . . .
              ;         ----------------------
3417 08                 .BITS  . . . . * . . . ; $28 (
3418 08                 .BITS  . . . . * . . .
3419 08                 .BITS  . . . . * . . .
341a 08                 .BITS  . . . . * . . .
341b 08                 .BITS  . . . . * . . .
341c 08                 .BITS  . . . . * . . .
341d 08                 .BITS  . . . . * . . .
341e 08                 .BITS  . . . . * . . .
              ;         ---------------*------
341f 10                 .BITS  . . . * . . . . ; $29 )
3420 10                 .BITS  . . . * . . . .
3421 10                 .BITS  . . . * . . . .
3422 10                 .BITS  . . . * . . . .
3423 10                 .BITS  . . . * . . . .
3424 10                 .BITS  . . . * . . . .
3425 10                 .BITS  . . . * . . . .
3426 10                 .BITS  . . . * . . . .
              ;         ----------------------
3427 08                 .BITS  . . . . * . . . ; $2A *
3428 08                 .BITS  . . . . * . . .
3429 08                 .BITS  . . . . * . . .
342a ff                 .BITS  * * * * * * * *
342b 00                 .BITS  . . . . . . . .
342c 00                 .BITS  . . . . . . . .
342d 00                 .BITS  . . . . . . . .
342e 00                 .BITS  . . . . . . . .
              ;         ----------------------
342f 00                 .BITS  . . . . . . . . ; $2B +
3430 00                 .BITS  . . . . . . . .
3431 00                 .BITS  . . . . . . . .
3432 00                 .BITS  . . . . . . . .
3433 ff                 .BITS  * * * * * * * *
3434 08                 .BITS  . . . . * . . .
3435 08                 .BITS  . . . . * . . .
3436 08                 .BITS  . . . . * . . .
              ;         ----------------------
3437 08                 .BITS  . . . . * . . . ; $2C ,
3438 08                 .BITS  . . . . * . . .
3439 08                 .BITS  . . . . * . . .
343a 08                 .BITS  . . . . * . . .
343b 0f                 .BITS  . . . . * * * *
343c 08                 .BITS  . . . . * . . .
343d 08                 .BITS  . . . . * . . .
343e 08                 .BITS  . . . . * . . .
              ;         ----------------------
343f 10                 .BITS  . . . * . . . . ; $2D -
3440 10                 .BITS  . . . * . . . .
3441 10                 .BITS  . . . * . . . .
3442 10                 .BITS  . . . * . . . .
3443 f0                 .BITS  * * * * . . . .
3444 10                 .BITS  . . . * . . . .
3445 10                 .BITS  . . . * . . . .
3446 10                 .BITS  . . . * . . . .
              ;         ----------------------
3447 10                 .BITS  . . . * . . . . ; $2E .
3448 10                 .BITS  . . . * . . . .
3449 10                 .BITS  . . . * . . . .
344a 10                 .BITS  . . . * . . . .
344b 1f                 .BITS  . . . * * * * *
344c 00                 .BITS  . . . . . . . .
344d 00                 .BITS  . . . . . . . .
344e 00                 .BITS  . . . . . . . .
              ;         ----------------------
344f 00                 .BITS  . . . . . . . . ; $2F /
3450 00                 .BITS  . . . . . . . .
3451 00                 .BITS  . . . . . . . .
3452 1f                 .BITS  . . . * * * * *
3453 10                 .BITS  . . . * . . . .
3454 10                 .BITS  . . . * . . . .
3455 10                 .BITS  . . . * . . . .
3456 10                 .BITS  . . . * . . . .
              ;         ----------------------
3457 00                 .BITS  . . . . . . . . ; $30 0
3458 00                 .BITS  . . . . . . . .
3459 00                 .BITS  . . . . . . . .
345a f8                 .BITS  * * * * * . . .
345b 08                 .BITS  . . . . * . . .
345c 08                 .BITS  . . . . * . . .
345d 08                 .BITS  . . . . * . . .
345e 08                 .BITS  . . . . * . . .
              ;         ----------------------
345f 08                 .BITS  . . . . * . . . ; $31 1
3460 08                 .BITS  . . . . * . . .
3461 08                 .BITS  . . . . * . . .
3462 08                 .BITS  . . . . * . . .
3463 f8                 .BITS  * * * * * . . .
3464 00                 .BITS  . . . . . . . .
3465 00                 .BITS  . . . . . . . .
3466 00                 .BITS  . . . . . . . .
              ;         ----------------------
3467 10                 .BITS  . . . * . . . . ; $32 2
3468 10                 .BITS  . . . * . . . .
3469 10                 .BITS  . . . * . . . .
346a 10                 .BITS  . . . * . . . .
346b 1f                 .BITS  . . . * * * * *
346c 20                 .BITS  . . * . . . . .
346d 40                 .BITS  . * . . . . . .
346e 80                 .BITS  * . . . . . . .
              ;         ----------------------
346f 80                 .BITS  * . . . . . . . ; $33 3
3470 40                 .BITS  . * . . . . . .
3471 20                 .BITS  . . * . . . . .
3472 1f                 .BITS  . . . * * * * *
3473 10                 .BITS  . . . * . . . .
3474 10                 .BITS  . . . * . . . .
3475 10                 .BITS  . . . * . . . .
3476 10                 .BITS  . . . * . . . .
              ;         ----------------------
3477 01                 .BITS  . . . . . . . * ; $34 4
3478 02                 .BITS  . . . . . . * .
3479 04                 .BITS  . . . . . * . .
347a f8                 .BITS  * * * * * . . .
347b 08                 .BITS  . . . . * . . .
347c 08                 .BITS  . . . . * . . .
347d 08                 .BITS  . . . . * . . .
347e 08                 .BITS  . . . . * . . .
              ;         ----------------------
347f 08                 .BITS  . . . . * . . . ; $35 5
3480 08                 .BITS  . . . . * . . .
3481 08                 .BITS  . . . . * . . .
3482 08                 .BITS  . . . . * . . .
3483 f8                 .BITS  * * * * * . . .
3484 04                 .BITS  . . . . . * . .
3485 02                 .BITS  . . . . . . * .
3486 01                 .BITS  . . . . . . . *
              ;         ----------------------
3487 ff                 .BITS  * * * * * * * * ; $36 6
3488 ff                 .BITS  * * * * * * * *
3489 ff                 .BITS  * * * * * * * *
348a ff                 .BITS  * * * * * * * *
348b ff                 .BITS  * * * * * * * *
348c ff                 .BITS  * * * * * * * *
348d ff                 .BITS  * * * * * * * *
348e ff                 .BITS  * * * * * * * *
              ;         ----------------------
348f ff                 .BITS  * * * * * * * * ; $37 7
3490 ff                 .BITS  * * * * * * * *
3491 ff                 .BITS  * * * * * * * *
3492 ff                 .BITS  * * * * * * * *
3493 ff                 .BITS  * * * * * * * *
3494 00                 .BITS  . . . . . . . .
3495 00                 .BITS  . . . . . . . .
3496 00                 .BITS  . . . . . . . .
              ;         ----------------------
3497 00                 .BITS  . . . . . . . . ; $38 8
3498 00                 .BITS  . . . . . . . .
3499 00                 .BITS  . . . . . . . .
349a ff                 .BITS  * * * * * * * *
349b ff                 .BITS  * * * * * * * *
349c ff                 .BITS  * * * * * * * *
349d ff                 .BITS  * * * * * * * *
349e ff                 .BITS  * * * * * * * *
              ;         ----------------------
349f f8                 .BITS  * * * * * . . . ; $39 9
34a0 f8                 .BITS  * * * * * . . .
34a1 f8                 .BITS  * * * * * . . .
34a2 f8                 .BITS  * * * * * . . .
34a3 f8                 .BITS  * * * * * . . .
34a4 f8                 .BITS  * * * * * . . .
34a5 f8                 .BITS  * * * * * . . .
34a6 f8                 .BITS  * * * * * . . .
              ;         ----------------------
34a7 1f                 .BITS  . . . * * * * * ; $3A :
34a8 1f                 .BITS  . . . * * * * *
34a9 1f                 .BITS  . . . * * * * *
34aa 1f                 .BITS  . . . * * * * *
34ab 1f                 .BITS  . . . * * * * *
34ac 1f                 .BITS  . . . * * * * *
34ad 1f                 .BITS  . . . * * * * *
34ae 1f                 .BITS  . . . * * * * *
              ;         ----------------------
34af 08                 .BITS  . . . . * . . . ; $3B ;
34b0 08                 .BITS  . . . . * . . .
34b1 08                 .BITS  . . . . * . . .
34b2 ff                 .BITS  * * * * * * * *
34b3 ff                 .BITS  * * * * * * * *
34b4 ff                 .BITS  * * * * * * * *
34b5 ff                 .BITS  * * * * * * * *
34b6 ff                 .BITS  * * * * * * * *
              ;         ----------------------
34b7 ff                 .BITS  * * * * * * * * ; $3C <
34b8 ff                 .BITS  * * * * * * * *
34b9 ff                 .BITS  * * * * * * * *
34ba ff                 .BITS  * * * * * * * *
34bb ff                 .BITS  * * * * * * * *
34bc 08                 .BITS  . . . . * . . .
34bd 08                 .BITS  . . . . * . . .
34be 08                 .BITS  . . . . * . . .
              ;         ----------------------
34bf f8                 .BITS  * * * * * . . . ; $3D =
34c0 f8                 .BITS  * * * * * . . .
34c1 f8                 .BITS  * * * * * . . .
34c2 f8                 .BITS  * * * * * . . .
34c3 ff                 .BITS  * * * * * * * *
34c4 f8                 .BITS  * * * * * . . .
34c5 f8                 .BITS  * * * * * . . .
34c6 f8                 .BITS  * * * * * . . .
              ;         ----------------------
34c7 1f                 .BITS  . . . * * * * * ; $3E >
34c8 1f                 .BITS  . . . * * * * *
34c9 1f                 .BITS  . . . * * * * *
34ca 1f                 .BITS  . . . * * * * *
34cb ff                 .BITS  * * * * * * * *
34cc 1f                 .BITS  . . . * * * * *
34cd 1f                 .BITS  . . . * * * * *
34ce 1f                 .BITS  . . . * * * * *
              ;         ----------------------
34cf 1f                 .BITS  . . . * * * * * ; $3F ?
34d0 1f                 .BITS  . . . * * * * *
34d1 1f                 .BITS  . . . * * * * *
34d2 1f                 .BITS  . . . * * * * *
34d3 1f                 .BITS  . . . * * * * *
34d4 00                 .BITS  . . . . . . . .
34d5 00                 .BITS  . . . . . . . .
34d6 00                 .BITS  . . . . . . . .
              ;         ======================
34d7 00                 .BITS  . . . . . . . . ; $40 @
34d8 00                 .BITS  . . . . . . . .
34d9 00                 .BITS  . . . . . . . .
34da 1f                 .BITS  . . . * * * * *
34db 1f                 .BITS  . . . * * * * *
34dc 1f                 .BITS  . . . * * * * *
34dd 1f                 .BITS  . . . * * * * *
34de 1f                 .BITS  . . . * * * * *
              ;         ----------------------
34df 00                 .BITS  . . . . . . . . ; $41 A
34e0 00                 .BITS  . . . . . . . .
34e1 00                 .BITS  . . . . . . . .
34e2 f8                 .BITS  * * * * * . . .
34e3 f8                 .BITS  * * * * * . . .
34e4 f8                 .BITS  * * * * * . . .
34e5 f8                 .BITS  * * * * * . . .
34e6 f8                 .BITS  * * * * * . . .
              ;         ----------------------
34e7 f8                 .BITS  * * * * * . . . ; $42 B
34e8 f8                 .BITS  * * * * * . . .
34e9 f8                 .BITS  * * * * * . . .
34ea f8                 .BITS  * * * * * . . .
34eb f8                 .BITS  * * * * * . . .
34ec 00                 .BITS  . . . . . . . .
34ed 00                 .BITS  . . . . . . . .
34ee 00                 .BITS  . . . . . . . .
              ;         ----------------------
34ef 1f                 .BITS  . . . * * * * * ; $43 C
34f0 1f                 .BITS  . . . * * * * *
34f1 1f                 .BITS  . . . * * * * *
34f2 1f                 .BITS  . . . * * * * *
34f3 1f                 .BITS  . . . * * * * *
34f4 20                 .BITS  . . * . . . . .
34f5 40                 .BITS  . * . . . . . .
34f6 80                 .BITS  * . . . . . . .
              ;         ----------------------
34f7 80                 .BITS  * . . . . . . . ; $44 D
34f8 40                 .BITS  . * . . . . . .
34f9 20                 .BITS  . . * . . . . .
34fa 1f                 .BITS  . . . * * * * *
34fb 1f                 .BITS  . . . * * * * *
34fc 1f                 .BITS  . . . * * * * *
34fd 1f                 .BITS  . . . * * * * *
34fe 1f                 .BITS  . . . * * * * *
              ;         ----------------------
34ff 01                 .BITS  . . . . . . . * ; $45 E
3500 02                 .BITS  . . . . . . * .
3501 04                 .BITS  . . . . . * . .
3502 f8                 .BITS  * * * * * . . .
3503 f8                 .BITS  * * * * * . . .
3504 f8                 .BITS  * * * * * . . .
3505 f8                 .BITS  * * * * * . . .
3506 f8                 .BITS  * * * * * . . .
              ;         ----------------------
3507 f8                 .BITS  * * * * * . . . ; $46 F
3508 f8                 .BITS  * * * * * . . .
3509 f8                 .BITS  * * * * * . . .
350a f8                 .BITS  * * * * * . . .
350b f8                 .BITS  * * * * * . . .
350c 04                 .BITS  . . . . . * . .
350d 02                 .BITS  . . . . . . * .
350e 01                 .BITS  . . . . . . . *
              ;         ----------------------
350f 01                 .BITS  . . . . . . . * ; $47 G
3510 00                 .BITS  . . . . . . . .
3511 00                 .BITS  . . . . . . . .
3512 00                 .BITS  . . . . . . . .
3513 00                 .BITS  . . . . . . . .
3514 00                 .BITS  . . . . . . . .
3515 00                 .BITS  . . . . . . . .
3516 00                 .BITS  . . . . . . . .
              ;         ----------------------
3517 00                 .BITS  . . . . . . . . ; $48 H
3518 00                 .BITS  . . . . . . . .
3519 00                 .BITS  . . . . . . . .
351a 00                 .BITS  . . . . . . . .
351b 00                 .BITS  . . . . . . . .
351c 00                 .BITS  . . . . . . . .
351d 00                 .BITS  . . . . . . . .
351e 01                 .BITS  . . . . . . . *
              ;         ----------------------
351f 00                 .BITS  . . . . . . . . ; $49 I
3520 00                 .BITS  . . . . . . . .
3521 00                 .BITS  . . . . . . . .
3522 00                 .BITS  . . . . . . . .
3523 00                 .BITS  . . . . . . . .
3524 00                 .BITS  . . . . . . . .
3525 00                 .BITS  . . . . . . . .
3526 80                 .BITS  * . . . . . . .
              ;         ----------------------
3527 80                 .BITS  * . . . . . . . ; $4A J
3528 00                 .BITS  . . . . . . . .
3529 00                 .BITS  . . . . . . . .
352a 00                 .BITS  . . . . . . . .
352b 00                 .BITS  . . . . . . . .
352c 00                 .BITS  . . . . . . . .
352d 00                 .BITS  . . . . . . . .
352e 00                 .BITS  . . . . . . . .
              ;         ----------------------
352f ff                 .BITS  * * * * * * * * ; $4B K
3530 00                 .BITS  . . . . . . . .
3531 00                 .BITS  . . . . . . . .
3532 00                 .BITS  . . . . . . . .
3533 00                 .BITS  . . . . . . . .
3534 00                 .BITS  . . . . . . . .
3535 00                 .BITS  . . . . . . . .
3536 00                 .BITS  . . . . . . . .
              ;         ----------------------
3537 00                 .BITS  . . . . . . . . ; $4C L
3538 00                 .BITS  . . . . . . . .
3539 00                 .BITS  . . . . . . . .
353a 00                 .BITS  . . . . . . . .
353b 00                 .BITS  . . . . . . . .
353c 00                 .BITS  . . . . . . . .
353d 00                 .BITS  . . . . . . . .
353e ff                 .BITS  * * * * * * * *
              ;         ----------------------
353f 80                 .BITS  * . . . . . . . ; $4D M
3540 80                 .BITS  * . . . . . . .
3541 80                 .BITS  * . . . . . . .
3542 80                 .BITS  * . . . . . . .
3543 80                 .BITS  * . . . . . . .
3544 80                 .BITS  * . . . . . . .
3545 80                 .BITS  * . . . . . . .
3546 80                 .BITS  * . . . . . . .
              ;         ----------------------
3547 01                 .BITS  . . . . . . . * ; $4E N
3548 01                 .BITS  . . . . . . . *
3549 01                 .BITS  . . . . . . . *
354a 01                 .BITS  . . . . . . . *
354b 01                 .BITS  . . . . . . . *
354c 01                 .BITS  . . . . . . . *
354d 01                 .BITS  . . . . . . . *
354e 01                 .BITS  . . . . . . . *
              ;         ----------------------
354f 00                 .BITS  . . . . . . . . ; $4F O
3550 ff                 .BITS  * * * * * * * *
3551 00                 .BITS  . . . . . . . .
3552 00                 .BITS  . . . . . . . .
3553 00                 .BITS  . . . . . . . .
3554 00                 .BITS  . . . . . . . .
3555 ff                 .BITS  * * * * * * * *
3556 00                 .BITS  . . . . . . . .
              ;         ----------------------
3557 00                 .BITS  . . . . . . . . ; $50 P
3558 ff                 .BITS  * * * * * * * *
3559 80                 .BITS  * . . . . . . .
355a 80                 .BITS  * . . . . . . .
355b 80                 .BITS  * . . . . . . .
355c 80                 .BITS  * . . . . . . .
355d ff                 .BITS  * * * * * * * *
355e 00                 .BITS  . . . . . . . .
              ;         ----------------------
355f 00                 .BITS  . . . . . . . . ; $51 Q
3560 ff                 .BITS  * * * * * * * *
3561 c0                 .BITS  * * . . . . . .
3562 c0                 .BITS  * * . . . . . .
3563 c0                 .BITS  * * . . . . . .
3564 c0                 .BITS  * * . . . . . .
3565 ff                 .BITS  * * * * * * * *
3566 00                 .BITS  . . . . . . . .
              ;         ----------------------
3567 00                 .BITS  . . . . . . . . ; $52 R
3568 ff                 .BITS  * * * * * * * *
3569 e0                 .BITS  * * * . . . . .
356a e0                 .BITS  * * * . . . . .
356b e0                 .BITS  * * * . . . . .
356c e0                 .BITS  * * * . . . . .
356d ff                 .BITS  * * * * * * * *
356e 00                 .BITS  . . . . . . . .
              ;         ----------------------
356f 00                 .BITS  . . . . . . . . ; $53 S
3570 ff                 .BITS  * * * * * * * *
3571 f0                 .BITS  * * * * . . . .
3572 f0                 .BITS  * * * * . . . .
3573 f0                 .BITS  * * * * . . . .
3574 f0                 .BITS  * * * * . . . .
3575 ff                 .BITS  * * * * * * * *
3576 00                 .BITS  . . . . . . . .
              ;         ----------------------
3577 00                 .BITS  . . . . . . . . ; $54 T
3578 ff                 .BITS  * * * * * * * *
3579 f8                 .BITS  * * * * * . . .
357a f8                 .BITS  * * * * * . . .
357b f8                 .BITS  * * * * * . . .
357c f8                 .BITS  * * * * * . . .
357d ff                 .BITS  * * * * * * * *
357e 00                 .BITS  . . . . . . . .
              ;         ----------------------
357f 00                 .BITS  . . . . . . . . ; $55 U
3580 ff                 .BITS  * * * * * * * *
3581 fc                 .BITS  * * * * * * . .
3582 fc                 .BITS  * * * * * * . .
3583 fc                 .BITS  * * * * * * . .
3584 fc                 .BITS  * * * * * * . .
3585 ff                 .BITS  * * * * * * * *
3586 00                 .BITS  . . . . . . . .
              ;         ----------------------
3587 00                 .BITS  . . . . . . . . ; $56 V
3588 ff                 .BITS  * * * * * * * *
3589 fe                 .BITS  * * * * * * * .
358a fe                 .BITS  * * * * * * * .
358b fe                 .BITS  * * * * * * * .
358c fe                 .BITS  * * * * * * * .
358d ff                 .BITS  * * * * * * * *
358e 00                 .BITS  . . . . . . . .
              ;         ----------------------
358f 00                 .BITS  . . . . . . . . ; $57 W
3590 ff                 .BITS  * * * * * * * *
3591 ff                 .BITS  * * * * * * * *
3592 ff                 .BITS  * * * * * * * *
3593 ff                 .BITS  * * * * * * * *
3594 ff                 .BITS  * * * * * * * *
3595 ff                 .BITS  * * * * * * * *
3596 00                 .BITS  . . . . . . . .
              ;         ----------------------
3597 00                 .BITS  . . . . . . . . ; $58 X
3598 01                 .BITS  . . . . . . . *
3599 01                 .BITS  . . . . . . . *
359a 01                 .BITS  . . . . . . . *
359b 01                 .BITS  . . . . . . . *
359c 01                 .BITS  . . . . . . . *
359d 01                 .BITS  . . . . . . . *
359e 00                 .BITS  . . . . . . . .
              ;         ----------------------
359f 00                 .BITS  . . . . . . . . ; $59 Y
35a0 80                 .BITS  * . . . . . . .
35a1 80                 .BITS  * . . . . . . .
35a2 80                 .BITS  * . . . . . . .
35a3 80                 .BITS  * . . . . . . .
35a4 80                 .BITS  * . . . . . . .
35a5 80                 .BITS  * . . . . . . .
35a6 00                 .BITS  . . . . . . . .
              ;         ----------------------
35a7 81                 .BITS  * . . . . . . * ; $5A Z
35a8 42                 .BITS  . * . . . . * .
35a9 24                 .BITS  . . * . . * . .
35aa 18                 .BITS  . . . * * . . .
35ab 18                 .BITS  . . . * * . . .
35ac 24                 .BITS  . . * . . * . .
35ad 42                 .BITS  . * . . . . * .
35ae 81                 .BITS  * . . . . . . *
              ;         ----------------------
35af 08                 .BITS  . . . . * . . . ; $5B [
35b0 08                 .BITS  . . . . * . . .
35b1 08                 .BITS  . . . . * . . .
35b2 08                 .BITS  . . . . * . . .
35b3 ff                 .BITS  * * * * * * * *
35b4 08                 .BITS  . . . . * . . .
35b5 08                 .BITS  . . . . * . . .
35b6 08                 .BITS  . . . . * . . .
              ;         ----------------------
35b7 18                 .BITS  . . . * * . . . ; $5C \
35b8 3c                 .BITS  . . * * * * . .
35b9 db                 .BITS  * * . * * . * *
35ba 18                 .BITS  . . . * * . . .
35bb 18                 .BITS  . . . * * . . .
35bc 18                 .BITS  . . . * * . . .
35bd 18                 .BITS  . . . * * . . .
35be 00                 .BITS  . . . . . . . .
              ;         ----------------------
35bf 18                 .BITS  . . . * * . . . ; $5D ]
35c0 18                 .BITS  . . . * * . . .
35c1 18                 .BITS  . . . * * . . .
35c2 18                 .BITS  . . . * * . . .
35c3 db                 .BITS  * * . * * . * *
35c4 3c                 .BITS  . . * * * * . .
35c5 18                 .BITS  . . . * * . . .
35c6 00                 .BITS  . . . . . . . .
              ;         ----------------------
35c7 18                 .BITS  . . . * * . . . ; $5E ^
35c8 3c                 .BITS  . . * * * * . .
35c9 db                 .BITS  * * . * * . * *
35ca 18                 .BITS  . . . * * . . .
35cb db                 .BITS  * * . * * . * *
35cc 3c                 .BITS  . . * * * * . .
35cd 18                 .BITS  . . . * * . . .
35ce 00                 .BITS  . . . . . . . .
              ;         ----------------------
35cf ff                 .BITS  * * * * * * * * ; $5F _
35d0 81                 .BITS  * . . . . . . *
35d1 81                 .BITS  * . . . . . . *
35d2 81                 .BITS  * . . . . . . *
35d3 81                 .BITS  * . . . . . . *
35d4 81                 .BITS  * . . . . . . *
35d5 81                 .BITS  * . . . . . . *
35d6 ff                 .BITS  * * * * * * * *
              ;         ----------------------
35d7 3c                 .BITS  . . * * * * . . ; $60 `
35d8 66                 .BITS  . * * . . * * .
35d9 06                 .BITS  . . . . . * * .
35da 0c                 .BITS  . . . . * * . .
35db 18                 .BITS  . . . * * . . .
35dc 00                 .BITS  . . . . . . . .
35dd 18                 .BITS  . . . * * . . .
35de 00                 .BITS  . . . . . . . .
              ;         ----------------------
35df c4                 .BITS  * * . . . * . . ; $61 a
35e0 a8                 .BITS  * . * . * . . .
35e1 90                 .BITS  * . . * . . . .
35e2 c0                 .BITS  * * . . . . . .
35e3 a0                 .BITS  * . * . . . . .
35e4 90                 .BITS  * . . * . . . .
35e5 80                 .BITS  * . . . . .. .
35e6 00                 .BITS  . . . . . . . .
              ;         ----------------------
35e7 c0                 .BITS  * * . . . . . . ; $62 a
35e8 a0                 .BITS  * . * . . . . .
35e9 90                 .BITS  * . . * . . . .
35ea e0                 .BITS  * * * . . . . .
35eb 90                 .BITS  * . . * . . . .
35ec a0                 .BITS  * . * . . . . .
35ed c0                 .BITS  * * . . . .. .
35ee 00                 .BITS  . . . . . . . .
              ;         ----------------------
35ef 10                 .BITS  . . . * . . . . ; $63 c
35f0 18                 .BITS  . . . * * . . .
35f1 14                 .BITS  . . . * . * . .
35f2 92                 .BITS  * . . * . . * .
35f3 50                 .BITS  . * . * . . . .
35f4 30                 .BITS  . . * * . . . .
35f5 10                 .BITS  . . . * . . . .
35f6 00                 .BITS  . . . . . . . .
              ;         ----------------------
35f7 82                 .BITS  * . . . . . * . ; $64 d
35f8 c6                 .BITS  * * . . . * * .
35f9 aa                 .BITS  * . * . * . * .
35fa 92                 .BITS  * . . * . . * .
35fb aa                 .BITS  * . * . * . * .
35fc c6                 .BITS  * * . . . * * .
35fd 82                 .BITS  * . . . . . * .
35fe 00                 .BITS  . . . . . . . .
              ;         ----------------------
35ff 82                 .BITS  * . . . . . * . ; $65 e
3600 c6                 .BITS  * * . . . * * .
3601 aa                 .BITS  * . * . * . * .
3602 92                 .BITS  * . . * . . * .
3603 82                 .BITS  * . . . . . * .
3604 82                 .BITS  * . . . . . * .
3605 82                 .BITS  * . . . . . * .
3606 00                 .BITS  . . . . . . . .
              ;         ----------------------
3607 94                 .BITS  * . . * . * . . ; $66 f
3608 a8                 .BITS  * . * . * . . .
3609 d0                 .BITS  * * . * . . . .
360a a0                 .BITS  * . * . . . . .
360b c0                 .BITS  * * . . . . . .
360c 80                 .BITS  * . . . . . . .
360d 80                 .BITS  * . . . . . . .
360e 00                 .BITS  . . . . . . . .
              ;         ----------------------
360f 82                 .BITS  * . . . . . * . ; $67 g
3610 44                 .BITS  . * . . . * . .
3611 28                 .BITS  . . * . * . . .
3612 10                 .BITS  . . . * . . . .
3613 28                 .BITS  . . * . * . . .
3614 44                 .BITS  . * . . . * . .
3615 82                 .BITS  * . . . . . * .
3616 00                 .BITS  . . . . . . . .
              ;         ----------------------
3617 c2                 .BITS  * * . . . . * . ; $68 h
3618 a2                 .BITS  * . * . . . * .
3619 d2                 .BITS  * * . * . . * .
361a aa                 .BITS  * . * . * . * .
361b 96                 .BITS  * . . * . * * .
361c 8a                 .BITS  * . . . * . * .
361d 86                 .BITS  * . . . . * * .
361e 00                 .BITS  . . . . . . . .
              ;         ----------------------
361f 10                 .BITS  . . . * . . . . ; $69 i
3620 10                 .BITS  . . . * . . . .
3621 10                 .BITS  . . . * . . . .
3622 10                 .BITS  . . . * . . . .
3623 10                 .BITS  . . . * . . . .
3624 10                 .BITS  . . . * . . . .
3625 10                 .BITS  . . . * . . . .
3626 00                 .BITS  . . . . . . . .
              ;         ----------------------
3627 10                 .BITS  . . . * . . . . ; $6a j
3628 38                 .BITS  . . * * * . . .
3629 54                 .BITS  . * . * . * . .
362a 92                 .BITS  * . . * . . * .
362b 54                 .BITS  . * . * . * . .
362c 38                 .BITS  . . * * * . . .
362d 10                 .BITS  . . . * . . . .
362e 00                 .BITS  . . . . . . . .
              ;         ----------------------
362f 10                 .BITS  . . . * . . . . ; $6b k
3630 10                 .BITS  . . . * . . . .
3631 10                 .BITS  . . . * . . . .
3632 38                 .BITS  . . * * * . . .
3633 54                 .BITS  . * . * . * . .
3634 92                 .BITS  * . . * . . * .
3635 92                 .BITS  * . . * . . * .
3636 00                 .BITS  . . . . . . . .
              ;         ----------------------
3637 10                 .BITS  . . . * . . . . ; $6c l
3638 18                 .BITS  . . . * * . . .
3639 14                 .BITS  . . . * . * . .
363a 12                 .BITS  . . . * . . * .
363b 10                 .BITS  . . . * . . . .
363c 10                 .BITS  . . . * . . . .
363d 10                 .BITS  . . . * . . . .
363e 00                 .BITS  . . . . . . . .
              ;         ----------------------
363f c6                 .BITS  * * . . . * * . ; $6d m
3640 aa                 .BITS  * . * . * . * .
3641 92                 .BITS  * . . * . . * .
3642 aa                 .BITS  * . * . * . * .
3643 c6                 .BITS  * * . . . * * .
3644 82                 .BITS  * . . . . . * .
3645 82                 .BITS  * . . . . . * .
3646 00                 .BITS  . . . . . . . .
              ;         ----------------------
3647 90                 .BITS  * . . * . . . . ; $69 i
3648 50                 .BITS  . * . * . . . .
3649 38                 .BITS  . . * * * . . .
364a 14                 .BITS  . . . * . * . .
364b 12                 .BITS  . . . * . . * .
364c 10                 .BITS  . . . * . . . .
364d 10                 .BITS  . . . * . . . .
364e 00                 .BITS  . . . . . . . .
              ;         ----------------------
364f c4                 .BITS  * * . . . * . . ; $6F o
3650 ac                 .BITS  * . * . * * . .
3651 d4                 .BITS  * * . * . * . .
3652 a8                 .BITS  * . * . * . . .
3653 90                 .BITS  * . . * . . . .
3654 80                 .BITS  * . . . . . . .
3655 80                 .BITS  * . . . . . . .
3656 00                 .BITS  . . . . . . . .
              ;         ----------------------
3657 80                 .BITS  * . . . . . . . ; $70 p
3658 80                 .BITS  * . . . . . . .
3659 80                 .BITS  * . . . . . . .
365a 90                 .BITS  * . . * . . . .
365b a8                 .BITS  * . * . * . . .
365c c4                 .BITS  * * . . . * . .
365d 82                 .BITS  * . . . . . * .
365e 00                 .BITS  . . . . . . . .
              ;         ----------------------
365f 40                 .BITS  . * . . . . . . ; $71 q
3660 40                 .BITS  . * . . . . . .
3661 40                 .BITS  . * . . . . . .
3662 78                 .BITS  . * * * * . . .
3663 44                 .BITS  . * . . . * . .
3664 44                 .BITS  . * . . . * . .
3665 44                 .BITS  . * . . . * . .
3666 00                 .BITS  . . . . . . . .
              ;         ----------------------
3667 60                 .BITS  . * * . . . . . ; $72 r
3668 50                 .BITS  . * . * . . . .
3669 48                 .BITS  . * . . * . . .
366a 50                 .BITS  . * . * . . . .
366b 60                 .BITS  . * * . . . . .
366c 50                 .BITS  . * . * . . . .
366d 48                 .BITS  . * . . * . . .
366e 00                 .BITS  . . . . . . . .
              ;         ----------------------
366f 40                 .BITS  . * . . . . . . ; $73 s
3670 44                 .BITS  . * . . . * . .
3671 4c                 .BITS  . * . . * * . .
3672 54                 .BITS  . * . * . * . .
3673 64                 .BITS  . * * . . * . .
3674 44                 .BITS  . * . . . * . .
3675 04                 .BITS  . . . . . * . .
3676 00                 .BITS  . . . . . . . .
              ;         ----------------------
3677 10                 .BITS  . . . * . . . . ; $74 t
3678 38                 .BITS  . . * * * . . .
3679 54                 .BITS  . * . * . * . .
367a 92                 .BITS  * . . * . . * .
367b 10                 .BITS  . . . * . . . .
367c 10                 .BITS  . . . * . . . .
367d 10                 .BITS  . . . * . . . .
367e 00                 .BITS  . . . . . . . .
              ;         ----------------------
367f 60                 .BITS  . * * . . . . . ; $75 u
3680 50                 .BITS  . * . * . . . .
3681 48                 .BITS  . * . . * . . .
3682 44                 .BITS  . * . . . * . .
3683 44                 .BITS  . * . . . * . .
3684 44                 .BITS  . * . . . * . .
3685 44                 .BITS  . * . . . * . .
3686 00                 .BITS  . . . . . . . .
              ;         ----------------------
3687 10                 .BITS  . . . * . . . . ; $76 v
3688 ba                 .BITS  * . * * * . * .
3689 54                 .BITS  . * . * . * . .
368a 10                 .BITS  . . . * . . . .
368b 10                 .BITS  . . . * . . . .
368c 10                 .BITS  . . . * . . . .
368d 10                 .BITS  . . . * . . . .
368e 00                 .BITS  . . . . . . . .
              ;         ----------------------
368f 60                 .BITS  . * * . . . . . ; $77 w
3690 50                 .BITS  . * . * . . . .
3691 48                 .BITS  . * . . * . . .
3692 50                 .BITS  . * . * . . . .
3693 60                 .BITS  . * * . . . . .
3694 40                 .BITS  . * . . . . . .
3695 40                 .BITS  . * . . . . . .
3696 00                 .BITS  . . . . . . . .
              ;         ----------------------
3697 92                 .BITS  * . . * . . * . ; $78 x
3698 54                 .BITS  . * . * . * . .
3699 38                 .BITS  . . * * * . . .
369a 10                 .BITS  . . . * . . . .
369b 10                 .BITS  . . . * . . . .
369c 10                 .BITS  . . . * . . . .
369d 10                 .BITS  . . . * . . . .
369e 00                 .BITS  . . . . . . . .
              ;         ----------------------
369f e0                 .BITS  * * * . . . . . ; $79 y
36a0 d0                 .BITS  * * . * . . . .
36a1 a8                 .BITS  * . * . * . . .
36a2 94                 .BITS  * . . * . * . .
36a3 9a                 .BITS  * . . * * . * .
36a4 96                 .BITS  * . . * . * * .
36a5 92                 .BITS  * . . * . . * .
36a6 00                 .BITS  . . . . . . . .
              ;         ----------------------
36a7 10                 .BITS  . . . * . . . . ; $7A z
36a8 28                 .BITS  . . * . * . . .
36a9 44                 .BITS  . * . . . * . .
36aa 28                 .BITS  . . * . * . . .
36ab 10                 .BITS  . . . * . . . .
36ac 28                 .BITS  . . * . * . . .
36ad 44                 .BITS  . * . . . * . .
36ae 00                 .BITS  . . . . . . . .
              ;         ----------------------
36af e7                 .BITS  * * * . . * * * ; $7B [
36b0 c3                 .BITS  * * . . . . * *
36b1 24                 .BITS  . . * . . * . .
36b2 e7                 .BITS  * * * . . * * *
36b3 e7                 .BITS  * * * . . * * *
36b4 e7                 .BITS  * * * . . * * *
36b5 e7                 .BITS  * * * . . * * *
36b6 ff                 .BITS  * * * * * * * *
              ;         ----------------------
36b7 e7                 .BITS  * * * . . * * * ; $7C \
36b8 e7                 .BITS  * * * . . * * *
36b9 e7                 .BITS  * * * . . * * *
36ba e7                 .BITS  * * * . . * * *
36bb 24                 .BITS  . . * . . * . .
36bc c3                 .BITS  * * . . . . * *
36bd e7                 .BITS  * * * . . * * *
36be ff                 .BITS  * * * * * * * *
              ;         ----------------------
36bf e7                 .BITS  * * * . . * * * ; $7D ]
36c0 c3                 .BITS  * * . . . . * *
36c1 24                 .BITS  . . * . . * . .
36c2 e7                 .BITS  * * * . . * * *
36c3 24                 .BITS  . . * . . * . .
36c4 c3                 .BITS  * * . . . . * *
36c5 e7                 .BITS  * * * . . * * *
36c6 ff                 .BITS  * * * * * * * *
              ;         ----------------------
36c7 c3                 .BITS  * * . . . . * * ; $7E ^
36c8 99                 .BITS  * . . * * . . *
36c9 f9                 .BITS  * * * * * . . *
36ca f3                 .BITS  * * * * . . * *
36cb e7                 .BITS  * * * . . * * *
36cc ff                 .BITS  * * * * * * * *
36cd e7                 .BITS  * * * . . * * *
36ce ff                 .BITS  * * * * * * * *
              ;         ----------------------
36cf ff                 .BITS  * * * * * * * * ; $7F _
36d0 81                 .BITS  * . . . . . . *
36d1 81                 .BITS  * . . . . . . *
36d2 81                 .BITS  * . . . . . . *
36d3 81                 .BITS  * . . . . . . *
36d4 81                 .BITS  * . . . . . . *
36d5 81                 .BITS  * . . . . . . *
36d6 ff                 .BITS  * * * * * * * *
              ;         ----------------------
;                       closed INCLUDE file Zchar.asm

              **************
              Module Mode_65
              **************

              ; move complete program from $2000 -> $1000

36d7 a9 41            LDA  #65                ; 40MHz CPU
36d9 85 00            STA  0

36db a0 00            LDY  #0
36dd 84 41            STY  A0L
36df 84 43            STY  A1L
36e1 a9 20            LDA  #$20               ; loaded at $2001
36e3 85 42            STA  A0H
36e5 a9 10            LDA  #>START
36e7 85 44            STA  A1H

36e9 b1 41    _loop   LDA  (A0L),Y
36eb 91 43            STA  (A1L),Y
36ed c8               INY
36ee d0 f9            BNE  _loop
36f0 e6 42            INC  A0H
36f2 e6 44            INC  A1H
36f4 a5 44            LDA  A1H
36f6 c9 37            CMP  #>EOC+1
36f8 90 ef            BCC  _loop
36fa 4c 67 10         JMP  MEGA_Setup
36fd          EndMod [Mode_65] Size = 38 [$26]

              ***
36fd          EOC
              ***


  869 Symbols
-------------
BLACK                          $0000    30
NORMAL                         $0000    59
WHITE                          $0001    31D  5484   5851   6153
R6510                          $0001   191D   388   4885
Z_Code                         $0002    82D   523    524    526    530
                                       547    555    584    604    609
                                       847    876   3974   4311   4314
                                      4887
RED                            $0002    32D  6157
CYAN                           $0003    33D  5477
PURPLE                         $0004    34
QI0                            $0004    83D   517   1104   1105   1146
                                      1153   1486   2128   2134   2142
                                      4463   4639   5014   5026   5028
                                      5030   5032   5041   5115   5141
GREEN                          $0005    35
QI1                            $0005    84D  1107   1108   1489   2125
                                      2137   2143   5012   5033   5035
                                      5116   5143
QI2                            $0006    85D   519   1113   1114   1490
                                      2124   2140   5027   5029   5036
                                      5038   5043   5117
STIME_COL                      $0006  6144D  4234   4243
BLUE                           $0006    36D  6155   6156
SCORE_COL                      $0007  6143D  4264   4267
QDL                            $0007    89D  3542   3575   3601   3611
                                      5160   5193
YELLOW                         $0007    37D  4109   4294   6154
ORANGE                         $0008    38
QDH                            $0008    90D  3482   3586   3590   3594
                                      3600   3609   3613   3615   3617
                                      3621   3622
QD0                            $0009    91D  1147   1152   1523   1526
                                      1829   2808   2842   2859   3383
                                      3384   3422   3461   3558   5065
                                      5091
BROWN                          $0009    39
QD1                            $000a    92D  1524   1527   1832   2809
                                      2844   2862   3386   3424   3462
                                      3562   5066   5093
PINK                           $000a    40
DARKGREY                       $000b    41
QD2                            $000b    93D  1835   2811   3464   3565
                                      5067
GREY                           $000c    42
RAMD                           $000c    97D   483    484    485    486
                                       487    489    490   4498   4506
                                      4530y  4534   4592   4619   4653y
                                      4656   4903   5069   5070   5074
                                      5080   5082   5084   5087   5089
                                      5090   5119   5120   5124   5130
                                      5132   5134   5137   5139   5140
                                      5900   5906   5918   5920   5923
                                      5926   5928
CR                             $000d    51D  2401   4046   4129   4387
                                      4422   5279   5449   5623   6108
LT_GREEN                       $000d    43
LT_BLUE                        $000e    44
LT_GREY                        $000f    45
LV0                            $0010   101D  1775   1783   1787   3518
                                      3520   6173   6186
BLINK                          $0010    60
LV1                            $0011   102D  6175   6190
CURSOR_DOWN                    $0011    21D  5235
LV2                            $0012   103D  3532   3536
Alphabet                       $0013   105D  3484   3494   3496
Attribute                      $0014   106D  2629   2638   2647   2680
                                      4106   4113   5462   5812
DEL                            $0014    52D  2798   5281   5644
Block_Lo                       $0015   107D  4997   5002   5905   5919
                                      5932
Block_Hi                       $0016   108D  5921   5937
MOVES_COL                      $0016  6139D  4272   4275
Call_Type                      $0017   109D  1485   1496   2111   2115
                                      2129
Charbuf_Ptr                    $0018   110D  4050   4060   4070   4085
                                      4128   4131   4137   4143   4146
Charbuf_End                    $0019   111D  4064   4069   4082
ROWS                           $0019   190D  2481   2517   2546   2554
                                      4095   4101   4767   4769   4872
                                      4941   5339   5362   5382   5385
                                      5809
Chars_Left                     $001a   112D  3204   3219   3252   3256
                                      3264   3270   3309   3317   5634
                                      5715   5729
Colour                         $001b   113D  2205   2501   4104   4110
                                      4115   4295   4893   5461   5491
C_Save_Col                     $001c   114D  5830   5839
C_Save_Row                     $001d   115D  3055   5829   5838
CURSOR_RIGHT                   $001d    22D  5237
Info_Pages                     $001e   116
Left_Margin                    $001f   117D  5602   5608   5646   5664
                                      5706   5714
REVERSE                        $0020    61D  2628
Log                            $0020   118D   527
MORE_Counter                   $0021   119D  2587   2792   4093   4094
                                      4098   5592   5757
NUMBER                         $0022   120D  2428   4162   4170   4180
                                      4184   4186   4216   4235   4237
                                      4244   4247   4796
OP_Type                        $0027   121D   804    806    841    864
                                       868    869    871
ParNum                         $0029   122D   522    816    817    844
                                       873   1564   2166   2183   2392
                                      2828   2883   3043   3077   5511
                                      5514   5532
Parse_Index                    $002a   123D  3206   3284   3301
Prop_Mask                      $002b   124D  3854   3868   3907   4871
                                      4931
Resident_Pages                 $002c   125D  4937   5003   5071   5121
Right_Margin                   $002d   126D  5432   5613   5655   5671
                                      5701
Save_Unit                      $002e   127D   403   4374   4469   4567
                                      4586
Status_Col                     $002f   128D  4013   4044   4899   5166
                                      5173   5180
Timeout                        $0030   129D  3075   3076   3085   3087
                                      3088   3089   3090   3092   3093
                                      3094   5268   5269   5271   5273
                                      5551   5552
Tok_Flag                       $0032   130D  2387   2888   3285
TO_Flag                        $0033   131D  2390   5605   5638
STAT_SCORE                     $0034  6138D  4282   4284
Upper_Size                     $0034   132D  2483   2486   2512   2516
                                      2539   2543   2551   2586   2791
                                      4097   4757   4895   5319   5591
                                      5756
Version                        $0035   133D  1245   1254   1270   1291
                                      1339   1449   1452   1525   1653
                                      1764   2141   2153   2383   2398
                                      3201   3207   3755   3814   3834
                                      3837   3862   3932   4036   4828
                                      4831   4912   4949   5015   5490
                                      5555   5559   5570   5599   5728
Vocab_Length                   $0036   134D  2931   3431   4869   4929
Win_Bot                        $0037   135D  2520   2555   4873   5810
Win_Top                        $0038   136D  2484   2519   2552   2592
                                      5808   5821
Word_Length                    $0039   137D  2921   3231   3651   3727
                                      4867   4927
z_stack_ptr                    $003a   138D   925    926    946    947
                                       949    950    951   1196   1197
                                      1199   1200   1203   1468   1470
                                      2186   2188   4458   4633   4897
z_frame_ptr                    $003c   139D  1467   1469   1493   1494
                                      2120   2121   2187   2189   4898
DPL                            $003e   140D  3184   3397
DPH                            $003f   141D  3185   3398
DPI                            $0040   142D  3404   3437
BOLD                           $0040    62D  2646
A0L/A0H                        $0041   143D   356    363y   911y   914y
                                      1009y  1012y  1033   1286   1292y
                                      1342   1347y  1352y  1367y  1372y
                                      1388y  1391y  1405   1409y  1418y
                                      1427y  1455y  1714y  1726y  1727y
                                      1739y  1740y  1777y  1780y  1801y
                                      1873   1887y  1890y  1904   2312
                                      2330y  2333y  2345y  2362y  2365y
                                      3551   3556y  3560y  3738   3758
                                      3769   3808   3815y  3818y  3840y
                                      3841   3846y  3849   3850   3853y
                                      3863y  3866y  3878y  3901   3902
                                      3906y  3933y  5982   6045y  6046
                                      6047   6071y  6073   6074   6212
                                      6219y   144D   359    367   1029
                                      1031   1034   1037   1289   1344
                                      1407   1876   1907   2316   3554
                                      3739   3741   3743   3745   3760
                                      3771   3772   3773   3774   3777
                                      3805   3809   3812   3844   3852
                                      3904   5983   6049   6076   6215
                                      6223
A1L/A1H                        $0043   145D   357    364y  1343   1364y
                                      1369y  1387y  1390y  1397y  1406
                                      1416y  1426y  1431y  1433y  1767y
                                      1771y  1788y  1791y  1796y  1805y
                                      5986   6048   6075   6213   6220y
                                       146D   361    368    369   1345
                                      1408   2145   2176   2181   5987
                                      6050   6077   6217   6224   6225
X0L                            $0045   147D   812    820    821    902
                                       915    933    981    997   1011
                                      1202   1259   1311   1320   1553
                                      1619   1637   1751   1968   1972
                                      1978   1979   2002   2007   2009
                                      2016   2047   2454   2843   2858
                                      4153   4528   4824   4827   4830
                                      4835   4838   5019   5022   5023
                                      5024   5031   5169
X0H                            $0046   148D   810    822    823    900
                                       912    934    975    999   1008
                                      1082   1084   1098   1110   1201
                                      1260   1554   1621   1639   1753
                                      1846   1969   1971   1981   1982
                                      2003   2008   2013   2017   2845
                                      2861   4154   4822   5021   5034
                                      5170
X1L/X1H                        $0047   149D   884    923   1123   1134
                                      1182   1234   1284   1328   1355
                                      1380   1413   1423   1441   1499
                                      1511   1520   1542   1571   1572
                                      1586   1603   1670   1688   1702
                                      1776   1800   1827   1937   1952
                                      1977   2005   2020   2037   2044
                                      2073   2112   2132   2172   2201
                                      2236   2261   2273   2276   2295
                                      2311   2410   2418   2424   2444
                                      2450   2462   2480   2498   2530
                                      2564   2589   2609y  2613y  2616y
                                      2620y  2672   2689   2704   2777
                                      2835   2852   2911y  2947y  2977
                                      2985   3005   3007   3021   3023y
                                      3040   3066   3203y  3247y  3259y
                                      3312y  3786   5506   5520   5526
                                      5535   5553   5561   5593   5607
                                      5639y  5731y   150D   504    506
                                      1125   1135   1183   1235   1287
                                      1329   1357   1382   1442   1500
                                      1512   1521   1545   1574   1575
                                      1588   1605   1685   1699   1779
                                      1830   1940   1955   1980   2006
                                      2021   2033   2038   2074   2113
                                      2135   2174   2240   2245   2250
                                      2265   2270   2272   2278   2314
                                      2419   2425   2446   2452   2463
                                      2836   2848   2950   2979   2986
                                      3008   3011   3041   3787   5522
                                      5554   5595
X2L/X2H                        $0049   151D  1587   1602   1620   1636
                                      1658   1671   1672   1689   1703
                                      1750   1770   1794   1816   1828
                                      1877   1919   1938   1953   1974
                                      1985   1997   2011   2040   2206
                                      2237   2262   2310   2327   2394
                                      2445   2594   2716   2838   2923
                                      2964   2978   2996y  2997   3013
                                      3015   3022   3024y  3050   3194y
                                      3199y  3225y  3296y  3926   3954
                                      3959    152D  1589   1604   1622
                                      1638   1656   1686   1700   1752
                                      1766   1831   1941   1956   1973
                                      1986   1998   2014   2035   2041
                                      2313   2395   2447   2712   2839
                                      2965   2980   2990   2992   3016
                                      3019   3187   3189
X3L                            $004b   153D  2332   2344   2364   2825
                                      2863   2889   2910   2951   2967
                                      2971   2998   3006   3014   3025
                                      3047   3056   3084
X3H                            $004c   154D  2329   2361   2823   2890
                                      2968   2972   3009   3017   3086
X4L/X4H                        $004d   155D  2832   2834   2850   2855
                                      2934y  3080   3408   3416   3417
                                      3440    156D  2928   2930   3082
                                      3406   3409   3411   3419   3420
X5L                            $004f   157D  3209   3245   3253   3258
                                      3266   3272   3311   3316
COLS                           $0050   189D  2571   4011   4056   4284
                                      4300   4667   4668   4669   4670
                                      4671   4672   4673   4674   4675
                                      4676   4677   4678   4679   4680
                                      4681   4682   4683   4684   4685
                                      4686   4687   4688   4689   4690
                                      4693   4694   4695   4696   4697
                                      4698   4699   4700   4701   4702
                                      4703   4704   4705   4706   4707
                                      4708   4709   4710   4711   4712
                                      4713   4714   4715   4716   4770
                                      4772   4938   5176   5330   5421
                                      5457   5459   5610   5612   5848
X5H                            $0050   158D  3212   3220   3230   3235
                                      3262   3265   3271   3276   3283
                                      3315
X6L                            $0051   159D  3211   3216   3281
X6H                            $0052   160D  3200   3217
X7L                            $0053   161D   435    439    441    442
                                      3246   3278   3287   3295   3425
                                      3445   6177   6187
X7H                            $0054   162D   436   3288   3423   3444
                                      6179   6191
X8L                            $0055   163D   437   6181
X8H                            $0056   164D   438   6183
GLL                            $0057   165D  5594   5597   5600   5718
                                      5722
GLH                            $0058   166D  5596
Font_Sel                       $0059   168D  2299   2507   5377   5465
Cursor_Col                     $005a   169D  2567   2617   3121   4055
                                      4775   4786   5205   5220   5350
                                      5379   5397   5406   5413   5438
                                      5456   5460   5467   5515   5529
                                      5557   5567   5601
Cursor_Row                     $005b   170D  2485   2610   4737   4774
                                      4785   5351   5380   5386
Z_Mem_Base                     $005c   171D  2714   2717   2727   2728y
                                      2732   2733
Z_Mem_Ptr                      $005e   172D  2715   2718   2726   2731
                                      4021y  4022
ZP_CLEAR                       $0060   173D  4890
Segment                        $0061   177D   492    494   5081   5131
                                      5917
Scr_Adr                        $0062   178D  2569y  4744   4747   5333
                                      5416   5418   5425   5434   5436
                                      5441   5466   5703y  5721y  5850
Col_Adr                        $0064   179D  4745   4749   4809   4811
                                      5206   5208   5221   5223   5335
                                      5463   5852
DICT_WORD                      $0068   180D  2933   3429   3649   3675
                                      3685   3694   3708   3713   3715
                                      3716   3718   3719   3721   3729
                                      3731
TEXT_WORD                      $006e   181D  2906   2918   3239   3263
                                      3269   3655
UNDERLINE                      $0080    63D  2637   5207
KEY_UP                         $0081    69
KEY_DOWN                       $0082    70
KEY_LEFT                       $0083    71D  5662
KEY_RIGHT                      $0084    72D  5676
KEY_F1                         $0085    12
KEY_F3                         $0086    13
KEY_F5                         $0087    14
KEY_F7                         $0088    15
KEY_F2                         $0089    16
KEY_F4                         $008a    17
KEY_F6                         $008b    18
KEY_F8                         $008c    19
IO_STATUS                      $0090   192D  4411   4413   4468   4490
                                      4501   4510   4529   4651   4995
                                      5898   5901   5930   6012   6043
CURSOR_UP                      $0091    23D  5234
INS                            $0094    53D  5283   5653
CURSOR_LEFT                    $009d    24D  5236
Jiffy                          $00a0   193D  2751   2758   3096   3097
                                      3098   5272   5274   5502   5503
                                      5504
Scr_Row                        $00ac   194D  5324   5327   5332
Col_Row                        $00ae   195D  5316   5318   5325   5329
                                      5334
FNLEN                          $00b7   196D  5999   6000   6016
FA                             $00ba   197D   401   4406   4470   4493
                                      4568   4587   5765   5774   5942
                                      5953   5964   6007   6037   6066
FNADR                          $00bb   198D  6013
MEMUSS                         $00c3   199D  5739   5740   5742
BLNSW                          $00cc   200D   398
BLNCT                          $00cd   201
BLNON                          $00cf   202
Charbuf                        $0200   203D  4051   4065   4079   4080
                                      4130   4140   4564   4601
SCNMPG                         $0288   204D   395
CINV                           $0314   205D   472
DSTATUS                        $033c   206D  4415   4423   4425   4428
                                      4519   4519   4519
Z_STATUS                       $033c   247D  4010   4252   4282   4298
                                      4299   4934   5174
Z_VAR                          $0400   244D   248    249   4454   4456
                                      4459   4464   4497   4499   4563
                                      4591   4594   4597   4602   4632
                                      4638
Lvar_Lo                        $0400   248D   901    998   1478   2150
                                      2158   2164   2173
Lvar_Hi                        $0410   249D   899   1000   1480   2149
                                      2157   2162   2175
Z_STACK_LO                     $0500   245D  1204   4613   4896
Z_STACK_HI                     $0800   246D   952   4499   4613
SCREEN                         $0800   207D  4666   4667   4668   4669
                                      4670   4671   4672   4673   4674
                                      4675   4676   4677   4678   4679
                                      4680   4681   4682   4683   4684
                                      4685   4686   4687   4688   4689
                                      4690   4692   4693   4694   4695
                                      4696   4697   4698   4699   4700
                                      4701   4702   4703   4704   4705
                                      4706   4707   4708   4709   4710
                                      4711   4712   4713   4714   4715
                                      4716
START                          $1001   315D   317    320    320    370
                                      6110   6114   6216
Link                           $103b   343D   326
Mode_64                        $1041   349
Mode_64_loop                   $1053   363D   366    371
MEGA_Setup                     $1067   376D   372   6228
Set_Mode_80                    $10b7   420D   405   5009
BATE_20                        $10e0   452D   443
Set_Kernal_Vectors             $10f9   467D   393
Set_Kernal_Vectors_loop        $10fb   471D   474
Set_Attic_RAM                  $1105   479D   408   5006
Set_Attic_RAM_attic            $1121   494D   491
Header_X1                      $112d   500D  2388   2882   2903   2944
PC_LOOP                        $1135   511D   621   4321   5046   5525
PC_LOOP_nolog                  $1153   530D   528
PC_LOOP_var_10                 $116c   552D   549
PC_LOOP_var_20                 $1171   554D   551
PC_LOOP_var_30                 $1174   555D   553
z_op_zero                      $1181   564D   535
z_op_one                       $1185   573D   533
z_op_two                       $1193   591D   531
PC_LOOP_twop                   $11a7   610D   557
z_execute                      $11a9   613D   561    570    588
z_error_4                      $11b0   624D   636    664    665    666
                                       667
z_opcode                       $11b5   627D   560    569    587    620
opcodes_1op                    $11f5   670D   587
ZV8F                           $1213   692D  4846   4848
opcodes_0op                    $1215   695D   569
ZVB9                           $1227   707D  4850   4852
opcodes_var                    $1235   716D   560
z_error_1                      $1275   752D   739
opcodes_ext                    $127a   755D  4320
Get_Operand                    $1290   791D   583    603    608    839
                                       866
Get_Operand_const              $129d   810D   808
Get_Operand_check              $12a6   814D   807
Get_Operand_store              $12ab   816D   813
Get_Operand_return             $12ba   825D   814
Load_4_Operands                $12bb   829D   554    846   4313
Load_4_Operands_return         $12ca   847D   840
Load_8_Operands                $12cd   852D   552
Load_8_Operands_loop           $12d4   866D   875
Load_8_Operands_return         $12e7   876D   867
Get_Var_X1L                    $12ea   881D  1310   1319   1535
Get_Var_A                      $12f3   890D   815
GeVa_10                        $12f9   896D   885
Get_Global_Var                 $1309   907D   897   4212   4232   4241
                                      5168
Put_Var                        $1316   920D  1312   1321   1754   2472
Push_X0                        $131e   930D   887    988
Push_AY                        $1322   938D  2122   2126   2130   2151
                                      2182   2464
z_error_6                      $1335   955D   953
Store_Zero                     $133a   960D  1903   1927   2391   2866
                                      4339
Store_Byte                     $133c   966D  1299   1303   1858   1922
                                      1926   2118   2302   2402   2801
                                      4437   4551
Store_AX                       $133e   972D  1258   1273   1501   1690
                                      1704   1891   2251   2279   4332
Store_A_X0H                    $1340   978D  1848
Store_X0                       $1342   984D  1536   1555   2083   2455
                                      2869
Store_Var                      $1347   991D   924
Put_Global_Var                 $1357  1004D   995
Get_Global_Var_Addr            $1364  1017D   910   1007
Main_False                     $137d  1052D  1237   1261   1568   1593
                                      1609   1626   1643   1660   1673
                                      1716   2867   3068   4606
Main_False_mft_10              $1382  1057D  1066
Main_True                      $1389  1062D   711    713   1236   1262
                                      1577   1592   1608   1625   1642
                                      1659   1676   1715   2870   3067
                                      4443   4543
Main_False_mft_20              $138e  1067D  1056
Main_False_mft_30              $139a  1074D  1069
Main_False_mft_40              $13a4  1080D  1076
Main_False_mft_50              $13a7  1082D  1079
Main_False_mft_60              $13b0  1086D  1073
Branch_XA                      $13b6  1092D  1085   1513
Main_False_mft_70              $13be  1103D  1101
Main_False_mft_80              $13d0  1113D  1111
Main_False_return              $13d4  1115D  1058
z_rtrue                        $13d5  1119D   698   1089   1167
z_rfalse                       $13df  1130D   699   1087
z_print                        $13e8  1140D   700   1165
z_print_id                     $13ea  1146D  1149
z_print_di                     $13f6  1152D  1155
z_print_ret                    $13fe  1160D   701
z_nop                          $1406  1171D   702
z_ret_popped                   $1407  1178D   706
z_pop                          $1411  1188D   886    894   1181   1472
                                      1477   1484   1488   1492   2471
                                      4849   4851
z_error_5                      $1428  1207D  1205
z_catch                        $142d  1211D   707
z_quit                         $1432  1217D   708   4004
quit_20                        $1435  1221D  4922
quit_30                        $143e  1222D  1222
z_jz                           $1440  1229D   677
z_get_sibling                  $144a  1241D   678
z_get_child                    $1453  1250D   679
z_get_sibling_get              $145a  1257D  1245   1247   1254
z_get_parent                   $146a  1266D   680
z_get_parent_get               $1471  1272D  1270
z_get_prop_len                 $1477  1277D   681
z_get_prop_len_mask            $1492  1298D  1293
z_get_prop_len_V3              $1497  1301D  1291
z_inc                          $149e  1307D   682   1635
z_dec                          $14a6  1316D   683   1618
z_print_addr                   $14ae  1325D   684
z_remove_obj                   $14b5  1334D   686   1763
z_remove_obj_ro_10             $14ea  1378D  1356   1358   1381   1383
z_remove_obj_ro_20             $1500  1395D  1373
z_remove_obj_ro_30             $1504  1397D  1400
z_remove_obj_ret40             $150b  1401D  1348
z_remove_obj_V3                $150c  1403D  1339
z_remove_obj_ro_50             $152f  1421D  1414   1424
z_remove_obj_ro_60             $153e  1429D  1419
z_remove_obj_ret70             $1547  1434D  1410
z_print_obj                    $1548  1438D   687
z_print_obj_A                  $154c  1445D  5171
z_print_obj_prio_1             $1553  1451D  1449
z_print_obj_V4                 $155d  1456D  1452
z_print_obj_decode             $1562  1460D  1458
z_ret                          $1565  1464D   688   1126   1136   1184
z_ret_loop                     $1576  1477D  1482
z_ret_noloc                    $1583  1484D  1475
z_ret_irqret                   $15a5  1502D  1497
z_ret_return                   $15a7  1504D  1498
z_jump                         $15a8  1508D   689
z_print_paddr                  $15af  1517D   690
z_print_paddr_label            $15c3  1528D  1525
z_load                         $15c6  1532D   691
z_not                          $15cc  1540D   743   4845   4847
Store_XA                       $15d5  1550D  1909   1942   1957   1987
                                      2075
z_je                           $15dc  1559D   637
z_je_loop                      $15e0  1567D  1573   1576
z_jl                           $15f6  1581D   638
z_jl_sig                       $1602  1592D  1590
z_jg                           $1608  1597D   639
z_jg_sig                       $1614  1608D  1606
z_dec_chk                      $161a  1613D   640
z_dec_chk_sig                  $1629  1625D  1623
z_inc_chk                      $162f  1630D   641
z_inc_chk_sig                  $163e  1642D  1640
z_jin                          $1644  1647D   642
z_jin_get                      $164b  1655D  1653
z_jin_false                    $1657  1660D  1657
z_test                         $165a  1664D   643
z_test_loop                    $165c  1670D  1675
z_or                           $166b  1680D   644
z_and                          $1677  1694D   645
z_test_attr                    $1683  1708D   646
z_set_attr                     $168e  1720D   647
z_clear_attr                   $1696  1732D   648
z_store                        $16a0  1745D   649
z_insert_obj                   $16ab  1758D   650
z_insert_obj_V3                $16dc  1794D  1764
z_insert_obj_return            $16f3  1806D  1784   1803
Word_Array                     $16f4  1810D  1845
Byte_Array                     $16f7  1820D  1857
z_loadw                        $170c  1840D   651
z_loadb                        $1717  1852D   652
z_get_prop                     $171d  1862D   653
z_get_prop_found               $1736  1883D  1870
z_get_prop_read                $173c  1887D  1881
z_get_prop_low                 $1740  1890D  1885
z_get_prop_addr                $1745  1895D   654
z_get_next_prop                $1757  1913D   655
z_get_next_prop_next           $1761  1923D  1920
z_get_next_prop_zero           $176c  1927D  1924
z_add                          $176f  1931D   656
z_sub                          $177c  1946D   657
z_mul                          $1789  1961D   658
z_mul_loop                     $1792  1971D  1984
z_mul_zero                     $17a9  1983D  1975
Divide_Unsigned                $17b3  1991D  2043
Divide_Unsigned_loop           $17c2  2005D  2019
Divide_Unsigned_next           $17da  2018D  2015
z_error_8                      $17e2  2023D  1999
Divide_Signed                  $17e7  2027D  2072   2082   2453
Sign_ZPX                       $1807  2052D  2039   2042   2046   2421
                                      2974
Sign_ZPX_return                $1816  2065D  2057
z_div                          $1817  2069D   659
z_mod                          $1821  2079D   660
z_call_s                       $1827  2087D   661    685    719    731
z_call_n                       $182b  2095D   662    692    744    745
call_00                        $182d  2111D  2091   5524
call_10                        $183a  2118D  2116
call_20                        $183d  2120D  2114
call_25                        $1869  2144D  2141
call_30                        $1872  2149D  2178
call_32                        $188b  2161D  2155
call_36                        $1897  2166D  2159
call_40                        $18aa  2176D  2167
call_50                        $18af  2180D  2146
z_set_colour                   $18c6  2194D   663
z_set_colour_ret               $18e3  2212D  2203   2208
z_set_colour_coltab            $18e4  2214D  2204   2209
z_log_shift                    $18f1  2230D   760
z_log_shift_left               $18f7  2239D  2242
z_log_shift_right              $18ff  2245D  2238   2248
z_log_shift_store              $1905  2250D  2243
z_art_shift                    $190a  2255D   761
z_art_shift_left               $1910  2264D  2267
z_art_shift_right              $1918  2270D  2263   2275
z_art_shift_store              $1924  2278D  2268
z_set_font                     $1929  2283D   762
z_set_font_offset              $1939  2299D  2297
X1_PLUS_X2_TO_A0               $1944  2306D  2328   2343
z_storew                       $1956  2322D   720
z_storeb                       $1966  2338D   721
z_put_prop                     $196e  2350D   722
z_put_prop_byte                $1981  2364D  2358
z_error10                      $1986  2367D  2356
z_error11                      $198b  2368D  2360
z_read                         $1990  2372D   723
z_read_V4                      $1999  2385D  2383
z_read_skip                    $19b8  2398D  2393   2396
z_read_return                  $19c3  2403D  2400
z_print_char                   $19c4  2407D   724
z_print_num                    $19c9  2415D   725
z_print_num_pos                $19d7  2424D  2420
z_print_num_loop               $19e1  2428D  2436
z_print_num_next               $19ec  2434D  2430
z_random                       $19f2  2441D   726
z_push                         $1a0e  2459D   727
z_pull                         $1a15  2468D   728
z_split_window                 $1a1b  2476D   729
z_split_window_set             $1a31  2489D  2487
z_split_window_return          $1a34  2490D  2482
z_set_window                   $1a35  2494D   730
z_set_window_font              $1a4d  2507D  2505
z_set_window_lower             $1a59  2516D  2509
z_set_window_set               $1a5d  2519D  2514
z_erase_window                 $1a66  2526D   732
z_erase_window_uloop           $1a77  2537D  2540
z_erase_window_lower           $1a80  2543D  2531
z_erase_window_lloop           $1a82  2544D  2547
z_erase_window_unspl           $1a8b  2550D  2533
z_erase_window_clear           $1a98  2556D  2535
z_erase_line                   $1a9b  2561D   733
z_erase_line_loop              $1aa5  2569D  2572
z_erase_line_return            $1aac  2573D  2566
z_set_cursor                   $1aad  2577D   734
z_get_cursor                   $1ac1  2600D   735
Reverse_On                     $1ad8  2625D  2674   4108   4297
Underline_On                   $1add  2634D  2678
Bold_On                        $1ae2  2643D  2676
z_set_text_style               $1ae7  2652D   736
z_buffer_mode                  $1afa  2685D   737
z_output_stream                $1b03  2695D   738
z_output_stream_return         $1b24  2719D  2708
z_output_stream_close          $1b25  2724D  2706
Click                          $1b39  2743D  2779
Error_Beep                     $1b39  2738D  2781   4389   5304   5616
Click_wait                     $1b56  2758D  2759
z_sound_effect                 $1b63  2767D   740
z_read_char                    $1b6c  2786D   741
z_read_char_loop               $1b79  2794D  2796
z_read_char_exit               $1b89  2801D  2799
Set_Data_YA                    $1b8c  2805D  1522   2840   2987   3042
                                      3346   3399
z_scan_table                   $1b95  2815D   742
z_scan_table_all               $1ba7  2834D  2830
z_scan_table_addr              $1bae  2838D  2834
z_scan_table_loop              $1bb5  2842D  2864
z_scan_table_next              $1bce  2855D  2849
zst_fa                         $1be1  2866D  2824   2826
zst_tr                         $1be7  2869D  2850   2853
z_tokenise                     $1bed  2874D   746
z_encode_text                  $1c01  2895D   747
z_encode_text_clear            $1c08  2906D  2908
z_encode_text_loop             $1c0f  2911D  2924
z_encode_text_next             $1c26  2926D  2917   2922
z_encode_text_copy             $1c33  2933D  2936
Clear_Table                    $1c3c  2941D  2966
ClTa_10                        $1c41  2946D  2952
ClTa_20                        $1c4a  2951D  2949
z_copy_table                   $1c4f  2957D   748
z_copy_table_safe              $1c66  2977D  2973
z_copy_table_fwd               $1c70  2985D  2975
z_copy_table_floop             $1c7e  2994D  2999
z_copy_table_return            $1c8b  3000D  2969
z_copy_table_bwd               $1c8c  3004D  2981
z_copy_table_bloop             $1cac  3021D  3026
z_print_table                  $1cb9  3031D   749
z_print_table_start            $1ccd  3048D  3045
z_print_table_rloop            $1cd0  3049D  3057
z_print_table_cloop            $1cd5  3051D  3054
z_check_argc                   $1ce5  3062D   750
Set_Timeout                    $1cf0  3072D  2382   2789
Set_Timeout_return             $1d25  3100D  3079
Log_A                          $1d26  3104D   529
Log_A_return                   $1d4d  3125D  3108   3123
Dump_A                         $1d4f  3130D   520   3147   3149   5044
Dump_Word                      $1d5b  3141D   518   5042
Parse_Input                    $1d72  3156D  2397   2886
Parse_AY_Dict                  $1d78  3181D  2891
Parse_10                       $1d8d  3198D  3195
Parse_15                       $1d91  3200D  3197
Parse_17                       $1d9b  3205D  3201
Parse_18                       $1da3  3209D  3207
Parse_20                       $1dab  3216D  3254   3267   3277   3302
Parse_25                       $1db7  3223D  3218
Parse_30                       $1dbd  3230D  3221
Parse_35                       $1dc6  3235D  3232
Parse_40                       $1dcc  3239D  3241
Parse_45                       $1de7  3256D  3236   3251
Parse_50                       $1e00  3269D  3249
Parse_55                       $1e08  3276D  3257   3261
Parse_60                       $1e2c  3295D  3286   3289   3300
Parse_70                       $1e36  3301D  3294
Skip_Surplus                   $1e3b  3306D  3233
SkSu_10                        $1e3f  3311D  3318
SkSu_Ret                       $1e50  3319D  3310   3314
Sep_All                        $1e51  3322D  2914   3260   3313
Sep_Dict                       $1e56  3334D  3248
SeDi_10                        $1e67  3349D  3343   3353
SeDi_20                        $1e72  3355D  3351
SeDi_Ret                       $1e73  3356D  3331
Sep_Std                        $1e74  3359D  3250   3330
SeSt_10                        $1e76  3368D  3371
SeSt_Ret                       $1e7f  3373D  3369
Skip_Data                      $1e80  3376D  3402
Skip_Data_return               $1e89  3387D  3385
Dictionary_Search              $1e8a  3391D  3280
DiSe_20                        $1ebb  3422D  3412   3441
DiSe_30                        $1ec5  3427D  3432
DiSe_50                        $1ed2  3435D  3430   3438
DiSe_70                        $1ee0  3444D  3410
DiSe_Ret                       $1ee4  3446D  3486
ZSCII_2                        $1ee5  3453D  3500   3679
Decode_YX                      $1eff  3456D  1330   1460
Decode_Text                    $1f07  3467D  1150   1528   3569
DeTe_10                        $1f0b  3483D  3510   3579
DeTe_15                        $1f0f  3485D  3495
DeTe_20                        $1f1a  3490D  3487
DeTe_25                        $1f26  3496D  3493
DeTe_30                        $1f34  3504D  3498
DeTe_35                        $1f3c  3508D  3505
DeTe_40                        $1f3e  3509D  3489   3501   3507   3521
DeTe_50                        $1f44  3512D  3502
DeTe_55                        $1f56  3525D  3491
DeTe_60                        $1f6a  3542D  3545
DeTe_65                        $1f93  3574D  3578
Get_Packed_Char                $1f9e  3583D  3485   3512   3519   3533
GPC_10                         $1fb4  3599D  3591
GPC_20                         $1fbe  3606D  3587
GPC_Ret                        $1fe3  3629D  3589
Encode                         $1fe4  3632D  2926   3279
Enco_10                        $1fea  3648D  3656
Enco_20                        $1fec  3649D  3663   3670   3699   3704
Enco_30                        $1ff4  3655D  3646
Enco_35                        $2005  3665D  3659   3661
Enco_40                        $2011  3672D  3666   3668
Enco_50                        $2021  3679D  3682
Enco_60                        $2046  3701D  3680
Enco_70                        $204e  3706D  3652
Enco_80                        $2052  3708D  3728
A0_x_8                         $207b  3735D  3757   3767
Object_Offset                  $2089  3750D  3803
Object_Offset_label            $2098  3762D  3759
Object_Offset_V4               $209b  3767D  3755
Get_Object_X1                  $20b1  3783D  1257   1272   1341   1404
                                      1655   3836   3953
Get_Object_Reg                 $20b5  3790D  1354   1379   1412   1422
                                      1451   1774   1798
Get_Object_X1_label            $20bd  3807D  3804
Get_Object_X1_objlow           $20d4  3818D  3814
First_Property                 $20d7  3823D  1921   3925
First_Property_fips_1          $20de  3836D  3834
First_Property_fips_2          $20e8  3841D  3837
FiPr_10                        $20fd  3853D  3851
Property_Size                  $2102  3859D  1301   1883   2357   3898
Property_Size_one              $2110  3871D  3864
Property_Size_V3               $2117  3878D  3862
Next_Property                  $2120  3889D  1925   3929
NePr_20                        $212e  3905D  3903
Find_Property                  $2135  3911D  1869   1902   1923   2355
Find_Property_loop             $2138  3926D  3930
Find_Property_match            $2143  3931D  3927
Find_Property_ok               $214a  3935D  3932
Find_Property_return           $214c  3936D  3928
Get_Attr_Addr                  $214d  3940D  1713   1725   1737
gaa_01                         $215f  3964D  3966
gaa_02                         $2160  3965D  3963
Dump_Code                      $2164  3970D  3997
Dump_Code_loop                 $2166  3974D  3984
INTERNAL_ERROR                 $217e  3990D   624    752    955   1207
                                      1213   2023   2367   2368   4322
INER_10                        $2198  4000D  4003
Print_To_Status                $21a3  4007D  4045
PTS_01                         $21ac  4014D  4012
Print_Mem                      $21ad  4017D  4038
Print_Unbuffered               $21b4  4027D  4040   4042
Print_Formatted                $21b7  4033D  2411   2423   2432   3509
PrFo_10                        $21cb  4044D  4036
PrFo_20                        $21cf  4046D  4043
PrFo_25                        $21e7  4061D  4049
PrFo_30                        $21e8  4063D  4057
PrFo_35                        $21ec  4065D  4068
PrFo_40                        $21f6  4070D  4066
PrFo_45                        $2203  4079D  4084
PrFo_50                        $220a  4082D  4077
z_new_line                     $2212  4090D   709   1166   3996   4047
                                      4073
z_new_line_wait                $2247  4116D  4118
Terminate_Buffer               $225c  4125D  4096
Print_Buffer                   $2265  4134D  2200   2292   2385   2479
                                      2497   2529   2588   2671   2688
                                      2703   2790   3039
PrBu_10                        $226b  4140D  4144
PrBu_Ret                       $227a  4147D  4138
Format_Integer                 $227b  4150D  4213   4233   4242   4793
Format_YZ                      $2280  4157D  2426
Format_Integer_loop            $2282  4161D  4177
Format_Integer_sub             $2286  4163D  4173
Format_Integer_next            $2298  4174D  4169
Format_Integer_blanks          $22a9  4184D  4189
Format_Integer_return          $22b4  4190D  4185
FormLo                         $22b5  4192D  4165
FormHi                         $22b9  4196D  4168
Status_Number                  $22bd  4203D  4270   4278
StNu_10                        $22c7  4216D  4223
StNu_20                        $22d1  4221D  4218
Print_Time                     $22d7  4228D  5186
Print_Time_loop                $2303  4251D  4255
Print_Score                    $230f  4260D  5184
Print_Score_clr_sc             $2313  4265D  4268
Print_Score_clr_mv             $2324  4273D  4276
Print_Score_loop               $2333  4281D  4285
Print_Status                   $233f  4290D  5187
z_extension                    $2358  4306D   712
z_error12                      $2375  4322D   763    764    765    766
                                      4317
z_save_undo                    $237a  4327D   767
z_restore_undo                 $2380  4336D   768
Empty_Keyboard_Queue           $2383  4343D  4099   4347   4385
Decode_Unit                    $2389  4351D  4373
DeUn_10                        $2390  4357D  4354
DeUn_20                        $2396  4360D  4356   4358
Unit_Dialog                    $2399  4365D  4449   4558
Wait_for_Return                $23ac  4378D  5008
wfret_10                       $23b8  4386D  4390
wfret_99                       $23c4  4391D  4388
File_Dialog                    $23c5  4394D  4451   4560
Read_Disk_Status               $23cc  4402D  4518
RDS_10                         $23dc  4412D  4420
RDS_20                         $23ef  4421D  4417
RDS_30                         $23f2  4422D  4414
z_ext_save                     $2404  4433D   758
z_save                         $240c  4439D   703
Save_Game                      $2412  4446D  4435   4442
WG_05                          $2438  4458D  4461
WG_10                          $2442  4463D  4466
WG_20                          $245b  4475D  4483
WG_25                          $2468  4481D  4479
WG_30                          $246e  4485D  4477
WG_40                          $248f  4500D  4504
WG_50                          $24a1  4509D  4513
WG_Err                         $24b1  4517D  4491   4502   4511
Write_Block                    $24c3  4524D  4500   4509
WrBl_10                        $24c9  4530D  4533
z_restore                      $24d8  4539D   704
z_ext_restore                  $24de  4546D   759
Restore_Game                   $24e6  4554D  4542   4549
Restore_Game_saveloc           $2500  4563D  4566
Restore_Game_fn_loop           $2517  4573D  4581
Restore_Game_no_conv           $2524  4579D  4577
Restore_Game_fn_done           $252a  4582D  4575
Restore_Game_cancel            $2550  4600D  4596
Restore_Game_resloop           $2552  4601D  4604
Restore_Game_ver_ok            $2561  4608D  4599
Restore_Game_st_loop           $256b  4614D  4616
Restore_Game_hd_loop           $2579  4622D  4624
Restore_Game_stack             $2589  4632D  4635
Restore_Game_PC                $2593  4638D  4641
Read_Block                     $259e  4647D  4593   4614   4622
Read_Block_loop                $25a2  4652D  4655
Row_Lo                         $25b1  4666D  4743   5323
Row_Hi                         $25ca  4692D  4746   5326
L_Encode_A                     $25e3  4718D  3673   3677   3687   3696
L_Encode_Y                     $25e4  4719D  3672   3698   3702
Sep_Std_List                   $25e5  4723D  3367   3368
Z_Arg_Count                    $25eb  4724D  1473   2180   2185   3065
Z_Buffer_Mode                  $25ec  4725D  2690   4039
Z_Active_Window                $25ed  4726D  2293   2499   2553   3107
                                      4041
Z_Active_Font                  $25ee  4727D  2300   2301   2503
Set_Screen_Pointer             $25f0  4734D  2489   4776
Set_Screen_Pointer_X           $25f2  4740D  5321   5352   5387   5822
                                      5847
Window_Home                    $2603  4754D  2488
Set_Row_Col                    $2607  4761D  2522   2596   4103   5840
SRC_10                         $260d  4770D  4768
SRC_20                         $2613  4774D  4771
Get_Row_Col                    $261a  4779D  5828
Info_Size                      $261f  4790D  4985
InSi_10                        $2626  4796D  4801
Screen_Setup                   $2632  4805D   407   5010
Story_Pages                    $263b  4816D  4983
Story_Pages_round              $265c  4836D  4828   4833
Story_Pages_return             $2661  4839D  4837
Modify_Op                      $2662  4843D  4859   4932
Version_4_Setup                $2677  4857D  4917
Version_5_Setup                $267b  4864D  4900
z_restart                      $268c  4878D   416    705
z_restart_clear                $2698  4888D  4891
z_restart_V3                   $26c6  4912D  4910
z_restart_check3               $26d5  4919D  4916
z_restart_set3                 $26e5  4926D  4920
z_restart_config               $26f9  4936D  4914   4918
z_restart_V4_Flags             $271f  4960D  4949
z_restart_setconf              $2721  4969D  4959
z_restart_res                  $275e  4994D  5004
z_restart_dot                  $2770  5002D  4999
z_restart_story                $2779  5007D  4996
z_restart_cont                 $27c4  5039D  5017
Next_Datum                     $27d4  5050D  1836   1847   2847   2851
                                      2994   3051   3347   3349   3401
                                      3403   3405   3407   3427   3435
                                      3606   3610
Next_Datum_banked              $27ec  5080D  5068   5072
Next_Datum_get                 $2801  5090D  5075   5086
Next_Datum_exit                $280a  5094D  5092
Next_Instruction               $280e  5099D   525    537    809    811
                                       863    893    987   1055   1059
                                      1065   1083   2144   2161   2163
                                      4310   4312
Next_Instruction_banked        $2827  5130D  5118   5122
Next_Instruction_get           $283c  5140D  5125   5136
Next_Instruction_exit          $2845  5144D  5142
z_show_status                  $284a  5150D   710   2384
zss_10                         $284f  5160D  5163
zss_20                         $2868  5174D  5177
zss_30                         $2881  5186D  5183
zss_40                         $2884  5187D  5185
zss_90                         $2889  5192D  5196
Cursor_On                      $2894  5201D  2793   5398   5407   5530
                                      5620
Cursor_Off                     $28a4  5215D  2797   5396   5405   5518
                                      5622
Special_Keys                   $28b6  5231D  5244
Translate_Keys                 $28ba  5240D  5285
CSK_10                         $28bc  5244D  5247
CSK_20                         $28c6  5250D  5245
Get_Character                  $28cb  5257D  2794   4386   5621
Get_Character_loop             $28cc  5266D  5270   5275   5305
Get_Character_got              $28e5  5279D  5267
Get_Character_lower            $2902  5294D  5290
Get_Character_ctrl             $290e  5301D  5297
Get_Character_error            $2912  5304D  5288   5295
Get_Character_exit             $2917  5307D  5277   5280   5282   5284
                                      5286   5292   5299   5302
Scroll_Main_Window             $2919  5312D  5384
Scroll_Main_Window_row_loop    $2923  5321D  5340
Scroll_Main_Window_col_loop    $2939  5332D  5337
Home_Screen                    $294d  5345D  4296   5366
Clear_Screen                   $2959  5358D   413   2556   4986   5754
Clear_Screen_loop              $295c  5363D  5365
Return_Screen                  $2967  5372D  3124   5450   5732   5755
ReSc_10                        $297b  5386D  5383
Edit_Left                      $2983  5393D  5414   5666
Edit_Right                     $298c  5402D  5678
Edit_Del                       $2995  5411D  5648
Edit_Del_loop                  $299b  5416D  5422
Edit_Ins                       $29ac  5430D  5657
Edit_Ins_loop                  $29af  5433D  5439
CHROUT                         $29bf  5446D  3052   3110   3116   3118
                                      3120   3135   3137   3145   3151
                                      3978   3980   3982   4030   4141
                                      4536   4658   5001   5564   5695
                                      5744   5936
CHRO_10                        $29d2  5461D  5458
Prompt_Color                   $29e4  5475D  5560   5598
Text_Color                     $29e8  5482D  5635   5727   5813
Set_Colour                     $29ea  5488D  5478
Set_Colour_return              $29ef  5492D  5490
Timeout_Routine                $29f0  5496D  5630
Timeout_Routine_save           $29fc  5506D  5510
Timeout_Routine_rest           $2a30  5534D  5537
Got_Line                       $2a3a  5545D  4370   4399
Got_Line_loop                  $2a50  5561D  5566
Got_Line_call                  $2a5c  5567D  5563
Get_Line_X1                    $2a65  5588D  2389   5568
Get_Line_X1_lm                 $2a7b  5601D  5599
Get_Line_X1_max                $2a8f  5612D  5609
Get_Line_X1_rm                 $2a91  5613D  5611
Get_Line_X1_error              $2a95  5616D  5647   5656   5665   5672
                                      5684   5686
Get_Line_X1_loop               $2a98  5620D  5614   5632   5649   5658
                                      5667   5679   5697
Get_Line_X1_del                $2ac0  5644D  5626
Get_Line_X1_ins                $2acd  5653D  5645
Get_Line_X1_left               $2ada  5662D  5654
Get_Line_X1_limit              $2ae7  5671D  5663
Get_Line_X1_valid              $2af4  5683D  5677
Get_Line_X1_store              $2b06  5695D  5691   5693
Get_Line_X1_end                $2b0c  5701D  5624
Get_Line_X1_skip               $2b10  5703D  5707
Get_Line_X1_buffer             $2b19  5711D  5704
Get_Line_X1_copy               $2b28  5721D  5725
Get_Line_X1_empty              $2b30  5727D  5720
Get_Line_X1_return             $2b3c  5732D  5728
PrintText                      $2b3f  5736D   495   1221   3998   4111
                                      4120   4301   4384   4448   4450
                                      4519   4557   4559   4921   4987
                                      4992
PrTe_A                         $2b45  5742D  5747
PrTe_B                         $2b50  5748D  5743
Reset_Screen                   $2b51  5751D  4605   5039
Open_Story                     $2b5c  5761D  4901
ASCII_Hex                      $2b80  5781D  3113   3132   3975
Hex_11                         $2b8d  5794D  5792
Hex_12                         $2b99  5801D  5799
Select_Text_Window             $2b9a  5804D  4302   4988
Select_Status_Window           $2ba9  5817D  4293
Save_Cursor                    $2bb0  5825D  3048   4100   5155
Restore_Cursor                 $2bb8  5835D  3049   4119   4121   5198
Erase_Row                      $2bbf  5843D  2537   2544   5341   5363
Erase_Row_loop                 $2bc5  5849D  5854
ASCII_TS                       $2bd3  5860D  3993
asts_01                        $2bd6  5868D  5870
Load_Page                      $2bde  5875D  4904   4994   5929
Load_Page_loop                 $2be3  5899D  5904
Load_Page_eof                  $2bf0  5905D  5902
Load_Story                     $2bf6  5912D  5007
Load_Story_next                $2bfa  5919D  5939
Load_Story_loop                $2c0f  5929D  5925
Load_Story_prog                $2c21  5937D  5934
Load_Story_eof                 $2c27  5940D  5931
Close_File                     $2c3a  5950D  4515   4520   6054   6081
Delete_Config                  $2c47  5960D  5997
DeCo_10                        $2c56  5969D  5973
Prep_Config                    $2c64  5977D  5998   6025
Save_Config                    $2c7d  5994D  1220
Send_Filename                  $2c8a  6004D  6036   6065
Send_Filename_fname            $2c98  6013D  6017
Load_Config                    $2ca5  6022D   414
Load_File                      $2ca8  6029
Load_File_loop                 $2cb7  6042D  6051
Load_File_stop                 $2ccc  6053D  6044
Save_File                      $2cd2  6058D  6001
Save_File_loop                 $2ce1  6071D  6078
Bank_Order                     $2cf8  6084D  5083   5133   5922
Z_Mem_Flag                     $2d00  6086D  2710   2730   4037
Z_Timeout                      $2d01  6087D  3081   3083   5519   5521
Unit_Buf                       $2d03  6090D  4368   4369
Unit_Text                      $2d04  6091D  4371   4372
File_Buf                       $2d07  6093D  4397   4398
File_Text                      $2d08  6094D  4475   4573
Game_Unit                      $2d1d  6096D   402   5764   5941   5963
PRESSRET                       $2d1e  6098D  4381   4382   4383
SAVEUNIT                       $2d3a  6099D  4383   4448   4448   4448
SAVEFILE                       $2d47  6100D  4450   4450   4450
LOADUNIT                       $2d54  6101D  4557   4557   4557
LOADFILE                       $2d66  6102D  4559   4559   4559
MORE                           $2d78  6103D  4111   4111   4111
EOS                            $2d7e  6104D  1221   1221   1221
NOSTORY                        $2d98  6105D  4921   4921   4921
Msg_Attic                      $2da2  6106D   495    495    495
BITSHIFTER                     $2dc1  6107D  4987   4987   4987
InfoClr                        $2dd9  6108D  4989   4990   4991
InfoPro                        $2dda  6109D  4797   4984
Bank0                          $2dfa  6117
Bank1                          $2e1a  6125
InfoSto                        $2e3a  6133D  4984
InfoEnd                        $2e5b  6134D  4991
BLANKS                         $2e5b  6136D  4120   4120   4120
SCORE                          $2e67  6141D  4219   4265   4273   4281
STIME                          $2e83  6142D  4236   4238   4246   4248
                                      4251
INTERR                         $2e8f  6146D  3994   3995   3998   3998
                                      3998
ConfigDel                      $2e99  6148D  5969   5972
Configname                     $2e9c  6149D  5972   5988   5989   5990
CONFIG_START                   $2ea4  6152D  5980   5981
FG_Color                       $2ea4  6153D  2500   4892
TI_Color                       $2ea5  6154
BO_Color                       $2ea6  6155D   411
BG_Color                       $2ea7  6156D   409
TB_Color                       $2ea8  6157
CONFIG_END                     $2eab  6160D  5984   5985
Load_Charset                   $2eab  6167D   406
EOP                            $2eab  6163D   250   6112
Load_Charset_loop              $2ec7  6186D  6189   6193
Charset                        $2ed7  6198D  6172   6174
Z_HEADER                       $2f00   250D   256    257    258    259
                                       260    261    262    263    264
                                       265    266    267    268    269
                                       270    271    272    273    274
                                       275    276    277    278    279
                                       280    281    282    283    284
                                       285    286    287    288    289
                                       290    291    292    293    294
                                       296    297    505   1036   1285
                                      1288   1875   1905   1908   2315
                                      2713   2929   2991   3010   3018
                                      3188   3553   3811   3843   4453
                                      4455   4505   4595   4598   4618
                                      4902   4936   5073   5123   6114
                                      6118   6122   6126   6130
h_version                      $2f00   256D  4908
h_config                       $2f01   257D  4948   4969   5181
h_resident_size_hi             $2f04   258
h_resident_size_lo             $2f05   259
h_start_pc_hi                  $2f06   260D  5011
h_start_pc_lo                  $2f07   261D  5013
h_dictionary_hi                $2f08   262D  3178   3345
h_dictionary_lo                $2f09   263D  3177   3344
h_objects_hi                   $2f0a   264D  1874   3810
h_objects_lo                   $2f0b   265D  1872   3807
h_globals_hi                   $2f0c   266D  1035
h_globals_lo                   $2f0d   267D  1032
h_dynamic_size_hi              $2f0e   268D  4507   4620
h_dynamic_size_lo              $2f0f   269
h_flags_hi                     $2f10   270D  4608   4629
h_flags_lo                     $2f11   271D  4610   4627   4971   4972
h_serial                       $2f12   272
h_abbreviations_hi             $2f18   273D  3552
h_abbreviations_lo             $2f19   274D  3550
h_file_size_hi                 $2f1a   275D  4823
h_file_size_lo                 $2f1b   276D  4825
h_checksum_hi                  $2f1c   277
h_checksum_lo                  $2f1d   278
h_interpreter_number           $2f1e   279D  4977
h_interpreter_version          $2f1f   280D  4979
h_screen_rows                  $2f20   281D  4942
h_screen_cols                  $2f21   282D  4939
h_screen_width_hi              $2f22   283D  4945
h_screen_width_lo              $2f23   284D  4940
h_screen_height_hi             $2f24   285D  4946
h_screen_height_lo             $2f25   286D  4943
h_font_width                   $2f26   287D  4974
h_font_height                  $2f27   288D  4975
h_functions_offset_hi          $2f28   289D  5020
h_functions_offset_lo          $2f29   290D  5018
h_strings_offset_hi            $2f2a   291
h_strings_offset_lo            $2f2b   292
h_default_bg_color             $2f2c   293
h_default_fg_color             $2f2d   294
h_Alphabet_hi                  $2f34   296
h_Alphabet_lo                  $2f35   297
Mode_65                        $36d7  6203D   346
Mode_65_loop                   $36e9  6219D  6222   6227
EOC                            $36fd  6232D   320    358    360   6226
Raster                         $d012   209D  2449
BorderCol                      $d020   210D   412   2210
BackgCol0                      $d021   211D   410   2211
Voc1FreqLo                     $d400   212D  2747
Voc1FreqHi                     $d401   213D  2749
Voc1Control                    $d404   214D  2757   2760
Voc1SusRel                     $d406   215D  2753
FiltMode                       $d418   216D  2755   2762
Random                         $d41b   217D  2448
COLRAM                         $d800   208
ROM_Vectors                    $fd30   218D   471
Init_IO                        $fda3   219D   392
Init_Editor                    $ff5b   220D   396
SETMSG                         $ff90   226D   415
SECOND                         $ff93   227D  4473   4496   4571   5768
                                      5945   5956   5967   6010   6069
TKSA                           $ff96   228D  4409   4590   5777   6040
ACPTR                          $ffa5   229D  4412   4652   5899   6042
CIOUT                          $ffa8   230D  4481   4486   4488   4531
                                      4579   5770   5772   5970   6014
                                      6072
UNTLK                          $ffab   231D  4421   4642   5940   6053
UNLSN                          $ffae   232D  4489   4514   4517   4582
                                      5773   5946   5957   5974   6018
                                      6080
LISTEN                         $ffb1   233D  4471   4494   4569   5766
                                      5943   5954   5965   6008   6067
TALK                           $ffb4   234D  4407   4588   5775   6038
SETNAM                         $ffbd   235D  5991
GETIN                          $ffe4   236D  4116   4346   5266
PLOT                           $fff0   237
RESET                          $fffc   238
X1L/X1H                        $0047   149D   884    923   1123   1134
                                      1182   1234   1284   1328   1355
                                      1380   1413   1423   1441   1499
                                      1511   1520   1542   1571   1572
                                      1586   1603   1670   1688   1702
                                      1776   1800   1827   1937   1952
                                      1977   2005   2020   2037   2044
                                      2073   2112   2132   2172   2201
                                      2236   2261   2273   2276   2295
                                      2311   2410   2418   2424   2444
                                      2450   2462   2480   2498   2530
                                      2564   2589   2609y  2613y  2616y
                                      2620y  2672   2689   2704   2777
                                      2835   2852   2911y  2947y  2977
                                      2985   3005   3007   3021   3023y
                                      3040   3066   3203y  3247y  3259y
                                      3312y  3786   5506   5520   5526
                                      5535   5553   5561   5593   5607
                                      5639y  5731y   150D   504    506
                                      1125   1135   1183   1235   1287
                                      1329   1357   1382   1442   1500
                                      1512   1521   1545   1574   1575
                                      1588   1605   1685   1699   1779
                                      1830   1940   1955   1980   2006
                                      2021   2033   2038   2074   2113
                                      2135   2174   2240   2245   2250
                                      2265   2270   2272   2278   2314
                                      2419   2425   2446   2452   2463
                                      2836   2848   2950   2979   2986
                                      3008   3011   3041   3787   5522
                                      5554   5595
A0L/A0H                        $0041   143D   356    363y   911y   914y
                                      1009y  1012y  1033   1286   1292y
                                      1342   1347y  1352y  1367y  1372y
                                      1388y  1391y  1405   1409y  1418y
                                      1427y  1455y  1714y  1726y  1727y
                                      1739y  1740y  1777y  1780y  1801y
                                      1873   1887y  1890y  1904   2312
                                      2330y  2333y  2345y  2362y  2365y
                                      3551   3556y  3560y  3738   3758
                                      3769   3808   3815y  3818y  3840y
                                      3841   3846y  3849   3850   3853y
                                      3863y  3866y  3878y  3901   3902
                                      3906y  3933y  5982   6045y  6046
                                      6047   6071y  6073   6074   6212
                                      6219y   144D   359    367   1029
                                      1031   1034   1037   1289   1344
                                      1407   1876   1907   2316   3554
                                      3739   3741   3743   3745   3760
                                      3771   3772   3773   3774   3777
                                      3805   3809   3812   3844   3852
                                      3904   5983   6049   6076   6215
                                      6223
X2L/X2H                        $0049   151D  1587   1602   1620   1636
                                      1658   1671   1672   1689   1703
                                      1750   1770   1794   1816   1828
                                      1877   1919   1938   1953   1974
                                      1985   1997   2011   2040   2206
                                      2237   2262   2310   2327   2394
                                      2445   2594   2716   2838   2923
                                      2964   2978   2996y  2997   3013
                                      3015   3022   3024y  3050   3194y
                                      3199y  3225y  3296y  3926   3954
                                      3959    152D  1589   1604   1622
                                      1638   1656   1686   1700   1752
                                      1766   1831   1941   1956   1973
                                      1986   1998   2014   2035   2041
                                      2313   2395   2447   2712   2839
                                      2965   2980   2990   2992   3016
                                      3019   3187   3189
COLS                           $0050   189D  2571   4011   4056   4284
                                      4300   4667   4668   4669   4670
                                      4671   4672   4673   4674   4675
                                      4676   4677   4678   4679   4680
                                      4681   4682   4683   4684   4685
                                      4686   4687   4688   4689   4690
                                      4693   4694   4695   4696   4697
                                      4698   4699   4700   4701   4702
                                      4703   4704   4705   4706   4707
                                      4708   4709   4710   4711   4712
                                      4713   4714   4715   4716   4770
                                      4772   4938   5176   5330   5421
                                      5457   5459   5610   5612   5848
X0L                            $0045   147D   812    820    821    902
                                       915    933    981    997   1011
                                      1202   1259   1311   1320   1553
                                      1619   1637   1751   1968   1972
                                      1978   1979   2002   2007   2009
                                      2016   2047   2454   2843   2858
                                      4153   4528   4824   4827   4830
                                      4835   4838   5019   5022   5023
                                      5024   5031   5169
RAMD                           $000c    97D   483    484    485    486
                                       487    489    490   4498   4506
                                      4530y  4534   4592   4619   4653y
                                      4656   4903   5069   5070   5074
                                      5080   5082   5084   5087   5089
                                      5090   5119   5120   5124   5130
                                      5132   5134   5137   5139   5140
                                      5900   5906   5918   5920   5923
                                      5926   5928
A1L/A1H                        $0043   145D   357    364y  1343   1364y
                                      1369y  1387y  1390y  1397y  1406
                                      1416y  1426y  1431y  1433y  1767y
                                      1771y  1788y  1791y  1796y  1805y
                                      5986   6048   6075   6213   6220y
                                       146D   361    368    369   1345
                                      1408   2145   2176   2181   5987
                                      6050   6077   6217   6224   6225
X0H                            $0046   148D   810    822    823    900
                                       912    934    975    999   1008
                                      1082   1084   1098   1110   1201
                                      1260   1554   1621   1639   1753
                                      1846   1969   1971   1981   1982
                                      2003   2008   2013   2017   2845
                                      2861   4154   4822   5021   5034
                                      5170
Version                        $0035   133D  1245   1254   1270   1291
                                      1339   1449   1452   1525   1653
                                      1764   2141   2153   2383   2398
                                      3201   3207   3755   3814   3834
                                      3837   3862   3932   4036   4828
                                      4831   4912   4949   5015   5490
                                      5555   5559   5570   5599   5728
Cursor_Col                     $005a   169D  2567   2617   3121   4055
                                      4775   4786   5205   5220   5350
                                      5379   5397   5406   5413   5438
                                      5456   5460   5467   5515   5529
                                      5557   5567   5601
X4L/X4H                        $004d   155D  2832   2834   2850   2855
                                      2934y  3080   3408   3416   3417
                                      3440    156D  2928   2930   3082
                                      3406   3409   3411   3419   3420
z_stack_ptr                    $003a   138D   925    926    946    947
                                       949    950    951   1196   1197
                                      1199   1200   1203   1468   1470
                                      2186   2188   4458   4633   4897
QI0                            $0004    83D   517   1104   1105   1146
                                      1153   1486   2128   2134   2142
                                      4463   4639   5014   5026   5028
                                      5030   5032   5041   5115   5141
X3L                            $004b   153D  2332   2344   2364   2825
                                      2863   2889   2910   2951   2967
                                      2971   2998   3006   3014   3025
                                      3047   3056   3084
Timeout                        $0030   129D  3075   3076   3085   3087
                                      3088   3089   3090   3092   3093
                                      3094   5268   5269   5271   5273
                                      5551   5552
ParNum                         $0029   122D   522    816    817    844
                                       873   1564   2166   2183   2392
                                      2828   2883   3043   3077   5511
                                      5514   5532
DICT_WORD                      $0068   180D  2933   3429   3649   3675
                                      3685   3694   3708   3713   3715
                                      3716   3718   3719   3721   3729
                                      3731
Upper_Size                     $0034   132D  2483   2486   2512   2516
                                      2539   2543   2551   2586   2791
                                      4097   4757   4895   5319   5591
                                      5756
ROWS                           $0019   190D  2481   2517   2546   2554
                                      4095   4101   4767   4769   4872
                                      4941   5339   5362   5382   5385
                                      5809
QD0                            $0009    91D  1147   1152   1523   1526
                                      1829   2808   2842   2859   3383
                                      3384   3422   3461   3558   5065
                                      5091
Z_Code                         $0002    82D   523    524    526    530
                                       547    555    584    604    609
                                       847    876   3974   4311   4314
                                      4887
FA                             $00ba   197D   401   4406   4470   4493
                                      4568   4587   5765   5774   5942
                                      5953   5964   6007   6037   6066
IO_STATUS                      $0090   192D  4411   4413   4468   4490
                                      4501   4510   4529   4651   4995
                                      5898   5901   5930   6012   6043
Scr_Adr                        $0062   178D  2569y  4744   4747   5333
                                      5416   5418   5425   5434   5436
                                      5441   5466   5703y  5721y  5850
X7L                            $0053   161D   435    439    441    442
                                      3246   3278   3287   3295   3425
                                      3445   6177   6187
NUMBER                         $0022   120D  2428   4162   4170   4180
                                      4184   4186   4216   4235   4237
                                      4244   4247   4796
QD1                            $000a    92D  1524   1527   1832   2809
                                      2844   2862   3386   3424   3462
                                      3562   5066   5093
QI2                            $0006    85D   519   1113   1114   1490
                                      2124   2140   5027   5029   5036
                                      5038   5043   5117
Col_Adr                        $0064   179D  4745   4749   4809   4811
                                      5206   5208   5221   5223   5335
                                      5463   5852
Chars_Left                     $001a   112D  3204   3219   3252   3256
                                      3264   3270   3309   3317   5634
                                      5715   5729
QDH                            $0008    90D  3482   3586   3590   3594
                                      3600   3609   3613   3615   3617
                                      3621   3622
QI1                            $0005    84D  1107   1108   1489   2125
                                      2137   2143   5012   5033   5035
                                      5116   5143
Jiffy                          $00a0   193D  2751   2758   3096   3097
                                      3098   5272   5274   5502   5503
                                      5504
X5H                            $0050   158D  3212   3220   3230   3235
                                      3262   3265   3271   3276   3283
                                      3315
X3H                            $004c   154D  2329   2361   2823   2890
                                      2968   2972   3009   3017   3086
z_frame_ptr                    $003c   139D  1467   1469   1493   1494
                                      2120   2121   2187   2189   4898
Colour                         $001b   113D  2205   2501   4104   4110
                                      4115   4295   4893   5461   5491
Charbuf_Ptr                    $0018   110D  4050   4060   4070   4085
                                      4128   4131   4137   4143   4146
CR                             $000d    51D  2401   4046   4129   4387
                                      4422   5279   5449   5623   6108
Cursor_Row                     $005b   170D  2485   2610   4737   4774
                                      4785   5351   5380   5386
X5L                            $004f   157D  3209   3245   3253   3258
                                      3266   3272   3311   3316
Attribute                      $0014   106D  2629   2638   2647   2680
                                      4106   4113   5462   5812
OP_Type                        $0027   121D   804    806    841    864
                                       868    869    871
MORE_Counter                   $0021   119D  2587   2792   4093   4094
                                      4098   5592   5757
LV0                            $0010   101D  1775   1783   1787   3518
                                      3520   6173   6186
TEXT_WORD                      $006e   181D  2906   2918   3239   3263
                                      3269   3655
Z_Mem_Ptr                      $005e   172D  2715   2718   2726   2731
                                      4021y  4022
Z_Mem_Base                     $005c   171D  2714   2717   2727   2728y
                                      2732   2733
X7H                            $0054   162D   436   3288   3423   3444
                                      6179   6191
Word_Length                    $0039   137D  2921   3231   3651   3727
                                      4867   4927
Win_Top                        $0038   136D  2484   2519   2552   2592
                                      5808   5821
Status_Col                     $002f   128D  4013   4044   4899   5166
                                      5173   5180
Left_Margin                    $001f   117D  5602   5608   5646   5664
                                      5706   5714
QDL                            $0007    89D  3542   3575   3601   3611
                                      5160   5193
Col_Row                        $00ae   195D  5316   5318   5325   5329
                                      5334
Segment                        $0061   177D   492    494   5081   5131
                                      5917
GLL                            $0057   165D  5594   5597   5600   5718
                                      5722
Save_Unit                      $002e   127D   403   4374   4469   4567
                                      4586
Right_Margin                   $002d   126D  5432   5613   5655   5671
                                      5701
Prop_Mask                      $002b   124D  3854   3868   3907   4871
                                      4931
Call_Type                      $0017   109D  1485   1496   2111   2115
                                      2129
Block_Lo                       $0015   107D  4997   5002   5905   5919
                                      5932
QD2                            $000b    93D  1835   2811   3464   3565
                                      5067
Font_Sel                       $0059   168D  2299   2507   5377   5465
Win_Bot                        $0037   135D  2520   2555   4873   5810
Vocab_Length                   $0036   134D  2931   3431   4869   4929
Resident_Pages                 $002c   125D  4937   5003   5071   5121
MEMUSS                         $00c3   199D  5739   5740   5742
FNLEN                          $00b7   196D  5999   6000   6016
Scr_Row                        $00ac   194D  5324   5327   5332
X6L                            $0051   159D  3211   3216   3281
TO_Flag                        $0033   131D  2390   5605   5638
Tok_Flag                       $0032   130D  2387   2888   3285
Parse_Index                    $002a   123D  3206   3284   3301
C_Save_Row                     $001d   115D  3055   5829   5838
Charbuf_End                    $0019   111D  4064   4069   4082
DEL                            $0014    52D  2798   5281   5644
Alphabet                       $0013   105D  3484   3494   3496
YELLOW                         $0007    37D  4109   4294   6154
WHITE                          $0001    31D  5484   5851   6153
INS                            $0094    53D  5283   5653
UNDERLINE                      $0080    63D  2637   5207
X8H                            $0056   164D   438   6183
X8L                            $0055   163D   437   6181
X6H                            $0052   160D  3200   3217
DPI                            $0040   142D  3404   3437
DPH                            $003f   141D  3185   3398
DPL                            $003e   140D  3184   3397
STAT_SCORE                     $0034  6138D  4282   4284
C_Save_Col                     $001c   114D  5830   5839
Block_Hi                       $0016   108D  5921   5937
MOVES_COL                      $0016  6139D  4272   4275
LV2                            $0012   103D  3532   3536
LV1                            $0011   102D  6175   6190
SCORE_COL                      $0007  6143D  4264   4267
STIME_COL                      $0006  6144D  4234   4243
BLUE                           $0006    36D  6155   6156
R6510                          $0001   191D   388   4885
BLNSW                          $00cc   200D   398
FNADR                          $00bb   198D  6013
CURSOR_LEFT                    $009d    24D  5236
CURSOR_UP                      $0091    23D  5234
KEY_RIGHT                      $0084    72D  5676
KEY_LEFT                       $0083    71D  5662
ZP_CLEAR                       $0060   173D  4890
GLH                            $0058   166D  5596
BOLD                           $0040    62D  2646
REVERSE                        $0020    61D  2628
Log                            $0020   118D   527
CURSOR_RIGHT                   $001d    22D  5237
CURSOR_DOWN                    $0011    21D  5235
CYAN                           $0003    33D  5477
RED                            $0002    32D  6157
BLNON                          $00cf   202
BLNCT                          $00cd   201
KEY_F8                         $008c    19
KEY_F6                         $008b    18
KEY_F4                         $008a    17
KEY_F2                         $0089    16
KEY_F7                         $0088    15
KEY_F5                         $0087    14
KEY_F3                         $0086    13
KEY_F1                         $0085    12
KEY_DOWN                       $0082    70
KEY_UP                         $0081    69
Info_Pages                     $001e   116
BLINK                          $0010    60
LT_GREY                        $000f    45
LT_BLUE                        $000e    44
LT_GREEN                       $000d    43
GREY                           $000c    42
DARKGREY                       $000b    41
PINK                           $000a    40
BROWN                          $0009    39
ORANGE                         $0008    38
GREEN                          $0005    35
PURPLE                         $0004    34
NORMAL                         $0000    59
BLACK                          $0000    30
X1L/X1H                        $0047   149D   884    923   1123   1134
                                      1182   1234   1284   1328   1355
                                      1380   1413   1423   1441   1499
                                      1511   1520   1542   1571   1572
                                      1586   1603   1670   1688   1702
                                      1776   1800   1827   1937   1952
                                      1977   2005   2020   2037   2044
                                      2073   2112   2132   2172   2201
                                      2236   2261   2273   2276   2295
                                      2311   2410   2418   2424   2444
                                      2450   2462   2480   2498   2530
                                      2564   2589   2609y  2613y  2616y
                                      2620y  2672   2689   2704   2777
                                      2835   2852   2911y  2947y  2977
                                      2985   3005   3007   3021   3023y
                                      3040   3066   3203y  3247y  3259y
                                      3312y  3786   5506   5520   5526
                                      5535   5553   5561   5593   5607
                                      5639y  5731y   150D   504    506
                                      1125   1135   1183   1235   1287
                                      1329   1357   1382   1442   1500
                                      1512   1521   1545   1574   1575
                                      1588   1605   1685   1699   1779
                                      1830   1940   1955   1980   2006
                                      2021   2033   2038   2074   2113
                                      2135   2174   2240   2245   2250
                                      2265   2270   2272   2278   2314
                                      2419   2425   2446   2452   2463
                                      2836   2848   2950   2979   2986
                                      3008   3011   3041   3787   5522
                                      5554   5595
A0L/A0H                        $0041   143D   356    363y   911y   914y
                                      1009y  1012y  1033   1286   1292y
                                      1342   1347y  1352y  1367y  1372y
                                      1388y  1391y  1405   1409y  1418y
                                      1427y  1455y  1714y  1726y  1727y
                                      1739y  1740y  1777y  1780y  1801y
                                      1873   1887y  1890y  1904   2312
                                      2330y  2333y  2345y  2362y  2365y
                                      3551   3556y  3560y  3738   3758
                                      3769   3808   3815y  3818y  3840y
                                      3841   3846y  3849   3850   3853y
                                      3863y  3866y  3878y  3901   3902
                                      3906y  3933y  5982   6045y  6046
                                      6047   6071y  6073   6074   6212
                                      6219y   144D   359    367   1029
                                      1031   1034   1037   1289   1344
                                      1407   1876   1907   2316   3554
                                      3739   3741   3743   3745   3760
                                      3771   3772   3773   3774   3777
                                      3805   3809   3812   3844   3852
                                      3904   5983   6049   6076   6215
                                      6223
X2L/X2H                        $0049   151D  1587   1602   1620   1636
                                      1658   1671   1672   1689   1703
                                      1750   1770   1794   1816   1828
                                      1877   1919   1938   1953   1974
                                      1985   1997   2011   2040   2206
                                      2237   2262   2310   2327   2394
                                      2445   2594   2716   2838   2923
                                      2964   2978   2996y  2997   3013
                                      3015   3022   3024y  3050   3194y
                                      3199y  3225y  3296y  3926   3954
                                      3959    152D  1589   1604   1622
                                      1638   1656   1686   1700   1752
                                      1766   1831   1941   1956   1973
                                      1986   1998   2014   2035   2041
                                      2313   2395   2447   2712   2839
                                      2965   2980   2990   2992   3016
                                      3019   3187   3189
Z_HEADER                       $2f00   250D   256    257    258    259
                                       260    261    262    263    264
                                       265    266    267    268    269
                                       270    271    272    273    274
                                       275    276    277    278    279
                                       280    281    282    283    284
                                       285    286    287    288    289
                                       290    291    292    293    294
                                       296    297    505   1036   1285
                                      1288   1875   1905   1908   2315
                                      2713   2929   2991   3010   3018
                                      3188   3553   3811   3843   4453
                                      4455   4505   4595   4598   4618
                                      4902   4936   5073   5123   6114
                                      6118   6122   6126   6130
COLS                           $0050   189D  2571   4011   4056   4284
                                      4300   4667   4668   4669   4670
                                      4671   4672   4673   4674   4675
                                      4676   4677   4678   4679   4680
                                      4681   4682   4683   4684   4685
                                      4686   4687   4688   4689   4690
                                      4693   4694   4695   4696   4697
                                      4698   4699   4700   4701   4702
                                      4703   4704   4705   4706   4707
                                      4708   4709   4710   4711   4712
                                      4713   4714   4715   4716   4770
                                      4772   4938   5176   5330   5421
                                      5457   5459   5610   5612   5848
SCREEN                         $0800   207D  4666   4667   4668   4669
                                      4670   4671   4672   4673   4674
                                      4675   4676   4677   4678   4679
                                      4680   4681   4682   4683   4684
                                      4685   4686   4687   4688   4689
                                      4690   4692   4693   4694   4695
                                      4696   4697   4698   4699   4700
                                      4701   4702   4703   4704   4705
                                      4706   4707   4708   4709   4710
                                      4711   4712   4713   4714   4715
                                      4716
X0L                            $0045   147D   812    820    821    902
                                       915    933    981    997   1011
                                      1202   1259   1311   1320   1553
                                      1619   1637   1751   1968   1972
                                      1978   1979   2002   2007   2009
                                      2016   2047   2454   2843   2858
                                      4153   4528   4824   4827   4830
                                      4835   4838   5019   5022   5023
                                      5024   5031   5169
RAMD                           $000c    97D   483    484    485    486
                                       487    489    490   4498   4506
                                      4530y  4534   4592   4619   4653y
                                      4656   4903   5069   5070   5074
                                      5080   5082   5084   5087   5089
                                      5090   5119   5120   5124   5130
                                      5132   5134   5137   5139   5140
                                      5900   5906   5918   5920   5923
                                      5926   5928
A1L/A1H                        $0043   145D   357    364y  1343   1364y
                                      1369y  1387y  1390y  1397y  1406
                                      1416y  1426y  1431y  1433y  1767y
                                      1771y  1788y  1791y  1796y  1805y
                                      5986   6048   6075   6213   6220y
                                       146D   361    368    369   1345
                                      1408   2145   2176   2181   5987
                                      6050   6077   6217   6224   6225
X0H                            $0046   148D   810    822    823    900
                                       912    934    975    999   1008
                                      1082   1084   1098   1110   1201
                                      1260   1554   1621   1639   1753
                                      1846   1969   1971   1981   1982
                                      2003   2008   2013   2017   2845
                                      2861   4154   4822   5021   5034
                                      5170
Version                        $0035   133D  1245   1254   1270   1291
                                      1339   1449   1452   1525   1653
                                      1764   2141   2153   2383   2398
                                      3201   3207   3755   3814   3834
                                      3837   3862   3932   4036   4828
                                      4831   4912   4949   5015   5490
                                      5555   5559   5570   5599   5728
Cursor_Col                     $005a   169D  2567   2617   3121   4055
                                      4775   4786   5205   5220   5350
                                      5379   5397   5406   5413   5438
                                      5456   5460   5467   5515   5529
                                      5557   5567   5601
CHROUT                         $29bf  5446D  3052   3110   3116   3118
                                      3120   3135   3137   3145   3151
                                      3978   3980   3982   4030   4141
                                      4536   4658   5001   5564   5695
                                      5744   5936
X4L/X4H                        $004d   155D  2832   2834   2850   2855
                                      2934y  3080   3408   3416   3417
                                      3440    156D  2928   2930   3082
                                      3406   3409   3411   3419   3420
z_stack_ptr                    $003a   138D   925    926    946    947
                                       949    950    951   1196   1197
                                      1199   1200   1203   1468   1470
                                      2186   2188   4458   4633   4897
QI0                            $0004    83D   517   1104   1105   1146
                                      1153   1486   2128   2134   2142
                                      4463   4639   5014   5026   5028
                                      5030   5032   5041   5115   5141
X3L                            $004b   153D  2332   2344   2364   2825
                                      2863   2889   2910   2951   2967
                                      2971   2998   3006   3014   3025
                                      3047   3056   3084
Next_Instruction               $280e  5099D   525    537    809    811
                                       863    893    987   1055   1059
                                      1065   1083   2144   2161   2163
                                      4310   4312
Next_Datum                     $27d4  5050D  1836   1847   2847   2851
                                      2994   3051   3347   3349   3401
                                      3403   3405   3407   3427   3435
                                      3606   3610
Main_True                      $1389  1062D   711    713   1236   1262
                                      1577   1592   1608   1625   1642
                                      1659   1676   1715   2870   3067
                                      4443   4543
Timeout                        $0030   129D  3075   3076   3085   3087
                                      3088   3089   3090   3092   3093
                                      3094   5268   5269   5271   5273
                                      5551   5552
ParNum                         $0029   122D   522    816    817    844
                                       873   1564   2166   2183   2392
                                      2828   2883   3043   3077   5511
                                      5514   5532
PrintText                      $2b3f  5736D   495   1221   3998   4111
                                      4120   4301   4384   4448   4450
                                      4519   4557   4559   4921   4987
                                      4992
Z_VAR                          $0400   244D   248    249   4454   4456
                                      4459   4464   4497   4499   4563
                                      4591   4594   4597   4602   4632
                                      4638
DICT_WORD                      $0068   180D  2933   3429   3649   3675
                                      3685   3694   3708   3713   3715
                                      3716   3718   3719   3721   3729
                                      3731
Upper_Size                     $0034   132D  2483   2486   2512   2516
                                      2539   2543   2551   2586   2791
                                      4097   4757   4895   5319   5591
                                      5756
ROWS                           $0019   190D  2481   2517   2546   2554
                                      4095   4101   4767   4769   4872
                                      4941   5339   5362   5382   5385
                                      5809
QD0                            $0009    91D  1147   1152   1523   1526
                                      1829   2808   2842   2859   3383
                                      3384   3422   3461   3558   5065
                                      5091
Z_Code                         $0002    82D   523    524    526    530
                                       547    555    584    604    609
                                       847    876   3974   4311   4314
                                      4887
FA                             $00ba   197D   401   4406   4470   4493
                                      4568   4587   5765   5774   5942
                                      5953   5964   6007   6037   6066
IO_STATUS                      $0090   192D  4411   4413   4468   4490
                                      4501   4510   4529   4651   4995
                                      5898   5901   5930   6012   6043
Scr_Adr                        $0062   178D  2569y  4744   4747   5333
                                      5416   5418   5425   5434   5436
                                      5441   5466   5703y  5721y  5850
Main_False                     $137d  1052D  1237   1261   1568   1593
                                      1609   1626   1643   1660   1673
                                      1716   2867   3068   4606
Print_Buffer                   $2265  4134D  2200   2292   2385   2479
                                      2497   2529   2588   2671   2688
                                      2703   2790   3039
X7L                            $0053   161D   435    439    441    442
                                      3246   3278   3287   3295   3425
                                      3445   6177   6187
NUMBER                         $0022   120D  2428   4162   4170   4180
                                      4184   4186   4216   4235   4237
                                      4244   4247   4796
QD1                            $000a    92D  1524   1527   1832   2809
                                      2844   2862   3386   3424   3462
                                      3562   5066   5093
QI2                            $0006    85D   519   1113   1114   1490
                                      2124   2140   5027   5029   5036
                                      5038   5043   5117
z_pop                          $1411  1188D   886    894   1181   1472
                                      1477   1484   1488   1492   2471
                                      4849   4851
Store_Byte                     $133c   966D  1299   1303   1858   1922
                                      1926   2118   2302   2402   2801
                                      4437   4551
Col_Adr                        $0064   179D  4745   4749   4809   4811
                                      5206   5208   5221   5223   5335
                                      5463   5852
Chars_Left                     $001a   112D  3204   3219   3252   3256
                                      3264   3270   3309   3317   5634
                                      5715   5729
QDH                            $0008    90D  3482   3586   3590   3594
                                      3600   3609   3613   3615   3617
                                      3621   3622
QI1                            $0005    84D  1107   1108   1489   2125
                                      2137   2143   5012   5033   5035
                                      5116   5143
Jiffy                          $00a0   193D  2751   2758   3096   3097
                                      3098   5272   5274   5502   5503
                                      5504
X5H                            $0050   158D  3212   3220   3230   3235
                                      3262   3265   3271   3276   3283
                                      3315
INTERNAL_ERROR                 $217e  3990D   624    752    955   1207
                                      1213   2023   2367   2368   4322
Store_AX                       $133e   972D  1258   1273   1501   1690
                                      1704   1891   2251   2279   4332
X3H                            $004c   154D  2329   2361   2823   2890
                                      2968   2972   3009   3017   3086
z_frame_ptr                    $003c   139D  1467   1469   1493   1494
                                      2120   2121   2187   2189   4898
Colour                         $001b   113D  2205   2501   4104   4110
                                      4115   4295   4893   5461   5491
Charbuf_Ptr                    $0018   110D  4050   4060   4070   4085
                                      4128   4131   4137   4143   4146
CR                             $000d    51D  2401   4046   4129   4387
                                      4422   5279   5449   5623   6108
Get_Character_exit             $2917  5307D  5277   5280   5282   5284
                                      5286   5292   5299   5302
Charbuf                        $0200   203D  4051   4065   4079   4080
                                      4130   4140   4564   4601
Cursor_Row                     $005b   170D  2485   2610   4737   4774
                                      4785   5351   5380   5386
X5L                            $004f   157D  3209   3245   3253   3258
                                      3266   3272   3311   3316
Attribute                      $0014   106D  2629   2638   2647   2680
                                      4106   4113   5462   5812
Get_Line_X1_loop               $2a98  5620D  5614   5632   5649   5658
                                      5667   5679   5697
Get_Object_Reg                 $20b5  3790D  1354   1379   1412   1422
                                      1451   1774   1798
Get_Object_X1                  $20b1  3783D  1257   1272   1341   1404
                                      1655   3836   3953
START                          $1001   315D   317    320    320    370
                                      6110   6114   6216
Lvar_Hi                        $0410   249D   899   1000   1480   2149
                                      2157   2162   2175
Lvar_Lo                        $0400   248D   901    998   1478   2150
                                      2158   2164   2173
DSTATUS                        $033c   206D  4415   4423   4425   4428
                                      4519   4519   4519
Z_STATUS                       $033c   247D  4010   4252   4282   4298
                                      4299   4934   5174
OP_Type                        $0027   121D   804    806    841    864
                                       868    869    871
MORE_Counter                   $0021   119D  2587   2792   4093   4094
                                      4098   5592   5757
LV0                            $0010   101D  1775   1783   1787   3518
                                      3520   6173   6186
Get_Line_X1_error              $2a95  5616D  5647   5656   5665   5672
                                      5684   5686
Set_Data_YA                    $1b8c  2805D  1522   2840   2987   3042
                                      3346   3399
Push_AY                        $1322   938D  2122   2126   2130   2151
                                      2182   2464
TEXT_WORD                      $006e   181D  2906   2918   3239   3263
                                      3269   3655
Z_Mem_Ptr                      $005e   172D  2715   2718   2726   2731
                                      4021y  4022
Z_Mem_Base                     $005c   171D  2714   2717   2727   2728y
                                      2732   2733
X7H                            $0054   162D   436   3288   3423   3444
                                      6179   6191
Word_Length                    $0039   137D  2921   3231   3651   3727
                                      4867   4927
Win_Top                        $0038   136D  2484   2519   2552   2592
                                      5808   5821
Status_Col                     $002f   128D  4013   4044   4899   5166
                                      5173   5180
Left_Margin                    $001f   117D  5602   5608   5646   5664
                                      5706   5714
QDL                            $0007    89D  3542   3575   3601   3611
                                      5160   5193
INTERR                         $2e8f  6146D  3994   3995   3998   3998
                                      3998
STIME                          $2e83  6142D  4236   4238   4246   4248
                                      4251
Cursor_Off                     $28a4  5215D  2797   5396   5405   5518
                                      5622
Cursor_On                      $2894  5201D  2793   5398   5407   5530
                                      5620
Set_Screen_Pointer_X           $25f2  4740D  5321   5352   5387   5822
                                      5847
Z_Active_Window                $25ed  4726D  2293   2499   2553   3107
                                      4041
z_error12                      $2375  4322D   763    764    765    766
                                      4317
z_new_line                     $2212  4090D   709   1166   3996   4047
                                      4073
Sign_ZPX                       $1807  2052D  2039   2042   2046   2421
                                      2974
Store_XA                       $15d5  1550D  1909   1942   1957   1987
                                      2075
Store_X0                       $1342   984D  1536   1555   2083   2455
                                      2869
Store_Zero                     $133a   960D  1903   1927   2391   2866
                                      4339
Get_Global_Var                 $1309   907D   897   4212   4232   4241
                                      5168
Get_Operand                    $1290   791D   583    603    608    839
                                       866
z_error_4                      $11b0   624D   636    664    665    666
                                       667
Col_Row                        $00ae   195D  5316   5318   5325   5329
                                      5334
Segment                        $0061   177D   492    494   5081   5131
                                      5917
GLL                            $0057   165D  5594   5597   5600   5718
                                      5722
Save_Unit                      $002e   127D   403   4374   4469   4567
                                      4586
Right_Margin                   $002d   126D  5432   5613   5655   5671
                                      5701
Prop_Mask                      $002b   124D  3854   3868   3907   4871
                                      4931
Call_Type                      $0017   109D  1485   1496   2111   2115
                                      2129
Block_Lo                       $0015   107D  4997   5002   5905   5919
                                      5932
QD2                            $000b    93D  1835   2811   3464   3565
                                      5067
EOC                            $36fd  6232D   320    358    360   6226
h_flags_lo                     $2f11   271D  4610   4627   4971   4972
Configname                     $2e9c  6149D  5972   5988   5989   5990
SCORE                          $2e67  6141D  4219   4265   4273   4281
SAVEUNIT                       $2d3a  6099D  4383   4448   4448   4448
Game_Unit                      $2d1d  6096D   402   5764   5941   5963
Z_Timeout                      $2d01  6087D  3081   3083   5519   5521
Close_File                     $2c3a  5950D  4515   4520   6054   6081
Erase_Row                      $2bbf  5843D  2537   2544   5341   5363
Restore_Cursor                 $2bb8  5835D  3049   4119   4121   5198
Return_Screen                  $2967  5372D  3124   5450   5732   5755
Clear_Screen                   $2959  5358D   413   2556   4986   5754
Set_Row_Col                    $2607  4761D  2522   2596   4103   5840
Z_Arg_Count                    $25eb  4724D  1473   2180   2185   3065
L_Encode_A                     $25e3  4718D  3673   3677   3687   3696
Format_Integer                 $227b  4150D  4213   4233   4242   4793
Print_Formatted                $21b7  4033D  2411   2423   2432   3509
Find_Property                  $2135  3911D  1869   1902   1923   2355
Property_Size                  $2102  3859D  1301   1883   2357   3898
Enco_20                        $1fec  3649D  3663   3670   3699   3704
Get_Packed_Char                $1f9e  3583D  3485   3512   3519   3533
DeTe_40                        $1f3e  3509D  3489   3501   3507   3521
Parse_20                       $1dab  3216D  3254   3267   3277   3302
Dump_A                         $1d4f  3130D   520   3147   3149   5044
Error_Beep                     $1b39  2738D  2781   4389   5304   5616
z_call_n                       $182b  2095D   662    692    744    745
z_call_s                       $1827  2087D   661    685    719    731
z_ret                          $1565  1464D   688   1126   1136   1184
z_remove_obj_ro_10             $14ea  1378D  1356   1358   1381   1383
Put_Var                        $1316   920D  1312   1321   1754   2472
z_opcode                       $11b5   627D   560    569    587    620
PC_LOOP                        $1135   511D   621   4321   5046   5525
Header_X1                      $112d   500D  2388   2882   2903   2944
Font_Sel                       $0059   168D  2299   2507   5377   5465
Win_Bot                        $0037   135D  2520   2555   4873   5810
Vocab_Length                   $0036   134D  2931   3431   4869   4929
Resident_Pages                 $002c   125D  4937   5003   5071   5121
h_config                       $2f01   257D  4948   4969   5181
BLANKS                         $2e5b  6136D  4120   4120   4120
InfoClr                        $2dd9  6108D  4989   4990   4991
BITSHIFTER                     $2dc1  6107D  4987   4987   4987
Msg_Attic                      $2da2  6106D   495    495    495
NOSTORY                        $2d98  6105D  4921   4921   4921
EOS                            $2d7e  6104D  1221   1221   1221
MORE                           $2d78  6103D  4111   4111   4111
LOADFILE                       $2d66  6102D  4559   4559   4559
LOADUNIT                       $2d54  6101D  4557   4557   4557
SAVEFILE                       $2d47  6100D  4450   4450   4450
PRESSRET                       $2d1e  6098D  4381   4382   4383
Z_Mem_Flag                     $2d00  6086D  2710   2730   4037
Bank_Order                     $2cf8  6084D  5083   5133   5922
Load_Page                      $2bde  5875D  4904   4994   5929
Save_Cursor                    $2bb0  5825D  3048   4100   5155
ASCII_Hex                      $2b80  5781D  3113   3132   3975
Text_Color                     $29e8  5482D  5635   5727   5813
Get_Character_loop             $28cc  5266D  5270   5275   5305
Get_Character                  $28cb  5257D  2794   4386   5621
Z_Active_Font                  $25ee  4727D  2300   2301   2503
L_Encode_Y                     $25e4  4719D  3672   3698   3702
Read_Block                     $259e  4647D  4593   4614   4622
WG_Err                         $24b1  4517D  4491   4502   4511
Empty_Keyboard_Queue           $2383  4343D  4099   4347   4385
Get_Attr_Addr                  $214d  3940D  1713   1725   1737
Decode_Text                    $1f07  3467D  1150   1528   3569
Sep_All                        $1e51  3322D  2914   3260   3313
Parse_60                       $1e2c  3295D  3286   3289   3300
Reverse_On                     $1ad8  2625D  2674   4108   4297
Divide_Signed                  $17e7  2027D  2072   2082   2453
z_not                          $15cc  1540D   743   4845   4847
z_get_sibling_get              $145a  1257D  1245   1247   1254
z_rtrue                        $13d5  1119D   698   1089   1167
Get_Var_X1L                    $12ea   881D  1310   1319   1535
Load_4_Operands                $12bb   829D   554    846   4313
z_execute                      $11a9   613D   561    570    588
Z_STACK_HI                     $0800   246D   952   4499   4613
Z_STACK_LO                     $0500   245D  1204   4613   4896
MEMUSS                         $00c3   199D  5739   5740   5742
FNLEN                          $00b7   196D  5999   6000   6016
Scr_Row                        $00ac   194D  5324   5327   5332
X6L                            $0051   159D  3211   3216   3281
TO_Flag                        $0033   131D  2390   5605   5638
Tok_Flag                       $0032   130D  2387   2888   3285
Parse_Index                    $002a   123D  3206   3284   3301
C_Save_Row                     $001d   115D  3055   5829   5838
Charbuf_End                    $0019   111D  4064   4069   4082
DEL                            $0014    52D  2798   5281   5644
Alphabet                       $0013   105D  3484   3494   3496
YELLOW                         $0007    37D  4109   4294   6154
WHITE                          $0001    31D  5484   5851   6153
Mode_65_loop                   $36e9  6219D  6222   6227
h_flags_hi                     $2f10   270D  4608   4629
h_dynamic_size_hi              $2f0e   268D  4507   4620
h_objects_lo                   $2f0b   265D  1872   3807
h_objects_hi                   $2f0a   264D  1874   3810
h_dictionary_lo                $2f09   263D  3177   3344
h_dictionary_hi                $2f08   262D  3178   3345
Charset                        $2ed7  6198D  6172   6174
Load_Charset_loop              $2ec7  6186D  6189   6193
CONFIG_END                     $2eab  6160D  5984   5985
EOP                            $2eab  6163D   250   6112
FG_Color                       $2ea4  6153D  2500   4892
CONFIG_START                   $2ea4  6152D  5980   5981
ConfigDel                      $2e99  6148D  5969   5972
InfoPro                        $2dda  6109D  4797   4984
File_Text                      $2d08  6094D  4475   4573
File_Buf                       $2d07  6093D  4397   4398
Unit_Text                      $2d04  6091D  4371   4372
Unit_Buf                       $2d03  6090D  4368   4369
Send_Filename                  $2c8a  6004D  6036   6065
Prep_Config                    $2c64  5977D  5998   6025
Select_Text_Window             $2b9a  5804D  4302   4988
Reset_Screen                   $2b51  5751D  4605   5039
Get_Line_X1_store              $2b06  5695D  5691   5693
Get_Line_X1                    $2a65  5588D  2389   5568
Got_Line                       $2a3a  5545D  4370   4399
Prompt_Color                   $29e4  5475D  5560   5598
Edit_Left                      $2983  5393D  5414   5666
Home_Screen                    $294d  5345D  4296   5366
Get_Character_error            $2912  5304D  5288   5295
z_show_status                  $284a  5150D   710   2384
Next_Instruction_get           $283c  5140D  5125   5136
Next_Instruction_banked        $2827  5130D  5118   5122
Next_Datum_get                 $2801  5090D  5075   5086
Next_Datum_banked              $27ec  5080D  5068   5072
z_restart_config               $26f9  4936D  4914   4918
z_restart                      $268c  4878D   416    705
Modify_Op                      $2662  4843D  4859   4932
Story_Pages_round              $265c  4836D  4828   4833
Screen_Setup                   $2632  4805D   407   5010
Set_Screen_Pointer             $25f0  4734D  2489   4776
Z_Buffer_Mode                  $25ec  4725D  2690   4039
Sep_Std_List                   $25e5  4723D  3367   3368
Row_Hi                         $25ca  4692D  4746   5326
Row_Lo                         $25b1  4666D  4743   5323
Restore_Game                   $24e6  4554D  4542   4549
Write_Block                    $24c3  4524D  4500   4509
Save_Game                      $2412  4446D  4435   4442
File_Dialog                    $23c5  4394D  4451   4560
Unit_Dialog                    $2399  4365D  4449   4558
DeUn_20                        $2396  4360D  4356   4358
Status_Number                  $22bd  4203D  4270   4278
Print_Unbuffered               $21b4  4027D  4040   4042
Next_Property                  $2120  3889D  1925   3929
First_Property                 $20d7  3823D  1921   3925
A0_x_8                         $207b  3735D  3757   3767
Enco_40                        $2011  3672D  3666   3668
Enco_35                        $2005  3665D  3659   3661
Encode                         $1fe4  3632D  2926   3279
DeTe_10                        $1f0b  3483D  3510   3579
Decode_YX                      $1eff  3456D  1330   1460
ZSCII_2                        $1ee5  3453D  3500   3679
DiSe_50                        $1ed2  3435D  3430   3438
DiSe_20                        $1ebb  3422D  3412   3441
Sep_Std                        $1e74  3359D  3250   3330
SeDi_10                        $1e67  3349D  3343   3353
SkSu_Ret                       $1e50  3319D  3310   3314
Parse_55                       $1e08  3276D  3257   3261
Parse_45                       $1de7  3256D  3236   3251
Parse_Input                    $1d72  3156D  2397   2886
Dump_Word                      $1d5b  3141D   518   5042
Log_A_return                   $1d4d  3125D  3108   3123
Set_Timeout                    $1cf0  3072D  2382   2789
z_encode_text_next             $1c26  2926D  2917   2922
zst_tr                         $1be7  2869D  2850   2853
zst_fa                         $1be1  2866D  2824   2826
z_read_skip                    $19b8  2398D  2393   2396
X1_PLUS_X2_TO_A0               $1944  2306D  2328   2343
z_art_shift_right              $1918  2270D  2263   2275
z_log_shift_right              $18ff  2245D  2238   2248
z_set_colour_coltab            $18e4  2214D  2204   2209
z_set_colour_ret               $18e3  2212D  2203   2208
call_00                        $182d  2111D  2091   5524
z_insert_obj_return            $16f3  1806D  1784   1803
z_je_loop                      $15e0  1567D  1573   1576
z_remove_obj_ro_50             $152f  1421D  1414   1424
z_remove_obj                   $14b5  1334D   686   1763
z_dec                          $14a6  1316D   683   1618
z_inc                          $149e  1307D   682   1635
z_quit                         $1432  1217D   708   4004
z_print                        $13e8  1140D   700   1165
z_rfalse                       $13df  1130D   699   1087
Branch_XA                      $13b6  1092D  1085   1513
Get_Global_Var_Addr            $1364  1017D   910   1007
Push_X0                        $131e   930D   887    988
ZVB9                           $1227   707D  4850   4852
ZV8F                           $1213   692D  4846   4848
Set_Attic_RAM                  $1105   479D   408   5006
Set_Mode_80                    $10b7   420D   405   5009
MEGA_Setup                     $1067   376D   372   6228
Mode_64_loop                   $1053   363D   366    371
INS                            $0094    53D  5283   5653
UNDERLINE                      $0080    63D  2637   5207
X8H                            $0056   164D   438   6183
X8L                            $0055   163D   437   6181
X6H                            $0052   160D  3200   3217
DPI                            $0040   142D  3404   3437
DPH                            $003f   141D  3185   3398
DPL                            $003e   140D  3184   3397
STAT_SCORE                     $0034  6138D  4282   4284
C_Save_Col                     $001c   114D  5830   5839
Block_Hi                       $0016   108D  5921   5937
MOVES_COL                      $0016  6139D  4272   4275
LV2                            $0012   103D  3532   3536
LV1                            $0011   102D  6175   6190
SCORE_COL                      $0007  6143D  4264   4267
STIME_COL                      $0006  6144D  4234   4243
BLUE                           $0006    36D  6155   6156
R6510                          $0001   191D   388   4885
Mode_65                        $36d7  6203D   346
h_functions_offset_lo          $2f29   290D  5018
h_functions_offset_hi          $2f28   289D  5020
h_font_height                  $2f27   288D  4975
h_font_width                   $2f26   287D  4974
h_screen_height_lo             $2f25   286D  4943
h_screen_height_hi             $2f24   285D  4946
h_screen_width_lo              $2f23   284D  4940
h_screen_width_hi              $2f22   283D  4945
h_screen_cols                  $2f21   282D  4939
h_screen_rows                  $2f20   281D  4942
h_interpreter_version          $2f1f   280D  4979
h_interpreter_number           $2f1e   279D  4977
h_file_size_lo                 $2f1b   276D  4825
h_file_size_hi                 $2f1a   275D  4823
h_abbreviations_lo             $2f19   274D  3550
h_abbreviations_hi             $2f18   273D  3552
h_globals_lo                   $2f0d   267D  1032
h_globals_hi                   $2f0c   266D  1035
h_start_pc_lo                  $2f07   261D  5013
h_start_pc_hi                  $2f06   260D  5011
h_version                      $2f00   256D  4908
Load_Charset                   $2eab  6167D   406
BG_Color                       $2ea7  6156D   409
BO_Color                       $2ea6  6155D   411
InfoEnd                        $2e5b  6134D  4991
InfoSto                        $2e3a  6133D  4984
Save_File_loop                 $2ce1  6071D  6078
Save_File                      $2cd2  6058D  6001
Load_File_stop                 $2ccc  6053D  6044
Load_File_loop                 $2cb7  6042D  6051
Load_Config                    $2ca5  6022D   414
Send_Filename_fname            $2c98  6013D  6017
Save_Config                    $2c7d  5994D  1220
DeCo_10                        $2c56  5969D  5973
Delete_Config                  $2c47  5960D  5997
Load_Story_eof                 $2c27  5940D  5931
Load_Story_prog                $2c21  5937D  5934
Load_Story_loop                $2c0f  5929D  5925
Load_Story_next                $2bfa  5919D  5939
Load_Story                     $2bf6  5912D  5007
Load_Page_eof                  $2bf0  5905D  5902
Load_Page_loop                 $2be3  5899D  5904
asts_01                        $2bd6  5868D  5870
ASCII_TS                       $2bd3  5860D  3993
Erase_Row_loop                 $2bc5  5849D  5854
Select_Status_Window           $2ba9  5817D  4293
Hex_12                         $2b99  5801D  5799
Hex_11                         $2b8d  5794D  5792
Open_Story                     $2b5c  5761D  4901
PrTe_B                         $2b50  5748D  5743
PrTe_A                         $2b45  5742D  5747
Get_Line_X1_return             $2b3c  5732D  5728
Get_Line_X1_empty              $2b30  5727D  5720
Get_Line_X1_copy               $2b28  5721D  5725
Get_Line_X1_buffer             $2b19  5711D  5704
Get_Line_X1_skip               $2b10  5703D  5707
Get_Line_X1_end                $2b0c  5701D  5624
Get_Line_X1_valid              $2af4  5683D  5677
Get_Line_X1_limit              $2ae7  5671D  5663
Get_Line_X1_left               $2ada  5662D  5654
Get_Line_X1_ins                $2acd  5653D  5645
Get_Line_X1_del                $2ac0  5644D  5626
Get_Line_X1_rm                 $2a91  5613D  5611
Get_Line_X1_max                $2a8f  5612D  5609
Get_Line_X1_lm                 $2a7b  5601D  5599
Got_Line_call                  $2a5c  5567D  5563
Got_Line_loop                  $2a50  5561D  5566
Timeout_Routine_rest           $2a30  5534D  5537
Timeout_Routine_save           $29fc  5506D  5510
Timeout_Routine                $29f0  5496D  5630
Set_Colour_return              $29ef  5492D  5490
Set_Colour                     $29ea  5488D  5478
CHRO_10                        $29d2  5461D  5458
Edit_Ins_loop                  $29af  5433D  5439
Edit_Ins                       $29ac  5430D  5657
Edit_Del_loop                  $299b  5416D  5422
Edit_Del                       $2995  5411D  5648
Edit_Right                     $298c  5402D  5678
ReSc_10                        $297b  5386D  5383
Clear_Screen_loop              $295c  5363D  5365
Scroll_Main_Window_col_loop    $2939  5332D  5337
Scroll_Main_Window_row_loop    $2923  5321D  5340
Scroll_Main_Window             $2919  5312D  5384
Get_Character_ctrl             $290e  5301D  5297
Get_Character_lower            $2902  5294D  5290
Get_Character_got              $28e5  5279D  5267
CSK_20                         $28c6  5250D  5245
CSK_10                         $28bc  5244D  5247
Translate_Keys                 $28ba  5240D  5285
Special_Keys                   $28b6  5231D  5244
zss_90                         $2889  5192D  5196
zss_40                         $2884  5187D  5185
zss_30                         $2881  5186D  5183
zss_20                         $2868  5174D  5177
zss_10                         $284f  5160D  5163
Next_Instruction_exit          $2845  5144D  5142
Next_Datum_exit                $280a  5094D  5092
z_restart_cont                 $27c4  5039D  5017
z_restart_story                $2779  5007D  4996
z_restart_dot                  $2770  5002D  4999
z_restart_res                  $275e  4994D  5004
z_restart_setconf              $2721  4969D  4959
z_restart_V4_Flags             $271f  4960D  4949
z_restart_set3                 $26e5  4926D  4920
z_restart_check3               $26d5  4919D  4916
z_restart_V3                   $26c6  4912D  4910
z_restart_clear                $2698  4888D  4891
Version_5_Setup                $267b  4864D  4900
Version_4_Setup                $2677  4857D  4917
Story_Pages_return             $2661  4839D  4837
Story_Pages                    $263b  4816D  4983
InSi_10                        $2626  4796D  4801
Info_Size                      $261f  4790D  4985
Get_Row_Col                    $261a  4779D  5828
SRC_20                         $2613  4774D  4771
SRC_10                         $260d  4770D  4768
Window_Home                    $2603  4754D  2488
Read_Block_loop                $25a2  4652D  4655
Restore_Game_PC                $2593  4638D  4641
Restore_Game_stack             $2589  4632D  4635
Restore_Game_hd_loop           $2579  4622D  4624
Restore_Game_st_loop           $256b  4614D  4616
Restore_Game_ver_ok            $2561  4608D  4599
Restore_Game_resloop           $2552  4601D  4604
Restore_Game_cancel            $2550  4600D  4596
Restore_Game_fn_done           $252a  4582D  4575
Restore_Game_no_conv           $2524  4579D  4577
Restore_Game_fn_loop           $2517  4573D  4581
Restore_Game_saveloc           $2500  4563D  4566
z_ext_restore                  $24de  4546D   759
z_restore                      $24d8  4539D   704
WrBl_10                        $24c9  4530D  4533
WG_50                          $24a1  4509D  4513
WG_40                          $248f  4500D  4504
WG_30                          $246e  4485D  4477
WG_25                          $2468  4481D  4479
WG_20                          $245b  4475D  4483
WG_10                          $2442  4463D  4466
WG_05                          $2438  4458D  4461
z_save                         $240c  4439D   703
z_ext_save                     $2404  4433D   758
RDS_30                         $23f2  4422D  4414
RDS_20                         $23ef  4421D  4417
RDS_10                         $23dc  4412D  4420
Read_Disk_Status               $23cc  4402D  4518
wfret_99                       $23c4  4391D  4388
wfret_10                       $23b8  4386D  4390
Wait_for_Return                $23ac  4378D  5008
DeUn_10                        $2390  4357D  4354
Decode_Unit                    $2389  4351D  4373
z_restore_undo                 $2380  4336D   768
z_save_undo                    $237a  4327D   767
z_extension                    $2358  4306D   712
Print_Status                   $233f  4290D  5187
Print_Score_loop               $2333  4281D  4285
Print_Score_clr_mv             $2324  4273D  4276
Print_Score_clr_sc             $2313  4265D  4268
Print_Score                    $230f  4260D  5184
Print_Time_loop                $2303  4251D  4255
Print_Time                     $22d7  4228D  5186
StNu_20                        $22d1  4221D  4218
StNu_10                        $22c7  4216D  4223
FormHi                         $22b9  4196D  4168
FormLo                         $22b5  4192D  4165
Format_Integer_return          $22b4  4190D  4185
Format_Integer_blanks          $22a9  4184D  4189
Format_Integer_next            $2298  4174D  4169
Format_Integer_sub             $2286  4163D  4173
Format_Integer_loop            $2282  4161D  4177
Format_YZ                      $2280  4157D  2426
PrBu_Ret                       $227a  4147D  4138
PrBu_10                        $226b  4140D  4144
Terminate_Buffer               $225c  4125D  4096
z_new_line_wait                $2247  4116D  4118
PrFo_50                        $220a  4082D  4077
PrFo_45                        $2203  4079D  4084
PrFo_40                        $21f6  4070D  4066
PrFo_35                        $21ec  4065D  4068
PrFo_30                        $21e8  4063D  4057
PrFo_25                        $21e7  4061D  4049
PrFo_20                        $21cf  4046D  4043
PrFo_10                        $21cb  4044D  4036
Print_Mem                      $21ad  4017D  4038
PTS_01                         $21ac  4014D  4012
Print_To_Status                $21a3  4007D  4045
INER_10                        $2198  4000D  4003
Dump_Code_loop                 $2166  3974D  3984
Dump_Code                      $2164  3970D  3997
gaa_02                         $2160  3965D  3963
gaa_01                         $215f  3964D  3966
Find_Property_return           $214c  3936D  3928
Find_Property_ok               $214a  3935D  3932
Find_Property_match            $2143  3931D  3927
Find_Property_loop             $2138  3926D  3930
NePr_20                        $212e  3905D  3903
Property_Size_V3               $2117  3878D  3862
Property_Size_one              $2110  3871D  3864
FiPr_10                        $20fd  3853D  3851
First_Property_fips_2          $20e8  3841D  3837
First_Property_fips_1          $20de  3836D  3834
Get_Object_X1_objlow           $20d4  3818D  3814
Get_Object_X1_label            $20bd  3807D  3804
Object_Offset_V4               $209b  3767D  3755
Object_Offset_label            $2098  3762D  3759
Object_Offset                  $2089  3750D  3803
Enco_80                        $2052  3708D  3728
Enco_70                        $204e  3706D  3652
Enco_60                        $2046  3701D  3680
Enco_50                        $2021  3679D  3682
Enco_30                        $1ff4  3655D  3646
Enco_10                        $1fea  3648D  3656
GPC_Ret                        $1fe3  3629D  3589
GPC_20                         $1fbe  3606D  3587
GPC_10                         $1fb4  3599D  3591
DeTe_65                        $1f93  3574D  3578
DeTe_60                        $1f6a  3542D  3545
DeTe_55                        $1f56  3525D  3491
DeTe_50                        $1f44  3512D  3502
DeTe_35                        $1f3c  3508D  3505
DeTe_30                        $1f34  3504D  3498
DeTe_25                        $1f26  3496D  3493
DeTe_20                        $1f1a  3490D  3487
DeTe_15                        $1f0f  3485D  3495
DiSe_Ret                       $1ee4  3446D  3486
DiSe_70                        $1ee0  3444D  3410
DiSe_30                        $1ec5  3427D  3432
Dictionary_Search              $1e8a  3391D  3280
Skip_Data_return               $1e89  3387D  3385
Skip_Data                      $1e80  3376D  3402
SeSt_Ret                       $1e7f  3373D  3369
SeSt_10                        $1e76  3368D  3371
SeDi_Ret                       $1e73  3356D  3331
SeDi_20                        $1e72  3355D  3351
Sep_Dict                       $1e56  3334D  3248
SkSu_10                        $1e3f  3311D  3318
Skip_Surplus                   $1e3b  3306D  3233
Parse_70                       $1e36  3301D  3294
Parse_50                       $1e00  3269D  3249
Parse_40                       $1dcc  3239D  3241
Parse_35                       $1dc6  3235D  3232
Parse_30                       $1dbd  3230D  3221
Parse_25                       $1db7  3223D  3218
Parse_18                       $1da3  3209D  3207
Parse_17                       $1d9b  3205D  3201
Parse_15                       $1d91  3200D  3197
Parse_10                       $1d8d  3198D  3195
Parse_AY_Dict                  $1d78  3181D  2891
Log_A                          $1d26  3104D   529
Set_Timeout_return             $1d25  3100D  3079
z_check_argc                   $1ce5  3062D   750
z_print_table_cloop            $1cd5  3051D  3054
z_print_table_rloop            $1cd0  3049D  3057
z_print_table_start            $1ccd  3048D  3045
z_print_table                  $1cb9  3031D   749
z_copy_table_bloop             $1cac  3021D  3026
z_copy_table_bwd               $1c8c  3004D  2981
z_copy_table_return            $1c8b  3000D  2969
z_copy_table_floop             $1c7e  2994D  2999
z_copy_table_fwd               $1c70  2985D  2975
z_copy_table_safe              $1c66  2977D  2973
z_copy_table                   $1c4f  2957D   748
ClTa_20                        $1c4a  2951D  2949
ClTa_10                        $1c41  2946D  2952
Clear_Table                    $1c3c  2941D  2966
z_encode_text_copy             $1c33  2933D  2936
z_encode_text_loop             $1c0f  2911D  2924
z_encode_text_clear            $1c08  2906D  2908
z_encode_text                  $1c01  2895D   747
z_tokenise                     $1bed  2874D   746
z_scan_table_next              $1bce  2855D  2849
z_scan_table_loop              $1bb5  2842D  2864
z_scan_table_addr              $1bae  2838D  2834
z_scan_table_all               $1ba7  2834D  2830
z_scan_table                   $1b95  2815D   742
z_read_char_exit               $1b89  2801D  2799
z_read_char_loop               $1b79  2794D  2796
z_read_char                    $1b6c  2786D   741
z_sound_effect                 $1b63  2767D   740
Click_wait                     $1b56  2758D  2759
Click                          $1b39  2743D  2779
z_output_stream_close          $1b25  2724D  2706
z_output_stream_return         $1b24  2719D  2708
z_output_stream                $1b03  2695D   738
z_buffer_mode                  $1afa  2685D   737
z_set_text_style               $1ae7  2652D   736
Bold_On                        $1ae2  2643D  2676
Underline_On                   $1add  2634D  2678
z_get_cursor                   $1ac1  2600D   735
z_set_cursor                   $1aad  2577D   734
z_erase_line_return            $1aac  2573D  2566
z_erase_line_loop              $1aa5  2569D  2572
z_erase_line                   $1a9b  2561D   733
z_erase_window_clear           $1a98  2556D  2535
z_erase_window_unspl           $1a8b  2550D  2533
z_erase_window_lloop           $1a82  2544D  2547
z_erase_window_lower           $1a80  2543D  2531
z_erase_window_uloop           $1a77  2537D  2540
z_erase_window                 $1a66  2526D   732
z_set_window_set               $1a5d  2519D  2514
z_set_window_lower             $1a59  2516D  2509
z_set_window_font              $1a4d  2507D  2505
z_set_window                   $1a35  2494D   730
z_split_window_return          $1a34  2490D  2482
z_split_window_set             $1a31  2489D  2487
z_split_window                 $1a1b  2476D   729
z_pull                         $1a15  2468D   728
z_push                         $1a0e  2459D   727
z_random                       $19f2  2441D   726
z_print_num_next               $19ec  2434D  2430
z_print_num_loop               $19e1  2428D  2436
z_print_num_pos                $19d7  2424D  2420
z_print_num                    $19c9  2415D   725
z_print_char                   $19c4  2407D   724
z_read_return                  $19c3  2403D  2400
z_read_V4                      $1999  2385D  2383
z_read                         $1990  2372D   723
z_error11                      $198b  2368D  2360
z_error10                      $1986  2367D  2356
z_put_prop_byte                $1981  2364D  2358
z_put_prop                     $196e  2350D   722
z_storeb                       $1966  2338D   721
z_storew                       $1956  2322D   720
z_set_font_offset              $1939  2299D  2297
z_set_font                     $1929  2283D   762
z_art_shift_store              $1924  2278D  2268
z_art_shift_left               $1910  2264D  2267
z_art_shift                    $190a  2255D   761
z_log_shift_store              $1905  2250D  2243
z_log_shift_left               $18f7  2239D  2242
z_log_shift                    $18f1  2230D   760
z_set_colour                   $18c6  2194D   663
call_50                        $18af  2180D  2146
call_40                        $18aa  2176D  2167
call_36                        $1897  2166D  2159
call_32                        $188b  2161D  2155
call_30                        $1872  2149D  2178
call_25                        $1869  2144D  2141
call_20                        $183d  2120D  2114
call_10                        $183a  2118D  2116
z_mod                          $1821  2079D   660
z_div                          $1817  2069D   659
Sign_ZPX_return                $1816  2065D  2057
z_error_8                      $17e2  2023D  1999
Divide_Unsigned_next           $17da  2018D  2015
Divide_Unsigned_loop           $17c2  2005D  2019
Divide_Unsigned                $17b3  1991D  2043
z_mul_zero                     $17a9  1983D  1975
z_mul_loop                     $1792  1971D  1984
z_mul                          $1789  1961D   658
z_sub                          $177c  1946D   657
z_add                          $176f  1931D   656
z_get_next_prop_zero           $176c  1927D  1924
z_get_next_prop_next           $1761  1923D  1920
z_get_next_prop                $1757  1913D   655
z_get_prop_addr                $1745  1895D   654
z_get_prop_low                 $1740  1890D  1885
z_get_prop_read                $173c  1887D  1881
z_get_prop_found               $1736  1883D  1870
z_get_prop                     $171d  1862D   653
z_loadb                        $1717  1852D   652
z_loadw                        $170c  1840D   651
Byte_Array                     $16f7  1820D  1857
Word_Array                     $16f4  1810D  1845
z_insert_obj_V3                $16dc  1794D  1764
z_insert_obj                   $16ab  1758D   650
z_store                        $16a0  1745D   649
z_clear_attr                   $1696  1732D   648
z_set_attr                     $168e  1720D   647
z_test_attr                    $1683  1708D   646
z_and                          $1677  1694D   645
z_or                           $166b  1680D   644
z_test_loop                    $165c  1670D  1675
z_test                         $165a  1664D   643
z_jin_false                    $1657  1660D  1657
z_jin_get                      $164b  1655D  1653
z_jin                          $1644  1647D   642
z_inc_chk_sig                  $163e  1642D  1640
z_inc_chk                      $162f  1630D   641
z_dec_chk_sig                  $1629  1625D  1623
z_dec_chk                      $161a  1613D   640
z_jg_sig                       $1614  1608D  1606
z_jg                           $1608  1597D   639
z_jl_sig                       $1602  1592D  1590
z_jl                           $15f6  1581D   638
z_je                           $15dc  1559D   637
z_load                         $15c6  1532D   691
z_print_paddr_label            $15c3  1528D  1525
z_print_paddr                  $15af  1517D   690
z_jump                         $15a8  1508D   689
z_ret_return                   $15a7  1504D  1498
z_ret_irqret                   $15a5  1502D  1497
z_ret_noloc                    $1583  1484D  1475
z_ret_loop                     $1576  1477D  1482
z_print_obj_decode             $1562  1460D  1458
z_print_obj_V4                 $155d  1456D  1452
z_print_obj_prio_1             $1553  1451D  1449
z_print_obj_A                  $154c  1445D  5171
z_print_obj                    $1548  1438D   687
z_remove_obj_ret70             $1547  1434D  1410
z_remove_obj_ro_60             $153e  1429D  1419
z_remove_obj_V3                $150c  1403D  1339
z_remove_obj_ret40             $150b  1401D  1348
z_remove_obj_ro_30             $1504  1397D  1400
z_remove_obj_ro_20             $1500  1395D  1373
z_print_addr                   $14ae  1325D   684
z_get_prop_len_V3              $1497  1301D  1291
z_get_prop_len_mask            $1492  1298D  1293
z_get_prop_len                 $1477  1277D   681
z_get_parent_get               $1471  1272D  1270
z_get_parent                   $146a  1266D   680
z_get_child                    $1453  1250D   679
z_get_sibling                  $144a  1241D   678
z_jz                           $1440  1229D   677
quit_30                        $143e  1222D  1222
quit_20                        $1435  1221D  4922
z_catch                        $142d  1211D   707
z_error_5                      $1428  1207D  1205
z_ret_popped                   $1407  1178D   706
z_nop                          $1406  1171D   702
z_print_ret                    $13fe  1160D   701
z_print_di                     $13f6  1152D  1155
z_print_id                     $13ea  1146D  1149
Main_False_return              $13d4  1115D  1058
Main_False_mft_80              $13d0  1113D  1111
Main_False_mft_70              $13be  1103D  1101
Main_False_mft_60              $13b0  1086D  1073
Main_False_mft_50              $13a7  1082D  1079
Main_False_mft_40              $13a4  1080D  1076
Main_False_mft_30              $139a  1074D  1069
Main_False_mft_20              $138e  1067D  1056
Main_False_mft_10              $1382  1057D  1066
Put_Global_Var                 $1357  1004D   995
Store_Var                      $1347   991D   924
Store_A_X0H                    $1340   978D  1848
z_error_6                      $1335   955D   953
GeVa_10                        $12f9   896D   885
Get_Var_A                      $12f3   890D   815
Load_8_Operands_return         $12e7   876D   867
Load_8_Operands_loop           $12d4   866D   875
Load_8_Operands                $12cd   852D   552
Load_4_Operands_return         $12ca   847D   840
Get_Operand_return             $12ba   825D   814
Get_Operand_store              $12ab   816D   813
Get_Operand_check              $12a6   814D   807
Get_Operand_const              $129d   810D   808
opcodes_ext                    $127a   755D  4320
z_error_1                      $1275   752D   739
opcodes_var                    $1235   716D   560
opcodes_0op                    $1215   695D   569
opcodes_1op                    $11f5   670D   587
PC_LOOP_twop                   $11a7   610D   557
z_op_two                       $1193   591D   531
z_op_one                       $1185   573D   533
z_op_zero                      $1181   564D   535
PC_LOOP_var_30                 $1174   555D   553
PC_LOOP_var_20                 $1171   554D   551
PC_LOOP_var_10                 $116c   552D   549
PC_LOOP_nolog                  $1153   530D   528
Set_Attic_RAM_attic            $1121   494D   491
Set_Kernal_Vectors_loop        $10fb   471D   474
Set_Kernal_Vectors             $10f9   467D   393
BATE_20                        $10e0   452D   443
Link                           $103b   343D   326
CINV                           $0314   205D   472
SCNMPG                         $0288   204D   395
BLNSW                          $00cc   200D   398
FNADR                          $00bb   198D  6013
CURSOR_LEFT                    $009d    24D  5236
CURSOR_UP                      $0091    23D  5234
KEY_RIGHT                      $0084    72D  5676
KEY_LEFT                       $0083    71D  5662
ZP_CLEAR                       $0060   173D  4890
GLH                            $0058   166D  5596
BOLD                           $0040    62D  2646
REVERSE                        $0020    61D  2628
Log                            $0020   118D   527
CURSOR_RIGHT                   $001d    22D  5237
CURSOR_DOWN                    $0011    21D  5235
CYAN                           $0003    33D  5477
RED                            $0002    32D  6157
h_Alphabet_lo                  $2f35   297
h_Alphabet_hi                  $2f34   296
h_default_fg_color             $2f2d   294
h_default_bg_color             $2f2c   293
h_strings_offset_lo            $2f2b   292
h_strings_offset_hi            $2f2a   291
h_checksum_lo                  $2f1d   278
h_checksum_hi                  $2f1c   277
h_serial                       $2f12   272
h_dynamic_size_lo              $2f0f   269
h_resident_size_lo             $2f05   259
h_resident_size_hi             $2f04   258
TB_Color                       $2ea8  6157
TI_Color                       $2ea5  6154
Bank1                          $2e1a  6125
Bank0                          $2dfa  6117
Load_File                      $2ca8  6029
Mode_64                        $1041   349
BLNON                          $00cf   202
BLNCT                          $00cd   201
KEY_F8                         $008c    19
KEY_F6                         $008b    18
KEY_F4                         $008a    17
KEY_F2                         $0089    16
KEY_F7                         $0088    15
KEY_F5                         $0087    14
KEY_F3                         $0086    13
KEY_F1                         $0085    12
KEY_DOWN                       $0082    70
KEY_UP                         $0081    69
Info_Pages                     $001e   116
BLINK                          $0010    60
LT_GREY                        $000f    45
LT_BLUE                        $000e    44
LT_GREEN                       $000d    43
GREY                           $000c    42
DARKGREY                       $000b    41
PINK                           $000a    40
BROWN                          $0009    39
ORANGE                         $0008    38
GREEN                          $0005    35
PURPLE                         $0004    34
NORMAL                         $0000    59
BLACK                          $0000    30
